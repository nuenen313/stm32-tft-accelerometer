
tft_display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e910  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000098c  0800eab0  0800eab0  0000fab0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f43c  0800f43c  0001120c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800f43c  0800f43c  0001043c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f444  0800f444  0001120c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f444  0800f444  00010444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f448  0800f448  00010448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000020c  20000000  0800f44c  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008b84  2000020c  0800f658  0001120c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008d90  0800f658  00011d90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001120c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dc78  00000000  00000000  0001123c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d02  00000000  00000000  0002eeb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a58  00000000  00000000  00033bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001c9eb  00000000  00000000  00035610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00023e03  00000000  00000000  00051ffb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0009a56e  00000000  00000000  00075dfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0011036c  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00001436  00000000  00000000  001103af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007eac  00000000  00000000  001117e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  00119694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000020c 	.word	0x2000020c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ea98 	.word	0x0800ea98

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000210 	.word	0x20000210
 80001dc:	0800ea98 	.word	0x0800ea98

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b988 	b.w	8000ee0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	468e      	mov	lr, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	4688      	mov	r8, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d962      	bls.n	8000cc4 <__udivmoddi4+0xdc>
 8000bfe:	fab2 f682 	clz	r6, r2
 8000c02:	b14e      	cbz	r6, 8000c18 <__udivmoddi4+0x30>
 8000c04:	f1c6 0320 	rsb	r3, r6, #32
 8000c08:	fa01 f806 	lsl.w	r8, r1, r6
 8000c0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c10:	40b7      	lsls	r7, r6
 8000c12:	ea43 0808 	orr.w	r8, r3, r8
 8000c16:	40b4      	lsls	r4, r6
 8000c18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c1c:	fa1f fc87 	uxth.w	ip, r7
 8000c20:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c24:	0c23      	lsrs	r3, r4, #16
 8000c26:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c2a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c3c:	f080 80ea 	bcs.w	8000e14 <__udivmoddi4+0x22c>
 8000c40:	429a      	cmp	r2, r3
 8000c42:	f240 80e7 	bls.w	8000e14 <__udivmoddi4+0x22c>
 8000c46:	3902      	subs	r1, #2
 8000c48:	443b      	add	r3, r7
 8000c4a:	1a9a      	subs	r2, r3, r2
 8000c4c:	b2a3      	uxth	r3, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c5a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5e:	459c      	cmp	ip, r3
 8000c60:	d909      	bls.n	8000c76 <__udivmoddi4+0x8e>
 8000c62:	18fb      	adds	r3, r7, r3
 8000c64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c68:	f080 80d6 	bcs.w	8000e18 <__udivmoddi4+0x230>
 8000c6c:	459c      	cmp	ip, r3
 8000c6e:	f240 80d3 	bls.w	8000e18 <__udivmoddi4+0x230>
 8000c72:	443b      	add	r3, r7
 8000c74:	3802      	subs	r0, #2
 8000c76:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7a:	eba3 030c 	sub.w	r3, r3, ip
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11d      	cbz	r5, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40f3      	lsrs	r3, r6
 8000c84:	2200      	movs	r2, #0
 8000c86:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d905      	bls.n	8000c9e <__udivmoddi4+0xb6>
 8000c92:	b10d      	cbz	r5, 8000c98 <__udivmoddi4+0xb0>
 8000c94:	e9c5 0100 	strd	r0, r1, [r5]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e7f5      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000c9e:	fab3 f183 	clz	r1, r3
 8000ca2:	2900      	cmp	r1, #0
 8000ca4:	d146      	bne.n	8000d34 <__udivmoddi4+0x14c>
 8000ca6:	4573      	cmp	r3, lr
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xc8>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 8105 	bhi.w	8000eba <__udivmoddi4+0x2d2>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	4690      	mov	r8, r2
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0e5      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cbe:	e9c5 4800 	strd	r4, r8, [r5]
 8000cc2:	e7e2      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f000 8090 	beq.w	8000dea <__udivmoddi4+0x202>
 8000cca:	fab2 f682 	clz	r6, r2
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	f040 80a4 	bne.w	8000e1c <__udivmoddi4+0x234>
 8000cd4:	1a8a      	subs	r2, r1, r2
 8000cd6:	0c03      	lsrs	r3, r0, #16
 8000cd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cdc:	b280      	uxth	r0, r0
 8000cde:	b2bc      	uxth	r4, r7
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ce6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cee:	fb04 f20c 	mul.w	r2, r4, ip
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d907      	bls.n	8000d06 <__udivmoddi4+0x11e>
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cfc:	d202      	bcs.n	8000d04 <__udivmoddi4+0x11c>
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	f200 80e0 	bhi.w	8000ec4 <__udivmoddi4+0x2dc>
 8000d04:	46c4      	mov	ip, r8
 8000d06:	1a9b      	subs	r3, r3, r2
 8000d08:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d0c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d10:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d14:	fb02 f404 	mul.w	r4, r2, r4
 8000d18:	429c      	cmp	r4, r3
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x144>
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x142>
 8000d24:	429c      	cmp	r4, r3
 8000d26:	f200 80ca 	bhi.w	8000ebe <__udivmoddi4+0x2d6>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	1b1b      	subs	r3, r3, r4
 8000d2e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d32:	e7a5      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d34:	f1c1 0620 	rsb	r6, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d3e:	431f      	orrs	r7, r3
 8000d40:	fa0e f401 	lsl.w	r4, lr, r1
 8000d44:	fa20 f306 	lsr.w	r3, r0, r6
 8000d48:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d4c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d50:	4323      	orrs	r3, r4
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	fa1f fc87 	uxth.w	ip, r7
 8000d5a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d5e:	0c1c      	lsrs	r4, r3, #16
 8000d60:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d64:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d68:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x1a0>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d7a:	f080 809c 	bcs.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	f240 8099 	bls.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d84:	3802      	subs	r0, #2
 8000d86:	443c      	add	r4, r7
 8000d88:	eba4 040e 	sub.w	r4, r4, lr
 8000d8c:	fa1f fe83 	uxth.w	lr, r3
 8000d90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d94:	fb09 4413 	mls	r4, r9, r3, r4
 8000d98:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d9c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da0:	45a4      	cmp	ip, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x1ce>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000daa:	f080 8082 	bcs.w	8000eb2 <__udivmoddi4+0x2ca>
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d97f      	bls.n	8000eb2 <__udivmoddi4+0x2ca>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dba:	eba4 040c 	sub.w	r4, r4, ip
 8000dbe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dc2:	4564      	cmp	r4, ip
 8000dc4:	4673      	mov	r3, lr
 8000dc6:	46e1      	mov	r9, ip
 8000dc8:	d362      	bcc.n	8000e90 <__udivmoddi4+0x2a8>
 8000dca:	d05f      	beq.n	8000e8c <__udivmoddi4+0x2a4>
 8000dcc:	b15d      	cbz	r5, 8000de6 <__udivmoddi4+0x1fe>
 8000dce:	ebb8 0203 	subs.w	r2, r8, r3
 8000dd2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dda:	fa22 f301 	lsr.w	r3, r2, r1
 8000dde:	431e      	orrs	r6, r3
 8000de0:	40cc      	lsrs	r4, r1
 8000de2:	e9c5 6400 	strd	r6, r4, [r5]
 8000de6:	2100      	movs	r1, #0
 8000de8:	e74f      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000dea:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dee:	0c01      	lsrs	r1, r0, #16
 8000df0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000df4:	b280      	uxth	r0, r0
 8000df6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	4638      	mov	r0, r7
 8000dfe:	463c      	mov	r4, r7
 8000e00:	46b8      	mov	r8, r7
 8000e02:	46be      	mov	lr, r7
 8000e04:	2620      	movs	r6, #32
 8000e06:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e0a:	eba2 0208 	sub.w	r2, r2, r8
 8000e0e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e12:	e766      	b.n	8000ce2 <__udivmoddi4+0xfa>
 8000e14:	4601      	mov	r1, r0
 8000e16:	e718      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e18:	4610      	mov	r0, r2
 8000e1a:	e72c      	b.n	8000c76 <__udivmoddi4+0x8e>
 8000e1c:	f1c6 0220 	rsb	r2, r6, #32
 8000e20:	fa2e f302 	lsr.w	r3, lr, r2
 8000e24:	40b7      	lsls	r7, r6
 8000e26:	40b1      	lsls	r1, r6
 8000e28:	fa20 f202 	lsr.w	r2, r0, r2
 8000e2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e30:	430a      	orrs	r2, r1
 8000e32:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e36:	b2bc      	uxth	r4, r7
 8000e38:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e42:	fb08 f904 	mul.w	r9, r8, r4
 8000e46:	40b0      	lsls	r0, r6
 8000e48:	4589      	cmp	r9, r1
 8000e4a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e4e:	b280      	uxth	r0, r0
 8000e50:	d93e      	bls.n	8000ed0 <__udivmoddi4+0x2e8>
 8000e52:	1879      	adds	r1, r7, r1
 8000e54:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e58:	d201      	bcs.n	8000e5e <__udivmoddi4+0x276>
 8000e5a:	4589      	cmp	r9, r1
 8000e5c:	d81f      	bhi.n	8000e9e <__udivmoddi4+0x2b6>
 8000e5e:	eba1 0109 	sub.w	r1, r1, r9
 8000e62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e66:	fb09 f804 	mul.w	r8, r9, r4
 8000e6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e6e:	b292      	uxth	r2, r2
 8000e70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e74:	4542      	cmp	r2, r8
 8000e76:	d229      	bcs.n	8000ecc <__udivmoddi4+0x2e4>
 8000e78:	18ba      	adds	r2, r7, r2
 8000e7a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e7e:	d2c4      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e80:	4542      	cmp	r2, r8
 8000e82:	d2c2      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e84:	f1a9 0102 	sub.w	r1, r9, #2
 8000e88:	443a      	add	r2, r7
 8000e8a:	e7be      	b.n	8000e0a <__udivmoddi4+0x222>
 8000e8c:	45f0      	cmp	r8, lr
 8000e8e:	d29d      	bcs.n	8000dcc <__udivmoddi4+0x1e4>
 8000e90:	ebbe 0302 	subs.w	r3, lr, r2
 8000e94:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e98:	3801      	subs	r0, #1
 8000e9a:	46e1      	mov	r9, ip
 8000e9c:	e796      	b.n	8000dcc <__udivmoddi4+0x1e4>
 8000e9e:	eba7 0909 	sub.w	r9, r7, r9
 8000ea2:	4449      	add	r1, r9
 8000ea4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ea8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eac:	fb09 f804 	mul.w	r8, r9, r4
 8000eb0:	e7db      	b.n	8000e6a <__udivmoddi4+0x282>
 8000eb2:	4673      	mov	r3, lr
 8000eb4:	e77f      	b.n	8000db6 <__udivmoddi4+0x1ce>
 8000eb6:	4650      	mov	r0, sl
 8000eb8:	e766      	b.n	8000d88 <__udivmoddi4+0x1a0>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e6fd      	b.n	8000cba <__udivmoddi4+0xd2>
 8000ebe:	443b      	add	r3, r7
 8000ec0:	3a02      	subs	r2, #2
 8000ec2:	e733      	b.n	8000d2c <__udivmoddi4+0x144>
 8000ec4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec8:	443b      	add	r3, r7
 8000eca:	e71c      	b.n	8000d06 <__udivmoddi4+0x11e>
 8000ecc:	4649      	mov	r1, r9
 8000ece:	e79c      	b.n	8000e0a <__udivmoddi4+0x222>
 8000ed0:	eba1 0109 	sub.w	r1, r1, r9
 8000ed4:	46c4      	mov	ip, r8
 8000ed6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eda:	fb09 f804 	mul.w	r8, r9, r4
 8000ede:	e7c4      	b.n	8000e6a <__udivmoddi4+0x282>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee8:	f001 ff72 	bl	8002dd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eec:	f000 f826 	bl	8000f3c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000ef0:	f000 f88c 	bl	800100c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef4:	f000 fa24 	bl	8001340 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ef8:	f000 fa02 	bl	8001300 <MX_DMA_Init>
  MX_I2C1_Init();
 8000efc:	f000 f8ba 	bl	8001074 <MX_I2C1_Init>
  MX_I2S2_Init();
 8000f00:	f000 f8e6 	bl	80010d0 <MX_I2S2_Init>
  MX_I2S3_Init();
 8000f04:	f000 f912 	bl	800112c <MX_I2S3_Init>
  MX_SPI1_Init();
 8000f08:	f000 f940 	bl	800118c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000f0c:	f00a fe30 	bl	800bb70 <MX_USB_HOST_Init>
  MX_SPI4_Init();
 8000f10:	f000 f972 	bl	80011f8 <MX_SPI4_Init>
  MX_TIM3_Init();
 8000f14:	f000 f9a6 	bl	8001264 <MX_TIM3_Init>
  MX_CRC_Init();
 8000f18:	f000 f898 	bl	800104c <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  Displ_Init(Displ_Orientat_0);		// initialize the display and set the initial display orientation (here is orientaton: 0°) - THIS FUNCTION MUST PRECEED ANY OTHER DISPLAY FUNCTION CALL.
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	f000 ffa9 	bl	8001e74 <Displ_Init>
  Displ_CLS(BLACK);			// after initialization (above) and before turning on backlight (below), you can draw the initial display appearance. (here I'm just clearing display with a black background)
 8000f22:	2000      	movs	r0, #0
 8000f24:	f001 f8ea 	bl	80020fc <Displ_CLS>
  Displ_BackLight('I');
 8000f28:	2049      	movs	r0, #73	@ 0x49
 8000f2a:	f001 fc5f 	bl	80027ec <Displ_BackLight>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000f2e:	f00a fe45 	bl	800bbbc <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    //Displ_PerfTest();
    //Touch_ShowData();
    Touch_TestDrawing();
 8000f32:	f001 fea3 	bl	8002c7c <Touch_TestDrawing>
    MX_USB_HOST_Process();
 8000f36:	bf00      	nop
 8000f38:	e7f9      	b.n	8000f2e <main+0x4a>
	...

08000f3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b094      	sub	sp, #80	@ 0x50
 8000f40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f42:	f107 0320 	add.w	r3, r7, #32
 8000f46:	2230      	movs	r2, #48	@ 0x30
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f00b ff33 	bl	800cdb6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f50:	f107 030c 	add.w	r3, r7, #12
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f60:	2300      	movs	r3, #0
 8000f62:	60bb      	str	r3, [r7, #8]
 8000f64:	4b27      	ldr	r3, [pc, #156]	@ (8001004 <SystemClock_Config+0xc8>)
 8000f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f68:	4a26      	ldr	r2, [pc, #152]	@ (8001004 <SystemClock_Config+0xc8>)
 8000f6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f70:	4b24      	ldr	r3, [pc, #144]	@ (8001004 <SystemClock_Config+0xc8>)
 8000f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f78:	60bb      	str	r3, [r7, #8]
 8000f7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	607b      	str	r3, [r7, #4]
 8000f80:	4b21      	ldr	r3, [pc, #132]	@ (8001008 <SystemClock_Config+0xcc>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a20      	ldr	r2, [pc, #128]	@ (8001008 <SystemClock_Config+0xcc>)
 8000f86:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000f8a:	6013      	str	r3, [r2, #0]
 8000f8c:	4b1e      	ldr	r3, [pc, #120]	@ (8001008 <SystemClock_Config+0xcc>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f94:	607b      	str	r3, [r7, #4]
 8000f96:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f9c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fa0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fa6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fac:	2304      	movs	r3, #4
 8000fae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000fb0:	23c0      	movs	r3, #192	@ 0xc0
 8000fb2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000fb4:	2304      	movs	r3, #4
 8000fb6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000fb8:	2308      	movs	r3, #8
 8000fba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fbc:	f107 0320 	add.w	r3, r7, #32
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f005 fd19 	bl	80069f8 <HAL_RCC_OscConfig>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fcc:	f000 fabe 	bl	800154c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fd0:	230f      	movs	r3, #15
 8000fd2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fdc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000fe0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000fe6:	f107 030c 	add.w	r3, r7, #12
 8000fea:	2103      	movs	r1, #3
 8000fec:	4618      	mov	r0, r3
 8000fee:	f005 ff7b 	bl	8006ee8 <HAL_RCC_ClockConfig>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000ff8:	f000 faa8 	bl	800154c <Error_Handler>
  }
}
 8000ffc:	bf00      	nop
 8000ffe:	3750      	adds	r7, #80	@ 0x50
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	40023800 	.word	0x40023800
 8001008:	40007000 	.word	0x40007000

0800100c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001012:	463b      	mov	r3, r7
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]
 8001020:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001022:	2301      	movs	r3, #1
 8001024:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8001026:	23c8      	movs	r3, #200	@ 0xc8
 8001028:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 800102a:	2305      	movs	r3, #5
 800102c:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800102e:	2302      	movs	r3, #2
 8001030:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001032:	463b      	mov	r3, r7
 8001034:	4618      	mov	r0, r3
 8001036:	f006 f963 	bl	8007300 <HAL_RCCEx_PeriphCLKConfig>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8001040:	f000 fa84 	bl	800154c <Error_Handler>
  }
}
 8001044:	bf00      	nop
 8001046:	3718      	adds	r7, #24
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001050:	4b06      	ldr	r3, [pc, #24]	@ (800106c <MX_CRC_Init+0x20>)
 8001052:	4a07      	ldr	r2, [pc, #28]	@ (8001070 <MX_CRC_Init+0x24>)
 8001054:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001056:	4805      	ldr	r0, [pc, #20]	@ (800106c <MX_CRC_Init+0x20>)
 8001058:	f002 f8bf 	bl	80031da <HAL_CRC_Init>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001062:	f000 fa73 	bl	800154c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20000228 	.word	0x20000228
 8001070:	40023000 	.word	0x40023000

08001074 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001078:	4b12      	ldr	r3, [pc, #72]	@ (80010c4 <MX_I2C1_Init+0x50>)
 800107a:	4a13      	ldr	r2, [pc, #76]	@ (80010c8 <MX_I2C1_Init+0x54>)
 800107c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800107e:	4b11      	ldr	r3, [pc, #68]	@ (80010c4 <MX_I2C1_Init+0x50>)
 8001080:	4a12      	ldr	r2, [pc, #72]	@ (80010cc <MX_I2C1_Init+0x58>)
 8001082:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001084:	4b0f      	ldr	r3, [pc, #60]	@ (80010c4 <MX_I2C1_Init+0x50>)
 8001086:	2200      	movs	r2, #0
 8001088:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800108a:	4b0e      	ldr	r3, [pc, #56]	@ (80010c4 <MX_I2C1_Init+0x50>)
 800108c:	2200      	movs	r2, #0
 800108e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001090:	4b0c      	ldr	r3, [pc, #48]	@ (80010c4 <MX_I2C1_Init+0x50>)
 8001092:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001096:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001098:	4b0a      	ldr	r3, [pc, #40]	@ (80010c4 <MX_I2C1_Init+0x50>)
 800109a:	2200      	movs	r2, #0
 800109c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800109e:	4b09      	ldr	r3, [pc, #36]	@ (80010c4 <MX_I2C1_Init+0x50>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010a4:	4b07      	ldr	r3, [pc, #28]	@ (80010c4 <MX_I2C1_Init+0x50>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010aa:	4b06      	ldr	r3, [pc, #24]	@ (80010c4 <MX_I2C1_Init+0x50>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010b0:	4804      	ldr	r0, [pc, #16]	@ (80010c4 <MX_I2C1_Init+0x50>)
 80010b2:	f004 febd 	bl	8005e30 <HAL_I2C_Init>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010bc:	f000 fa46 	bl	800154c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20000230 	.word	0x20000230
 80010c8:	40005400 	.word	0x40005400
 80010cc:	000186a0 	.word	0x000186a0

080010d0 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80010d4:	4b12      	ldr	r3, [pc, #72]	@ (8001120 <MX_I2S2_Init+0x50>)
 80010d6:	4a13      	ldr	r2, [pc, #76]	@ (8001124 <MX_I2S2_Init+0x54>)
 80010d8:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80010da:	4b11      	ldr	r3, [pc, #68]	@ (8001120 <MX_I2S2_Init+0x50>)
 80010dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010e0:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80010e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001120 <MX_I2S2_Init+0x50>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80010e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001120 <MX_I2S2_Init+0x50>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80010ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001120 <MX_I2S2_Init+0x50>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80010f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001120 <MX_I2S2_Init+0x50>)
 80010f6:	4a0c      	ldr	r2, [pc, #48]	@ (8001128 <MX_I2S2_Init+0x58>)
 80010f8:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80010fa:	4b09      	ldr	r3, [pc, #36]	@ (8001120 <MX_I2S2_Init+0x50>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001100:	4b07      	ldr	r3, [pc, #28]	@ (8001120 <MX_I2S2_Init+0x50>)
 8001102:	2200      	movs	r2, #0
 8001104:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8001106:	4b06      	ldr	r3, [pc, #24]	@ (8001120 <MX_I2S2_Init+0x50>)
 8001108:	2201      	movs	r2, #1
 800110a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800110c:	4804      	ldr	r0, [pc, #16]	@ (8001120 <MX_I2S2_Init+0x50>)
 800110e:	f004 ffd3 	bl	80060b8 <HAL_I2S_Init>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8001118:	f000 fa18 	bl	800154c <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}
 8001120:	20000284 	.word	0x20000284
 8001124:	40003800 	.word	0x40003800
 8001128:	00017700 	.word	0x00017700

0800112c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001130:	4b13      	ldr	r3, [pc, #76]	@ (8001180 <MX_I2S3_Init+0x54>)
 8001132:	4a14      	ldr	r2, [pc, #80]	@ (8001184 <MX_I2S3_Init+0x58>)
 8001134:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001136:	4b12      	ldr	r3, [pc, #72]	@ (8001180 <MX_I2S3_Init+0x54>)
 8001138:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800113c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800113e:	4b10      	ldr	r3, [pc, #64]	@ (8001180 <MX_I2S3_Init+0x54>)
 8001140:	2200      	movs	r2, #0
 8001142:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001144:	4b0e      	ldr	r3, [pc, #56]	@ (8001180 <MX_I2S3_Init+0x54>)
 8001146:	2200      	movs	r2, #0
 8001148:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800114a:	4b0d      	ldr	r3, [pc, #52]	@ (8001180 <MX_I2S3_Init+0x54>)
 800114c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001150:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001152:	4b0b      	ldr	r3, [pc, #44]	@ (8001180 <MX_I2S3_Init+0x54>)
 8001154:	4a0c      	ldr	r2, [pc, #48]	@ (8001188 <MX_I2S3_Init+0x5c>)
 8001156:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001158:	4b09      	ldr	r3, [pc, #36]	@ (8001180 <MX_I2S3_Init+0x54>)
 800115a:	2200      	movs	r2, #0
 800115c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800115e:	4b08      	ldr	r3, [pc, #32]	@ (8001180 <MX_I2S3_Init+0x54>)
 8001160:	2200      	movs	r2, #0
 8001162:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001164:	4b06      	ldr	r3, [pc, #24]	@ (8001180 <MX_I2S3_Init+0x54>)
 8001166:	2200      	movs	r2, #0
 8001168:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800116a:	4805      	ldr	r0, [pc, #20]	@ (8001180 <MX_I2S3_Init+0x54>)
 800116c:	f004 ffa4 	bl	80060b8 <HAL_I2S_Init>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001176:	f000 f9e9 	bl	800154c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	200002cc 	.word	0x200002cc
 8001184:	40003c00 	.word	0x40003c00
 8001188:	00017700 	.word	0x00017700

0800118c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001190:	4b17      	ldr	r3, [pc, #92]	@ (80011f0 <MX_SPI1_Init+0x64>)
 8001192:	4a18      	ldr	r2, [pc, #96]	@ (80011f4 <MX_SPI1_Init+0x68>)
 8001194:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001196:	4b16      	ldr	r3, [pc, #88]	@ (80011f0 <MX_SPI1_Init+0x64>)
 8001198:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800119c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800119e:	4b14      	ldr	r3, [pc, #80]	@ (80011f0 <MX_SPI1_Init+0x64>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011a4:	4b12      	ldr	r3, [pc, #72]	@ (80011f0 <MX_SPI1_Init+0x64>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011aa:	4b11      	ldr	r3, [pc, #68]	@ (80011f0 <MX_SPI1_Init+0x64>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011b0:	4b0f      	ldr	r3, [pc, #60]	@ (80011f0 <MX_SPI1_Init+0x64>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011b6:	4b0e      	ldr	r3, [pc, #56]	@ (80011f0 <MX_SPI1_Init+0x64>)
 80011b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011bc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011be:	4b0c      	ldr	r3, [pc, #48]	@ (80011f0 <MX_SPI1_Init+0x64>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011c4:	4b0a      	ldr	r3, [pc, #40]	@ (80011f0 <MX_SPI1_Init+0x64>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011ca:	4b09      	ldr	r3, [pc, #36]	@ (80011f0 <MX_SPI1_Init+0x64>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011d0:	4b07      	ldr	r3, [pc, #28]	@ (80011f0 <MX_SPI1_Init+0x64>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011d6:	4b06      	ldr	r3, [pc, #24]	@ (80011f0 <MX_SPI1_Init+0x64>)
 80011d8:	220a      	movs	r2, #10
 80011da:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011dc:	4804      	ldr	r0, [pc, #16]	@ (80011f0 <MX_SPI1_Init+0x64>)
 80011de:	f006 f9e1 	bl	80075a4 <HAL_SPI_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80011e8:	f000 f9b0 	bl	800154c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011ec:	bf00      	nop
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000314 	.word	0x20000314
 80011f4:	40013000 	.word	0x40013000

080011f8 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80011fc:	4b17      	ldr	r3, [pc, #92]	@ (800125c <MX_SPI4_Init+0x64>)
 80011fe:	4a18      	ldr	r2, [pc, #96]	@ (8001260 <MX_SPI4_Init+0x68>)
 8001200:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001202:	4b16      	ldr	r3, [pc, #88]	@ (800125c <MX_SPI4_Init+0x64>)
 8001204:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001208:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800120a:	4b14      	ldr	r3, [pc, #80]	@ (800125c <MX_SPI4_Init+0x64>)
 800120c:	2200      	movs	r2, #0
 800120e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001210:	4b12      	ldr	r3, [pc, #72]	@ (800125c <MX_SPI4_Init+0x64>)
 8001212:	2200      	movs	r2, #0
 8001214:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001216:	4b11      	ldr	r3, [pc, #68]	@ (800125c <MX_SPI4_Init+0x64>)
 8001218:	2200      	movs	r2, #0
 800121a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800121c:	4b0f      	ldr	r3, [pc, #60]	@ (800125c <MX_SPI4_Init+0x64>)
 800121e:	2200      	movs	r2, #0
 8001220:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001222:	4b0e      	ldr	r3, [pc, #56]	@ (800125c <MX_SPI4_Init+0x64>)
 8001224:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001228:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800122a:	4b0c      	ldr	r3, [pc, #48]	@ (800125c <MX_SPI4_Init+0x64>)
 800122c:	2200      	movs	r2, #0
 800122e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001230:	4b0a      	ldr	r3, [pc, #40]	@ (800125c <MX_SPI4_Init+0x64>)
 8001232:	2200      	movs	r2, #0
 8001234:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001236:	4b09      	ldr	r3, [pc, #36]	@ (800125c <MX_SPI4_Init+0x64>)
 8001238:	2200      	movs	r2, #0
 800123a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800123c:	4b07      	ldr	r3, [pc, #28]	@ (800125c <MX_SPI4_Init+0x64>)
 800123e:	2200      	movs	r2, #0
 8001240:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 10;
 8001242:	4b06      	ldr	r3, [pc, #24]	@ (800125c <MX_SPI4_Init+0x64>)
 8001244:	220a      	movs	r2, #10
 8001246:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001248:	4804      	ldr	r0, [pc, #16]	@ (800125c <MX_SPI4_Init+0x64>)
 800124a:	f006 f9ab 	bl	80075a4 <HAL_SPI_Init>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8001254:	f000 f97a 	bl	800154c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001258:	bf00      	nop
 800125a:	bd80      	pop	{r7, pc}
 800125c:	2000036c 	.word	0x2000036c
 8001260:	40013400 	.word	0x40013400

08001264 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800126a:	f107 0308 	add.w	r3, r7, #8
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]
 8001274:	609a      	str	r2, [r3, #8]
 8001276:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001278:	463b      	mov	r3, r7
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001280:	4b1d      	ldr	r3, [pc, #116]	@ (80012f8 <MX_TIM3_Init+0x94>)
 8001282:	4a1e      	ldr	r2, [pc, #120]	@ (80012fc <MX_TIM3_Init+0x98>)
 8001284:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000;
 8001286:	4b1c      	ldr	r3, [pc, #112]	@ (80012f8 <MX_TIM3_Init+0x94>)
 8001288:	f242 7210 	movw	r2, #10000	@ 0x2710
 800128c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800128e:	4b1a      	ldr	r3, [pc, #104]	@ (80012f8 <MX_TIM3_Init+0x94>)
 8001290:	2200      	movs	r2, #0
 8001292:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8001294:	4b18      	ldr	r3, [pc, #96]	@ (80012f8 <MX_TIM3_Init+0x94>)
 8001296:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800129a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800129c:	4b16      	ldr	r3, [pc, #88]	@ (80012f8 <MX_TIM3_Init+0x94>)
 800129e:	2200      	movs	r2, #0
 80012a0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a2:	4b15      	ldr	r3, [pc, #84]	@ (80012f8 <MX_TIM3_Init+0x94>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012a8:	4813      	ldr	r0, [pc, #76]	@ (80012f8 <MX_TIM3_Init+0x94>)
 80012aa:	f007 f861 	bl	8008370 <HAL_TIM_Base_Init>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80012b4:	f000 f94a 	bl	800154c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012be:	f107 0308 	add.w	r3, r7, #8
 80012c2:	4619      	mov	r1, r3
 80012c4:	480c      	ldr	r0, [pc, #48]	@ (80012f8 <MX_TIM3_Init+0x94>)
 80012c6:	f007 f8a2 	bl	800840e <HAL_TIM_ConfigClockSource>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80012d0:	f000 f93c 	bl	800154c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d4:	2300      	movs	r3, #0
 80012d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012d8:	2300      	movs	r3, #0
 80012da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012dc:	463b      	mov	r3, r7
 80012de:	4619      	mov	r1, r3
 80012e0:	4805      	ldr	r0, [pc, #20]	@ (80012f8 <MX_TIM3_Init+0x94>)
 80012e2:	f007 fa7b 	bl	80087dc <HAL_TIMEx_MasterConfigSynchronization>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80012ec:	f000 f92e 	bl	800154c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012f0:	bf00      	nop
 80012f2:	3718      	adds	r7, #24
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	20000424 	.word	0x20000424
 80012fc:	40000400 	.word	0x40000400

08001300 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	4b0c      	ldr	r3, [pc, #48]	@ (800133c <MX_DMA_Init+0x3c>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130e:	4a0b      	ldr	r2, [pc, #44]	@ (800133c <MX_DMA_Init+0x3c>)
 8001310:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001314:	6313      	str	r3, [r2, #48]	@ 0x30
 8001316:	4b09      	ldr	r3, [pc, #36]	@ (800133c <MX_DMA_Init+0x3c>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800131e:	607b      	str	r3, [r7, #4]
 8001320:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001322:	2200      	movs	r2, #0
 8001324:	2100      	movs	r1, #0
 8001326:	2039      	movs	r0, #57	@ 0x39
 8001328:	f001 ff05 	bl	8003136 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800132c:	2039      	movs	r0, #57	@ 0x39
 800132e:	f001 ff1e 	bl	800316e <HAL_NVIC_EnableIRQ>

}
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40023800 	.word	0x40023800

08001340 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b08c      	sub	sp, #48	@ 0x30
 8001344:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001346:	f107 031c 	add.w	r3, r7, #28
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]
 8001352:	60da      	str	r2, [r3, #12]
 8001354:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	61bb      	str	r3, [r7, #24]
 800135a:	4b77      	ldr	r3, [pc, #476]	@ (8001538 <MX_GPIO_Init+0x1f8>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135e:	4a76      	ldr	r2, [pc, #472]	@ (8001538 <MX_GPIO_Init+0x1f8>)
 8001360:	f043 0310 	orr.w	r3, r3, #16
 8001364:	6313      	str	r3, [r2, #48]	@ 0x30
 8001366:	4b74      	ldr	r3, [pc, #464]	@ (8001538 <MX_GPIO_Init+0x1f8>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136a:	f003 0310 	and.w	r3, r3, #16
 800136e:	61bb      	str	r3, [r7, #24]
 8001370:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]
 8001376:	4b70      	ldr	r3, [pc, #448]	@ (8001538 <MX_GPIO_Init+0x1f8>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137a:	4a6f      	ldr	r2, [pc, #444]	@ (8001538 <MX_GPIO_Init+0x1f8>)
 800137c:	f043 0304 	orr.w	r3, r3, #4
 8001380:	6313      	str	r3, [r2, #48]	@ 0x30
 8001382:	4b6d      	ldr	r3, [pc, #436]	@ (8001538 <MX_GPIO_Init+0x1f8>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001386:	f003 0304 	and.w	r3, r3, #4
 800138a:	617b      	str	r3, [r7, #20]
 800138c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	613b      	str	r3, [r7, #16]
 8001392:	4b69      	ldr	r3, [pc, #420]	@ (8001538 <MX_GPIO_Init+0x1f8>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001396:	4a68      	ldr	r2, [pc, #416]	@ (8001538 <MX_GPIO_Init+0x1f8>)
 8001398:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800139c:	6313      	str	r3, [r2, #48]	@ 0x30
 800139e:	4b66      	ldr	r3, [pc, #408]	@ (8001538 <MX_GPIO_Init+0x1f8>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013a6:	613b      	str	r3, [r7, #16]
 80013a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	4b62      	ldr	r3, [pc, #392]	@ (8001538 <MX_GPIO_Init+0x1f8>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b2:	4a61      	ldr	r2, [pc, #388]	@ (8001538 <MX_GPIO_Init+0x1f8>)
 80013b4:	f043 0301 	orr.w	r3, r3, #1
 80013b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ba:	4b5f      	ldr	r3, [pc, #380]	@ (8001538 <MX_GPIO_Init+0x1f8>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	60bb      	str	r3, [r7, #8]
 80013ca:	4b5b      	ldr	r3, [pc, #364]	@ (8001538 <MX_GPIO_Init+0x1f8>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ce:	4a5a      	ldr	r2, [pc, #360]	@ (8001538 <MX_GPIO_Init+0x1f8>)
 80013d0:	f043 0302 	orr.w	r3, r3, #2
 80013d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013d6:	4b58      	ldr	r3, [pc, #352]	@ (8001538 <MX_GPIO_Init+0x1f8>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	60bb      	str	r3, [r7, #8]
 80013e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	607b      	str	r3, [r7, #4]
 80013e6:	4b54      	ldr	r3, [pc, #336]	@ (8001538 <MX_GPIO_Init+0x1f8>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ea:	4a53      	ldr	r2, [pc, #332]	@ (8001538 <MX_GPIO_Init+0x1f8>)
 80013ec:	f043 0308 	orr.w	r3, r3, #8
 80013f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013f2:	4b51      	ldr	r3, [pc, #324]	@ (8001538 <MX_GPIO_Init+0x1f8>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f6:	f003 0308 	and.w	r3, r3, #8
 80013fa:	607b      	str	r3, [r7, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|DISPL_RST_Pin|DISPL_LED_Pin|DISPL_DC_Pin, GPIO_PIN_RESET);
 80013fe:	2200      	movs	r2, #0
 8001400:	f44f 61e1 	mov.w	r1, #1800	@ 0x708
 8001404:	484d      	ldr	r0, [pc, #308]	@ (800153c <MX_GPIO_Init+0x1fc>)
 8001406:	f002 fbad 	bl	8003b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800140a:	2201      	movs	r2, #1
 800140c:	2101      	movs	r1, #1
 800140e:	484c      	ldr	r0, [pc, #304]	@ (8001540 <MX_GPIO_Init+0x200>)
 8001410:	f002 fba8 	bl	8003b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DISPL_CS_Pin|TOUCH_CS_Pin, GPIO_PIN_SET);
 8001414:	2201      	movs	r2, #1
 8001416:	f44f 6108 	mov.w	r1, #2176	@ 0x880
 800141a:	4848      	ldr	r0, [pc, #288]	@ (800153c <MX_GPIO_Init+0x1fc>)
 800141c:	f002 fba2 	bl	8003b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001420:	2200      	movs	r2, #0
 8001422:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8001426:	4847      	ldr	r0, [pc, #284]	@ (8001544 <MX_GPIO_Init+0x204>)
 8001428:	f002 fb9c 	bl	8003b64 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 800142c:	2304      	movs	r3, #4
 800142e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001430:	2300      	movs	r3, #0
 8001432:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	2300      	movs	r3, #0
 8001436:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8001438:	f107 031c 	add.w	r3, r7, #28
 800143c:	4619      	mov	r1, r3
 800143e:	483f      	ldr	r0, [pc, #252]	@ (800153c <MX_GPIO_Init+0x1fc>)
 8001440:	f002 f9f4 	bl	800382c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001444:	2308      	movs	r3, #8
 8001446:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001448:	2301      	movs	r3, #1
 800144a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	2300      	movs	r3, #0
 800144e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001450:	2300      	movs	r3, #0
 8001452:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001454:	f107 031c 	add.w	r3, r7, #28
 8001458:	4619      	mov	r1, r3
 800145a:	4838      	ldr	r0, [pc, #224]	@ (800153c <MX_GPIO_Init+0x1fc>)
 800145c:	f002 f9e6 	bl	800382c <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8001460:	2332      	movs	r3, #50	@ 0x32
 8001462:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001464:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001468:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800146e:	f107 031c 	add.w	r3, r7, #28
 8001472:	4619      	mov	r1, r3
 8001474:	4831      	ldr	r0, [pc, #196]	@ (800153c <MX_GPIO_Init+0x1fc>)
 8001476:	f002 f9d9 	bl	800382c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800147a:	2301      	movs	r3, #1
 800147c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800147e:	2301      	movs	r3, #1
 8001480:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	2300      	movs	r3, #0
 8001484:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001486:	2300      	movs	r3, #0
 8001488:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800148a:	f107 031c 	add.w	r3, r7, #28
 800148e:	4619      	mov	r1, r3
 8001490:	482b      	ldr	r0, [pc, #172]	@ (8001540 <MX_GPIO_Init+0x200>)
 8001492:	f002 f9cb 	bl	800382c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001496:	2301      	movs	r3, #1
 8001498:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800149a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800149e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a4:	f107 031c 	add.w	r3, r7, #28
 80014a8:	4619      	mov	r1, r3
 80014aa:	4827      	ldr	r0, [pc, #156]	@ (8001548 <MX_GPIO_Init+0x208>)
 80014ac:	f002 f9be 	bl	800382c <HAL_GPIO_Init>

  /*Configure GPIO pins : DISPL_CS_Pin DISPL_RST_Pin DISPL_LED_Pin DISPL_DC_Pin
                           TOUCH_CS_Pin */
  GPIO_InitStruct.Pin = DISPL_CS_Pin|DISPL_RST_Pin|DISPL_DC_Pin
 80014b0:	f44f 6358 	mov.w	r3, #3456	@ 0xd80
 80014b4:	61fb      	str	r3, [r7, #28]
                          |TOUCH_CS_Pin;
  //GPIO_InitStruct.Pin = DISPL_CS_Pin|DISPL_RST_Pin|DISPL_LED_Pin|DISPL_DC_Pin
                           // |TOUCH_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b6:	2301      	movs	r3, #1
 80014b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014be:	2303      	movs	r3, #3
 80014c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014c2:	f107 031c 	add.w	r3, r7, #28
 80014c6:	4619      	mov	r1, r3
 80014c8:	481c      	ldr	r0, [pc, #112]	@ (800153c <MX_GPIO_Init+0x1fc>)
 80014ca:	f002 f9af 	bl	800382c <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_INT_Pin */
  GPIO_InitStruct.Pin = TOUCH_INT_Pin;
 80014ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80014d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014d4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80014d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014da:	2301      	movs	r3, #1
 80014dc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(TOUCH_INT_GPIO_Port, &GPIO_InitStruct);
 80014de:	f107 031c 	add.w	r3, r7, #28
 80014e2:	4619      	mov	r1, r3
 80014e4:	4815      	ldr	r0, [pc, #84]	@ (800153c <MX_GPIO_Init+0x1fc>)
 80014e6:	f002 f9a1 	bl	800382c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80014ea:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80014ee:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f0:	2301      	movs	r3, #1
 80014f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f8:	2300      	movs	r3, #0
 80014fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014fc:	f107 031c 	add.w	r3, r7, #28
 8001500:	4619      	mov	r1, r3
 8001502:	4810      	ldr	r0, [pc, #64]	@ (8001544 <MX_GPIO_Init+0x204>)
 8001504:	f002 f992 	bl	800382c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001508:	2320      	movs	r3, #32
 800150a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800150c:	2300      	movs	r3, #0
 800150e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001514:	f107 031c 	add.w	r3, r7, #28
 8001518:	4619      	mov	r1, r3
 800151a:	480a      	ldr	r0, [pc, #40]	@ (8001544 <MX_GPIO_Init+0x204>)
 800151c:	f002 f986 	bl	800382c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001520:	2200      	movs	r2, #0
 8001522:	2100      	movs	r1, #0
 8001524:	2028      	movs	r0, #40	@ 0x28
 8001526:	f001 fe06 	bl	8003136 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800152a:	2028      	movs	r0, #40	@ 0x28
 800152c:	f001 fe1f 	bl	800316e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001530:	bf00      	nop
 8001532:	3730      	adds	r7, #48	@ 0x30
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40023800 	.word	0x40023800
 800153c:	40021000 	.word	0x40021000
 8001540:	40020800 	.word	0x40020800
 8001544:	40020c00 	.word	0x40020c00
 8001548:	40020000 	.word	0x40020000

0800154c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001550:	b672      	cpsid	i
}
 8001552:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001554:	bf00      	nop
 8001556:	e7fd      	b.n	8001554 <Error_Handler+0x8>

08001558 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	607b      	str	r3, [r7, #4]
 8001562:	4b10      	ldr	r3, [pc, #64]	@ (80015a4 <HAL_MspInit+0x4c>)
 8001564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001566:	4a0f      	ldr	r2, [pc, #60]	@ (80015a4 <HAL_MspInit+0x4c>)
 8001568:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800156c:	6453      	str	r3, [r2, #68]	@ 0x44
 800156e:	4b0d      	ldr	r3, [pc, #52]	@ (80015a4 <HAL_MspInit+0x4c>)
 8001570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001572:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001576:	607b      	str	r3, [r7, #4]
 8001578:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	603b      	str	r3, [r7, #0]
 800157e:	4b09      	ldr	r3, [pc, #36]	@ (80015a4 <HAL_MspInit+0x4c>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001582:	4a08      	ldr	r2, [pc, #32]	@ (80015a4 <HAL_MspInit+0x4c>)
 8001584:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001588:	6413      	str	r3, [r2, #64]	@ 0x40
 800158a:	4b06      	ldr	r3, [pc, #24]	@ (80015a4 <HAL_MspInit+0x4c>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001592:	603b      	str	r3, [r7, #0]
 8001594:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001596:	2007      	movs	r0, #7
 8001598:	f001 fdc2 	bl	8003120 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800159c:	bf00      	nop
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40023800 	.word	0x40023800

080015a8 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a0b      	ldr	r2, [pc, #44]	@ (80015e4 <HAL_CRC_MspInit+0x3c>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d10d      	bne.n	80015d6 <HAL_CRC_MspInit+0x2e>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	60fb      	str	r3, [r7, #12]
 80015be:	4b0a      	ldr	r3, [pc, #40]	@ (80015e8 <HAL_CRC_MspInit+0x40>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c2:	4a09      	ldr	r2, [pc, #36]	@ (80015e8 <HAL_CRC_MspInit+0x40>)
 80015c4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80015c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ca:	4b07      	ldr	r3, [pc, #28]	@ (80015e8 <HAL_CRC_MspInit+0x40>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 80015d6:	bf00      	nop
 80015d8:	3714      	adds	r7, #20
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	40023000 	.word	0x40023000
 80015e8:	40023800 	.word	0x40023800

080015ec <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b08a      	sub	sp, #40	@ 0x28
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f4:	f107 0314 	add.w	r3, r7, #20
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
 8001602:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a19      	ldr	r2, [pc, #100]	@ (8001670 <HAL_I2C_MspInit+0x84>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d12c      	bne.n	8001668 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	613b      	str	r3, [r7, #16]
 8001612:	4b18      	ldr	r3, [pc, #96]	@ (8001674 <HAL_I2C_MspInit+0x88>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001616:	4a17      	ldr	r2, [pc, #92]	@ (8001674 <HAL_I2C_MspInit+0x88>)
 8001618:	f043 0302 	orr.w	r3, r3, #2
 800161c:	6313      	str	r3, [r2, #48]	@ 0x30
 800161e:	4b15      	ldr	r3, [pc, #84]	@ (8001674 <HAL_I2C_MspInit+0x88>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	613b      	str	r3, [r7, #16]
 8001628:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800162a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800162e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001630:	2312      	movs	r3, #18
 8001632:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001634:	2301      	movs	r3, #1
 8001636:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001638:	2300      	movs	r3, #0
 800163a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800163c:	2304      	movs	r3, #4
 800163e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001640:	f107 0314 	add.w	r3, r7, #20
 8001644:	4619      	mov	r1, r3
 8001646:	480c      	ldr	r0, [pc, #48]	@ (8001678 <HAL_I2C_MspInit+0x8c>)
 8001648:	f002 f8f0 	bl	800382c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800164c:	2300      	movs	r3, #0
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	4b08      	ldr	r3, [pc, #32]	@ (8001674 <HAL_I2C_MspInit+0x88>)
 8001652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001654:	4a07      	ldr	r2, [pc, #28]	@ (8001674 <HAL_I2C_MspInit+0x88>)
 8001656:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800165a:	6413      	str	r3, [r2, #64]	@ 0x40
 800165c:	4b05      	ldr	r3, [pc, #20]	@ (8001674 <HAL_I2C_MspInit+0x88>)
 800165e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001660:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001668:	bf00      	nop
 800166a:	3728      	adds	r7, #40	@ 0x28
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40005400 	.word	0x40005400
 8001674:	40023800 	.word	0x40023800
 8001678:	40020400 	.word	0x40020400

0800167c <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b08e      	sub	sp, #56	@ 0x38
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001684:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	60da      	str	r2, [r3, #12]
 8001692:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a59      	ldr	r2, [pc, #356]	@ (8001800 <HAL_I2S_MspInit+0x184>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d15b      	bne.n	8001756 <HAL_I2S_MspInit+0xda>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	623b      	str	r3, [r7, #32]
 80016a2:	4b58      	ldr	r3, [pc, #352]	@ (8001804 <HAL_I2S_MspInit+0x188>)
 80016a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a6:	4a57      	ldr	r2, [pc, #348]	@ (8001804 <HAL_I2S_MspInit+0x188>)
 80016a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80016ae:	4b55      	ldr	r3, [pc, #340]	@ (8001804 <HAL_I2S_MspInit+0x188>)
 80016b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016b6:	623b      	str	r3, [r7, #32]
 80016b8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	61fb      	str	r3, [r7, #28]
 80016be:	4b51      	ldr	r3, [pc, #324]	@ (8001804 <HAL_I2S_MspInit+0x188>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c2:	4a50      	ldr	r2, [pc, #320]	@ (8001804 <HAL_I2S_MspInit+0x188>)
 80016c4:	f043 0304 	orr.w	r3, r3, #4
 80016c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ca:	4b4e      	ldr	r3, [pc, #312]	@ (8001804 <HAL_I2S_MspInit+0x188>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ce:	f003 0304 	and.w	r3, r3, #4
 80016d2:	61fb      	str	r3, [r7, #28]
 80016d4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	61bb      	str	r3, [r7, #24]
 80016da:	4b4a      	ldr	r3, [pc, #296]	@ (8001804 <HAL_I2S_MspInit+0x188>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016de:	4a49      	ldr	r2, [pc, #292]	@ (8001804 <HAL_I2S_MspInit+0x188>)
 80016e0:	f043 0302 	orr.w	r3, r3, #2
 80016e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016e6:	4b47      	ldr	r3, [pc, #284]	@ (8001804 <HAL_I2S_MspInit+0x188>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	61bb      	str	r3, [r7, #24]
 80016f0:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016f2:	2304      	movs	r3, #4
 80016f4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f6:	2302      	movs	r3, #2
 80016f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fe:	2300      	movs	r3, #0
 8001700:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8001702:	2306      	movs	r3, #6
 8001704:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001706:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800170a:	4619      	mov	r1, r3
 800170c:	483e      	ldr	r0, [pc, #248]	@ (8001808 <HAL_I2S_MspInit+0x18c>)
 800170e:	f002 f88d 	bl	800382c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001712:	2308      	movs	r3, #8
 8001714:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001716:	2302      	movs	r3, #2
 8001718:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171e:	2300      	movs	r3, #0
 8001720:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001722:	2305      	movs	r3, #5
 8001724:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001726:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800172a:	4619      	mov	r1, r3
 800172c:	4836      	ldr	r0, [pc, #216]	@ (8001808 <HAL_I2S_MspInit+0x18c>)
 800172e:	f002 f87d 	bl	800382c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8001732:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001736:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001738:	2302      	movs	r3, #2
 800173a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173c:	2300      	movs	r3, #0
 800173e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001740:	2300      	movs	r3, #0
 8001742:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001744:	2305      	movs	r3, #5
 8001746:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001748:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800174c:	4619      	mov	r1, r3
 800174e:	482f      	ldr	r0, [pc, #188]	@ (800180c <HAL_I2S_MspInit+0x190>)
 8001750:	f002 f86c 	bl	800382c <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001754:	e04f      	b.n	80017f6 <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a2d      	ldr	r2, [pc, #180]	@ (8001810 <HAL_I2S_MspInit+0x194>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d14a      	bne.n	80017f6 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001760:	2300      	movs	r3, #0
 8001762:	617b      	str	r3, [r7, #20]
 8001764:	4b27      	ldr	r3, [pc, #156]	@ (8001804 <HAL_I2S_MspInit+0x188>)
 8001766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001768:	4a26      	ldr	r2, [pc, #152]	@ (8001804 <HAL_I2S_MspInit+0x188>)
 800176a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800176e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001770:	4b24      	ldr	r3, [pc, #144]	@ (8001804 <HAL_I2S_MspInit+0x188>)
 8001772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001774:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001778:	617b      	str	r3, [r7, #20]
 800177a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800177c:	2300      	movs	r3, #0
 800177e:	613b      	str	r3, [r7, #16]
 8001780:	4b20      	ldr	r3, [pc, #128]	@ (8001804 <HAL_I2S_MspInit+0x188>)
 8001782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001784:	4a1f      	ldr	r2, [pc, #124]	@ (8001804 <HAL_I2S_MspInit+0x188>)
 8001786:	f043 0301 	orr.w	r3, r3, #1
 800178a:	6313      	str	r3, [r2, #48]	@ 0x30
 800178c:	4b1d      	ldr	r3, [pc, #116]	@ (8001804 <HAL_I2S_MspInit+0x188>)
 800178e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001790:	f003 0301 	and.w	r3, r3, #1
 8001794:	613b      	str	r3, [r7, #16]
 8001796:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001798:	2300      	movs	r3, #0
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	4b19      	ldr	r3, [pc, #100]	@ (8001804 <HAL_I2S_MspInit+0x188>)
 800179e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a0:	4a18      	ldr	r2, [pc, #96]	@ (8001804 <HAL_I2S_MspInit+0x188>)
 80017a2:	f043 0304 	orr.w	r3, r3, #4
 80017a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80017a8:	4b16      	ldr	r3, [pc, #88]	@ (8001804 <HAL_I2S_MspInit+0x188>)
 80017aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ac:	f003 0304 	and.w	r3, r3, #4
 80017b0:	60fb      	str	r3, [r7, #12]
 80017b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80017b4:	2310      	movs	r3, #16
 80017b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b8:	2302      	movs	r3, #2
 80017ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017bc:	2300      	movs	r3, #0
 80017be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c0:	2300      	movs	r3, #0
 80017c2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017c4:	2306      	movs	r3, #6
 80017c6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80017c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017cc:	4619      	mov	r1, r3
 80017ce:	4811      	ldr	r0, [pc, #68]	@ (8001814 <HAL_I2S_MspInit+0x198>)
 80017d0:	f002 f82c 	bl	800382c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80017d4:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80017d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017da:	2302      	movs	r3, #2
 80017dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e2:	2300      	movs	r3, #0
 80017e4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017e6:	2306      	movs	r3, #6
 80017e8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017ee:	4619      	mov	r1, r3
 80017f0:	4805      	ldr	r0, [pc, #20]	@ (8001808 <HAL_I2S_MspInit+0x18c>)
 80017f2:	f002 f81b 	bl	800382c <HAL_GPIO_Init>
}
 80017f6:	bf00      	nop
 80017f8:	3738      	adds	r7, #56	@ 0x38
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40003800 	.word	0x40003800
 8001804:	40023800 	.word	0x40023800
 8001808:	40020800 	.word	0x40020800
 800180c:	40020400 	.word	0x40020400
 8001810:	40003c00 	.word	0x40003c00
 8001814:	40020000 	.word	0x40020000

08001818 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b08c      	sub	sp, #48	@ 0x30
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001820:	f107 031c 	add.w	r3, r7, #28
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	60da      	str	r2, [r3, #12]
 800182e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a4d      	ldr	r2, [pc, #308]	@ (800196c <HAL_SPI_MspInit+0x154>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d12c      	bne.n	8001894 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	61bb      	str	r3, [r7, #24]
 800183e:	4b4c      	ldr	r3, [pc, #304]	@ (8001970 <HAL_SPI_MspInit+0x158>)
 8001840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001842:	4a4b      	ldr	r2, [pc, #300]	@ (8001970 <HAL_SPI_MspInit+0x158>)
 8001844:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001848:	6453      	str	r3, [r2, #68]	@ 0x44
 800184a:	4b49      	ldr	r3, [pc, #292]	@ (8001970 <HAL_SPI_MspInit+0x158>)
 800184c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800184e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001852:	61bb      	str	r3, [r7, #24]
 8001854:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	617b      	str	r3, [r7, #20]
 800185a:	4b45      	ldr	r3, [pc, #276]	@ (8001970 <HAL_SPI_MspInit+0x158>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185e:	4a44      	ldr	r2, [pc, #272]	@ (8001970 <HAL_SPI_MspInit+0x158>)
 8001860:	f043 0301 	orr.w	r3, r3, #1
 8001864:	6313      	str	r3, [r2, #48]	@ 0x30
 8001866:	4b42      	ldr	r3, [pc, #264]	@ (8001970 <HAL_SPI_MspInit+0x158>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	617b      	str	r3, [r7, #20]
 8001870:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001872:	23e0      	movs	r3, #224	@ 0xe0
 8001874:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001876:	2302      	movs	r3, #2
 8001878:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187a:	2300      	movs	r3, #0
 800187c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800187e:	2303      	movs	r3, #3
 8001880:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001882:	2305      	movs	r3, #5
 8001884:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001886:	f107 031c 	add.w	r3, r7, #28
 800188a:	4619      	mov	r1, r3
 800188c:	4839      	ldr	r0, [pc, #228]	@ (8001974 <HAL_SPI_MspInit+0x15c>)
 800188e:	f001 ffcd 	bl	800382c <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI4_MspInit 1 */

    /* USER CODE END SPI4_MspInit 1 */
  }

}
 8001892:	e067      	b.n	8001964 <HAL_SPI_MspInit+0x14c>
  else if(hspi->Instance==SPI4)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a37      	ldr	r2, [pc, #220]	@ (8001978 <HAL_SPI_MspInit+0x160>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d162      	bne.n	8001964 <HAL_SPI_MspInit+0x14c>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	613b      	str	r3, [r7, #16]
 80018a2:	4b33      	ldr	r3, [pc, #204]	@ (8001970 <HAL_SPI_MspInit+0x158>)
 80018a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018a6:	4a32      	ldr	r2, [pc, #200]	@ (8001970 <HAL_SPI_MspInit+0x158>)
 80018a8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80018ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80018ae:	4b30      	ldr	r3, [pc, #192]	@ (8001970 <HAL_SPI_MspInit+0x158>)
 80018b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80018b6:	613b      	str	r3, [r7, #16]
 80018b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	4b2c      	ldr	r3, [pc, #176]	@ (8001970 <HAL_SPI_MspInit+0x158>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c2:	4a2b      	ldr	r2, [pc, #172]	@ (8001970 <HAL_SPI_MspInit+0x158>)
 80018c4:	f043 0310 	orr.w	r3, r3, #16
 80018c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ca:	4b29      	ldr	r3, [pc, #164]	@ (8001970 <HAL_SPI_MspInit+0x158>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ce:	f003 0310 	and.w	r3, r3, #16
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DISPL_SCK_Pin|TOUCH_MISO_Pin|DISPL_MOSI_Pin;
 80018d6:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 80018da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018dc:	2302      	movs	r3, #2
 80018de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e4:	2303      	movs	r3, #3
 80018e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80018e8:	2305      	movs	r3, #5
 80018ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018ec:	f107 031c 	add.w	r3, r7, #28
 80018f0:	4619      	mov	r1, r3
 80018f2:	4822      	ldr	r0, [pc, #136]	@ (800197c <HAL_SPI_MspInit+0x164>)
 80018f4:	f001 ff9a 	bl	800382c <HAL_GPIO_Init>
    hdma_spi4_tx.Instance = DMA2_Stream1;
 80018f8:	4b21      	ldr	r3, [pc, #132]	@ (8001980 <HAL_SPI_MspInit+0x168>)
 80018fa:	4a22      	ldr	r2, [pc, #136]	@ (8001984 <HAL_SPI_MspInit+0x16c>)
 80018fc:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_4;
 80018fe:	4b20      	ldr	r3, [pc, #128]	@ (8001980 <HAL_SPI_MspInit+0x168>)
 8001900:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001904:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001906:	4b1e      	ldr	r3, [pc, #120]	@ (8001980 <HAL_SPI_MspInit+0x168>)
 8001908:	2240      	movs	r2, #64	@ 0x40
 800190a:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800190c:	4b1c      	ldr	r3, [pc, #112]	@ (8001980 <HAL_SPI_MspInit+0x168>)
 800190e:	2200      	movs	r2, #0
 8001910:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001912:	4b1b      	ldr	r3, [pc, #108]	@ (8001980 <HAL_SPI_MspInit+0x168>)
 8001914:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001918:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800191a:	4b19      	ldr	r3, [pc, #100]	@ (8001980 <HAL_SPI_MspInit+0x168>)
 800191c:	2200      	movs	r2, #0
 800191e:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001920:	4b17      	ldr	r3, [pc, #92]	@ (8001980 <HAL_SPI_MspInit+0x168>)
 8001922:	2200      	movs	r2, #0
 8001924:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8001926:	4b16      	ldr	r3, [pc, #88]	@ (8001980 <HAL_SPI_MspInit+0x168>)
 8001928:	2200      	movs	r2, #0
 800192a:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800192c:	4b14      	ldr	r3, [pc, #80]	@ (8001980 <HAL_SPI_MspInit+0x168>)
 800192e:	2200      	movs	r2, #0
 8001930:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001932:	4b13      	ldr	r3, [pc, #76]	@ (8001980 <HAL_SPI_MspInit+0x168>)
 8001934:	2200      	movs	r2, #0
 8001936:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8001938:	4811      	ldr	r0, [pc, #68]	@ (8001980 <HAL_SPI_MspInit+0x168>)
 800193a:	f001 fc6b 	bl	8003214 <HAL_DMA_Init>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <HAL_SPI_MspInit+0x130>
      Error_Handler();
 8001944:	f7ff fe02 	bl	800154c <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4a0d      	ldr	r2, [pc, #52]	@ (8001980 <HAL_SPI_MspInit+0x168>)
 800194c:	649a      	str	r2, [r3, #72]	@ 0x48
 800194e:	4a0c      	ldr	r2, [pc, #48]	@ (8001980 <HAL_SPI_MspInit+0x168>)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8001954:	2200      	movs	r2, #0
 8001956:	2100      	movs	r1, #0
 8001958:	2054      	movs	r0, #84	@ 0x54
 800195a:	f001 fbec 	bl	8003136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 800195e:	2054      	movs	r0, #84	@ 0x54
 8001960:	f001 fc05 	bl	800316e <HAL_NVIC_EnableIRQ>
}
 8001964:	bf00      	nop
 8001966:	3730      	adds	r7, #48	@ 0x30
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40013000 	.word	0x40013000
 8001970:	40023800 	.word	0x40023800
 8001974:	40020000 	.word	0x40020000
 8001978:	40013400 	.word	0x40013400
 800197c:	40021000 	.word	0x40021000
 8001980:	200003c4 	.word	0x200003c4
 8001984:	40026428 	.word	0x40026428

08001988 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a0b      	ldr	r2, [pc, #44]	@ (80019c4 <HAL_TIM_Base_MspInit+0x3c>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d10d      	bne.n	80019b6 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	60fb      	str	r3, [r7, #12]
 800199e:	4b0a      	ldr	r3, [pc, #40]	@ (80019c8 <HAL_TIM_Base_MspInit+0x40>)
 80019a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a2:	4a09      	ldr	r2, [pc, #36]	@ (80019c8 <HAL_TIM_Base_MspInit+0x40>)
 80019a4:	f043 0302 	orr.w	r3, r3, #2
 80019a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80019aa:	4b07      	ldr	r3, [pc, #28]	@ (80019c8 <HAL_TIM_Base_MspInit+0x40>)
 80019ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 80019b6:	bf00      	nop
 80019b8:	3714      	adds	r7, #20
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	40000400 	.word	0x40000400
 80019c8:	40023800 	.word	0x40023800

080019cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019d0:	bf00      	nop
 80019d2:	e7fd      	b.n	80019d0 <NMI_Handler+0x4>

080019d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019d8:	bf00      	nop
 80019da:	e7fd      	b.n	80019d8 <HardFault_Handler+0x4>

080019dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019e0:	bf00      	nop
 80019e2:	e7fd      	b.n	80019e0 <MemManage_Handler+0x4>

080019e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019e8:	bf00      	nop
 80019ea:	e7fd      	b.n	80019e8 <BusFault_Handler+0x4>

080019ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019f0:	bf00      	nop
 80019f2:	e7fd      	b.n	80019f0 <UsageFault_Handler+0x4>

080019f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019f8:	bf00      	nop
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a02:	b480      	push	{r7}
 8001a04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a22:	f001 fa27 	bl	8002e74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a26:	bf00      	nop
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOUCH_INT_Pin);
 8001a2e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001a32:	f002 f8b1 	bl	8003b98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a36:	bf00      	nop
 8001a38:	bd80      	pop	{r7, pc}
	...

08001a3c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8001a40:	4802      	ldr	r0, [pc, #8]	@ (8001a4c <DMA2_Stream1_IRQHandler+0x10>)
 8001a42:	f001 fcb7 	bl	80033b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	200003c4 	.word	0x200003c4

08001a50 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001a54:	4802      	ldr	r0, [pc, #8]	@ (8001a60 <OTG_FS_IRQHandler+0x10>)
 8001a56:	f002 fb97 	bl	8004188 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	20008864 	.word	0x20008864

08001a64 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8001a68:	4802      	ldr	r0, [pc, #8]	@ (8001a74 <SPI4_IRQHandler+0x10>)
 8001a6a:	f006 fa2b 	bl	8007ec4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	2000036c 	.word	0x2000036c

08001a78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  return 1;
 8001a7c:	2301      	movs	r3, #1
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <_kill>:

int _kill(int pid, int sig)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a92:	f00b f9f3 	bl	800ce7c <__errno>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2216      	movs	r2, #22
 8001a9a:	601a      	str	r2, [r3, #0]
  return -1;
 8001a9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3708      	adds	r7, #8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <_exit>:

void _exit (int status)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ab0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f7ff ffe7 	bl	8001a88 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001aba:	bf00      	nop
 8001abc:	e7fd      	b.n	8001aba <_exit+0x12>

08001abe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b086      	sub	sp, #24
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	60f8      	str	r0, [r7, #12]
 8001ac6:	60b9      	str	r1, [r7, #8]
 8001ac8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aca:	2300      	movs	r3, #0
 8001acc:	617b      	str	r3, [r7, #20]
 8001ace:	e00a      	b.n	8001ae6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ad0:	f3af 8000 	nop.w
 8001ad4:	4601      	mov	r1, r0
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	1c5a      	adds	r2, r3, #1
 8001ada:	60ba      	str	r2, [r7, #8]
 8001adc:	b2ca      	uxtb	r2, r1
 8001ade:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	617b      	str	r3, [r7, #20]
 8001ae6:	697a      	ldr	r2, [r7, #20]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	dbf0      	blt.n	8001ad0 <_read+0x12>
  }

  return len;
 8001aee:	687b      	ldr	r3, [r7, #4]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3718      	adds	r7, #24
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b04:	2300      	movs	r3, #0
 8001b06:	617b      	str	r3, [r7, #20]
 8001b08:	e009      	b.n	8001b1e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	1c5a      	adds	r2, r3, #1
 8001b0e:	60ba      	str	r2, [r7, #8]
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	617b      	str	r3, [r7, #20]
 8001b1e:	697a      	ldr	r2, [r7, #20]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	dbf1      	blt.n	8001b0a <_write+0x12>
  }
  return len;
 8001b26:	687b      	ldr	r3, [r7, #4]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3718      	adds	r7, #24
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <_close>:

int _close(int file)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b58:	605a      	str	r2, [r3, #4]
  return 0;
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <_isatty>:

int _isatty(int file)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b70:	2301      	movs	r3, #1
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr

08001b7e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	b085      	sub	sp, #20
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	60f8      	str	r0, [r7, #12]
 8001b86:	60b9      	str	r1, [r7, #8]
 8001b88:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3714      	adds	r7, #20
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ba0:	4a14      	ldr	r2, [pc, #80]	@ (8001bf4 <_sbrk+0x5c>)
 8001ba2:	4b15      	ldr	r3, [pc, #84]	@ (8001bf8 <_sbrk+0x60>)
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bac:	4b13      	ldr	r3, [pc, #76]	@ (8001bfc <_sbrk+0x64>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d102      	bne.n	8001bba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bb4:	4b11      	ldr	r3, [pc, #68]	@ (8001bfc <_sbrk+0x64>)
 8001bb6:	4a12      	ldr	r2, [pc, #72]	@ (8001c00 <_sbrk+0x68>)
 8001bb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bba:	4b10      	ldr	r3, [pc, #64]	@ (8001bfc <_sbrk+0x64>)
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d207      	bcs.n	8001bd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bc8:	f00b f958 	bl	800ce7c <__errno>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	220c      	movs	r2, #12
 8001bd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd6:	e009      	b.n	8001bec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bd8:	4b08      	ldr	r3, [pc, #32]	@ (8001bfc <_sbrk+0x64>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bde:	4b07      	ldr	r3, [pc, #28]	@ (8001bfc <_sbrk+0x64>)
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4413      	add	r3, r2
 8001be6:	4a05      	ldr	r2, [pc, #20]	@ (8001bfc <_sbrk+0x64>)
 8001be8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bea:	68fb      	ldr	r3, [r7, #12]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3718      	adds	r7, #24
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	20020000 	.word	0x20020000
 8001bf8:	00000400 	.word	0x00000400
 8001bfc:	2000046c 	.word	0x2000046c
 8001c00:	20008d90 	.word	0x20008d90

08001c04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c08:	4b06      	ldr	r3, [pc, #24]	@ (8001c24 <SystemInit+0x20>)
 8001c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c0e:	4a05      	ldr	r2, [pc, #20]	@ (8001c24 <SystemInit+0x20>)
 8001c10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c18:	bf00      	nop
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	e000ed00 	.word	0xe000ed00

08001c28 <Displ_Select>:

/******************************************
 * @brief	enable display, disabling touch
 * 			device selected if CS low
 ******************************************/
void Displ_Select(void) {
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
	if (TOUCH_SPI==DISPL_SPI){														// if SPI port shared (display <-> touch)
		if (HAL_GPIO_ReadPin(DISPL_CS_GPIO_Port, DISPL_CS_Pin)) {					// if display not yet selected
 8001c2c:	2180      	movs	r1, #128	@ 0x80
 8001c2e:	4810      	ldr	r0, [pc, #64]	@ (8001c70 <Displ_Select+0x48>)
 8001c30:	f001 ff80 	bl	8003b34 <HAL_GPIO_ReadPin>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d017      	beq.n	8001c6a <Displ_Select+0x42>
			HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); 		// unselect touch
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001c40:	480b      	ldr	r0, [pc, #44]	@ (8001c70 <Displ_Select+0x48>)
 8001c42:	f001 ff8f 	bl	8003b64 <HAL_GPIO_WritePin>
			SET_DISPL_SPI_BAUDRATE;				   									//change SPI port speed as per display needs
 8001c46:	4b0b      	ldr	r3, [pc, #44]	@ (8001c74 <Displ_Select+0x4c>)
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	490a      	ldr	r1, [pc, #40]	@ (8001c74 <Displ_Select+0x4c>)
 8001c4c:	f64f 73c7 	movw	r3, #65479	@ 0xffc7
 8001c50:	4013      	ands	r3, r2
 8001c52:	600b      	str	r3, [r1, #0]
 8001c54:	4b07      	ldr	r3, [pc, #28]	@ (8001c74 <Displ_Select+0x4c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a06      	ldr	r2, [pc, #24]	@ (8001c74 <Displ_Select+0x4c>)
 8001c5a:	f043 0318 	orr.w	r3, r3, #24
 8001c5e:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET);	// select display
 8001c60:	2200      	movs	r2, #0
 8001c62:	2180      	movs	r1, #128	@ 0x80
 8001c64:	4802      	ldr	r0, [pc, #8]	@ (8001c70 <Displ_Select+0x48>)
 8001c66:	f001 ff7d 	bl	8003b64 <HAL_GPIO_WritePin>
		}
	}
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40021000 	.word	0x40021000
 8001c74:	40013400 	.word	0x40013400

08001c78 <Displ_Transmit>:
 * @PARAM	DC_Status 	indicates if sending command or data
 * 			data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 * 			isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **************************/
void Displ_Transmit(GPIO_PinState DC_Status, uint8_t* data, uint16_t dataSize, uint8_t isTouchGFXBuffer ){
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6039      	str	r1, [r7, #0]
 8001c80:	4611      	mov	r1, r2
 8001c82:	461a      	mov	r2, r3
 8001c84:	4603      	mov	r3, r0
 8001c86:	71fb      	strb	r3, [r7, #7]
 8001c88:	460b      	mov	r3, r1
 8001c8a:	80bb      	strh	r3, [r7, #4]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	71bb      	strb	r3, [r7, #6]

	while (!Displ_SpiAvailable) {};  // waiting for a free SPI port. Flag is set to 1 by transmission-complete interrupt callback
 8001c90:	bf00      	nop
 8001c92:	4b1c      	ldr	r3, [pc, #112]	@ (8001d04 <Displ_Transmit+0x8c>)
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d0fa      	beq.n	8001c92 <Displ_Transmit+0x1a>

	Displ_Select();
 8001c9c:	f7ff ffc4 	bl	8001c28 <Displ_Select>
	HAL_GPIO_WritePin(DISPL_DC_GPIO_Port, DISPL_DC_Pin, DC_Status);
 8001ca0:	79fb      	ldrb	r3, [r7, #7]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001ca8:	4817      	ldr	r0, [pc, #92]	@ (8001d08 <Displ_Transmit+0x90>)
 8001caa:	f001 ff5b 	bl	8003b64 <HAL_GPIO_WritePin>

	if (isTouchGFXBuffer){
 8001cae:	79bb      	ldrb	r3, [r7, #6]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d016      	beq.n	8001ce2 <Displ_Transmit+0x6a>
#ifdef Z_RGB565
//if color format is RGB565 just swap even and odd bytes correcting endianess for ILI driver
		uint32_t *limit=(uint32_t*)(data+dataSize);
 8001cb4:	88bb      	ldrh	r3, [r7, #4]
 8001cb6:	683a      	ldr	r2, [r7, #0]
 8001cb8:	4413      	add	r3, r2
 8001cba:	613b      	str	r3, [r7, #16]
		for (uint32_t *data32=(uint32_t*)data; data32<limit; data32++) {
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	617b      	str	r3, [r7, #20]
 8001cc0:	e00b      	b.n	8001cda <Displ_Transmit+0x62>
			*data32=__REV16(*data32);
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	60fb      	str	r3, [r7, #12]
  __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	ba5b      	rev16	r3, r3
 8001ccc:	60bb      	str	r3, [r7, #8]
  return result;
 8001cce:	68ba      	ldr	r2, [r7, #8]
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	601a      	str	r2, [r3, #0]
		for (uint32_t *data32=(uint32_t*)data; data32<limit; data32++) {
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	3304      	adds	r3, #4
 8001cd8:	617b      	str	r3, [r7, #20]
 8001cda:	697a      	ldr	r2, [r7, #20]
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d3ef      	bcc.n	8001cc2 <Displ_Transmit+0x4a>
		HAL_SPI_Transmit_IT(&DISPL_SPI_PORT , data, dataSize);
#else
#ifdef DISPLAY_SPI_DMA_MODE
		if (dataSize<DISPL_DMA_CUTOFF) {
#endif //DISPLAY_SPI_DMA_MODE
			Displ_SpiAvailable=0;
 8001ce2:	4b08      	ldr	r3, [pc, #32]	@ (8001d04 <Displ_Transmit+0x8c>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit(&DISPL_SPI_PORT , data, dataSize, HAL_MAX_DELAY);
 8001ce8:	88ba      	ldrh	r2, [r7, #4]
 8001cea:	f04f 33ff 	mov.w	r3, #4294967295
 8001cee:	6839      	ldr	r1, [r7, #0]
 8001cf0:	4806      	ldr	r0, [pc, #24]	@ (8001d0c <Displ_Transmit+0x94>)
 8001cf2:	f005 fce0 	bl	80076b6 <HAL_SPI_Transmit>
			Displ_SpiAvailable=1;
 8001cf6:	4b03      	ldr	r3, [pc, #12]	@ (8001d04 <Displ_Transmit+0x8c>)
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	701a      	strb	r2, [r3, #0]
			Displ_SpiAvailable=0;
			HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT , data, dataSize);
		}
#endif //DISPLAY_SPI_DMA_MODE
#endif //DISPLAY_SPI_INTERRUPT_MODE
	}
 8001cfc:	bf00      	nop
 8001cfe:	3718      	adds	r7, #24
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	20000010 	.word	0x20000010
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	2000036c 	.word	0x2000036c

08001d10 <Displ_WriteCommand>:


/**********************************
 * @BRIEF	transmit a byte in a SPI_COMMAND format
 **********************************/
void Displ_WriteCommand(uint8_t cmd){
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	71fb      	strb	r3, [r7, #7]
	Displ_Transmit(SPI_COMMAND, &cmd, sizeof(cmd),0);
 8001d1a:	1df9      	adds	r1, r7, #7
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	2201      	movs	r2, #1
 8001d20:	2000      	movs	r0, #0
 8001d22:	f7ff ffa9 	bl	8001c78 <Displ_Transmit>
}
 8001d26:	bf00      	nop
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <Displ_WriteData>:
 * @BRIEF	transmit a set of data in a SPI_DATA format
 * @PARAM 	data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 * 			isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **********************************/
void Displ_WriteData(uint8_t* buff, size_t buff_size, uint8_t isTouchGFXBuffer){
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b084      	sub	sp, #16
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	60f8      	str	r0, [r7, #12]
 8001d36:	60b9      	str	r1, [r7, #8]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	71fb      	strb	r3, [r7, #7]
	if (buff_size==0) return;
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d007      	beq.n	8001d52 <Displ_WriteData+0x24>
	Displ_Transmit(SPI_DATA, buff, buff_size, isTouchGFXBuffer);
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	b29a      	uxth	r2, r3
 8001d46:	79fb      	ldrb	r3, [r7, #7]
 8001d48:	68f9      	ldr	r1, [r7, #12]
 8001d4a:	2001      	movs	r0, #1
 8001d4c:	f7ff ff94 	bl	8001c78 <Displ_Transmit>
 8001d50:	e000      	b.n	8001d54 <Displ_WriteData+0x26>
	if (buff_size==0) return;
 8001d52:	bf00      	nop
}
 8001d54:	3710      	adds	r7, #16
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
	...

08001d5c <ILI9XXX_Init>:


/**********************************
 * @brief	ILIXXX initialization sequence
 **********************************/
void ILI9XXX_Init(){
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
	Displ_Select();
 8001d60:	f7ff ff62 	bl	8001c28 <Displ_Select>

	HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_RESET);
 8001d64:	2200      	movs	r2, #0
 8001d66:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d6a:	481a      	ldr	r0, [pc, #104]	@ (8001dd4 <ILI9XXX_Init+0x78>)
 8001d6c:	f001 fefa 	bl	8003b64 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001d70:	2001      	movs	r0, #1
 8001d72:	f001 f89f 	bl	8002eb4 <HAL_Delay>
	HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_SET);
 8001d76:	2201      	movs	r2, #1
 8001d78:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d7c:	4815      	ldr	r0, [pc, #84]	@ (8001dd4 <ILI9XXX_Init+0x78>)
 8001d7e:	f001 fef1 	bl	8003b64 <HAL_GPIO_WritePin>
	HAL_Delay(150);
 8001d82:	2096      	movs	r0, #150	@ 0x96
 8001d84:	f001 f896 	bl	8002eb4 <HAL_Delay>
		Displ_WriteData(data,3);
	#endif
*/


	Displ_WriteCommand(ILI9XXX_PIXEL_FORMAT);
 8001d88:	203a      	movs	r0, #58	@ 0x3a
 8001d8a:	f7ff ffc1 	bl	8001d10 <Displ_WriteCommand>
#ifdef Z_RGB666
	Displ_WriteData((uint8_t *)"\x66",1,0);		// RGB666
#endif
#ifdef Z_RGB565
	Displ_WriteData((uint8_t *)"\x55",1,0);		// RGB565
 8001d8e:	2200      	movs	r2, #0
 8001d90:	2101      	movs	r1, #1
 8001d92:	4811      	ldr	r0, [pc, #68]	@ (8001dd8 <ILI9XXX_Init+0x7c>)
 8001d94:	f7ff ffcb 	bl	8001d2e <Displ_WriteData>
#endif
	Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 8001d98:	20b0      	movs	r0, #176	@ 0xb0
 8001d9a:	f7ff ffb9 	bl	8001d10 <Displ_WriteCommand>
	Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2101      	movs	r1, #1
 8001da2:	480e      	ldr	r0, [pc, #56]	@ (8001ddc <ILI9XXX_Init+0x80>)
 8001da4:	f7ff ffc3 	bl	8001d2e <Displ_WriteData>

	Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 8001da8:	20b0      	movs	r0, #176	@ 0xb0
 8001daa:	f7ff ffb1 	bl	8001d10 <Displ_WriteCommand>
	Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 8001dae:	2200      	movs	r2, #0
 8001db0:	2101      	movs	r1, #1
 8001db2:	480a      	ldr	r0, [pc, #40]	@ (8001ddc <ILI9XXX_Init+0x80>)
 8001db4:	f7ff ffbb 	bl	8001d2e <Displ_WriteData>

	Displ_WriteCommand(ILI9XXX_SLEEP_OUT);
 8001db8:	2011      	movs	r0, #17
 8001dba:	f7ff ffa9 	bl	8001d10 <Displ_WriteCommand>
	HAL_Delay(120);
 8001dbe:	2078      	movs	r0, #120	@ 0x78
 8001dc0:	f001 f878 	bl	8002eb4 <HAL_Delay>

	Displ_WriteCommand(ILI9XXX_DISPLAY_ON);
 8001dc4:	2029      	movs	r0, #41	@ 0x29
 8001dc6:	f7ff ffa3 	bl	8001d10 <Displ_WriteCommand>
	HAL_Delay(5);
 8001dca:	2005      	movs	r0, #5
 8001dcc:	f001 f872 	bl	8002eb4 <HAL_Delay>

}
 8001dd0:	bf00      	nop
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	0800eab0 	.word	0x0800eab0
 8001ddc:	0800eab4 	.word	0x0800eab4

08001de0 <Displ_SetAddressWindow>:
 * 			information
 * @param  x1,y1,x2,y2 top left and bottom
 * 					   right corner of the area
 * 					   to write
 **********************************************/
void Displ_SetAddressWindow(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8001de0:	b590      	push	{r4, r7, lr}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4604      	mov	r4, r0
 8001de8:	4608      	mov	r0, r1
 8001dea:	4611      	mov	r1, r2
 8001dec:	461a      	mov	r2, r3
 8001dee:	4623      	mov	r3, r4
 8001df0:	80fb      	strh	r3, [r7, #6]
 8001df2:	4603      	mov	r3, r0
 8001df4:	80bb      	strh	r3, [r7, #4]
 8001df6:	460b      	mov	r3, r1
 8001df8:	807b      	strh	r3, [r7, #2]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	803b      	strh	r3, [r7, #0]
	static uint8_t data[4];

	((uint32_t *)data)[0]=(((x2 & 0xFF)<<24) | ((x2 & 0xFF00)<<8) | ((x1 & 0xFF)<<8) | ((x1 & 0xFF00)>>8) );
 8001dfe:	887b      	ldrh	r3, [r7, #2]
 8001e00:	061a      	lsls	r2, r3, #24
 8001e02:	887b      	ldrh	r3, [r7, #2]
 8001e04:	021b      	lsls	r3, r3, #8
 8001e06:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8001e0a:	431a      	orrs	r2, r3
 8001e0c:	88fb      	ldrh	r3, [r7, #6]
 8001e0e:	021b      	lsls	r3, r3, #8
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	4313      	orrs	r3, r2
 8001e14:	88fa      	ldrh	r2, [r7, #6]
 8001e16:	0a12      	lsrs	r2, r2, #8
 8001e18:	b292      	uxth	r2, r2
 8001e1a:	431a      	orrs	r2, r3
 8001e1c:	4b14      	ldr	r3, [pc, #80]	@ (8001e70 <Displ_SetAddressWindow+0x90>)
 8001e1e:	601a      	str	r2, [r3, #0]
	Displ_WriteCommand(ILI9XXX_COLUMN_ADDR);
 8001e20:	202a      	movs	r0, #42	@ 0x2a
 8001e22:	f7ff ff75 	bl	8001d10 <Displ_WriteCommand>
	Displ_WriteData(data, 4,0);
 8001e26:	2200      	movs	r2, #0
 8001e28:	2104      	movs	r1, #4
 8001e2a:	4811      	ldr	r0, [pc, #68]	@ (8001e70 <Displ_SetAddressWindow+0x90>)
 8001e2c:	f7ff ff7f 	bl	8001d2e <Displ_WriteData>

	((uint32_t *)data)[0]=(((y2 & 0xFF)<<24) | ((y2 & 0xFF00)<<8) | ((y1 & 0xFF)<<8) | ((y1 & 0xFF00)>>8) );
 8001e30:	883b      	ldrh	r3, [r7, #0]
 8001e32:	061a      	lsls	r2, r3, #24
 8001e34:	883b      	ldrh	r3, [r7, #0]
 8001e36:	021b      	lsls	r3, r3, #8
 8001e38:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8001e3c:	431a      	orrs	r2, r3
 8001e3e:	88bb      	ldrh	r3, [r7, #4]
 8001e40:	021b      	lsls	r3, r3, #8
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	4313      	orrs	r3, r2
 8001e46:	88ba      	ldrh	r2, [r7, #4]
 8001e48:	0a12      	lsrs	r2, r2, #8
 8001e4a:	b292      	uxth	r2, r2
 8001e4c:	431a      	orrs	r2, r3
 8001e4e:	4b08      	ldr	r3, [pc, #32]	@ (8001e70 <Displ_SetAddressWindow+0x90>)
 8001e50:	601a      	str	r2, [r3, #0]
	Displ_WriteCommand(ILI9XXX_PAGE_ADDR);
 8001e52:	202b      	movs	r0, #43	@ 0x2b
 8001e54:	f7ff ff5c 	bl	8001d10 <Displ_WriteCommand>
	Displ_WriteData(data, 4,0);
 8001e58:	2200      	movs	r2, #0
 8001e5a:	2104      	movs	r1, #4
 8001e5c:	4804      	ldr	r0, [pc, #16]	@ (8001e70 <Displ_SetAddressWindow+0x90>)
 8001e5e:	f7ff ff66 	bl	8001d2e <Displ_WriteData>
	Displ_WriteCommand(ILI9XXX_MEMWR);
 8001e62:	202c      	movs	r0, #44	@ 0x2c
 8001e64:	f7ff ff54 	bl	8001d10 <Displ_WriteCommand>
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd90      	pop	{r4, r7, pc}
 8001e70:	20008478 	.word	0x20008478

08001e74 <Displ_Init>:

/*****************************************************
 * @brief				first display initialization.
 * @param	orientation	display orientation
 *****************************************************/
void Displ_Init(Displ_Orientat_e orientation){
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	71fb      	strb	r3, [r7, #7]
	if (TOUCH_SPI==DISPL_SPI){													// if touch and display share the same SPI port
		HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET); 		// unselect display (will be selected at writing time)
 8001e7e:	2201      	movs	r2, #1
 8001e80:	2180      	movs	r1, #128	@ 0x80
 8001e82:	4809      	ldr	r0, [pc, #36]	@ (8001ea8 <Displ_Init+0x34>)
 8001e84:	f001 fe6e 	bl	8003b64 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);		// unselect touch (will be selected at writing time)
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001e8e:	4806      	ldr	r0, [pc, #24]	@ (8001ea8 <Displ_Init+0x34>)
 8001e90:	f001 fe68 	bl	8003b64 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET); 	// select display
		SET_DISPL_SPI_BAUDRATE;
		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);	// select touch
		SET_TOUCH_SPI_BAUDRATE;
	}
	ILI9XXX_Init();
 8001e94:	f7ff ff62 	bl	8001d5c <ILI9XXX_Init>
	Displ_Orientation(orientation);
 8001e98:	79fb      	ldrb	r3, [r7, #7]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f000 f806 	bl	8001eac <Displ_Orientation>
}
 8001ea0:	bf00      	nop
 8001ea2:	3708      	adds	r7, #8
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40021000 	.word	0x40021000

08001eac <Displ_Orientation>:

/**********************************************
 * @brief		set orientation of the display
 * @param  	m	orientation
 **********************************************/
void Displ_Orientation(Displ_Orientat_e orientation){
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	71fb      	strb	r3, [r7, #7]
	static uint8_t data[1];
	switch(orientation) {
 8001eb6:	79fb      	ldrb	r3, [r7, #7]
 8001eb8:	2b03      	cmp	r3, #3
 8001eba:	d837      	bhi.n	8001f2c <Displ_Orientation+0x80>
 8001ebc:	a201      	add	r2, pc, #4	@ (adr r2, 8001ec4 <Displ_Orientation+0x18>)
 8001ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ec2:	bf00      	nop
 8001ec4:	08001ed5 	.word	0x08001ed5
 8001ec8:	08001eeb 	.word	0x08001eeb
 8001ecc:	08001f01 	.word	0x08001f01
 8001ed0:	08001f17 	.word	0x08001f17
		case Displ_Orientat_0:
			data[0]=ILI9XXX_MADCTL_0DEG;
 8001ed4:	4b1d      	ldr	r3, [pc, #116]	@ (8001f4c <Displ_Orientation+0xa0>)
 8001ed6:	2288      	movs	r2, #136	@ 0x88
 8001ed8:	701a      	strb	r2, [r3, #0]
			_height = DISPL_HEIGHT;
 8001eda:	4b1d      	ldr	r3, [pc, #116]	@ (8001f50 <Displ_Orientation+0xa4>)
 8001edc:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001ee0:	801a      	strh	r2, [r3, #0]
			_width = DISPL_WIDTH;
 8001ee2:	4b1c      	ldr	r3, [pc, #112]	@ (8001f54 <Displ_Orientation+0xa8>)
 8001ee4:	22f0      	movs	r2, #240	@ 0xf0
 8001ee6:	801a      	strh	r2, [r3, #0]
			break;
 8001ee8:	e020      	b.n	8001f2c <Displ_Orientation+0x80>
		case Displ_Orientat_90:
			data[0]=ILI9XXX_MADCTL_90DEG;
 8001eea:	4b18      	ldr	r3, [pc, #96]	@ (8001f4c <Displ_Orientation+0xa0>)
 8001eec:	22e8      	movs	r2, #232	@ 0xe8
 8001eee:	701a      	strb	r2, [r3, #0]
			_height = DISPL_WIDTH;
 8001ef0:	4b17      	ldr	r3, [pc, #92]	@ (8001f50 <Displ_Orientation+0xa4>)
 8001ef2:	22f0      	movs	r2, #240	@ 0xf0
 8001ef4:	801a      	strh	r2, [r3, #0]
			_width = DISPL_HEIGHT;
 8001ef6:	4b17      	ldr	r3, [pc, #92]	@ (8001f54 <Displ_Orientation+0xa8>)
 8001ef8:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001efc:	801a      	strh	r2, [r3, #0]
			break;
 8001efe:	e015      	b.n	8001f2c <Displ_Orientation+0x80>
		case Displ_Orientat_180:
			data[0]=ILI9XXX_MADCTL_180DEG;
 8001f00:	4b12      	ldr	r3, [pc, #72]	@ (8001f4c <Displ_Orientation+0xa0>)
 8001f02:	2248      	movs	r2, #72	@ 0x48
 8001f04:	701a      	strb	r2, [r3, #0]
			_height = DISPL_HEIGHT;
 8001f06:	4b12      	ldr	r3, [pc, #72]	@ (8001f50 <Displ_Orientation+0xa4>)
 8001f08:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001f0c:	801a      	strh	r2, [r3, #0]
			_width = DISPL_WIDTH;
 8001f0e:	4b11      	ldr	r3, [pc, #68]	@ (8001f54 <Displ_Orientation+0xa8>)
 8001f10:	22f0      	movs	r2, #240	@ 0xf0
 8001f12:	801a      	strh	r2, [r3, #0]
			break;
 8001f14:	e00a      	b.n	8001f2c <Displ_Orientation+0x80>
		case Displ_Orientat_270:
			data[0]=ILI9XXX_MADCTL_270DEG;
 8001f16:	4b0d      	ldr	r3, [pc, #52]	@ (8001f4c <Displ_Orientation+0xa0>)
 8001f18:	2228      	movs	r2, #40	@ 0x28
 8001f1a:	701a      	strb	r2, [r3, #0]
			_height = DISPL_WIDTH;
 8001f1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f50 <Displ_Orientation+0xa4>)
 8001f1e:	22f0      	movs	r2, #240	@ 0xf0
 8001f20:	801a      	strh	r2, [r3, #0]
			_width = DISPL_HEIGHT;
 8001f22:	4b0c      	ldr	r3, [pc, #48]	@ (8001f54 <Displ_Orientation+0xa8>)
 8001f24:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001f28:	801a      	strh	r2, [r3, #0]
			break;
 8001f2a:	bf00      	nop
	}
	Displ_WriteCommand(ILI9XXX_MADCTL);
 8001f2c:	2036      	movs	r0, #54	@ 0x36
 8001f2e:	f7ff feef 	bl	8001d10 <Displ_WriteCommand>
	Displ_WriteData(data,1,0);
 8001f32:	2200      	movs	r2, #0
 8001f34:	2101      	movs	r1, #1
 8001f36:	4805      	ldr	r0, [pc, #20]	@ (8001f4c <Displ_Orientation+0xa0>)
 8001f38:	f7ff fef9 	bl	8001d2e <Displ_WriteData>
	current_orientation = orientation;  //stores active orientation into a global variable for touch routines
 8001f3c:	4a06      	ldr	r2, [pc, #24]	@ (8001f58 <Displ_Orientation+0xac>)
 8001f3e:	79fb      	ldrb	r3, [r7, #7]
 8001f40:	7013      	strb	r3, [r2, #0]
}
 8001f42:	bf00      	nop
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	2000847c 	.word	0x2000847c
 8001f50:	20000474 	.word	0x20000474
 8001f54:	20000472 	.word	0x20000472
 8001f58:	20000470 	.word	0x20000470

08001f5c <HAL_SPI_ErrorCallback>:




void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi){
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
	if (hspi->Instance==DISPL_SPI) {
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a05      	ldr	r2, [pc, #20]	@ (8001f80 <HAL_SPI_ErrorCallback+0x24>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d102      	bne.n	8001f74 <HAL_SPI_ErrorCallback+0x18>
		Displ_SpiAvailable=1;
 8001f6e:	4b05      	ldr	r3, [pc, #20]	@ (8001f84 <HAL_SPI_ErrorCallback+0x28>)
 8001f70:	2201      	movs	r2, #1
 8001f72:	701a      	strb	r2, [r3, #0]
	}
}
 8001f74:	bf00      	nop
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	40013400 	.word	0x40013400
 8001f84:	20000010 	.word	0x20000010

08001f88 <Displ_FillArea>:
/*****************************
 * @brief	fill a rectangle with a color
 * @param	x, y	top left corner of the rectangle
 * 			w, h 	width and height of the rectangle
 ******************************/
void Displ_FillArea(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8001f88:	b590      	push	{r4, r7, lr}
 8001f8a:	b08b      	sub	sp, #44	@ 0x2c
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	4604      	mov	r4, r0
 8001f90:	4608      	mov	r0, r1
 8001f92:	4611      	mov	r1, r2
 8001f94:	461a      	mov	r2, r3
 8001f96:	4623      	mov	r3, r4
 8001f98:	80fb      	strh	r3, [r7, #6]
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	80bb      	strh	r3, [r7, #4]
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	807b      	strh	r3, [r7, #2]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	803b      	strh	r3, [r7, #0]
 * -	swap buffers
 */

	uint32_t k,x1,y1,area,times;

	if((x >= _width) || (y >= _height) || (w == 0) || (h == 0)) return;//
 8001fa6:	88fb      	ldrh	r3, [r7, #6]
 8001fa8:	4a4f      	ldr	r2, [pc, #316]	@ (80020e8 <Displ_FillArea+0x160>)
 8001faa:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	f280 8096 	bge.w	80020e0 <Displ_FillArea+0x158>
 8001fb4:	88bb      	ldrh	r3, [r7, #4]
 8001fb6:	4a4d      	ldr	r2, [pc, #308]	@ (80020ec <Displ_FillArea+0x164>)
 8001fb8:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	f280 808f 	bge.w	80020e0 <Displ_FillArea+0x158>
 8001fc2:	887b      	ldrh	r3, [r7, #2]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	f000 808b 	beq.w	80020e0 <Displ_FillArea+0x158>
 8001fca:	883b      	ldrh	r3, [r7, #0]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	f000 8087 	beq.w	80020e0 <Displ_FillArea+0x158>

	x1=x + w - 1;
 8001fd2:	88fa      	ldrh	r2, [r7, #6]
 8001fd4:	887b      	ldrh	r3, [r7, #2]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	623b      	str	r3, [r7, #32]
	if (x1 > _width) {
 8001fdc:	4b42      	ldr	r3, [pc, #264]	@ (80020e8 <Displ_FillArea+0x160>)
 8001fde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	6a3b      	ldr	r3, [r7, #32]
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d903      	bls.n	8001ff2 <Displ_FillArea+0x6a>
		x1=_width;
 8001fea:	4b3f      	ldr	r3, [pc, #252]	@ (80020e8 <Displ_FillArea+0x160>)
 8001fec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ff0:	623b      	str	r3, [r7, #32]
	}

	y1=y + h - 1;
 8001ff2:	88ba      	ldrh	r2, [r7, #4]
 8001ff4:	883b      	ldrh	r3, [r7, #0]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	61fb      	str	r3, [r7, #28]
	if (y1 > _height) {
 8001ffc:	4b3b      	ldr	r3, [pc, #236]	@ (80020ec <Displ_FillArea+0x164>)
 8001ffe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002002:	461a      	mov	r2, r3
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	4293      	cmp	r3, r2
 8002008:	d903      	bls.n	8002012 <Displ_FillArea+0x8a>
		y1=_height;
 800200a:	4b38      	ldr	r3, [pc, #224]	@ (80020ec <Displ_FillArea+0x164>)
 800200c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002010:	61fb      	str	r3, [r7, #28]
// SETUP DISPLAY DATA BUFFER TO TRANSFER
#ifdef Z_RGB565 // setting up dispBuffer in RGB565 format

	uint32_t data32;

	data32=(color>>8) | (color<<8) | (color<<24); 	// supposing color is 0xABCD, data32 becomes 0xCDABCDAB - set a 32 bit variable with swapped endians
 8002012:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8002014:	0a1b      	lsrs	r3, r3, #8
 8002016:	b29b      	uxth	r3, r3
 8002018:	461a      	mov	r2, r3
 800201a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800201c:	021b      	lsls	r3, r3, #8
 800201e:	431a      	orrs	r2, r3
 8002020:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8002022:	061b      	lsls	r3, r3, #24
 8002024:	4313      	orrs	r3, r2
 8002026:	613b      	str	r3, [r7, #16]
	area=((y1-y+1)*(x1-x+1)); 						// area to fill in 16bit pixels
 8002028:	88bb      	ldrh	r3, [r7, #4]
 800202a:	69fa      	ldr	r2, [r7, #28]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	3301      	adds	r3, #1
 8002030:	88fa      	ldrh	r2, [r7, #6]
 8002032:	6a39      	ldr	r1, [r7, #32]
 8002034:	1a8a      	subs	r2, r1, r2
 8002036:	3201      	adds	r2, #1
 8002038:	fb02 f303 	mul.w	r3, r2, r3
 800203c:	60fb      	str	r3, [r7, #12]
	uint32_t *buf32Pos=(uint32_t *)dispBuffer; 		//dispBuffer defined in bytes, buf32Pos access it as 32 bit words
 800203e:	4b2c      	ldr	r3, [pc, #176]	@ (80020f0 <Displ_FillArea+0x168>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	617b      	str	r3, [r7, #20]
	if (area<(SIZEBUF>>1)) 							// if area is smaller than dispBuffer
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800204a:	d204      	bcs.n	8002056 <Displ_FillArea+0xce>
		times=(area>>1)+1; 							// number of times data32 has to be loaded into buffer
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	085b      	lsrs	r3, r3, #1
 8002050:	3301      	adds	r3, #1
 8002052:	61bb      	str	r3, [r7, #24]
 8002054:	e002      	b.n	800205c <Displ_FillArea+0xd4>
	else
		times=(SIZEBUF>>2);  						// dispBuffer size as 32bit-words
 8002056:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800205a:	61bb      	str	r3, [r7, #24]
	for (k = 0; k < times; k++)
 800205c:	2300      	movs	r3, #0
 800205e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002060:	e007      	b.n	8002072 <Displ_FillArea+0xea>
		*(buf32Pos++)=data32; 						// loads buffer moving 32bit-words
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	1d1a      	adds	r2, r3, #4
 8002066:	617a      	str	r2, [r7, #20]
 8002068:	693a      	ldr	r2, [r7, #16]
 800206a:	601a      	str	r2, [r3, #0]
	for (k = 0; k < times; k++)
 800206c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800206e:	3301      	adds	r3, #1
 8002070:	627b      	str	r3, [r7, #36]	@ 0x24
 8002072:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	429a      	cmp	r2, r3
 8002078:	d3f3      	bcc.n	8002062 <Displ_FillArea+0xda>
	}
	datasize=(buf8Pos-dispBuffer);
#endif

//START WRITING TO DISPLAY
	Displ_SetAddressWindow(x, y, x1, y1);
 800207a:	6a3b      	ldr	r3, [r7, #32]
 800207c:	b29a      	uxth	r2, r3
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	b29b      	uxth	r3, r3
 8002082:	88b9      	ldrh	r1, [r7, #4]
 8002084:	88f8      	ldrh	r0, [r7, #6]
 8002086:	f7ff feab 	bl	8001de0 <Displ_SetAddressWindow>

#ifdef Z_RGB565 // transferring RGB666 format dispBuffer
	times=(area>>(BUFLEVEL-1));  					//how many times buffer must be sent via SPI. It is (BUFFLEVEL-1) because area is 16-bit while dispBuffer is 8-bit
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	0b5b      	lsrs	r3, r3, #13
 800208e:	61bb      	str	r3, [r7, #24]
	for  (k=0;k<times;k++) {
 8002090:	2300      	movs	r3, #0
 8002092:	627b      	str	r3, [r7, #36]	@ 0x24
 8002094:	e00a      	b.n	80020ac <Displ_FillArea+0x124>
		Displ_WriteData(dispBuffer,SIZEBUF,0);
 8002096:	4b16      	ldr	r3, [pc, #88]	@ (80020f0 <Displ_FillArea+0x168>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2200      	movs	r2, #0
 800209c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff fe44 	bl	8001d2e <Displ_WriteData>
	for  (k=0;k<times;k++) {
 80020a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a8:	3301      	adds	r3, #1
 80020aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80020ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d3f0      	bcc.n	8002096 <Displ_FillArea+0x10e>
	}
	Displ_WriteData(dispBuffer,(area<<1)-(times<<BUFLEVEL),0);
 80020b4:	4b0e      	ldr	r3, [pc, #56]	@ (80020f0 <Displ_FillArea+0x168>)
 80020b6:	6818      	ldr	r0, [r3, #0]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	005a      	lsls	r2, r3, #1
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	039b      	lsls	r3, r3, #14
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2200      	movs	r2, #0
 80020c4:	4619      	mov	r1, r3
 80020c6:	f7ff fe32 	bl	8001d2e <Displ_WriteData>
	}
	Displ_WriteData(dispBuffer,(area-times*datasize),0);      //transfer last data frame
#endif

//BUFFER SWAP
	dispBuffer = (dispBuffer==dispBuffer1 ? dispBuffer2 : dispBuffer1); // swapping buffer
 80020ca:	4b09      	ldr	r3, [pc, #36]	@ (80020f0 <Displ_FillArea+0x168>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a09      	ldr	r2, [pc, #36]	@ (80020f4 <Displ_FillArea+0x16c>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d101      	bne.n	80020d8 <Displ_FillArea+0x150>
 80020d4:	4b08      	ldr	r3, [pc, #32]	@ (80020f8 <Displ_FillArea+0x170>)
 80020d6:	e000      	b.n	80020da <Displ_FillArea+0x152>
 80020d8:	4b06      	ldr	r3, [pc, #24]	@ (80020f4 <Displ_FillArea+0x16c>)
 80020da:	4a05      	ldr	r2, [pc, #20]	@ (80020f0 <Displ_FillArea+0x168>)
 80020dc:	6013      	str	r3, [r2, #0]
 80020de:	e000      	b.n	80020e2 <Displ_FillArea+0x15a>
	if((x >= _width) || (y >= _height) || (w == 0) || (h == 0)) return;//
 80020e0:	bf00      	nop

}
 80020e2:	372c      	adds	r7, #44	@ 0x2c
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd90      	pop	{r4, r7, pc}
 80020e8:	20000472 	.word	0x20000472
 80020ec:	20000474 	.word	0x20000474
 80020f0:	20000014 	.word	0x20000014
 80020f4:	20000478 	.word	0x20000478
 80020f8:	20004478 	.word	0x20004478

080020fc <Displ_CLS>:

/*****************
 * @brief	clear display with a color.
 * @param	bgcolor
 *****************/
void Displ_CLS(uint16_t bgcolor){
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af02      	add	r7, sp, #8
 8002102:	4603      	mov	r3, r0
 8002104:	80fb      	strh	r3, [r7, #6]
	Displ_FillArea(0, 0, _width, _height, bgcolor);
 8002106:	4b09      	ldr	r3, [pc, #36]	@ (800212c <Displ_CLS+0x30>)
 8002108:	f9b3 3000 	ldrsh.w	r3, [r3]
 800210c:	b29a      	uxth	r2, r3
 800210e:	4b08      	ldr	r3, [pc, #32]	@ (8002130 <Displ_CLS+0x34>)
 8002110:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002114:	b299      	uxth	r1, r3
 8002116:	88fb      	ldrh	r3, [r7, #6]
 8002118:	9300      	str	r3, [sp, #0]
 800211a:	460b      	mov	r3, r1
 800211c:	2100      	movs	r1, #0
 800211e:	2000      	movs	r0, #0
 8002120:	f7ff ff32 	bl	8001f88 <Displ_FillArea>
}
 8002124:	bf00      	nop
 8002126:	3708      	adds	r7, #8
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	20000472 	.word	0x20000472
 8002130:	20000474 	.word	0x20000474

08002134 <Displ_Line>:

/************************************************************************
 * @brief	draws a line from "x0","y0" to "x1","y1" of the given "color"
 ************************************************************************/
void Displ_Line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8002134:	b590      	push	{r4, r7, lr}
 8002136:	b08b      	sub	sp, #44	@ 0x2c
 8002138:	af02      	add	r7, sp, #8
 800213a:	4604      	mov	r4, r0
 800213c:	4608      	mov	r0, r1
 800213e:	4611      	mov	r1, r2
 8002140:	461a      	mov	r2, r3
 8002142:	4623      	mov	r3, r4
 8002144:	80fb      	strh	r3, [r7, #6]
 8002146:	4603      	mov	r3, r0
 8002148:	80bb      	strh	r3, [r7, #4]
 800214a:	460b      	mov	r3, r1
 800214c:	807b      	strh	r3, [r7, #2]
 800214e:	4613      	mov	r3, r2
 8002150:	803b      	strh	r3, [r7, #0]
	int16_t l,x,steep,ystep,err,dx, dy;

    if (x0==x1){  // fast solve vertical lines
 8002152:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002156:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800215a:	429a      	cmp	r2, r3
 800215c:	d123      	bne.n	80021a6 <Displ_Line+0x72>
    	if (y1>y0){
 800215e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8002162:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002166:	429a      	cmp	r2, r3
 8002168:	dd0e      	ble.n	8002188 <Displ_Line+0x54>
    		Displ_FillArea(x0, y0, 1, y1-y0+1, color);
 800216a:	88f8      	ldrh	r0, [r7, #6]
 800216c:	88b9      	ldrh	r1, [r7, #4]
 800216e:	883a      	ldrh	r2, [r7, #0]
 8002170:	88bb      	ldrh	r3, [r7, #4]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	b29b      	uxth	r3, r3
 8002176:	3301      	adds	r3, #1
 8002178:	b29a      	uxth	r2, r3
 800217a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800217c:	9300      	str	r3, [sp, #0]
 800217e:	4613      	mov	r3, r2
 8002180:	2201      	movs	r2, #1
 8002182:	f7ff ff01 	bl	8001f88 <Displ_FillArea>
    	}
    	else {
    		Displ_FillArea(x0, y1, 1, y0-y1+1, color);
    	}
    	return;
 8002186:	e103      	b.n	8002390 <Displ_Line+0x25c>
    		Displ_FillArea(x0, y1, 1, y0-y1+1, color);
 8002188:	88f8      	ldrh	r0, [r7, #6]
 800218a:	8839      	ldrh	r1, [r7, #0]
 800218c:	88ba      	ldrh	r2, [r7, #4]
 800218e:	883b      	ldrh	r3, [r7, #0]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	b29b      	uxth	r3, r3
 8002194:	3301      	adds	r3, #1
 8002196:	b29a      	uxth	r2, r3
 8002198:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800219a:	9300      	str	r3, [sp, #0]
 800219c:	4613      	mov	r3, r2
 800219e:	2201      	movs	r2, #1
 80021a0:	f7ff fef2 	bl	8001f88 <Displ_FillArea>
    	return;
 80021a4:	e0f4      	b.n	8002390 <Displ_Line+0x25c>
    }
    if (y0==y1){ // fast solve horizontal lines
 80021a6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80021aa:	f9b7 3000 	ldrsh.w	r3, [r7]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d121      	bne.n	80021f6 <Displ_Line+0xc2>
    	if (x1>x0)
 80021b2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80021b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	dd0d      	ble.n	80021da <Displ_Line+0xa6>
    		Displ_FillArea(x0, y0, x1-x0+1, 1, color);
 80021be:	88f8      	ldrh	r0, [r7, #6]
 80021c0:	88b9      	ldrh	r1, [r7, #4]
 80021c2:	887a      	ldrh	r2, [r7, #2]
 80021c4:	88fb      	ldrh	r3, [r7, #6]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	3301      	adds	r3, #1
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80021d0:	9300      	str	r3, [sp, #0]
 80021d2:	2301      	movs	r3, #1
 80021d4:	f7ff fed8 	bl	8001f88 <Displ_FillArea>
    	else
    		Displ_FillArea(x1, y1, x0-x1+1, 1, color);
    	return;
 80021d8:	e0da      	b.n	8002390 <Displ_Line+0x25c>
    		Displ_FillArea(x1, y1, x0-x1+1, 1, color);
 80021da:	8878      	ldrh	r0, [r7, #2]
 80021dc:	8839      	ldrh	r1, [r7, #0]
 80021de:	88fa      	ldrh	r2, [r7, #6]
 80021e0:	887b      	ldrh	r3, [r7, #2]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	3301      	adds	r3, #1
 80021e8:	b29a      	uxth	r2, r3
 80021ea:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80021ec:	9300      	str	r3, [sp, #0]
 80021ee:	2301      	movs	r3, #1
 80021f0:	f7ff feca 	bl	8001f88 <Displ_FillArea>
    	return;
 80021f4:	e0cc      	b.n	8002390 <Displ_Line+0x25c>
    }

    steep = (y1>y0 ? y1-y0 : y0-y1) > (x1>x0 ? x1-x0 : x0-x1);
 80021f6:	f9b7 2000 	ldrsh.w	r2, [r7]
 80021fa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80021fe:	429a      	cmp	r2, r3
 8002200:	dd05      	ble.n	800220e <Displ_Line+0xda>
 8002202:	f9b7 2000 	ldrsh.w	r2, [r7]
 8002206:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800220a:	1ad2      	subs	r2, r2, r3
 800220c:	e004      	b.n	8002218 <Displ_Line+0xe4>
 800220e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002212:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002216:	1ad2      	subs	r2, r2, r3
 8002218:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800221c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002220:	4299      	cmp	r1, r3
 8002222:	dd05      	ble.n	8002230 <Displ_Line+0xfc>
 8002224:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8002228:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800222c:	1acb      	subs	r3, r1, r3
 800222e:	e004      	b.n	800223a <Displ_Line+0x106>
 8002230:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8002234:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002238:	1acb      	subs	r3, r1, r3
 800223a:	429a      	cmp	r2, r3
 800223c:	bfcc      	ite	gt
 800223e:	2301      	movgt	r3, #1
 8002240:	2300      	movle	r3, #0
 8002242:	b2db      	uxtb	r3, r3
 8002244:	82bb      	strh	r3, [r7, #20]

    if (steep) {
 8002246:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d00b      	beq.n	8002266 <Displ_Line+0x132>
        _swap_int16_t(x0, y0);
 800224e:	88fb      	ldrh	r3, [r7, #6]
 8002250:	827b      	strh	r3, [r7, #18]
 8002252:	88bb      	ldrh	r3, [r7, #4]
 8002254:	80fb      	strh	r3, [r7, #6]
 8002256:	8a7b      	ldrh	r3, [r7, #18]
 8002258:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
 800225a:	887b      	ldrh	r3, [r7, #2]
 800225c:	823b      	strh	r3, [r7, #16]
 800225e:	883b      	ldrh	r3, [r7, #0]
 8002260:	807b      	strh	r3, [r7, #2]
 8002262:	8a3b      	ldrh	r3, [r7, #16]
 8002264:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
 8002266:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800226a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800226e:	429a      	cmp	r2, r3
 8002270:	dd0b      	ble.n	800228a <Displ_Line+0x156>
        _swap_int16_t(x0, x1);
 8002272:	88fb      	ldrh	r3, [r7, #6]
 8002274:	81fb      	strh	r3, [r7, #14]
 8002276:	887b      	ldrh	r3, [r7, #2]
 8002278:	80fb      	strh	r3, [r7, #6]
 800227a:	89fb      	ldrh	r3, [r7, #14]
 800227c:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
 800227e:	88bb      	ldrh	r3, [r7, #4]
 8002280:	81bb      	strh	r3, [r7, #12]
 8002282:	883b      	ldrh	r3, [r7, #0]
 8002284:	80bb      	strh	r3, [r7, #4]
 8002286:	89bb      	ldrh	r3, [r7, #12]
 8002288:	803b      	strh	r3, [r7, #0]
    }

    dx = x1 - x0;
 800228a:	887a      	ldrh	r2, [r7, #2]
 800228c:	88fb      	ldrh	r3, [r7, #6]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	b29b      	uxth	r3, r3
 8002292:	817b      	strh	r3, [r7, #10]
    err = dx >> 1;
 8002294:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002298:	105b      	asrs	r3, r3, #1
 800229a:	833b      	strh	r3, [r7, #24]
    if (y0 < y1) {
 800229c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80022a0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	da07      	bge.n	80022b8 <Displ_Line+0x184>
        dy = y1-y0;
 80022a8:	883a      	ldrh	r2, [r7, #0]
 80022aa:	88bb      	ldrh	r3, [r7, #4]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	82fb      	strh	r3, [r7, #22]
        ystep =  1 ;
 80022b2:	2301      	movs	r3, #1
 80022b4:	837b      	strh	r3, [r7, #26]
 80022b6:	e007      	b.n	80022c8 <Displ_Line+0x194>
    } else {
        dy = y0-y1;
 80022b8:	88ba      	ldrh	r2, [r7, #4]
 80022ba:	883b      	ldrh	r3, [r7, #0]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	b29b      	uxth	r3, r3
 80022c0:	82fb      	strh	r3, [r7, #22]
        ystep =  -1 ;
 80022c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80022c6:	837b      	strh	r3, [r7, #26]
    }

    l=00;
 80022c8:	2300      	movs	r3, #0
 80022ca:	83fb      	strh	r3, [r7, #30]
    for (x=x0; x<=x1; x++) {
 80022cc:	88fb      	ldrh	r3, [r7, #6]
 80022ce:	83bb      	strh	r3, [r7, #28]
 80022d0:	e03a      	b.n	8002348 <Displ_Line+0x214>
    	l++;
 80022d2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	3301      	adds	r3, #1
 80022da:	b29b      	uxth	r3, r3
 80022dc:	83fb      	strh	r3, [r7, #30]
        err -= dy;
 80022de:	8b3a      	ldrh	r2, [r7, #24]
 80022e0:	8afb      	ldrh	r3, [r7, #22]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	833b      	strh	r3, [r7, #24]
        if (err < 0) {
 80022e8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	da25      	bge.n	800233c <Displ_Line+0x208>
        	if (steep) {
 80022f0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d009      	beq.n	800230c <Displ_Line+0x1d8>
        		Displ_FillArea(y0, x0, 1, l, color);
 80022f8:	88b8      	ldrh	r0, [r7, #4]
 80022fa:	88f9      	ldrh	r1, [r7, #6]
 80022fc:	8bfa      	ldrh	r2, [r7, #30]
 80022fe:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002300:	9300      	str	r3, [sp, #0]
 8002302:	4613      	mov	r3, r2
 8002304:	2201      	movs	r2, #1
 8002306:	f7ff fe3f 	bl	8001f88 <Displ_FillArea>
 800230a:	e007      	b.n	800231c <Displ_Line+0x1e8>
            } else {
            	Displ_FillArea(x0, y0, l, 1, color);
 800230c:	88f8      	ldrh	r0, [r7, #6]
 800230e:	88b9      	ldrh	r1, [r7, #4]
 8002310:	8bfa      	ldrh	r2, [r7, #30]
 8002312:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002314:	9300      	str	r3, [sp, #0]
 8002316:	2301      	movs	r3, #1
 8002318:	f7ff fe36 	bl	8001f88 <Displ_FillArea>
            }
            y0 += ystep;
 800231c:	88ba      	ldrh	r2, [r7, #4]
 800231e:	8b7b      	ldrh	r3, [r7, #26]
 8002320:	4413      	add	r3, r2
 8002322:	b29b      	uxth	r3, r3
 8002324:	80bb      	strh	r3, [r7, #4]
            l=0;
 8002326:	2300      	movs	r3, #0
 8002328:	83fb      	strh	r3, [r7, #30]
            x0=x+1;
 800232a:	8bbb      	ldrh	r3, [r7, #28]
 800232c:	3301      	adds	r3, #1
 800232e:	b29b      	uxth	r3, r3
 8002330:	80fb      	strh	r3, [r7, #6]
            err += dx;
 8002332:	8b3a      	ldrh	r2, [r7, #24]
 8002334:	897b      	ldrh	r3, [r7, #10]
 8002336:	4413      	add	r3, r2
 8002338:	b29b      	uxth	r3, r3
 800233a:	833b      	strh	r3, [r7, #24]
    for (x=x0; x<=x1; x++) {
 800233c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002340:	b29b      	uxth	r3, r3
 8002342:	3301      	adds	r3, #1
 8002344:	b29b      	uxth	r3, r3
 8002346:	83bb      	strh	r3, [r7, #28]
 8002348:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800234c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002350:	429a      	cmp	r2, r3
 8002352:	ddbe      	ble.n	80022d2 <Displ_Line+0x19e>
        }
    }
    if (l!=0){
 8002354:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d019      	beq.n	8002390 <Displ_Line+0x25c>
    	if (steep) {
 800235c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d00b      	beq.n	800237c <Displ_Line+0x248>
    		Displ_FillArea(y0, x0, 1, l-1, color);
 8002364:	88b8      	ldrh	r0, [r7, #4]
 8002366:	88f9      	ldrh	r1, [r7, #6]
 8002368:	8bfb      	ldrh	r3, [r7, #30]
 800236a:	3b01      	subs	r3, #1
 800236c:	b29a      	uxth	r2, r3
 800236e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002370:	9300      	str	r3, [sp, #0]
 8002372:	4613      	mov	r3, r2
 8002374:	2201      	movs	r2, #1
 8002376:	f7ff fe07 	bl	8001f88 <Displ_FillArea>
 800237a:	e009      	b.n	8002390 <Displ_Line+0x25c>
    	} else {
    		Displ_FillArea(x0, y0, l-1,1, color);
 800237c:	88f8      	ldrh	r0, [r7, #6]
 800237e:	88b9      	ldrh	r1, [r7, #4]
 8002380:	8bfb      	ldrh	r3, [r7, #30]
 8002382:	3b01      	subs	r3, #1
 8002384:	b29a      	uxth	r2, r3
 8002386:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002388:	9300      	str	r3, [sp, #0]
 800238a:	2301      	movs	r3, #1
 800238c:	f7ff fdfc 	bl	8001f88 <Displ_FillArea>
    	}
    }
}
 8002390:	3724      	adds	r7, #36	@ 0x24
 8002392:	46bd      	mov	sp, r7
 8002394:	bd90      	pop	{r4, r7, pc}
	...

08002398 <Displ_WChar>:
 * @brief	display one character on the display
 * @param 	x,y: top left corner of the character to be printed
 * 			ch, font, color, bgcolor: as per parameter name
 * 			size: (1 or 2) single or double wided printing
 **********************/
void Displ_WChar(uint16_t x, uint16_t y, char ch, sFONT font, uint8_t size, uint16_t color, uint16_t bgcolor) {
 8002398:	b082      	sub	sp, #8
 800239a:	b590      	push	{r4, r7, lr}
 800239c:	b08d      	sub	sp, #52	@ 0x34
 800239e:	af00      	add	r7, sp, #0
 80023a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80023a2:	4603      	mov	r3, r0
 80023a4:	80fb      	strh	r3, [r7, #6]
 80023a6:	460b      	mov	r3, r1
 80023a8:	80bb      	strh	r3, [r7, #4]
 80023aa:	4613      	mov	r3, r2
 80023ac:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, bytes, j, bufSize, mask;

    const uint8_t *pos;
	uint8_t wsize=font.Width; //printing char width
 80023ae:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80023b2:	76fb      	strb	r3, [r7, #27]

	if (size==2)
 80023b4:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d102      	bne.n	80023c2 <Displ_WChar+0x2a>
		wsize<<= 1;
 80023bc:	7efb      	ldrb	r3, [r7, #27]
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	76fb      	strb	r3, [r7, #27]
	bufSize=0;
 80023c2:	2300      	movs	r3, #0
 80023c4:	623b      	str	r3, [r7, #32]
	bytes=font.Height * font.Size ;
 80023c6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80023ca:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 80023ce:	fb02 f303 	mul.w	r3, r2, r3
 80023d2:	617b      	str	r3, [r7, #20]
	pos=font.table+(ch - 32) * bytes ;//that's char position in table
 80023d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80023d6:	78fb      	ldrb	r3, [r7, #3]
 80023d8:	3b20      	subs	r3, #32
 80023da:	4619      	mov	r1, r3
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	fb01 f303 	mul.w	r3, r1, r3
 80023e2:	4413      	add	r3, r2
 80023e4:	613b      	str	r3, [r7, #16]
	switch (font.Size) {
 80023e6:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d005      	beq.n	80023fa <Displ_WChar+0x62>
 80023ee:	2b03      	cmp	r3, #3
 80023f0:	d107      	bne.n	8002402 <Displ_WChar+0x6a>
		case 3:
			mask=0x800000;
 80023f2:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80023f6:	61fb      	str	r3, [r7, #28]
			break;
 80023f8:	e005      	b.n	8002406 <Displ_WChar+0x6e>
		case 2:
			mask=0x8000;
 80023fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80023fe:	61fb      	str	r3, [r7, #28]
			break;
 8002400:	e001      	b.n	8002406 <Displ_WChar+0x6e>
		default:
			mask=0x80;
 8002402:	2380      	movs	r3, #128	@ 0x80
 8002404:	61fb      	str	r3, [r7, #28]
	}

#ifdef Z_RGB565

	uint16_t color1, bgcolor1;
	uint16_t *dispBuffer16=(uint16_t *)dispBuffer;
 8002406:	4b60      	ldr	r3, [pc, #384]	@ (8002588 <Displ_WChar+0x1f0>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	60fb      	str	r3, [r7, #12]

	color1 = ((color & 0xFF)<<8 | (color >> 8));      		//swapping byte endian: STM32 is little endian, ST7735 is big endian
 800240c:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	@ 0x54
 8002410:	021b      	lsls	r3, r3, #8
 8002412:	b21a      	sxth	r2, r3
 8002414:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8002418:	0a1b      	lsrs	r3, r3, #8
 800241a:	b29b      	uxth	r3, r3
 800241c:	b21b      	sxth	r3, r3
 800241e:	4313      	orrs	r3, r2
 8002420:	b21b      	sxth	r3, r3
 8002422:	817b      	strh	r3, [r7, #10]
	bgcolor1 = ((bgcolor & 0xFF)<<8 | (bgcolor >> 8));		//swapping byte endian: STM32 is little endian, ST7735 is big endian
 8002424:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	@ 0x58
 8002428:	021b      	lsls	r3, r3, #8
 800242a:	b21a      	sxth	r2, r3
 800242c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8002430:	0a1b      	lsrs	r3, r3, #8
 8002432:	b29b      	uxth	r3, r3
 8002434:	b21b      	sxth	r3, r3
 8002436:	4313      	orrs	r3, r2
 8002438:	b21b      	sxth	r3, r3
 800243a:	813b      	strh	r3, [r7, #8]

	for(i = 0; i < (bytes); i+=font.Size){
 800243c:	2300      	movs	r3, #0
 800243e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002440:	e06f      	b.n	8002522 <Displ_WChar+0x18a>
		b=0;
 8002442:	2300      	movs	r3, #0
 8002444:	62bb      	str	r3, [r7, #40]	@ 0x28
		switch (font.Size) {
 8002446:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800244a:	2b02      	cmp	r3, #2
 800244c:	d015      	beq.n	800247a <Displ_WChar+0xe2>
 800244e:	2b03      	cmp	r3, #3
 8002450:	d120      	bne.n	8002494 <Displ_WChar+0xfc>
			case 3:
				b=pos[i]<<16 | pos[i+1]<<8 | pos[i+2];
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002456:	4413      	add	r3, r2
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	041a      	lsls	r2, r3, #16
 800245c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800245e:	3301      	adds	r3, #1
 8002460:	6939      	ldr	r1, [r7, #16]
 8002462:	440b      	add	r3, r1
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	021b      	lsls	r3, r3, #8
 8002468:	4313      	orrs	r3, r2
 800246a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800246c:	3202      	adds	r2, #2
 800246e:	6939      	ldr	r1, [r7, #16]
 8002470:	440a      	add	r2, r1
 8002472:	7812      	ldrb	r2, [r2, #0]
 8002474:	4313      	orrs	r3, r2
 8002476:	62bb      	str	r3, [r7, #40]	@ 0x28
				break;
 8002478:	e011      	b.n	800249e <Displ_WChar+0x106>
			case 2:
				b=pos[i]<<8 | pos[i+1];
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800247e:	4413      	add	r3, r2
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	021b      	lsls	r3, r3, #8
 8002484:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002486:	3201      	adds	r2, #1
 8002488:	6939      	ldr	r1, [r7, #16]
 800248a:	440a      	add	r2, r1
 800248c:	7812      	ldrb	r2, [r2, #0]
 800248e:	4313      	orrs	r3, r2
 8002490:	62bb      	str	r3, [r7, #40]	@ 0x28
				break;
 8002492:	e004      	b.n	800249e <Displ_WChar+0x106>
			default:
				b=pos[i];
 8002494:	693a      	ldr	r2, [r7, #16]
 8002496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002498:	4413      	add	r3, r2
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	62bb      	str	r3, [r7, #40]	@ 0x28
		}

		for(j = 0; j < font.Width; j++) {
 800249e:	2300      	movs	r3, #0
 80024a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80024a2:	e032      	b.n	800250a <Displ_WChar+0x172>
			if((b << j) & mask)  {
 80024a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80024a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a8:	409a      	lsls	r2, r3
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	4013      	ands	r3, r2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d014      	beq.n	80024dc <Displ_WChar+0x144>
				dispBuffer16[bufSize++] = color1;
 80024b2:	6a3b      	ldr	r3, [r7, #32]
 80024b4:	1c5a      	adds	r2, r3, #1
 80024b6:	623a      	str	r2, [r7, #32]
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	4413      	add	r3, r2
 80024be:	897a      	ldrh	r2, [r7, #10]
 80024c0:	801a      	strh	r2, [r3, #0]
				if (size==2){
 80024c2:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d11c      	bne.n	8002504 <Displ_WChar+0x16c>
					dispBuffer16[bufSize++] = color1;
 80024ca:	6a3b      	ldr	r3, [r7, #32]
 80024cc:	1c5a      	adds	r2, r3, #1
 80024ce:	623a      	str	r2, [r7, #32]
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	4413      	add	r3, r2
 80024d6:	897a      	ldrh	r2, [r7, #10]
 80024d8:	801a      	strh	r2, [r3, #0]
 80024da:	e013      	b.n	8002504 <Displ_WChar+0x16c>
				}
			} else {
				dispBuffer16[bufSize++] = bgcolor1;
 80024dc:	6a3b      	ldr	r3, [r7, #32]
 80024de:	1c5a      	adds	r2, r3, #1
 80024e0:	623a      	str	r2, [r7, #32]
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	68fa      	ldr	r2, [r7, #12]
 80024e6:	4413      	add	r3, r2
 80024e8:	893a      	ldrh	r2, [r7, #8]
 80024ea:	801a      	strh	r2, [r3, #0]
				if (size==2) {
 80024ec:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d107      	bne.n	8002504 <Displ_WChar+0x16c>
					dispBuffer16[bufSize++] = bgcolor1;
 80024f4:	6a3b      	ldr	r3, [r7, #32]
 80024f6:	1c5a      	adds	r2, r3, #1
 80024f8:	623a      	str	r2, [r7, #32]
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	4413      	add	r3, r2
 8002500:	893a      	ldrh	r2, [r7, #8]
 8002502:	801a      	strh	r2, [r3, #0]
		for(j = 0; j < font.Width; j++) {
 8002504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002506:	3301      	adds	r3, #1
 8002508:	627b      	str	r3, [r7, #36]	@ 0x24
 800250a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800250e:	461a      	mov	r2, r3
 8002510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002512:	4293      	cmp	r3, r2
 8002514:	d3c6      	bcc.n	80024a4 <Displ_WChar+0x10c>
	for(i = 0; i < (bytes); i+=font.Size){
 8002516:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800251a:	461a      	mov	r2, r3
 800251c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800251e:	4413      	add	r3, r2
 8002520:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002522:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	429a      	cmp	r2, r3
 8002528:	d38b      	bcc.n	8002442 <Displ_WChar+0xaa>
				}
			}
		}
	}
	bufSize<<=1;
 800252a:	6a3b      	ldr	r3, [r7, #32]
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	623b      	str	r3, [r7, #32]
			}
		}
	}
#endif

	Displ_SetAddressWindow(x, y, x+wsize-1, y+font.Height-1);
 8002530:	7efb      	ldrb	r3, [r7, #27]
 8002532:	b29a      	uxth	r2, r3
 8002534:	88fb      	ldrh	r3, [r7, #6]
 8002536:	4413      	add	r3, r2
 8002538:	b29b      	uxth	r3, r3
 800253a:	3b01      	subs	r3, #1
 800253c:	b29c      	uxth	r4, r3
 800253e:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8002542:	88bb      	ldrh	r3, [r7, #4]
 8002544:	4413      	add	r3, r2
 8002546:	b29b      	uxth	r3, r3
 8002548:	3b01      	subs	r3, #1
 800254a:	b29b      	uxth	r3, r3
 800254c:	88b9      	ldrh	r1, [r7, #4]
 800254e:	88f8      	ldrh	r0, [r7, #6]
 8002550:	4622      	mov	r2, r4
 8002552:	f7ff fc45 	bl	8001de0 <Displ_SetAddressWindow>
	Displ_WriteData(dispBuffer,bufSize,0);
 8002556:	4b0c      	ldr	r3, [pc, #48]	@ (8002588 <Displ_WChar+0x1f0>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2200      	movs	r2, #0
 800255c:	6a39      	ldr	r1, [r7, #32]
 800255e:	4618      	mov	r0, r3
 8002560:	f7ff fbe5 	bl	8001d2e <Displ_WriteData>
	dispBuffer = (dispBuffer==dispBuffer1 ? dispBuffer2 : dispBuffer1); // swapping buffer
 8002564:	4b08      	ldr	r3, [pc, #32]	@ (8002588 <Displ_WChar+0x1f0>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a08      	ldr	r2, [pc, #32]	@ (800258c <Displ_WChar+0x1f4>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d101      	bne.n	8002572 <Displ_WChar+0x1da>
 800256e:	4b08      	ldr	r3, [pc, #32]	@ (8002590 <Displ_WChar+0x1f8>)
 8002570:	e000      	b.n	8002574 <Displ_WChar+0x1dc>
 8002572:	4b06      	ldr	r3, [pc, #24]	@ (800258c <Displ_WChar+0x1f4>)
 8002574:	4a04      	ldr	r2, [pc, #16]	@ (8002588 <Displ_WChar+0x1f0>)
 8002576:	6013      	str	r3, [r2, #0]

}
 8002578:	bf00      	nop
 800257a:	3734      	adds	r7, #52	@ 0x34
 800257c:	46bd      	mov	sp, r7
 800257e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002582:	b002      	add	sp, #8
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	20000014 	.word	0x20000014
 800258c:	20000478 	.word	0x20000478
 8002590:	20004478 	.word	0x20004478

08002594 <Displ_WString>:
 * 			font	to bu used
 * 			size	1 (normal), 2 (double width)
 * 			color	font color
 * 			bgcolor	background color
 ************************/
void Displ_WString(uint16_t x, uint16_t y, const char* str, sFONT font, uint8_t size, uint16_t color, uint16_t bgcolor) {
 8002594:	b082      	sub	sp, #8
 8002596:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002598:	b08b      	sub	sp, #44	@ 0x2c
 800259a:	af06      	add	r7, sp, #24
 800259c:	603a      	str	r2, [r7, #0]
 800259e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025a0:	4603      	mov	r3, r0
 80025a2:	80fb      	strh	r3, [r7, #6]
 80025a4:	460b      	mov	r3, r1
 80025a6:	80bb      	strh	r3, [r7, #4]
	uint16_t delta=font.Width;
 80025a8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80025aa:	81fb      	strh	r3, [r7, #14]
	if (size>1)
 80025ac:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d922      	bls.n	80025fa <Displ_WString+0x66>
		delta<<=1;
 80025b4:	89fb      	ldrh	r3, [r7, #14]
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	81fb      	strh	r3, [r7, #14]

    while(*str) {
 80025ba:	e01e      	b.n	80025fa <Displ_WString+0x66>
                str++;
                continue;
            }
        }
 */
        Displ_WChar(x, y, *str, font, size, color, bgcolor);
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	781a      	ldrb	r2, [r3, #0]
 80025c0:	88bd      	ldrh	r5, [r7, #4]
 80025c2:	88fc      	ldrh	r4, [r7, #6]
 80025c4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80025c8:	9304      	str	r3, [sp, #16]
 80025ca:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80025cc:	9303      	str	r3, [sp, #12]
 80025ce:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80025d2:	9302      	str	r3, [sp, #8]
 80025d4:	466e      	mov	r6, sp
 80025d6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80025da:	e893 0003 	ldmia.w	r3, {r0, r1}
 80025de:	e886 0003 	stmia.w	r6, {r0, r1}
 80025e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025e4:	4629      	mov	r1, r5
 80025e6:	4620      	mov	r0, r4
 80025e8:	f7ff fed6 	bl	8002398 <Displ_WChar>
        x += delta;
 80025ec:	88fa      	ldrh	r2, [r7, #6]
 80025ee:	89fb      	ldrh	r3, [r7, #14]
 80025f0:	4413      	add	r3, r2
 80025f2:	80fb      	strh	r3, [r7, #6]
        str++;
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	3301      	adds	r3, #1
 80025f8:	603b      	str	r3, [r7, #0]
    while(*str) {
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1dc      	bne.n	80025bc <Displ_WString+0x28>
    }
}
 8002602:	bf00      	nop
 8002604:	bf00      	nop
 8002606:	3714      	adds	r7, #20
 8002608:	46bd      	mov	sp, r7
 800260a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800260e:	b002      	add	sp, #8
 8002610:	4770      	bx	lr
	...

08002614 <Displ_CString>:
 * 			font	to bu used
 * 			size	1 (normal), 2 (double width)
 * 			color	font color
 * 			bgcolor	background color
 ************************/
void Displ_CString(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, const char* str, sFONT font, uint8_t size, uint16_t color, uint16_t bgcolor) {
 8002614:	b5b0      	push	{r4, r5, r7, lr}
 8002616:	b08a      	sub	sp, #40	@ 0x28
 8002618:	af06      	add	r7, sp, #24
 800261a:	4604      	mov	r4, r0
 800261c:	4608      	mov	r0, r1
 800261e:	4611      	mov	r1, r2
 8002620:	461a      	mov	r2, r3
 8002622:	4623      	mov	r3, r4
 8002624:	80fb      	strh	r3, [r7, #6]
 8002626:	4603      	mov	r3, r0
 8002628:	80bb      	strh	r3, [r7, #4]
 800262a:	460b      	mov	r3, r1
 800262c:	807b      	strh	r3, [r7, #2]
 800262e:	4613      	mov	r3, r2
 8002630:	803b      	strh	r3, [r7, #0]
	uint16_t x,y;
	uint16_t wsize=font.Width;
 8002632:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002634:	817b      	strh	r3, [r7, #10]
	static uint8_t cambia=0;
	if (size>1)
 8002636:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800263a:	2b01      	cmp	r3, #1
 800263c:	d902      	bls.n	8002644 <Displ_CString+0x30>
		wsize<<=1;
 800263e:	897b      	ldrh	r3, [r7, #10]
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	817b      	strh	r3, [r7, #10]
	if ((strlen(str)*wsize)>(x1-x0+1))
 8002644:	6a38      	ldr	r0, [r7, #32]
 8002646:	f7fd fe1b 	bl	8000280 <strlen>
 800264a:	4602      	mov	r2, r0
 800264c:	897b      	ldrh	r3, [r7, #10]
 800264e:	fb02 f303 	mul.w	r3, r2, r3
 8002652:	8879      	ldrh	r1, [r7, #2]
 8002654:	88fa      	ldrh	r2, [r7, #6]
 8002656:	1a8a      	subs	r2, r1, r2
 8002658:	3201      	adds	r2, #1
 800265a:	4293      	cmp	r3, r2
 800265c:	d902      	bls.n	8002664 <Displ_CString+0x50>
		x=x0;
 800265e:	88fb      	ldrh	r3, [r7, #6]
 8002660:	81fb      	strh	r3, [r7, #14]
 8002662:	e00e      	b.n	8002682 <Displ_CString+0x6e>
	else
		x=(x1+x0+1-strlen(str)*wsize) >> 1;
 8002664:	887a      	ldrh	r2, [r7, #2]
 8002666:	88fb      	ldrh	r3, [r7, #6]
 8002668:	4413      	add	r3, r2
 800266a:	461c      	mov	r4, r3
 800266c:	6a38      	ldr	r0, [r7, #32]
 800266e:	f7fd fe07 	bl	8000280 <strlen>
 8002672:	4602      	mov	r2, r0
 8002674:	897b      	ldrh	r3, [r7, #10]
 8002676:	fb02 f303 	mul.w	r3, r2, r3
 800267a:	1ae3      	subs	r3, r4, r3
 800267c:	3301      	adds	r3, #1
 800267e:	085b      	lsrs	r3, r3, #1
 8002680:	81fb      	strh	r3, [r7, #14]
	if (font.Height>(y1-y0+1))
 8002682:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002684:	4619      	mov	r1, r3
 8002686:	883a      	ldrh	r2, [r7, #0]
 8002688:	88bb      	ldrh	r3, [r7, #4]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	3301      	adds	r3, #1
 800268e:	4299      	cmp	r1, r3
 8002690:	dd02      	ble.n	8002698 <Displ_CString+0x84>
		y=y0;
 8002692:	88bb      	ldrh	r3, [r7, #4]
 8002694:	81bb      	strh	r3, [r7, #12]
 8002696:	e007      	b.n	80026a8 <Displ_CString+0x94>
	else
		y=(y1+y0+1-font.Height) >> 1;
 8002698:	883a      	ldrh	r2, [r7, #0]
 800269a:	88bb      	ldrh	r3, [r7, #4]
 800269c:	4413      	add	r3, r2
 800269e:	3301      	adds	r3, #1
 80026a0:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80026a2:	1a9b      	subs	r3, r3, r2
 80026a4:	105b      	asrs	r3, r3, #1
 80026a6:	81bb      	strh	r3, [r7, #12]

	if (x>x0){
 80026a8:	89fa      	ldrh	r2, [r7, #14]
 80026aa:	88fb      	ldrh	r3, [r7, #6]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d912      	bls.n	80026d6 <Displ_CString+0xc2>
		Displ_FillArea(x0,y0,x-x0,y1-y0+1,bgcolor);
 80026b0:	89fa      	ldrh	r2, [r7, #14]
 80026b2:	88fb      	ldrh	r3, [r7, #6]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	b29c      	uxth	r4, r3
 80026b8:	883a      	ldrh	r2, [r7, #0]
 80026ba:	88bb      	ldrh	r3, [r7, #4]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	b29b      	uxth	r3, r3
 80026c0:	3301      	adds	r3, #1
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	88b9      	ldrh	r1, [r7, #4]
 80026c6:	88f8      	ldrh	r0, [r7, #6]
 80026c8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80026ca:	9300      	str	r3, [sp, #0]
 80026cc:	4613      	mov	r3, r2
 80026ce:	4622      	mov	r2, r4
 80026d0:	f7ff fc5a 	bl	8001f88 <Displ_FillArea>
 80026d4:	e001      	b.n	80026da <Displ_CString+0xc6>
	} else
		x=x0; // fixing here mistake could be due to roundings: x lower than x0.
 80026d6:	88fb      	ldrh	r3, [r7, #6]
 80026d8:	81fb      	strh	r3, [r7, #14]
	if (x1>(strlen(str)*wsize+x0))
 80026da:	887c      	ldrh	r4, [r7, #2]
 80026dc:	6a38      	ldr	r0, [r7, #32]
 80026de:	f7fd fdcf 	bl	8000280 <strlen>
 80026e2:	4602      	mov	r2, r0
 80026e4:	897b      	ldrh	r3, [r7, #10]
 80026e6:	fb03 f202 	mul.w	r2, r3, r2
 80026ea:	88fb      	ldrh	r3, [r7, #6]
 80026ec:	4413      	add	r3, r2
 80026ee:	429c      	cmp	r4, r3
 80026f0:	d91b      	bls.n	800272a <Displ_CString+0x116>
		Displ_FillArea(x1-x+x0-1,y0,x-x0+1,y1-y0+1,bgcolor);
 80026f2:	887a      	ldrh	r2, [r7, #2]
 80026f4:	89fb      	ldrh	r3, [r7, #14]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	b29a      	uxth	r2, r3
 80026fa:	88fb      	ldrh	r3, [r7, #6]
 80026fc:	4413      	add	r3, r2
 80026fe:	b29b      	uxth	r3, r3
 8002700:	3b01      	subs	r3, #1
 8002702:	b298      	uxth	r0, r3
 8002704:	89fa      	ldrh	r2, [r7, #14]
 8002706:	88fb      	ldrh	r3, [r7, #6]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	b29b      	uxth	r3, r3
 800270c:	3301      	adds	r3, #1
 800270e:	b29c      	uxth	r4, r3
 8002710:	883a      	ldrh	r2, [r7, #0]
 8002712:	88bb      	ldrh	r3, [r7, #4]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	b29b      	uxth	r3, r3
 8002718:	3301      	adds	r3, #1
 800271a:	b29a      	uxth	r2, r3
 800271c:	88b9      	ldrh	r1, [r7, #4]
 800271e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8002720:	9300      	str	r3, [sp, #0]
 8002722:	4613      	mov	r3, r2
 8002724:	4622      	mov	r2, r4
 8002726:	f7ff fc2f 	bl	8001f88 <Displ_FillArea>

	if (y>y0){
 800272a:	89ba      	ldrh	r2, [r7, #12]
 800272c:	88bb      	ldrh	r3, [r7, #4]
 800272e:	429a      	cmp	r2, r3
 8002730:	d912      	bls.n	8002758 <Displ_CString+0x144>
		Displ_FillArea(x0,y0,x1-x0+1,y-y0,bgcolor);
 8002732:	887a      	ldrh	r2, [r7, #2]
 8002734:	88fb      	ldrh	r3, [r7, #6]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	b29b      	uxth	r3, r3
 800273a:	3301      	adds	r3, #1
 800273c:	b29c      	uxth	r4, r3
 800273e:	89ba      	ldrh	r2, [r7, #12]
 8002740:	88bb      	ldrh	r3, [r7, #4]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	b29a      	uxth	r2, r3
 8002746:	88b9      	ldrh	r1, [r7, #4]
 8002748:	88f8      	ldrh	r0, [r7, #6]
 800274a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800274c:	9300      	str	r3, [sp, #0]
 800274e:	4613      	mov	r3, r2
 8002750:	4622      	mov	r2, r4
 8002752:	f7ff fc19 	bl	8001f88 <Displ_FillArea>
 8002756:	e001      	b.n	800275c <Displ_CString+0x148>
	} else
		y=y0; //same comment as above
 8002758:	88bb      	ldrh	r3, [r7, #4]
 800275a:	81bb      	strh	r3, [r7, #12]
	if (y1>=(font.Height+y0))
 800275c:	883a      	ldrh	r2, [r7, #0]
 800275e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002760:	4619      	mov	r1, r3
 8002762:	88bb      	ldrh	r3, [r7, #4]
 8002764:	440b      	add	r3, r1
 8002766:	429a      	cmp	r2, r3
 8002768:	db19      	blt.n	800279e <Displ_CString+0x18a>
		Displ_FillArea(x0,y1-y+y0,x1-x0+1,y-y0+1,bgcolor);
 800276a:	883a      	ldrh	r2, [r7, #0]
 800276c:	89bb      	ldrh	r3, [r7, #12]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	b29a      	uxth	r2, r3
 8002772:	88bb      	ldrh	r3, [r7, #4]
 8002774:	4413      	add	r3, r2
 8002776:	b299      	uxth	r1, r3
 8002778:	887a      	ldrh	r2, [r7, #2]
 800277a:	88fb      	ldrh	r3, [r7, #6]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	b29b      	uxth	r3, r3
 8002780:	3301      	adds	r3, #1
 8002782:	b29c      	uxth	r4, r3
 8002784:	89ba      	ldrh	r2, [r7, #12]
 8002786:	88bb      	ldrh	r3, [r7, #4]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	b29b      	uxth	r3, r3
 800278c:	3301      	adds	r3, #1
 800278e:	b29a      	uxth	r2, r3
 8002790:	88f8      	ldrh	r0, [r7, #6]
 8002792:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8002794:	9300      	str	r3, [sp, #0]
 8002796:	4613      	mov	r3, r2
 8002798:	4622      	mov	r2, r4
 800279a:	f7ff fbf5 	bl	8001f88 <Displ_FillArea>

	cambia = !cambia;
 800279e:	4b12      	ldr	r3, [pc, #72]	@ (80027e8 <Displ_CString+0x1d4>)
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	bf0c      	ite	eq
 80027a6:	2301      	moveq	r3, #1
 80027a8:	2300      	movne	r3, #0
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	461a      	mov	r2, r3
 80027ae:	4b0e      	ldr	r3, [pc, #56]	@ (80027e8 <Displ_CString+0x1d4>)
 80027b0:	701a      	strb	r2, [r3, #0]

	Displ_WString(x, y, str, font, size, color, bgcolor);
 80027b2:	89bd      	ldrh	r5, [r7, #12]
 80027b4:	89fc      	ldrh	r4, [r7, #14]
 80027b6:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80027b8:	9304      	str	r3, [sp, #16]
 80027ba:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80027bc:	9303      	str	r3, [sp, #12]
 80027be:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80027c2:	9302      	str	r3, [sp, #8]
 80027c4:	466a      	mov	r2, sp
 80027c6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80027ca:	e893 0003 	ldmia.w	r3, {r0, r1}
 80027ce:	e882 0003 	stmia.w	r2, {r0, r1}
 80027d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d4:	6a3a      	ldr	r2, [r7, #32]
 80027d6:	4629      	mov	r1, r5
 80027d8:	4620      	mov	r0, r4
 80027da:	f7ff fedb 	bl	8002594 <Displ_WString>

}
 80027de:	bf00      	nop
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bdb0      	pop	{r4, r5, r7, pc}
 80027e6:	bf00      	nop
 80027e8:	2000847d 	.word	0x2000847d

080027ec <Displ_BackLight>:
 *				'0'		set the display level to 0 (off)
 *				'I'		'Initialize'  IT MUST BE in dimming mode
 *              'Q'		do nothing, just return current level
 * @return		current backlight level
 **************************************/
uint32_t  Displ_BackLight(uint8_t cmd) {
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	4603      	mov	r3, r0
 80027f4:	71fb      	strb	r3, [r7, #7]

#ifdef DISPLAY_DIMMING_MODE
	static uint16_t memCCR1=0;  			//it stores CCR1 value while in stand-by
#endif

	switch (cmd) {
 80027f6:	79fb      	ldrb	r3, [r7, #7]
 80027f8:	2b51      	cmp	r3, #81	@ 0x51
 80027fa:	d00a      	beq.n	8002812 <Displ_BackLight+0x26>
 80027fc:	2b51      	cmp	r3, #81	@ 0x51
 80027fe:	dc18      	bgt.n	8002832 <Displ_BackLight+0x46>
 8002800:	2b46      	cmp	r3, #70	@ 0x46
 8002802:	d008      	beq.n	8002816 <Displ_BackLight+0x2a>
 8002804:	2b46      	cmp	r3, #70	@ 0x46
 8002806:	dc14      	bgt.n	8002832 <Displ_BackLight+0x46>
 8002808:	2b30      	cmp	r3, #48	@ 0x30
 800280a:	d00b      	beq.n	8002824 <Displ_BackLight+0x38>
 800280c:	2b31      	cmp	r3, #49	@ 0x31
 800280e:	d002      	beq.n	8002816 <Displ_BackLight+0x2a>
	  	HAL_TIM_PWM_Start(&BKLIT_T, BKLIT_CHANNEL);
		BKLIT_TIMER->BKLIT_CCR=BKLIT_INIT_LEVEL;
		break;
#endif
	default:
		break;
 8002810:	e00f      	b.n	8002832 <Displ_BackLight+0x46>
		__NOP();
 8002812:	bf00      	nop
		break;
 8002814:	e00e      	b.n	8002834 <Displ_BackLight+0x48>
		HAL_GPIO_WritePin(DISPL_LED_GPIO_Port, DISPL_LED_Pin, GPIO_PIN_SET);
 8002816:	2201      	movs	r2, #1
 8002818:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800281c:	480a      	ldr	r0, [pc, #40]	@ (8002848 <Displ_BackLight+0x5c>)
 800281e:	f001 f9a1 	bl	8003b64 <HAL_GPIO_WritePin>
		break;
 8002822:	e007      	b.n	8002834 <Displ_BackLight+0x48>
		HAL_GPIO_WritePin(DISPL_LED_GPIO_Port, DISPL_LED_Pin, GPIO_PIN_RESET);
 8002824:	2200      	movs	r2, #0
 8002826:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800282a:	4807      	ldr	r0, [pc, #28]	@ (8002848 <Displ_BackLight+0x5c>)
 800282c:	f001 f99a 	bl	8003b64 <HAL_GPIO_WritePin>
		break;
 8002830:	e000      	b.n	8002834 <Displ_BackLight+0x48>
		break;
 8002832:	bf00      	nop
	}
#ifndef DISPLAY_DIMMING_MODE
	return HAL_GPIO_ReadPin(DISPL_LED_GPIO_Port, DISPL_LED_Pin);
 8002834:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002838:	4803      	ldr	r0, [pc, #12]	@ (8002848 <Displ_BackLight+0x5c>)
 800283a:	f001 f97b 	bl	8003b34 <HAL_GPIO_ReadPin>
 800283e:	4603      	mov	r3, r0
#else
	return (BKLIT_TIMER->BKLIT_CCR);
#endif
}
 8002840:	4618      	mov	r0, r3
 8002842:	3708      	adds	r7, #8
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40021000 	.word	0x40021000

0800284c <Touch_HandlePenDownInterrupt>:
volatile uint8_t Touch_PenDown=0;						// set to 1 by pendown interrupt callback, reset to 0 by sw
volatile uint8_t Touch_Int_Enabled=1;					// while reading touch sensor touch interrupt handling is disabled through this flag



void Touch_HandlePenDownInterrupt (){
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
	if (Touch_Int_Enabled) {
 8002850:	4b06      	ldr	r3, [pc, #24]	@ (800286c <Touch_HandlePenDownInterrupt+0x20>)
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d002      	beq.n	8002860 <Touch_HandlePenDownInterrupt+0x14>
		Touch_PenDown=1;
 800285a:	4b05      	ldr	r3, [pc, #20]	@ (8002870 <Touch_HandlePenDownInterrupt+0x24>)
 800285c:	2201      	movs	r2, #1
 800285e:	701a      	strb	r2, [r3, #0]
	}
}
 8002860:	bf00      	nop
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	20000018 	.word	0x20000018
 8002870:	2000847e 	.word	0x2000847e

08002874 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	4603      	mov	r3, r0
 800287c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin==TOUCH_INT_Pin){
 800287e:	88fb      	ldrh	r3, [r7, #6]
 8002880:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002884:	d101      	bne.n	800288a <HAL_GPIO_EXTI_Callback+0x16>
		Touch_HandlePenDownInterrupt();
 8002886:	f7ff ffe1 	bl	800284c <Touch_HandlePenDownInterrupt>
	}
}
 800288a:	bf00      	nop
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
	...

08002894 <Touch_Select>:

/******************************************
 * @brief	enable touch, disabling display
 * 			set SPI baudrate as needed
 ******************************************/
void Touch_Select(void) {
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
	if (TOUCH_SPI==DISPL_SPI){														// if touch and display share the same SPI port
		if (!HAL_GPIO_ReadPin(DISPL_CS_GPIO_Port, DISPL_CS_Pin)) {					// if display selected
 8002898:	2180      	movs	r1, #128	@ 0x80
 800289a:	4813      	ldr	r0, [pc, #76]	@ (80028e8 <Touch_Select+0x54>)
 800289c:	f001 f94a 	bl	8003b34 <HAL_GPIO_ReadPin>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10a      	bne.n	80028bc <Touch_Select+0x28>
			while (!Displ_SpiAvailable) {};  										// waiting for completing display communication. Flag is set to 1 by transmission-complete interrupt callback
 80028a6:	bf00      	nop
 80028a8:	4b10      	ldr	r3, [pc, #64]	@ (80028ec <Touch_Select+0x58>)
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d0fa      	beq.n	80028a8 <Touch_Select+0x14>
			HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET); 		// unselect display
 80028b2:	2201      	movs	r2, #1
 80028b4:	2180      	movs	r1, #128	@ 0x80
 80028b6:	480c      	ldr	r0, [pc, #48]	@ (80028e8 <Touch_Select+0x54>)
 80028b8:	f001 f954 	bl	8003b64 <HAL_GPIO_WritePin>
		}
		SET_TOUCH_SPI_BAUDRATE;				   										//change SPI port speed as per display needs
 80028bc:	4b0c      	ldr	r3, [pc, #48]	@ (80028f0 <Touch_Select+0x5c>)
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	490b      	ldr	r1, [pc, #44]	@ (80028f0 <Touch_Select+0x5c>)
 80028c2:	f64f 73c7 	movw	r3, #65479	@ 0xffc7
 80028c6:	4013      	ands	r3, r2
 80028c8:	600b      	str	r3, [r1, #0]
 80028ca:	4b09      	ldr	r3, [pc, #36]	@ (80028f0 <Touch_Select+0x5c>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a08      	ldr	r2, [pc, #32]	@ (80028f0 <Touch_Select+0x5c>)
 80028d0:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 80028d4:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);
 80028d6:	2200      	movs	r2, #0
 80028d8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80028dc:	4802      	ldr	r0, [pc, #8]	@ (80028e8 <Touch_Select+0x54>)
 80028de:	f001 f941 	bl	8003b64 <HAL_GPIO_WritePin>
	}
}
 80028e2:	bf00      	nop
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	40021000 	.word	0x40021000
 80028ec:	20000010 	.word	0x20000010
 80028f0:	40013400 	.word	0x40013400

080028f4 <Touch_UnSelect>:


/******************************************
 * @brief	disable touch
 ******************************************/
void Touch_UnSelect(void) {
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
	if (TOUCH_SPI==DISPL_SPI){														// if touch and display share the same SPI port
		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);			// unselect touch
 80028f8:	2201      	movs	r2, #1
 80028fa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80028fe:	4802      	ldr	r0, [pc, #8]	@ (8002908 <Touch_UnSelect+0x14>)
 8002900:	f001 f930 	bl	8003b64 <HAL_GPIO_WritePin>
	}
}
 8002904:	bf00      	nop
 8002906:	bd80      	pop	{r7, pc}
 8002908:	40021000 	.word	0x40021000

0800290c <Touch_PollAxis>:
 * @params	axis	use only one of the three options X_AXIS, Y_AXIS or Z_AXIS
 * @return			the level measured on the "axis" axis
 * 					PLEASE NOTE this function should be only for internal usage
 * 								Use Touch_GetXYTouch() instead
 *******************************************************************************/
uint16_t Touch_PollAxis(uint8_t axis) {
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	4603      	mov	r3, r0
 8002914:	71fb      	strb	r3, [r7, #7]
	uint8_t poll[2] = {0,0};
 8002916:	2300      	movs	r3, #0
 8002918:	813b      	strh	r3, [r7, #8]
	uint32_t poll16;
	
	if (TOUCH_SPI==DISPL_SPI){				// if touch and display share the same SPI port
		Touch_Select();						// enable CS on touch device
 800291a:	f7ff ffbb 	bl	8002894 <Touch_Select>
	}

	Touch_Int_Enabled=0;	//disable interrupt handling: sensor reading triggers interrupt
 800291e:	4b17      	ldr	r3, [pc, #92]	@ (800297c <Touch_PollAxis+0x70>)
 8002920:	2200      	movs	r2, #0
 8002922:	701a      	strb	r2, [r3, #0]
	// disable interrupt while enquiring the touch sensor because it triggers the interrupt pin
	HAL_NVIC_DisableIRQ(TOUCH_INT_EXTI_IRQn);
 8002924:	2028      	movs	r0, #40	@ 0x28
 8002926:	f000 fc30 	bl	800318a <HAL_NVIC_DisableIRQ>

	HAL_SPI_Transmit(&TOUCH_SPI_PORT, &axis, 1, 10);
 800292a:	1df9      	adds	r1, r7, #7
 800292c:	230a      	movs	r3, #10
 800292e:	2201      	movs	r2, #1
 8002930:	4813      	ldr	r0, [pc, #76]	@ (8002980 <Touch_PollAxis+0x74>)
 8002932:	f004 fec0 	bl	80076b6 <HAL_SPI_Transmit>
	if (HAL_SPI_Receive(&TOUCH_SPI_PORT, poll, 2, 10) == HAL_OK) {
 8002936:	f107 0108 	add.w	r1, r7, #8
 800293a:	230a      	movs	r3, #10
 800293c:	2202      	movs	r2, #2
 800293e:	4810      	ldr	r0, [pc, #64]	@ (8002980 <Touch_PollAxis+0x74>)
 8002940:	f004 fffd 	bl	800793e <HAL_SPI_Receive>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d105      	bne.n	8002956 <Touch_PollAxis+0x4a>
		poll16 = (poll[0]<<8) + poll[1];
 800294a:	7a3b      	ldrb	r3, [r7, #8]
 800294c:	021b      	lsls	r3, r3, #8
 800294e:	7a7a      	ldrb	r2, [r7, #9]
 8002950:	4413      	add	r3, r2
 8002952:	60fb      	str	r3, [r7, #12]
 8002954:	e001      	b.n	800295a <Touch_PollAxis+0x4e>
	}
	else {
		poll16 = 0;
 8002956:	2300      	movs	r3, #0
 8002958:	60fb      	str	r3, [r7, #12]
	}

//enable back interrupt after reading the sensor
	HAL_NVIC_ClearPendingIRQ(TOUCH_INT_EXTI_IRQn);
 800295a:	2028      	movs	r0, #40	@ 0x28
 800295c:	f000 fc2f 	bl	80031be <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(TOUCH_INT_EXTI_IRQn);
 8002960:	2028      	movs	r0, #40	@ 0x28
 8002962:	f000 fc04 	bl	800316e <HAL_NVIC_EnableIRQ>

	Touch_Int_Enabled=1;
 8002966:	4b05      	ldr	r3, [pc, #20]	@ (800297c <Touch_PollAxis+0x70>)
 8002968:	2201      	movs	r2, #1
 800296a:	701a      	strb	r2, [r3, #0]

	if (TOUCH_SPI==DISPL_SPI){	// if touch and display share the same SPI port
		Touch_UnSelect();
 800296c:	f7ff ffc2 	bl	80028f4 <Touch_UnSelect>
	}

	return poll16;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	b29b      	uxth	r3, r3
}
 8002974:	4618      	mov	r0, r3
 8002976:	3710      	adds	r7, #16
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	20000018 	.word	0x20000018
 8002980:	2000036c 	.word	0x2000036c

08002984 <Touch_GetXYtouch>:
 * @brief			polls touch screen and returning its XY screen position
 * 					that's regardless touch recording flag (interrupt received)
 * @return	x,y		in case isTouch=1 contain touch coordinates
 * 			isTouch is 1 if detected a touch, otherwise 0;
 *********************************************************************************/
void Touch_GetXYtouch(uint16_t *x, uint16_t *y, uint8_t *isTouch){
 8002984:	b580      	push	{r7, lr}
 8002986:	b08a      	sub	sp, #40	@ 0x28
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]

const uint8_t pollingLevel=4;
 8002990:	2304      	movs	r3, #4
 8002992:	77fb      	strb	r3, [r7, #31]


// get the average value (over "1<<pollingLevel" attempts of X, Y and Z axes readings)

	// reading Z
	touch=0;
 8002994:	2300      	movs	r3, #0
 8002996:	623b      	str	r3, [r7, #32]
	for (k=0;k<(1<<pollingLevel);k++)
 8002998:	2300      	movs	r3, #0
 800299a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800299e:	e00c      	b.n	80029ba <Touch_GetXYtouch+0x36>
		touch += Touch_PollAxis(Z_AXIS);
 80029a0:	20b0      	movs	r0, #176	@ 0xb0
 80029a2:	f7ff ffb3 	bl	800290c <Touch_PollAxis>
 80029a6:	4603      	mov	r3, r0
 80029a8:	461a      	mov	r2, r3
 80029aa:	6a3b      	ldr	r3, [r7, #32]
 80029ac:	4413      	add	r3, r2
 80029ae:	623b      	str	r3, [r7, #32]
	for (k=0;k<(1<<pollingLevel);k++)
 80029b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80029b4:	3301      	adds	r3, #1
 80029b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80029ba:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80029be:	7ffb      	ldrb	r3, [r7, #31]
 80029c0:	2101      	movs	r1, #1
 80029c2:	fa01 f303 	lsl.w	r3, r1, r3
 80029c6:	429a      	cmp	r2, r3
 80029c8:	dbea      	blt.n	80029a0 <Touch_GetXYtouch+0x1c>
	touch >>= pollingLevel;  //get the average value
 80029ca:	7ffb      	ldrb	r3, [r7, #31]
 80029cc:	6a3a      	ldr	r2, [r7, #32]
 80029ce:	fa22 f303 	lsr.w	r3, r2, r3
 80029d2:	623b      	str	r3, [r7, #32]
	if (touch<=Z_THRESHOLD) {
 80029d4:	6a3b      	ldr	r3, [r7, #32]
 80029d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80029da:	d806      	bhi.n	80029ea <Touch_GetXYtouch+0x66>
		*isTouch=0;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	701a      	strb	r2, [r3, #0]
		HAL_NVIC_ClearPendingIRQ(TOUCH_INT_EXTI_IRQn);
 80029e2:	2028      	movs	r0, #40	@ 0x28
 80029e4:	f000 fbeb 	bl	80031be <HAL_NVIC_ClearPendingIRQ>
		return;	// no touch: return 0
 80029e8:	e0b2      	b.n	8002b50 <Touch_GetXYtouch+0x1cc>
	}

	// reading X
	touch=0;
 80029ea:	2300      	movs	r3, #0
 80029ec:	623b      	str	r3, [r7, #32]
	for (k=0;k<(1<<pollingLevel);k++)
 80029ee:	2300      	movs	r3, #0
 80029f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80029f4:	e00c      	b.n	8002a10 <Touch_GetXYtouch+0x8c>
		touch += Touch_PollAxis(X_AXIS);
 80029f6:	20d0      	movs	r0, #208	@ 0xd0
 80029f8:	f7ff ff88 	bl	800290c <Touch_PollAxis>
 80029fc:	4603      	mov	r3, r0
 80029fe:	461a      	mov	r2, r3
 8002a00:	6a3b      	ldr	r3, [r7, #32]
 8002a02:	4413      	add	r3, r2
 8002a04:	623b      	str	r3, [r7, #32]
	for (k=0;k<(1<<pollingLevel);k++)
 8002a06:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002a10:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002a14:	7ffb      	ldrb	r3, [r7, #31]
 8002a16:	2101      	movs	r1, #1
 8002a18:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	dbea      	blt.n	80029f6 <Touch_GetXYtouch+0x72>
	touch >>= pollingLevel;  //get the average value
 8002a20:	7ffb      	ldrb	r3, [r7, #31]
 8002a22:	6a3a      	ldr	r2, [r7, #32]
 8002a24:	fa22 f303 	lsr.w	r3, r2, r3
 8002a28:	623b      	str	r3, [r7, #32]
	if (touch<=X_THRESHOLD) {
 8002a2a:	6a3b      	ldr	r3, [r7, #32]
 8002a2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a30:	d806      	bhi.n	8002a40 <Touch_GetXYtouch+0xbc>
		*isTouch=0;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	701a      	strb	r2, [r3, #0]
		HAL_NVIC_ClearPendingIRQ(TOUCH_INT_EXTI_IRQn);
 8002a38:	2028      	movs	r0, #40	@ 0x28
 8002a3a:	f000 fbc0 	bl	80031be <HAL_NVIC_ClearPendingIRQ>
		return;	// no touch: return 0
 8002a3e:	e087      	b.n	8002b50 <Touch_GetXYtouch+0x1cc>
	}
	touchx=(AX*touch+BX);
 8002a40:	6a3b      	ldr	r3, [r7, #32]
 8002a42:	ee07 3a90 	vmov	s15, r3
 8002a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a4a:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8002b58 <Touch_GetXYtouch+0x1d4>
 8002a4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a52:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8002b5c <Touch_GetXYtouch+0x1d8>
 8002a56:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002a5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a5e:	ee17 3a90 	vmov	r3, s15
 8002a62:	61bb      	str	r3, [r7, #24]

	// reading Y - there is no a threshold for Y
	touch=0;
 8002a64:	2300      	movs	r3, #0
 8002a66:	623b      	str	r3, [r7, #32]
	for (k=0;k<(1<<pollingLevel);k++)
 8002a68:	2300      	movs	r3, #0
 8002a6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002a6e:	e00c      	b.n	8002a8a <Touch_GetXYtouch+0x106>
		touch += Touch_PollAxis(Y_AXIS);
 8002a70:	2090      	movs	r0, #144	@ 0x90
 8002a72:	f7ff ff4b 	bl	800290c <Touch_PollAxis>
 8002a76:	4603      	mov	r3, r0
 8002a78:	461a      	mov	r2, r3
 8002a7a:	6a3b      	ldr	r3, [r7, #32]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	623b      	str	r3, [r7, #32]
	for (k=0;k<(1<<pollingLevel);k++)
 8002a80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002a84:	3301      	adds	r3, #1
 8002a86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002a8a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002a8e:	7ffb      	ldrb	r3, [r7, #31]
 8002a90:	2101      	movs	r1, #1
 8002a92:	fa01 f303 	lsl.w	r3, r1, r3
 8002a96:	429a      	cmp	r2, r3
 8002a98:	dbea      	blt.n	8002a70 <Touch_GetXYtouch+0xec>
	touch >>= pollingLevel; //get the average value
 8002a9a:	7ffb      	ldrb	r3, [r7, #31]
 8002a9c:	6a3a      	ldr	r2, [r7, #32]
 8002a9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002aa2:	623b      	str	r3, [r7, #32]

	touchy=(AY*touch+BY);
 8002aa4:	6a3b      	ldr	r3, [r7, #32]
 8002aa6:	ee07 3a90 	vmov	s15, r3
 8002aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002aae:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8002b60 <Touch_GetXYtouch+0x1dc>
 8002ab2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ab6:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8002b64 <Touch_GetXYtouch+0x1e0>
 8002aba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002abe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ac2:	ee17 3a90 	vmov	r3, s15
 8002ac6:	617b      	str	r3, [r7, #20]


//having X and Y axis average values
// calculating coordinates as per screen orientation
	switch (current_orientation)
 8002ac8:	4b27      	ldr	r3, [pc, #156]	@ (8002b68 <Touch_GetXYtouch+0x1e4>)
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	2b03      	cmp	r3, #3
 8002ace:	d83b      	bhi.n	8002b48 <Touch_GetXYtouch+0x1c4>
 8002ad0:	a201      	add	r2, pc, #4	@ (adr r2, 8002ad8 <Touch_GetXYtouch+0x154>)
 8002ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad6:	bf00      	nop
 8002ad8:	08002ae9 	.word	0x08002ae9
 8002adc:	08002afb 	.word	0x08002afb
 8002ae0:	08002b13 	.word	0x08002b13
 8002ae4:	08002b31 	.word	0x08002b31
	{
	case TOUCH0:
		*x=touchx;
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	b29a      	uxth	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	801a      	strh	r2, [r3, #0]
		*y=touchy;
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	b29a      	uxth	r2, r3
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	801a      	strh	r2, [r3, #0]
		break;
 8002af8:	e026      	b.n	8002b48 <Touch_GetXYtouch+0x1c4>
	case TOUCH90:
		*x=touchy;
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	801a      	strh	r2, [r3, #0]
		*y=(TOUCH_0_WIDTH-touchx);
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8002b0a:	b29a      	uxth	r2, r3
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	801a      	strh	r2, [r3, #0]
		break;
 8002b10:	e01a      	b.n	8002b48 <Touch_GetXYtouch+0x1c4>
	case TOUCH180:
		*x=(TOUCH_0_WIDTH-touchx);
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8002b1a:	b29a      	uxth	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	801a      	strh	r2, [r3, #0]
		*y=(TOUCH_0_HEIGHT - touchy);
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	801a      	strh	r2, [r3, #0]
		break;
 8002b2e:	e00b      	b.n	8002b48 <Touch_GetXYtouch+0x1c4>
	case TOUCH270:
		*x=(TOUCH_0_HEIGHT- touchy);
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	801a      	strh	r2, [r3, #0]
		*y=touchx;
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	b29a      	uxth	r2, r3
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	801a      	strh	r2, [r3, #0]
		break;
 8002b46:	bf00      	nop
	}

// set flag indicating there was a touch
	*isTouch=1;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	701a      	strb	r2, [r3, #0]
	return;
 8002b4e:	bf00      	nop
}
 8002b50:	3728      	adds	r7, #40	@ 0x28
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	3c033c60 	.word	0x3c033c60
 8002b5c:	413ff7cf 	.word	0x413ff7cf
 8002b60:	3c375643 	.word	0x3c375643
 8002b64:	421c3a5e 	.word	0x421c3a5e
 8002b68:	20000470 	.word	0x20000470

08002b6c <Touch_WaitForTouch>:
 * @params	delay	max time (ms) waiting for a touch, 0=infinite
 * #return	1 		if touched within "delay" period
 * 			0		if elapsed time with no touch
 * 					PLEASE NOTE: doesn't reset Touch recording flag
 ***********************************************************/
uint8_t Touch_WaitForTouch(uint16_t delay) {
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	4603      	mov	r3, r0
 8002b74:	80fb      	strh	r3, [r7, #6]
	uint16_t starttime;

	starttime = HAL_GetTick();
 8002b76:	f000 f991 	bl	8002e9c <HAL_GetTick>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	81fb      	strh	r3, [r7, #14]
	while (!Touch_PenDown) {
 8002b7e:	e00c      	b.n	8002b9a <Touch_WaitForTouch+0x2e>
		if ((delay!=0) && ((HAL_GetTick()-starttime)>delay))
 8002b80:	88fb      	ldrh	r3, [r7, #6]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d009      	beq.n	8002b9a <Touch_WaitForTouch+0x2e>
 8002b86:	f000 f989 	bl	8002e9c <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	89fb      	ldrh	r3, [r7, #14]
 8002b8e:	1ad2      	subs	r2, r2, r3
 8002b90:	88fb      	ldrh	r3, [r7, #6]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d901      	bls.n	8002b9a <Touch_WaitForTouch+0x2e>
			return 0;
 8002b96:	2300      	movs	r3, #0
 8002b98:	e005      	b.n	8002ba6 <Touch_WaitForTouch+0x3a>
	while (!Touch_PenDown) {
 8002b9a:	4b05      	ldr	r3, [pc, #20]	@ (8002bb0 <Touch_WaitForTouch+0x44>)
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d0ed      	beq.n	8002b80 <Touch_WaitForTouch+0x14>
	};
	return 1;
 8002ba4:	2301      	movs	r3, #1
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	2000847e 	.word	0x2000847e

08002bb4 <Touch_GotATouch>:
 * 						(use "2" in main loop activating touchgfxSignalVSync()
 * @returns		1	if recorded a touch
 * 				0	if no touch recorded
 ***********************************************************/

uint8_t Touch_GotATouch(uint8_t reset) {
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	4603      	mov	r3, r0
 8002bbc:	71fb      	strb	r3, [r7, #7]
static uint32_t touchTime=0;
uint8_t result = Touch_PenDown;
 8002bbe:	4b10      	ldr	r3, [pc, #64]	@ (8002c00 <Touch_GotATouch+0x4c>)
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	73fb      	strb	r3, [r7, #15]

//	if (result)
//		result=Touch_PollTouch();

	if (reset==2){
 8002bc4:	79fb      	ldrb	r3, [r7, #7]
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d10f      	bne.n	8002bea <Touch_GotATouch+0x36>
		if ((HAL_GetTick()-touchTime) >= TOUCHGFX_TIMING)
 8002bca:	f000 f967 	bl	8002e9c <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8002c04 <Touch_GotATouch+0x50>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b3b      	cmp	r3, #59	@ 0x3b
 8002bd8:	d905      	bls.n	8002be6 <Touch_GotATouch+0x32>
			touchTime=HAL_GetTick();
 8002bda:	f000 f95f 	bl	8002e9c <HAL_GetTick>
 8002bde:	4603      	mov	r3, r0
 8002be0:	4a08      	ldr	r2, [pc, #32]	@ (8002c04 <Touch_GotATouch+0x50>)
 8002be2:	6013      	str	r3, [r2, #0]
 8002be4:	e001      	b.n	8002bea <Touch_GotATouch+0x36>
		else
			result=0;
 8002be6:	2300      	movs	r3, #0
 8002be8:	73fb      	strb	r3, [r7, #15]
	}
	if (reset==1)
 8002bea:	79fb      	ldrb	r3, [r7, #7]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d102      	bne.n	8002bf6 <Touch_GotATouch+0x42>
		Touch_PenDown=0;
 8002bf0:	4b03      	ldr	r3, [pc, #12]	@ (8002c00 <Touch_GotATouch+0x4c>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	701a      	strb	r2, [r3, #0]
	return result;
 8002bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3710      	adds	r7, #16
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	2000847e 	.word	0x2000847e
 8002c04:	20008480 	.word	0x20008480

08002c08 <DrawCross>:


/*************************************************************
 * used by Touch_TestDrawing() and Touch_TestCalibration()
 *************************************************************/
void DrawCross(uint16_t x,uint16_t y,uint16_t fcol){
 8002c08:	b590      	push	{r4, r7, lr}
 8002c0a:	b087      	sub	sp, #28
 8002c0c:	af02      	add	r7, sp, #8
 8002c0e:	4603      	mov	r3, r0
 8002c10:	80fb      	strh	r3, [r7, #6]
 8002c12:	460b      	mov	r3, r1
 8002c14:	80bb      	strh	r3, [r7, #4]
 8002c16:	4613      	mov	r3, r2
 8002c18:	807b      	strh	r3, [r7, #2]
	uint8_t ray=10;
 8002c1a:	230a      	movs	r3, #10
 8002c1c:	73fb      	strb	r3, [r7, #15]
//	Displ_Line(x-ray, y-ray, x+ray, y+ray, fcol);
//	Displ_Line(x-ray, y+ray, x+ray, y-ray, fcol);
	Displ_Line(x-ray, y, x+ray, y, fcol);
 8002c1e:	7bfb      	ldrb	r3, [r7, #15]
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	88fa      	ldrh	r2, [r7, #6]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	b218      	sxth	r0, r3
 8002c2a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002c2e:	7bfb      	ldrb	r3, [r7, #15]
 8002c30:	b29a      	uxth	r2, r3
 8002c32:	88fb      	ldrh	r3, [r7, #6]
 8002c34:	4413      	add	r3, r2
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	b21a      	sxth	r2, r3
 8002c3a:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8002c3e:	887b      	ldrh	r3, [r7, #2]
 8002c40:	9300      	str	r3, [sp, #0]
 8002c42:	4623      	mov	r3, r4
 8002c44:	f7ff fa76 	bl	8002134 <Displ_Line>
	Displ_Line(x, y-ray, x, y+ray, fcol);
 8002c48:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002c4c:	7bfb      	ldrb	r3, [r7, #15]
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	88ba      	ldrh	r2, [r7, #4]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	b219      	sxth	r1, r3
 8002c58:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8002c5c:	7bfb      	ldrb	r3, [r7, #15]
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	88bb      	ldrh	r3, [r7, #4]
 8002c62:	4413      	add	r3, r2
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	b21a      	sxth	r2, r3
 8002c68:	887b      	ldrh	r3, [r7, #2]
 8002c6a:	9300      	str	r3, [sp, #0]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	4622      	mov	r2, r4
 8002c70:	f7ff fa60 	bl	8002134 <Displ_Line>

}
 8002c74:	bf00      	nop
 8002c76:	3714      	adds	r7, #20
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd90      	pop	{r4, r7, pc}

08002c7c <Touch_TestDrawing>:
/****************************************
 * a test with a continue touch polling,
 * drawing values returned,
 * until touch is released
 ****************************************/
void Touch_TestDrawing() {
 8002c7c:	b5b0      	push	{r4, r5, r7, lr}
 8002c7e:	b08c      	sub	sp, #48	@ 0x30
 8002c80:	af08      	add	r7, sp, #32
	uint16_t px=0,py,npx,npy;
 8002c82:	2300      	movs	r3, #0
 8002c84:	81fb      	strh	r3, [r7, #14]
	uint8_t isTouch;

	for (uint8_t k=0;k<4;k++){
 8002c86:	2300      	movs	r3, #0
 8002c88:	72fb      	strb	r3, [r7, #11]
 8002c8a:	e068      	b.n	8002d5e <Touch_TestDrawing+0xe2>

		switch (k){
 8002c8c:	7afb      	ldrb	r3, [r7, #11]
 8002c8e:	2b03      	cmp	r3, #3
 8002c90:	d81a      	bhi.n	8002cc8 <Touch_TestDrawing+0x4c>
 8002c92:	a201      	add	r2, pc, #4	@ (adr r2, 8002c98 <Touch_TestDrawing+0x1c>)
 8002c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c98:	08002ca9 	.word	0x08002ca9
 8002c9c:	08002cb1 	.word	0x08002cb1
 8002ca0:	08002cb9 	.word	0x08002cb9
 8002ca4:	08002cc1 	.word	0x08002cc1
		case 0:
			Displ_Orientation(Displ_Orientat_0);
 8002ca8:	2000      	movs	r0, #0
 8002caa:	f7ff f8ff 	bl	8001eac <Displ_Orientation>
			break;
 8002cae:	e00b      	b.n	8002cc8 <Touch_TestDrawing+0x4c>
		case 1:
			Displ_Orientation(Displ_Orientat_90);
 8002cb0:	2001      	movs	r0, #1
 8002cb2:	f7ff f8fb 	bl	8001eac <Displ_Orientation>
			break;
 8002cb6:	e007      	b.n	8002cc8 <Touch_TestDrawing+0x4c>
		case 2:
			Displ_Orientation(Displ_Orientat_180);
 8002cb8:	2002      	movs	r0, #2
 8002cba:	f7ff f8f7 	bl	8001eac <Displ_Orientation>
			break;
 8002cbe:	e003      	b.n	8002cc8 <Touch_TestDrawing+0x4c>
		case 3:
			Displ_Orientation(Displ_Orientat_270);
 8002cc0:	2003      	movs	r0, #3
 8002cc2:	f7ff f8f3 	bl	8001eac <Displ_Orientation>
			break;
 8002cc6:	bf00      	nop
		}

		Displ_CLS(DD_BLUE);
 8002cc8:	2010      	movs	r0, #16
 8002cca:	f7ff fa17 	bl	80020fc <Displ_CLS>
		Displ_CString(0,10,_width,Font12.Height+10,"Touch and drag over display",Font12,1,WHITE,DD_BLUE);
 8002cce:	4b28      	ldr	r3, [pc, #160]	@ (8002d70 <Touch_TestDrawing+0xf4>)
 8002cd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cd4:	b29c      	uxth	r4, r3
 8002cd6:	4b27      	ldr	r3, [pc, #156]	@ (8002d74 <Touch_TestDrawing+0xf8>)
 8002cd8:	88db      	ldrh	r3, [r3, #6]
 8002cda:	330a      	adds	r3, #10
 8002cdc:	b29d      	uxth	r5, r3
 8002cde:	2310      	movs	r3, #16
 8002ce0:	9306      	str	r3, [sp, #24]
 8002ce2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002ce6:	9305      	str	r3, [sp, #20]
 8002ce8:	2301      	movs	r3, #1
 8002cea:	9304      	str	r3, [sp, #16]
 8002cec:	4a21      	ldr	r2, [pc, #132]	@ (8002d74 <Touch_TestDrawing+0xf8>)
 8002cee:	ab01      	add	r3, sp, #4
 8002cf0:	ca07      	ldmia	r2, {r0, r1, r2}
 8002cf2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002cf6:	4b20      	ldr	r3, [pc, #128]	@ (8002d78 <Touch_TestDrawing+0xfc>)
 8002cf8:	9300      	str	r3, [sp, #0]
 8002cfa:	462b      	mov	r3, r5
 8002cfc:	4622      	mov	r2, r4
 8002cfe:	210a      	movs	r1, #10
 8002d00:	2000      	movs	r0, #0
 8002d02:	f7ff fc87 	bl	8002614 <Displ_CString>

		Touch_GotATouch(1);
 8002d06:	2001      	movs	r0, #1
 8002d08:	f7ff ff54 	bl	8002bb4 <Touch_GotATouch>
		Touch_WaitForTouch(0);
 8002d0c:	2000      	movs	r0, #0
 8002d0e:	f7ff ff2d 	bl	8002b6c <Touch_WaitForTouch>

		while (1) {
			Touch_GetXYtouch(&npx,&npy,&isTouch);
 8002d12:	1d7a      	adds	r2, r7, #5
 8002d14:	1db9      	adds	r1, r7, #6
 8002d16:	f107 0308 	add.w	r3, r7, #8
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7ff fe32 	bl	8002984 <Touch_GetXYtouch>
			if (!isTouch) //if there is no touch: stop drawing
 8002d20:	797b      	ldrb	r3, [r7, #5]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d017      	beq.n	8002d56 <Touch_TestDrawing+0xda>
				break;
			if (px!=0)
 8002d26:	89fb      	ldrh	r3, [r7, #14]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d005      	beq.n	8002d38 <Touch_TestDrawing+0xbc>
				DrawCross(px,py,DD_BLUE);
 8002d2c:	89b9      	ldrh	r1, [r7, #12]
 8002d2e:	89fb      	ldrh	r3, [r7, #14]
 8002d30:	2210      	movs	r2, #16
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7ff ff68 	bl	8002c08 <DrawCross>
			DrawCross(npx,npy,WHITE);
 8002d38:	893b      	ldrh	r3, [r7, #8]
 8002d3a:	88f9      	ldrh	r1, [r7, #6]
 8002d3c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7ff ff61 	bl	8002c08 <DrawCross>
			px=npx;
 8002d46:	893b      	ldrh	r3, [r7, #8]
 8002d48:	81fb      	strh	r3, [r7, #14]
			py=npy;
 8002d4a:	88fb      	ldrh	r3, [r7, #6]
 8002d4c:	81bb      	strh	r3, [r7, #12]
			HAL_Delay(30);
 8002d4e:	201e      	movs	r0, #30
 8002d50:	f000 f8b0 	bl	8002eb4 <HAL_Delay>
			Touch_GetXYtouch(&npx,&npy,&isTouch);
 8002d54:	e7dd      	b.n	8002d12 <Touch_TestDrawing+0x96>
				break;
 8002d56:	bf00      	nop
	for (uint8_t k=0;k<4;k++){
 8002d58:	7afb      	ldrb	r3, [r7, #11]
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	72fb      	strb	r3, [r7, #11]
 8002d5e:	7afb      	ldrb	r3, [r7, #11]
 8002d60:	2b03      	cmp	r3, #3
 8002d62:	d993      	bls.n	8002c8c <Touch_TestDrawing+0x10>
		}
	}
}
 8002d64:	bf00      	nop
 8002d66:	bf00      	nop
 8002d68:	3710      	adds	r7, #16
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bdb0      	pop	{r4, r5, r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	20000472 	.word	0x20000472
 8002d74:	20000000 	.word	0x20000000
 8002d78:	0800eb04 	.word	0x0800eb04

08002d7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002d7c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002db4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002d80:	f7fe ff40 	bl	8001c04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d84:	480c      	ldr	r0, [pc, #48]	@ (8002db8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d86:	490d      	ldr	r1, [pc, #52]	@ (8002dbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d88:	4a0d      	ldr	r2, [pc, #52]	@ (8002dc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d8c:	e002      	b.n	8002d94 <LoopCopyDataInit>

08002d8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d92:	3304      	adds	r3, #4

08002d94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d98:	d3f9      	bcc.n	8002d8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d9a:	4a0a      	ldr	r2, [pc, #40]	@ (8002dc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d9c:	4c0a      	ldr	r4, [pc, #40]	@ (8002dc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002da0:	e001      	b.n	8002da6 <LoopFillZerobss>

08002da2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002da2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002da4:	3204      	adds	r2, #4

08002da6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002da6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002da8:	d3fb      	bcc.n	8002da2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002daa:	f00a f86d 	bl	800ce88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002dae:	f7fe f899 	bl	8000ee4 <main>
  bx  lr    
 8002db2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002db4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002db8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002dbc:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8002dc0:	0800f44c 	.word	0x0800f44c
  ldr r2, =_sbss
 8002dc4:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8002dc8:	20008d90 	.word	0x20008d90

08002dcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002dcc:	e7fe      	b.n	8002dcc <ADC_IRQHandler>
	...

08002dd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002dd4:	4b0e      	ldr	r3, [pc, #56]	@ (8002e10 <HAL_Init+0x40>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a0d      	ldr	r2, [pc, #52]	@ (8002e10 <HAL_Init+0x40>)
 8002dda:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002dde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002de0:	4b0b      	ldr	r3, [pc, #44]	@ (8002e10 <HAL_Init+0x40>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a0a      	ldr	r2, [pc, #40]	@ (8002e10 <HAL_Init+0x40>)
 8002de6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002dea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002dec:	4b08      	ldr	r3, [pc, #32]	@ (8002e10 <HAL_Init+0x40>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a07      	ldr	r2, [pc, #28]	@ (8002e10 <HAL_Init+0x40>)
 8002df2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002df6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002df8:	2003      	movs	r0, #3
 8002dfa:	f000 f991 	bl	8003120 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dfe:	2000      	movs	r0, #0
 8002e00:	f000 f808 	bl	8002e14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e04:	f7fe fba8 	bl	8001558 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	40023c00 	.word	0x40023c00

08002e14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e1c:	4b12      	ldr	r3, [pc, #72]	@ (8002e68 <HAL_InitTick+0x54>)
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	4b12      	ldr	r3, [pc, #72]	@ (8002e6c <HAL_InitTick+0x58>)
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	4619      	mov	r1, r3
 8002e26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e32:	4618      	mov	r0, r3
 8002e34:	f000 f9b7 	bl	80031a6 <HAL_SYSTICK_Config>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e00e      	b.n	8002e60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2b0f      	cmp	r3, #15
 8002e46:	d80a      	bhi.n	8002e5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e48:	2200      	movs	r2, #0
 8002e4a:	6879      	ldr	r1, [r7, #4]
 8002e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e50:	f000 f971 	bl	8003136 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e54:	4a06      	ldr	r2, [pc, #24]	@ (8002e70 <HAL_InitTick+0x5c>)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	e000      	b.n	8002e60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3708      	adds	r7, #8
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	2000000c 	.word	0x2000000c
 8002e6c:	20000020 	.word	0x20000020
 8002e70:	2000001c 	.word	0x2000001c

08002e74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e78:	4b06      	ldr	r3, [pc, #24]	@ (8002e94 <HAL_IncTick+0x20>)
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	4b06      	ldr	r3, [pc, #24]	@ (8002e98 <HAL_IncTick+0x24>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4413      	add	r3, r2
 8002e84:	4a04      	ldr	r2, [pc, #16]	@ (8002e98 <HAL_IncTick+0x24>)
 8002e86:	6013      	str	r3, [r2, #0]
}
 8002e88:	bf00      	nop
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	20000020 	.word	0x20000020
 8002e98:	20008484 	.word	0x20008484

08002e9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
  return uwTick;
 8002ea0:	4b03      	ldr	r3, [pc, #12]	@ (8002eb0 <HAL_GetTick+0x14>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	20008484 	.word	0x20008484

08002eb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ebc:	f7ff ffee 	bl	8002e9c <HAL_GetTick>
 8002ec0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ecc:	d005      	beq.n	8002eda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ece:	4b0a      	ldr	r3, [pc, #40]	@ (8002ef8 <HAL_Delay+0x44>)
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002eda:	bf00      	nop
 8002edc:	f7ff ffde 	bl	8002e9c <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	68fa      	ldr	r2, [r7, #12]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d8f7      	bhi.n	8002edc <HAL_Delay+0x28>
  {
  }
}
 8002eec:	bf00      	nop
 8002eee:	bf00      	nop
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	20000020 	.word	0x20000020

08002efc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b085      	sub	sp, #20
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f003 0307 	and.w	r3, r3, #7
 8002f0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f0c:	4b0c      	ldr	r3, [pc, #48]	@ (8002f40 <__NVIC_SetPriorityGrouping+0x44>)
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f12:	68ba      	ldr	r2, [r7, #8]
 8002f14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f18:	4013      	ands	r3, r2
 8002f1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f2e:	4a04      	ldr	r2, [pc, #16]	@ (8002f40 <__NVIC_SetPriorityGrouping+0x44>)
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	60d3      	str	r3, [r2, #12]
}
 8002f34:	bf00      	nop
 8002f36:	3714      	adds	r7, #20
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr
 8002f40:	e000ed00 	.word	0xe000ed00

08002f44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f48:	4b04      	ldr	r3, [pc, #16]	@ (8002f5c <__NVIC_GetPriorityGrouping+0x18>)
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	0a1b      	lsrs	r3, r3, #8
 8002f4e:	f003 0307 	and.w	r3, r3, #7
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr
 8002f5c:	e000ed00 	.word	0xe000ed00

08002f60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	4603      	mov	r3, r0
 8002f68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	db0b      	blt.n	8002f8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f72:	79fb      	ldrb	r3, [r7, #7]
 8002f74:	f003 021f 	and.w	r2, r3, #31
 8002f78:	4907      	ldr	r1, [pc, #28]	@ (8002f98 <__NVIC_EnableIRQ+0x38>)
 8002f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f7e:	095b      	lsrs	r3, r3, #5
 8002f80:	2001      	movs	r0, #1
 8002f82:	fa00 f202 	lsl.w	r2, r0, r2
 8002f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f8a:	bf00      	nop
 8002f8c:	370c      	adds	r7, #12
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	e000e100 	.word	0xe000e100

08002f9c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	db12      	blt.n	8002fd4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fae:	79fb      	ldrb	r3, [r7, #7]
 8002fb0:	f003 021f 	and.w	r2, r3, #31
 8002fb4:	490a      	ldr	r1, [pc, #40]	@ (8002fe0 <__NVIC_DisableIRQ+0x44>)
 8002fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fba:	095b      	lsrs	r3, r3, #5
 8002fbc:	2001      	movs	r0, #1
 8002fbe:	fa00 f202 	lsl.w	r2, r0, r2
 8002fc2:	3320      	adds	r3, #32
 8002fc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002fc8:	f3bf 8f4f 	dsb	sy
}
 8002fcc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002fce:	f3bf 8f6f 	isb	sy
}
 8002fd2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr
 8002fe0:	e000e100 	.word	0xe000e100

08002fe4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	4603      	mov	r3, r0
 8002fec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	db0c      	blt.n	8003010 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ff6:	79fb      	ldrb	r3, [r7, #7]
 8002ff8:	f003 021f 	and.w	r2, r3, #31
 8002ffc:	4907      	ldr	r1, [pc, #28]	@ (800301c <__NVIC_ClearPendingIRQ+0x38>)
 8002ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003002:	095b      	lsrs	r3, r3, #5
 8003004:	2001      	movs	r0, #1
 8003006:	fa00 f202 	lsl.w	r2, r0, r2
 800300a:	3360      	adds	r3, #96	@ 0x60
 800300c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003010:	bf00      	nop
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr
 800301c:	e000e100 	.word	0xe000e100

08003020 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	4603      	mov	r3, r0
 8003028:	6039      	str	r1, [r7, #0]
 800302a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800302c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003030:	2b00      	cmp	r3, #0
 8003032:	db0a      	blt.n	800304a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	b2da      	uxtb	r2, r3
 8003038:	490c      	ldr	r1, [pc, #48]	@ (800306c <__NVIC_SetPriority+0x4c>)
 800303a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800303e:	0112      	lsls	r2, r2, #4
 8003040:	b2d2      	uxtb	r2, r2
 8003042:	440b      	add	r3, r1
 8003044:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003048:	e00a      	b.n	8003060 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	b2da      	uxtb	r2, r3
 800304e:	4908      	ldr	r1, [pc, #32]	@ (8003070 <__NVIC_SetPriority+0x50>)
 8003050:	79fb      	ldrb	r3, [r7, #7]
 8003052:	f003 030f 	and.w	r3, r3, #15
 8003056:	3b04      	subs	r3, #4
 8003058:	0112      	lsls	r2, r2, #4
 800305a:	b2d2      	uxtb	r2, r2
 800305c:	440b      	add	r3, r1
 800305e:	761a      	strb	r2, [r3, #24]
}
 8003060:	bf00      	nop
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr
 800306c:	e000e100 	.word	0xe000e100
 8003070:	e000ed00 	.word	0xe000ed00

08003074 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003074:	b480      	push	{r7}
 8003076:	b089      	sub	sp, #36	@ 0x24
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f003 0307 	and.w	r3, r3, #7
 8003086:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	f1c3 0307 	rsb	r3, r3, #7
 800308e:	2b04      	cmp	r3, #4
 8003090:	bf28      	it	cs
 8003092:	2304      	movcs	r3, #4
 8003094:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	3304      	adds	r3, #4
 800309a:	2b06      	cmp	r3, #6
 800309c:	d902      	bls.n	80030a4 <NVIC_EncodePriority+0x30>
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	3b03      	subs	r3, #3
 80030a2:	e000      	b.n	80030a6 <NVIC_EncodePriority+0x32>
 80030a4:	2300      	movs	r3, #0
 80030a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030a8:	f04f 32ff 	mov.w	r2, #4294967295
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	fa02 f303 	lsl.w	r3, r2, r3
 80030b2:	43da      	mvns	r2, r3
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	401a      	ands	r2, r3
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030bc:	f04f 31ff 	mov.w	r1, #4294967295
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	fa01 f303 	lsl.w	r3, r1, r3
 80030c6:	43d9      	mvns	r1, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030cc:	4313      	orrs	r3, r2
         );
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3724      	adds	r7, #36	@ 0x24
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
	...

080030dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	3b01      	subs	r3, #1
 80030e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030ec:	d301      	bcc.n	80030f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030ee:	2301      	movs	r3, #1
 80030f0:	e00f      	b.n	8003112 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030f2:	4a0a      	ldr	r2, [pc, #40]	@ (800311c <SysTick_Config+0x40>)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	3b01      	subs	r3, #1
 80030f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030fa:	210f      	movs	r1, #15
 80030fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003100:	f7ff ff8e 	bl	8003020 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003104:	4b05      	ldr	r3, [pc, #20]	@ (800311c <SysTick_Config+0x40>)
 8003106:	2200      	movs	r2, #0
 8003108:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800310a:	4b04      	ldr	r3, [pc, #16]	@ (800311c <SysTick_Config+0x40>)
 800310c:	2207      	movs	r2, #7
 800310e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3708      	adds	r7, #8
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	e000e010 	.word	0xe000e010

08003120 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f7ff fee7 	bl	8002efc <__NVIC_SetPriorityGrouping>
}
 800312e:	bf00      	nop
 8003130:	3708      	adds	r7, #8
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003136:	b580      	push	{r7, lr}
 8003138:	b086      	sub	sp, #24
 800313a:	af00      	add	r7, sp, #0
 800313c:	4603      	mov	r3, r0
 800313e:	60b9      	str	r1, [r7, #8]
 8003140:	607a      	str	r2, [r7, #4]
 8003142:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003144:	2300      	movs	r3, #0
 8003146:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003148:	f7ff fefc 	bl	8002f44 <__NVIC_GetPriorityGrouping>
 800314c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	68b9      	ldr	r1, [r7, #8]
 8003152:	6978      	ldr	r0, [r7, #20]
 8003154:	f7ff ff8e 	bl	8003074 <NVIC_EncodePriority>
 8003158:	4602      	mov	r2, r0
 800315a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800315e:	4611      	mov	r1, r2
 8003160:	4618      	mov	r0, r3
 8003162:	f7ff ff5d 	bl	8003020 <__NVIC_SetPriority>
}
 8003166:	bf00      	nop
 8003168:	3718      	adds	r7, #24
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}

0800316e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800316e:	b580      	push	{r7, lr}
 8003170:	b082      	sub	sp, #8
 8003172:	af00      	add	r7, sp, #0
 8003174:	4603      	mov	r3, r0
 8003176:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800317c:	4618      	mov	r0, r3
 800317e:	f7ff feef 	bl	8002f60 <__NVIC_EnableIRQ>
}
 8003182:	bf00      	nop
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800318a:	b580      	push	{r7, lr}
 800318c:	b082      	sub	sp, #8
 800318e:	af00      	add	r7, sp, #0
 8003190:	4603      	mov	r3, r0
 8003192:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003198:	4618      	mov	r0, r3
 800319a:	f7ff feff 	bl	8002f9c <__NVIC_DisableIRQ>
}
 800319e:	bf00      	nop
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b082      	sub	sp, #8
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f7ff ff94 	bl	80030dc <SysTick_Config>
 80031b4:	4603      	mov	r3, r0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3708      	adds	r7, #8
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b082      	sub	sp, #8
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	4603      	mov	r3, r0
 80031c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80031c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031cc:	4618      	mov	r0, r3
 80031ce:	f7ff ff09 	bl	8002fe4 <__NVIC_ClearPendingIRQ>
}
 80031d2:	bf00      	nop
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b082      	sub	sp, #8
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d101      	bne.n	80031ec <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e00e      	b.n	800320a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	795b      	ldrb	r3, [r3, #5]
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d105      	bne.n	8003202 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f7fe f9d3 	bl	80015a8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2201      	movs	r2, #1
 8003206:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3708      	adds	r7, #8
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
	...

08003214 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800321c:	2300      	movs	r3, #0
 800321e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003220:	f7ff fe3c 	bl	8002e9c <HAL_GetTick>
 8003224:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d101      	bne.n	8003230 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e099      	b.n	8003364 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2202      	movs	r2, #2
 8003234:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f022 0201 	bic.w	r2, r2, #1
 800324e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003250:	e00f      	b.n	8003272 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003252:	f7ff fe23 	bl	8002e9c <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	2b05      	cmp	r3, #5
 800325e:	d908      	bls.n	8003272 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2220      	movs	r2, #32
 8003264:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2203      	movs	r2, #3
 800326a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e078      	b.n	8003364 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0301 	and.w	r3, r3, #1
 800327c:	2b00      	cmp	r3, #0
 800327e:	d1e8      	bne.n	8003252 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003288:	697a      	ldr	r2, [r7, #20]
 800328a:	4b38      	ldr	r3, [pc, #224]	@ (800336c <HAL_DMA_Init+0x158>)
 800328c:	4013      	ands	r3, r2
 800328e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685a      	ldr	r2, [r3, #4]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800329e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	691b      	ldr	r3, [r3, #16]
 80032a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	699b      	ldr	r3, [r3, #24]
 80032b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a1b      	ldr	r3, [r3, #32]
 80032bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032be:	697a      	ldr	r2, [r7, #20]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c8:	2b04      	cmp	r3, #4
 80032ca:	d107      	bne.n	80032dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d4:	4313      	orrs	r3, r2
 80032d6:	697a      	ldr	r2, [r7, #20]
 80032d8:	4313      	orrs	r3, r2
 80032da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	697a      	ldr	r2, [r7, #20]
 80032e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	f023 0307 	bic.w	r3, r3, #7
 80032f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f8:	697a      	ldr	r2, [r7, #20]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003302:	2b04      	cmp	r3, #4
 8003304:	d117      	bne.n	8003336 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800330a:	697a      	ldr	r2, [r7, #20]
 800330c:	4313      	orrs	r3, r2
 800330e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00e      	beq.n	8003336 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f000 fa0b 	bl	8003734 <DMA_CheckFifoParam>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d008      	beq.n	8003336 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2240      	movs	r2, #64	@ 0x40
 8003328:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2201      	movs	r2, #1
 800332e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003332:	2301      	movs	r3, #1
 8003334:	e016      	b.n	8003364 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	697a      	ldr	r2, [r7, #20]
 800333c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 f9c2 	bl	80036c8 <DMA_CalcBaseAndBitshift>
 8003344:	4603      	mov	r3, r0
 8003346:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800334c:	223f      	movs	r2, #63	@ 0x3f
 800334e:	409a      	lsls	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2201      	movs	r2, #1
 800335e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	3718      	adds	r7, #24
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	f010803f 	.word	0xf010803f

08003370 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800337e:	b2db      	uxtb	r3, r3
 8003380:	2b02      	cmp	r3, #2
 8003382:	d004      	beq.n	800338e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2280      	movs	r2, #128	@ 0x80
 8003388:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e00c      	b.n	80033a8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2205      	movs	r2, #5
 8003392:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f022 0201 	bic.w	r2, r2, #1
 80033a4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b086      	sub	sp, #24
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80033bc:	2300      	movs	r3, #0
 80033be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80033c0:	4b8e      	ldr	r3, [pc, #568]	@ (80035fc <HAL_DMA_IRQHandler+0x248>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a8e      	ldr	r2, [pc, #568]	@ (8003600 <HAL_DMA_IRQHandler+0x24c>)
 80033c6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ca:	0a9b      	lsrs	r3, r3, #10
 80033cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033de:	2208      	movs	r2, #8
 80033e0:	409a      	lsls	r2, r3
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	4013      	ands	r3, r2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d01a      	beq.n	8003420 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0304 	and.w	r3, r3, #4
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d013      	beq.n	8003420 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f022 0204 	bic.w	r2, r2, #4
 8003406:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800340c:	2208      	movs	r2, #8
 800340e:	409a      	lsls	r2, r3
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003418:	f043 0201 	orr.w	r2, r3, #1
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003424:	2201      	movs	r2, #1
 8003426:	409a      	lsls	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	4013      	ands	r3, r2
 800342c:	2b00      	cmp	r3, #0
 800342e:	d012      	beq.n	8003456 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00b      	beq.n	8003456 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003442:	2201      	movs	r2, #1
 8003444:	409a      	lsls	r2, r3
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800344e:	f043 0202 	orr.w	r2, r3, #2
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800345a:	2204      	movs	r2, #4
 800345c:	409a      	lsls	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	4013      	ands	r3, r2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d012      	beq.n	800348c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0302 	and.w	r3, r3, #2
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00b      	beq.n	800348c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003478:	2204      	movs	r2, #4
 800347a:	409a      	lsls	r2, r3
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003484:	f043 0204 	orr.w	r2, r3, #4
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003490:	2210      	movs	r2, #16
 8003492:	409a      	lsls	r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	4013      	ands	r3, r2
 8003498:	2b00      	cmp	r3, #0
 800349a:	d043      	beq.n	8003524 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0308 	and.w	r3, r3, #8
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d03c      	beq.n	8003524 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ae:	2210      	movs	r2, #16
 80034b0:	409a      	lsls	r2, r3
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d018      	beq.n	80034f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d108      	bne.n	80034e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d024      	beq.n	8003524 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	4798      	blx	r3
 80034e2:	e01f      	b.n	8003524 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d01b      	beq.n	8003524 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	4798      	blx	r3
 80034f4:	e016      	b.n	8003524 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003500:	2b00      	cmp	r3, #0
 8003502:	d107      	bne.n	8003514 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f022 0208 	bic.w	r2, r2, #8
 8003512:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003518:	2b00      	cmp	r3, #0
 800351a:	d003      	beq.n	8003524 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003528:	2220      	movs	r2, #32
 800352a:	409a      	lsls	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	4013      	ands	r3, r2
 8003530:	2b00      	cmp	r3, #0
 8003532:	f000 808f 	beq.w	8003654 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0310 	and.w	r3, r3, #16
 8003540:	2b00      	cmp	r3, #0
 8003542:	f000 8087 	beq.w	8003654 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800354a:	2220      	movs	r2, #32
 800354c:	409a      	lsls	r2, r3
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b05      	cmp	r3, #5
 800355c:	d136      	bne.n	80035cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f022 0216 	bic.w	r2, r2, #22
 800356c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	695a      	ldr	r2, [r3, #20]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800357c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003582:	2b00      	cmp	r3, #0
 8003584:	d103      	bne.n	800358e <HAL_DMA_IRQHandler+0x1da>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800358a:	2b00      	cmp	r3, #0
 800358c:	d007      	beq.n	800359e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f022 0208 	bic.w	r2, r2, #8
 800359c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035a2:	223f      	movs	r2, #63	@ 0x3f
 80035a4:	409a      	lsls	r2, r3
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2201      	movs	r2, #1
 80035ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d07e      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	4798      	blx	r3
        }
        return;
 80035ca:	e079      	b.n	80036c0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d01d      	beq.n	8003616 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d10d      	bne.n	8003604 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d031      	beq.n	8003654 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	4798      	blx	r3
 80035f8:	e02c      	b.n	8003654 <HAL_DMA_IRQHandler+0x2a0>
 80035fa:	bf00      	nop
 80035fc:	2000000c 	.word	0x2000000c
 8003600:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003608:	2b00      	cmp	r3, #0
 800360a:	d023      	beq.n	8003654 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	4798      	blx	r3
 8003614:	e01e      	b.n	8003654 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003620:	2b00      	cmp	r3, #0
 8003622:	d10f      	bne.n	8003644 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f022 0210 	bic.w	r2, r2, #16
 8003632:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003648:	2b00      	cmp	r3, #0
 800364a:	d003      	beq.n	8003654 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003658:	2b00      	cmp	r3, #0
 800365a:	d032      	beq.n	80036c2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003660:	f003 0301 	and.w	r3, r3, #1
 8003664:	2b00      	cmp	r3, #0
 8003666:	d022      	beq.n	80036ae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2205      	movs	r2, #5
 800366c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f022 0201 	bic.w	r2, r2, #1
 800367e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	3301      	adds	r3, #1
 8003684:	60bb      	str	r3, [r7, #8]
 8003686:	697a      	ldr	r2, [r7, #20]
 8003688:	429a      	cmp	r2, r3
 800368a:	d307      	bcc.n	800369c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b00      	cmp	r3, #0
 8003698:	d1f2      	bne.n	8003680 <HAL_DMA_IRQHandler+0x2cc>
 800369a:	e000      	b.n	800369e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800369c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d005      	beq.n	80036c2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	4798      	blx	r3
 80036be:	e000      	b.n	80036c2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80036c0:	bf00      	nop
    }
  }
}
 80036c2:	3718      	adds	r7, #24
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	3b10      	subs	r3, #16
 80036d8:	4a14      	ldr	r2, [pc, #80]	@ (800372c <DMA_CalcBaseAndBitshift+0x64>)
 80036da:	fba2 2303 	umull	r2, r3, r2, r3
 80036de:	091b      	lsrs	r3, r3, #4
 80036e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80036e2:	4a13      	ldr	r2, [pc, #76]	@ (8003730 <DMA_CalcBaseAndBitshift+0x68>)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	4413      	add	r3, r2
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	461a      	mov	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2b03      	cmp	r3, #3
 80036f4:	d909      	bls.n	800370a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80036fe:	f023 0303 	bic.w	r3, r3, #3
 8003702:	1d1a      	adds	r2, r3, #4
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	659a      	str	r2, [r3, #88]	@ 0x58
 8003708:	e007      	b.n	800371a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003712:	f023 0303 	bic.w	r3, r3, #3
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800371e:	4618      	mov	r0, r3
 8003720:	3714      	adds	r7, #20
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	aaaaaaab 	.word	0xaaaaaaab
 8003730:	0800f0bc 	.word	0x0800f0bc

08003734 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003734:	b480      	push	{r7}
 8003736:	b085      	sub	sp, #20
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800373c:	2300      	movs	r3, #0
 800373e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003744:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d11f      	bne.n	800378e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	2b03      	cmp	r3, #3
 8003752:	d856      	bhi.n	8003802 <DMA_CheckFifoParam+0xce>
 8003754:	a201      	add	r2, pc, #4	@ (adr r2, 800375c <DMA_CheckFifoParam+0x28>)
 8003756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800375a:	bf00      	nop
 800375c:	0800376d 	.word	0x0800376d
 8003760:	0800377f 	.word	0x0800377f
 8003764:	0800376d 	.word	0x0800376d
 8003768:	08003803 	.word	0x08003803
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003770:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d046      	beq.n	8003806 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800377c:	e043      	b.n	8003806 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003782:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003786:	d140      	bne.n	800380a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800378c:	e03d      	b.n	800380a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003796:	d121      	bne.n	80037dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	2b03      	cmp	r3, #3
 800379c:	d837      	bhi.n	800380e <DMA_CheckFifoParam+0xda>
 800379e:	a201      	add	r2, pc, #4	@ (adr r2, 80037a4 <DMA_CheckFifoParam+0x70>)
 80037a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a4:	080037b5 	.word	0x080037b5
 80037a8:	080037bb 	.word	0x080037bb
 80037ac:	080037b5 	.word	0x080037b5
 80037b0:	080037cd 	.word	0x080037cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	73fb      	strb	r3, [r7, #15]
      break;
 80037b8:	e030      	b.n	800381c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037be:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d025      	beq.n	8003812 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037ca:	e022      	b.n	8003812 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80037d4:	d11f      	bne.n	8003816 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80037da:	e01c      	b.n	8003816 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d903      	bls.n	80037ea <DMA_CheckFifoParam+0xb6>
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	2b03      	cmp	r3, #3
 80037e6:	d003      	beq.n	80037f0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80037e8:	e018      	b.n	800381c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	73fb      	strb	r3, [r7, #15]
      break;
 80037ee:	e015      	b.n	800381c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00e      	beq.n	800381a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	73fb      	strb	r3, [r7, #15]
      break;
 8003800:	e00b      	b.n	800381a <DMA_CheckFifoParam+0xe6>
      break;
 8003802:	bf00      	nop
 8003804:	e00a      	b.n	800381c <DMA_CheckFifoParam+0xe8>
      break;
 8003806:	bf00      	nop
 8003808:	e008      	b.n	800381c <DMA_CheckFifoParam+0xe8>
      break;
 800380a:	bf00      	nop
 800380c:	e006      	b.n	800381c <DMA_CheckFifoParam+0xe8>
      break;
 800380e:	bf00      	nop
 8003810:	e004      	b.n	800381c <DMA_CheckFifoParam+0xe8>
      break;
 8003812:	bf00      	nop
 8003814:	e002      	b.n	800381c <DMA_CheckFifoParam+0xe8>
      break;   
 8003816:	bf00      	nop
 8003818:	e000      	b.n	800381c <DMA_CheckFifoParam+0xe8>
      break;
 800381a:	bf00      	nop
    }
  } 
  
  return status; 
 800381c:	7bfb      	ldrb	r3, [r7, #15]
}
 800381e:	4618      	mov	r0, r3
 8003820:	3714      	adds	r7, #20
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop

0800382c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800382c:	b480      	push	{r7}
 800382e:	b089      	sub	sp, #36	@ 0x24
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003836:	2300      	movs	r3, #0
 8003838:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800383a:	2300      	movs	r3, #0
 800383c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800383e:	2300      	movs	r3, #0
 8003840:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003842:	2300      	movs	r3, #0
 8003844:	61fb      	str	r3, [r7, #28]
 8003846:	e159      	b.n	8003afc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003848:	2201      	movs	r2, #1
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	fa02 f303 	lsl.w	r3, r2, r3
 8003850:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	4013      	ands	r3, r2
 800385a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800385c:	693a      	ldr	r2, [r7, #16]
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	429a      	cmp	r2, r3
 8003862:	f040 8148 	bne.w	8003af6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f003 0303 	and.w	r3, r3, #3
 800386e:	2b01      	cmp	r3, #1
 8003870:	d005      	beq.n	800387e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800387a:	2b02      	cmp	r3, #2
 800387c:	d130      	bne.n	80038e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	005b      	lsls	r3, r3, #1
 8003888:	2203      	movs	r2, #3
 800388a:	fa02 f303 	lsl.w	r3, r2, r3
 800388e:	43db      	mvns	r3, r3
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	4013      	ands	r3, r2
 8003894:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	68da      	ldr	r2, [r3, #12]
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	fa02 f303 	lsl.w	r3, r2, r3
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	69ba      	ldr	r2, [r7, #24]
 80038ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038b4:	2201      	movs	r2, #1
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	fa02 f303 	lsl.w	r3, r2, r3
 80038bc:	43db      	mvns	r3, r3
 80038be:	69ba      	ldr	r2, [r7, #24]
 80038c0:	4013      	ands	r3, r2
 80038c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	091b      	lsrs	r3, r3, #4
 80038ca:	f003 0201 	and.w	r2, r3, #1
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	fa02 f303 	lsl.w	r3, r2, r3
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f003 0303 	and.w	r3, r3, #3
 80038e8:	2b03      	cmp	r3, #3
 80038ea:	d017      	beq.n	800391c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	005b      	lsls	r3, r3, #1
 80038f6:	2203      	movs	r2, #3
 80038f8:	fa02 f303 	lsl.w	r3, r2, r3
 80038fc:	43db      	mvns	r3, r3
 80038fe:	69ba      	ldr	r2, [r7, #24]
 8003900:	4013      	ands	r3, r2
 8003902:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	689a      	ldr	r2, [r3, #8]
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	005b      	lsls	r3, r3, #1
 800390c:	fa02 f303 	lsl.w	r3, r2, r3
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	4313      	orrs	r3, r2
 8003914:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f003 0303 	and.w	r3, r3, #3
 8003924:	2b02      	cmp	r3, #2
 8003926:	d123      	bne.n	8003970 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	08da      	lsrs	r2, r3, #3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	3208      	adds	r2, #8
 8003930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003934:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	f003 0307 	and.w	r3, r3, #7
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	220f      	movs	r2, #15
 8003940:	fa02 f303 	lsl.w	r3, r2, r3
 8003944:	43db      	mvns	r3, r3
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	4013      	ands	r3, r2
 800394a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	691a      	ldr	r2, [r3, #16]
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	f003 0307 	and.w	r3, r3, #7
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	fa02 f303 	lsl.w	r3, r2, r3
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	4313      	orrs	r3, r2
 8003960:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	08da      	lsrs	r2, r3, #3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	3208      	adds	r2, #8
 800396a:	69b9      	ldr	r1, [r7, #24]
 800396c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	005b      	lsls	r3, r3, #1
 800397a:	2203      	movs	r2, #3
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	43db      	mvns	r3, r3
 8003982:	69ba      	ldr	r2, [r7, #24]
 8003984:	4013      	ands	r3, r2
 8003986:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f003 0203 	and.w	r2, r3, #3
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	005b      	lsls	r3, r3, #1
 8003994:	fa02 f303 	lsl.w	r3, r2, r3
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	4313      	orrs	r3, r2
 800399c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	69ba      	ldr	r2, [r7, #24]
 80039a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	f000 80a2 	beq.w	8003af6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039b2:	2300      	movs	r3, #0
 80039b4:	60fb      	str	r3, [r7, #12]
 80039b6:	4b57      	ldr	r3, [pc, #348]	@ (8003b14 <HAL_GPIO_Init+0x2e8>)
 80039b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ba:	4a56      	ldr	r2, [pc, #344]	@ (8003b14 <HAL_GPIO_Init+0x2e8>)
 80039bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80039c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80039c2:	4b54      	ldr	r3, [pc, #336]	@ (8003b14 <HAL_GPIO_Init+0x2e8>)
 80039c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039ca:	60fb      	str	r3, [r7, #12]
 80039cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039ce:	4a52      	ldr	r2, [pc, #328]	@ (8003b18 <HAL_GPIO_Init+0x2ec>)
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	089b      	lsrs	r3, r3, #2
 80039d4:	3302      	adds	r3, #2
 80039d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	f003 0303 	and.w	r3, r3, #3
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	220f      	movs	r2, #15
 80039e6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ea:	43db      	mvns	r3, r3
 80039ec:	69ba      	ldr	r2, [r7, #24]
 80039ee:	4013      	ands	r3, r2
 80039f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a49      	ldr	r2, [pc, #292]	@ (8003b1c <HAL_GPIO_Init+0x2f0>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d019      	beq.n	8003a2e <HAL_GPIO_Init+0x202>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a48      	ldr	r2, [pc, #288]	@ (8003b20 <HAL_GPIO_Init+0x2f4>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d013      	beq.n	8003a2a <HAL_GPIO_Init+0x1fe>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a47      	ldr	r2, [pc, #284]	@ (8003b24 <HAL_GPIO_Init+0x2f8>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d00d      	beq.n	8003a26 <HAL_GPIO_Init+0x1fa>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a46      	ldr	r2, [pc, #280]	@ (8003b28 <HAL_GPIO_Init+0x2fc>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d007      	beq.n	8003a22 <HAL_GPIO_Init+0x1f6>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a45      	ldr	r2, [pc, #276]	@ (8003b2c <HAL_GPIO_Init+0x300>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d101      	bne.n	8003a1e <HAL_GPIO_Init+0x1f2>
 8003a1a:	2304      	movs	r3, #4
 8003a1c:	e008      	b.n	8003a30 <HAL_GPIO_Init+0x204>
 8003a1e:	2307      	movs	r3, #7
 8003a20:	e006      	b.n	8003a30 <HAL_GPIO_Init+0x204>
 8003a22:	2303      	movs	r3, #3
 8003a24:	e004      	b.n	8003a30 <HAL_GPIO_Init+0x204>
 8003a26:	2302      	movs	r3, #2
 8003a28:	e002      	b.n	8003a30 <HAL_GPIO_Init+0x204>
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e000      	b.n	8003a30 <HAL_GPIO_Init+0x204>
 8003a2e:	2300      	movs	r3, #0
 8003a30:	69fa      	ldr	r2, [r7, #28]
 8003a32:	f002 0203 	and.w	r2, r2, #3
 8003a36:	0092      	lsls	r2, r2, #2
 8003a38:	4093      	lsls	r3, r2
 8003a3a:	69ba      	ldr	r2, [r7, #24]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a40:	4935      	ldr	r1, [pc, #212]	@ (8003b18 <HAL_GPIO_Init+0x2ec>)
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	089b      	lsrs	r3, r3, #2
 8003a46:	3302      	adds	r3, #2
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a4e:	4b38      	ldr	r3, [pc, #224]	@ (8003b30 <HAL_GPIO_Init+0x304>)
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	43db      	mvns	r3, r3
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d003      	beq.n	8003a72 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003a6a:	69ba      	ldr	r2, [r7, #24]
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a72:	4a2f      	ldr	r2, [pc, #188]	@ (8003b30 <HAL_GPIO_Init+0x304>)
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a78:	4b2d      	ldr	r3, [pc, #180]	@ (8003b30 <HAL_GPIO_Init+0x304>)
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	43db      	mvns	r3, r3
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	4013      	ands	r3, r2
 8003a86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d003      	beq.n	8003a9c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003a94:	69ba      	ldr	r2, [r7, #24]
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a9c:	4a24      	ldr	r2, [pc, #144]	@ (8003b30 <HAL_GPIO_Init+0x304>)
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003aa2:	4b23      	ldr	r3, [pc, #140]	@ (8003b30 <HAL_GPIO_Init+0x304>)
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	43db      	mvns	r3, r3
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	4013      	ands	r3, r2
 8003ab0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d003      	beq.n	8003ac6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003abe:	69ba      	ldr	r2, [r7, #24]
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ac6:	4a1a      	ldr	r2, [pc, #104]	@ (8003b30 <HAL_GPIO_Init+0x304>)
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003acc:	4b18      	ldr	r3, [pc, #96]	@ (8003b30 <HAL_GPIO_Init+0x304>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	43db      	mvns	r3, r3
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	4013      	ands	r3, r2
 8003ada:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d003      	beq.n	8003af0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003ae8:	69ba      	ldr	r2, [r7, #24]
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003af0:	4a0f      	ldr	r2, [pc, #60]	@ (8003b30 <HAL_GPIO_Init+0x304>)
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	3301      	adds	r3, #1
 8003afa:	61fb      	str	r3, [r7, #28]
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	2b0f      	cmp	r3, #15
 8003b00:	f67f aea2 	bls.w	8003848 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b04:	bf00      	nop
 8003b06:	bf00      	nop
 8003b08:	3724      	adds	r7, #36	@ 0x24
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	40023800 	.word	0x40023800
 8003b18:	40013800 	.word	0x40013800
 8003b1c:	40020000 	.word	0x40020000
 8003b20:	40020400 	.word	0x40020400
 8003b24:	40020800 	.word	0x40020800
 8003b28:	40020c00 	.word	0x40020c00
 8003b2c:	40021000 	.word	0x40021000
 8003b30:	40013c00 	.word	0x40013c00

08003b34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b085      	sub	sp, #20
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	691a      	ldr	r2, [r3, #16]
 8003b44:	887b      	ldrh	r3, [r7, #2]
 8003b46:	4013      	ands	r3, r2
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d002      	beq.n	8003b52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	73fb      	strb	r3, [r7, #15]
 8003b50:	e001      	b.n	8003b56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b52:	2300      	movs	r3, #0
 8003b54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3714      	adds	r7, #20
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	807b      	strh	r3, [r7, #2]
 8003b70:	4613      	mov	r3, r2
 8003b72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b74:	787b      	ldrb	r3, [r7, #1]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d003      	beq.n	8003b82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b7a:	887a      	ldrh	r2, [r7, #2]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b80:	e003      	b.n	8003b8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b82:	887b      	ldrh	r3, [r7, #2]
 8003b84:	041a      	lsls	r2, r3, #16
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	619a      	str	r2, [r3, #24]
}
 8003b8a:	bf00      	nop
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
	...

08003b98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003ba2:	4b08      	ldr	r3, [pc, #32]	@ (8003bc4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ba4:	695a      	ldr	r2, [r3, #20]
 8003ba6:	88fb      	ldrh	r3, [r7, #6]
 8003ba8:	4013      	ands	r3, r2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d006      	beq.n	8003bbc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003bae:	4a05      	ldr	r2, [pc, #20]	@ (8003bc4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003bb0:	88fb      	ldrh	r3, [r7, #6]
 8003bb2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003bb4:	88fb      	ldrh	r3, [r7, #6]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7fe fe5c 	bl	8002874 <HAL_GPIO_EXTI_Callback>
  }
}
 8003bbc:	bf00      	nop
 8003bbe:	3708      	adds	r7, #8
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	40013c00 	.word	0x40013c00

08003bc8 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b086      	sub	sp, #24
 8003bcc:	af02      	add	r7, sp, #8
 8003bce:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d101      	bne.n	8003bda <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e059      	b.n	8003c8e <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d106      	bne.n	8003bfa <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f008 f819 	bl	800bc2c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2203      	movs	r2, #3
 8003bfe:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c08:	d102      	bne.n	8003c10 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4618      	mov	r0, r3
 8003c16:	f004 fec4 	bl	80089a2 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6818      	ldr	r0, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	7c1a      	ldrb	r2, [r3, #16]
 8003c22:	f88d 2000 	strb.w	r2, [sp]
 8003c26:	3304      	adds	r3, #4
 8003c28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c2a:	f004 fe45 	bl	80088b8 <USB_CoreInit>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d005      	beq.n	8003c40 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2202      	movs	r2, #2
 8003c38:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e026      	b.n	8003c8e <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2101      	movs	r1, #1
 8003c46:	4618      	mov	r0, r3
 8003c48:	f004 febc 	bl	80089c4 <USB_SetCurrentMode>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d005      	beq.n	8003c5e <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2202      	movs	r2, #2
 8003c56:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e017      	b.n	8003c8e <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6818      	ldr	r0, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	7c1a      	ldrb	r2, [r3, #16]
 8003c66:	f88d 2000 	strb.w	r2, [sp]
 8003c6a:	3304      	adds	r3, #4
 8003c6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c6e:	f005 f865 	bl	8008d3c <USB_HostInit>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d005      	beq.n	8003c84 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2202      	movs	r2, #2
 8003c7c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e004      	b.n	8003c8e <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3710      	adds	r7, #16
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8003c96:	b590      	push	{r4, r7, lr}
 8003c98:	b08b      	sub	sp, #44	@ 0x2c
 8003c9a:	af04      	add	r7, sp, #16
 8003c9c:	6078      	str	r0, [r7, #4]
 8003c9e:	4608      	mov	r0, r1
 8003ca0:	4611      	mov	r1, r2
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	70fb      	strb	r3, [r7, #3]
 8003ca8:	460b      	mov	r3, r1
 8003caa:	70bb      	strb	r3, [r7, #2]
 8003cac:	4613      	mov	r3, r2
 8003cae:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8003cb0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003cb2:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d101      	bne.n	8003cc2 <HAL_HCD_HC_Init+0x2c>
 8003cbe:	2302      	movs	r3, #2
 8003cc0:	e09d      	b.n	8003dfe <HAL_HCD_HC_Init+0x168>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8003cca:	78fa      	ldrb	r2, [r7, #3]
 8003ccc:	6879      	ldr	r1, [r7, #4]
 8003cce:	4613      	mov	r3, r2
 8003cd0:	011b      	lsls	r3, r3, #4
 8003cd2:	1a9b      	subs	r3, r3, r2
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	440b      	add	r3, r1
 8003cd8:	3319      	adds	r3, #25
 8003cda:	2200      	movs	r2, #0
 8003cdc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003cde:	78fa      	ldrb	r2, [r7, #3]
 8003ce0:	6879      	ldr	r1, [r7, #4]
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	011b      	lsls	r3, r3, #4
 8003ce6:	1a9b      	subs	r3, r3, r2
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	440b      	add	r3, r1
 8003cec:	3314      	adds	r3, #20
 8003cee:	787a      	ldrb	r2, [r7, #1]
 8003cf0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003cf2:	78fa      	ldrb	r2, [r7, #3]
 8003cf4:	6879      	ldr	r1, [r7, #4]
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	011b      	lsls	r3, r3, #4
 8003cfa:	1a9b      	subs	r3, r3, r2
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	440b      	add	r3, r1
 8003d00:	3315      	adds	r3, #21
 8003d02:	78fa      	ldrb	r2, [r7, #3]
 8003d04:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003d06:	78fa      	ldrb	r2, [r7, #3]
 8003d08:	6879      	ldr	r1, [r7, #4]
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	011b      	lsls	r3, r3, #4
 8003d0e:	1a9b      	subs	r3, r3, r2
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	440b      	add	r3, r1
 8003d14:	3326      	adds	r3, #38	@ 0x26
 8003d16:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8003d1a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003d1c:	78fa      	ldrb	r2, [r7, #3]
 8003d1e:	78bb      	ldrb	r3, [r7, #2]
 8003d20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d24:	b2d8      	uxtb	r0, r3
 8003d26:	6879      	ldr	r1, [r7, #4]
 8003d28:	4613      	mov	r3, r2
 8003d2a:	011b      	lsls	r3, r3, #4
 8003d2c:	1a9b      	subs	r3, r3, r2
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	440b      	add	r3, r1
 8003d32:	3316      	adds	r3, #22
 8003d34:	4602      	mov	r2, r0
 8003d36:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8003d38:	78fb      	ldrb	r3, [r7, #3]
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f000 fbc7 	bl	80044d0 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8003d42:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	da0a      	bge.n	8003d60 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003d4a:	78fa      	ldrb	r2, [r7, #3]
 8003d4c:	6879      	ldr	r1, [r7, #4]
 8003d4e:	4613      	mov	r3, r2
 8003d50:	011b      	lsls	r3, r3, #4
 8003d52:	1a9b      	subs	r3, r3, r2
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	440b      	add	r3, r1
 8003d58:	3317      	adds	r3, #23
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	701a      	strb	r2, [r3, #0]
 8003d5e:	e009      	b.n	8003d74 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003d60:	78fa      	ldrb	r2, [r7, #3]
 8003d62:	6879      	ldr	r1, [r7, #4]
 8003d64:	4613      	mov	r3, r2
 8003d66:	011b      	lsls	r3, r3, #4
 8003d68:	1a9b      	subs	r3, r3, r2
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	440b      	add	r3, r1
 8003d6e:	3317      	adds	r3, #23
 8003d70:	2200      	movs	r2, #0
 8003d72:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f005 f92d 	bl	8008fd8 <USB_GetHostSpeed>
 8003d7e:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8003d80:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d10b      	bne.n	8003da0 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8003d88:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d107      	bne.n	8003da0 <HAL_HCD_HC_Init+0x10a>
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d104      	bne.n	8003da0 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	2bbc      	cmp	r3, #188	@ 0xbc
 8003d9a:	d901      	bls.n	8003da0 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8003d9c:	23bc      	movs	r3, #188	@ 0xbc
 8003d9e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8003da0:	78fa      	ldrb	r2, [r7, #3]
 8003da2:	6879      	ldr	r1, [r7, #4]
 8003da4:	4613      	mov	r3, r2
 8003da6:	011b      	lsls	r3, r3, #4
 8003da8:	1a9b      	subs	r3, r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	440b      	add	r3, r1
 8003dae:	3318      	adds	r3, #24
 8003db0:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8003db4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8003db6:	78fa      	ldrb	r2, [r7, #3]
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	b298      	uxth	r0, r3
 8003dbc:	6879      	ldr	r1, [r7, #4]
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	011b      	lsls	r3, r3, #4
 8003dc2:	1a9b      	subs	r3, r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	440b      	add	r3, r1
 8003dc8:	3328      	adds	r3, #40	@ 0x28
 8003dca:	4602      	mov	r2, r0
 8003dcc:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6818      	ldr	r0, [r3, #0]
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	787c      	ldrb	r4, [r7, #1]
 8003dd8:	78ba      	ldrb	r2, [r7, #2]
 8003dda:	78f9      	ldrb	r1, [r7, #3]
 8003ddc:	9302      	str	r3, [sp, #8]
 8003dde:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003de2:	9301      	str	r3, [sp, #4]
 8003de4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003de8:	9300      	str	r3, [sp, #0]
 8003dea:	4623      	mov	r3, r4
 8003dec:	f005 f91c 	bl	8009028 <USB_HC_Init>
 8003df0:	4603      	mov	r3, r0
 8003df2:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8003dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	371c      	adds	r7, #28
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd90      	pop	{r4, r7, pc}

08003e06 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b084      	sub	sp, #16
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
 8003e0e:	460b      	mov	r3, r1
 8003e10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003e12:	2300      	movs	r3, #0
 8003e14:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d101      	bne.n	8003e24 <HAL_HCD_HC_Halt+0x1e>
 8003e20:	2302      	movs	r3, #2
 8003e22:	e00f      	b.n	8003e44 <HAL_HCD_HC_Halt+0x3e>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	78fa      	ldrb	r2, [r7, #3]
 8003e32:	4611      	mov	r1, r2
 8003e34:	4618      	mov	r0, r3
 8003e36:	f005 fc62 	bl	80096fe <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8003e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3710      	adds	r7, #16
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	4608      	mov	r0, r1
 8003e56:	4611      	mov	r1, r2
 8003e58:	461a      	mov	r2, r3
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	70fb      	strb	r3, [r7, #3]
 8003e5e:	460b      	mov	r3, r1
 8003e60:	70bb      	strb	r3, [r7, #2]
 8003e62:	4613      	mov	r3, r2
 8003e64:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003e66:	78fa      	ldrb	r2, [r7, #3]
 8003e68:	6879      	ldr	r1, [r7, #4]
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	011b      	lsls	r3, r3, #4
 8003e6e:	1a9b      	subs	r3, r3, r2
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	440b      	add	r3, r1
 8003e74:	3317      	adds	r3, #23
 8003e76:	78ba      	ldrb	r2, [r7, #2]
 8003e78:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003e7a:	78fa      	ldrb	r2, [r7, #3]
 8003e7c:	6879      	ldr	r1, [r7, #4]
 8003e7e:	4613      	mov	r3, r2
 8003e80:	011b      	lsls	r3, r3, #4
 8003e82:	1a9b      	subs	r3, r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	440b      	add	r3, r1
 8003e88:	3326      	adds	r3, #38	@ 0x26
 8003e8a:	787a      	ldrb	r2, [r7, #1]
 8003e8c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003e8e:	7c3b      	ldrb	r3, [r7, #16]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d114      	bne.n	8003ebe <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003e94:	78fa      	ldrb	r2, [r7, #3]
 8003e96:	6879      	ldr	r1, [r7, #4]
 8003e98:	4613      	mov	r3, r2
 8003e9a:	011b      	lsls	r3, r3, #4
 8003e9c:	1a9b      	subs	r3, r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	440b      	add	r3, r1
 8003ea2:	332a      	adds	r3, #42	@ 0x2a
 8003ea4:	2203      	movs	r2, #3
 8003ea6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003ea8:	78fa      	ldrb	r2, [r7, #3]
 8003eaa:	6879      	ldr	r1, [r7, #4]
 8003eac:	4613      	mov	r3, r2
 8003eae:	011b      	lsls	r3, r3, #4
 8003eb0:	1a9b      	subs	r3, r3, r2
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	440b      	add	r3, r1
 8003eb6:	3319      	adds	r3, #25
 8003eb8:	7f3a      	ldrb	r2, [r7, #28]
 8003eba:	701a      	strb	r2, [r3, #0]
 8003ebc:	e009      	b.n	8003ed2 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003ebe:	78fa      	ldrb	r2, [r7, #3]
 8003ec0:	6879      	ldr	r1, [r7, #4]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	011b      	lsls	r3, r3, #4
 8003ec6:	1a9b      	subs	r3, r3, r2
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	440b      	add	r3, r1
 8003ecc:	332a      	adds	r3, #42	@ 0x2a
 8003ece:	2202      	movs	r2, #2
 8003ed0:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003ed2:	787b      	ldrb	r3, [r7, #1]
 8003ed4:	2b03      	cmp	r3, #3
 8003ed6:	f200 8102 	bhi.w	80040de <HAL_HCD_HC_SubmitRequest+0x292>
 8003eda:	a201      	add	r2, pc, #4	@ (adr r2, 8003ee0 <HAL_HCD_HC_SubmitRequest+0x94>)
 8003edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee0:	08003ef1 	.word	0x08003ef1
 8003ee4:	080040c9 	.word	0x080040c9
 8003ee8:	08003fb5 	.word	0x08003fb5
 8003eec:	0800403f 	.word	0x0800403f
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8003ef0:	7c3b      	ldrb	r3, [r7, #16]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	f040 80f5 	bne.w	80040e2 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8003ef8:	78bb      	ldrb	r3, [r7, #2]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d12d      	bne.n	8003f5a <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8003efe:	8b3b      	ldrh	r3, [r7, #24]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d109      	bne.n	8003f18 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8003f04:	78fa      	ldrb	r2, [r7, #3]
 8003f06:	6879      	ldr	r1, [r7, #4]
 8003f08:	4613      	mov	r3, r2
 8003f0a:	011b      	lsls	r3, r3, #4
 8003f0c:	1a9b      	subs	r3, r3, r2
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	440b      	add	r3, r1
 8003f12:	333d      	adds	r3, #61	@ 0x3d
 8003f14:	2201      	movs	r2, #1
 8003f16:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8003f18:	78fa      	ldrb	r2, [r7, #3]
 8003f1a:	6879      	ldr	r1, [r7, #4]
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	011b      	lsls	r3, r3, #4
 8003f20:	1a9b      	subs	r3, r3, r2
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	440b      	add	r3, r1
 8003f26:	333d      	adds	r3, #61	@ 0x3d
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d10a      	bne.n	8003f44 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003f2e:	78fa      	ldrb	r2, [r7, #3]
 8003f30:	6879      	ldr	r1, [r7, #4]
 8003f32:	4613      	mov	r3, r2
 8003f34:	011b      	lsls	r3, r3, #4
 8003f36:	1a9b      	subs	r3, r3, r2
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	440b      	add	r3, r1
 8003f3c:	332a      	adds	r3, #42	@ 0x2a
 8003f3e:	2200      	movs	r2, #0
 8003f40:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8003f42:	e0ce      	b.n	80040e2 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003f44:	78fa      	ldrb	r2, [r7, #3]
 8003f46:	6879      	ldr	r1, [r7, #4]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	011b      	lsls	r3, r3, #4
 8003f4c:	1a9b      	subs	r3, r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	440b      	add	r3, r1
 8003f52:	332a      	adds	r3, #42	@ 0x2a
 8003f54:	2202      	movs	r2, #2
 8003f56:	701a      	strb	r2, [r3, #0]
      break;
 8003f58:	e0c3      	b.n	80040e2 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8003f5a:	78fa      	ldrb	r2, [r7, #3]
 8003f5c:	6879      	ldr	r1, [r7, #4]
 8003f5e:	4613      	mov	r3, r2
 8003f60:	011b      	lsls	r3, r3, #4
 8003f62:	1a9b      	subs	r3, r3, r2
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	440b      	add	r3, r1
 8003f68:	331a      	adds	r3, #26
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	f040 80b8 	bne.w	80040e2 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8003f72:	78fa      	ldrb	r2, [r7, #3]
 8003f74:	6879      	ldr	r1, [r7, #4]
 8003f76:	4613      	mov	r3, r2
 8003f78:	011b      	lsls	r3, r3, #4
 8003f7a:	1a9b      	subs	r3, r3, r2
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	440b      	add	r3, r1
 8003f80:	333c      	adds	r3, #60	@ 0x3c
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d10a      	bne.n	8003f9e <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003f88:	78fa      	ldrb	r2, [r7, #3]
 8003f8a:	6879      	ldr	r1, [r7, #4]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	011b      	lsls	r3, r3, #4
 8003f90:	1a9b      	subs	r3, r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	440b      	add	r3, r1
 8003f96:	332a      	adds	r3, #42	@ 0x2a
 8003f98:	2200      	movs	r2, #0
 8003f9a:	701a      	strb	r2, [r3, #0]
      break;
 8003f9c:	e0a1      	b.n	80040e2 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003f9e:	78fa      	ldrb	r2, [r7, #3]
 8003fa0:	6879      	ldr	r1, [r7, #4]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	011b      	lsls	r3, r3, #4
 8003fa6:	1a9b      	subs	r3, r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	440b      	add	r3, r1
 8003fac:	332a      	adds	r3, #42	@ 0x2a
 8003fae:	2202      	movs	r2, #2
 8003fb0:	701a      	strb	r2, [r3, #0]
      break;
 8003fb2:	e096      	b.n	80040e2 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003fb4:	78bb      	ldrb	r3, [r7, #2]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d120      	bne.n	8003ffc <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003fba:	78fa      	ldrb	r2, [r7, #3]
 8003fbc:	6879      	ldr	r1, [r7, #4]
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	011b      	lsls	r3, r3, #4
 8003fc2:	1a9b      	subs	r3, r3, r2
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	440b      	add	r3, r1
 8003fc8:	333d      	adds	r3, #61	@ 0x3d
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d10a      	bne.n	8003fe6 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003fd0:	78fa      	ldrb	r2, [r7, #3]
 8003fd2:	6879      	ldr	r1, [r7, #4]
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	011b      	lsls	r3, r3, #4
 8003fd8:	1a9b      	subs	r3, r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	440b      	add	r3, r1
 8003fde:	332a      	adds	r3, #42	@ 0x2a
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003fe4:	e07e      	b.n	80040e4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003fe6:	78fa      	ldrb	r2, [r7, #3]
 8003fe8:	6879      	ldr	r1, [r7, #4]
 8003fea:	4613      	mov	r3, r2
 8003fec:	011b      	lsls	r3, r3, #4
 8003fee:	1a9b      	subs	r3, r3, r2
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	440b      	add	r3, r1
 8003ff4:	332a      	adds	r3, #42	@ 0x2a
 8003ff6:	2202      	movs	r2, #2
 8003ff8:	701a      	strb	r2, [r3, #0]
      break;
 8003ffa:	e073      	b.n	80040e4 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003ffc:	78fa      	ldrb	r2, [r7, #3]
 8003ffe:	6879      	ldr	r1, [r7, #4]
 8004000:	4613      	mov	r3, r2
 8004002:	011b      	lsls	r3, r3, #4
 8004004:	1a9b      	subs	r3, r3, r2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	440b      	add	r3, r1
 800400a:	333c      	adds	r3, #60	@ 0x3c
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d10a      	bne.n	8004028 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004012:	78fa      	ldrb	r2, [r7, #3]
 8004014:	6879      	ldr	r1, [r7, #4]
 8004016:	4613      	mov	r3, r2
 8004018:	011b      	lsls	r3, r3, #4
 800401a:	1a9b      	subs	r3, r3, r2
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	440b      	add	r3, r1
 8004020:	332a      	adds	r3, #42	@ 0x2a
 8004022:	2200      	movs	r2, #0
 8004024:	701a      	strb	r2, [r3, #0]
      break;
 8004026:	e05d      	b.n	80040e4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004028:	78fa      	ldrb	r2, [r7, #3]
 800402a:	6879      	ldr	r1, [r7, #4]
 800402c:	4613      	mov	r3, r2
 800402e:	011b      	lsls	r3, r3, #4
 8004030:	1a9b      	subs	r3, r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	440b      	add	r3, r1
 8004036:	332a      	adds	r3, #42	@ 0x2a
 8004038:	2202      	movs	r2, #2
 800403a:	701a      	strb	r2, [r3, #0]
      break;
 800403c:	e052      	b.n	80040e4 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800403e:	78bb      	ldrb	r3, [r7, #2]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d120      	bne.n	8004086 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004044:	78fa      	ldrb	r2, [r7, #3]
 8004046:	6879      	ldr	r1, [r7, #4]
 8004048:	4613      	mov	r3, r2
 800404a:	011b      	lsls	r3, r3, #4
 800404c:	1a9b      	subs	r3, r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	440b      	add	r3, r1
 8004052:	333d      	adds	r3, #61	@ 0x3d
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d10a      	bne.n	8004070 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800405a:	78fa      	ldrb	r2, [r7, #3]
 800405c:	6879      	ldr	r1, [r7, #4]
 800405e:	4613      	mov	r3, r2
 8004060:	011b      	lsls	r3, r3, #4
 8004062:	1a9b      	subs	r3, r3, r2
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	440b      	add	r3, r1
 8004068:	332a      	adds	r3, #42	@ 0x2a
 800406a:	2200      	movs	r2, #0
 800406c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800406e:	e039      	b.n	80040e4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004070:	78fa      	ldrb	r2, [r7, #3]
 8004072:	6879      	ldr	r1, [r7, #4]
 8004074:	4613      	mov	r3, r2
 8004076:	011b      	lsls	r3, r3, #4
 8004078:	1a9b      	subs	r3, r3, r2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	440b      	add	r3, r1
 800407e:	332a      	adds	r3, #42	@ 0x2a
 8004080:	2202      	movs	r2, #2
 8004082:	701a      	strb	r2, [r3, #0]
      break;
 8004084:	e02e      	b.n	80040e4 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004086:	78fa      	ldrb	r2, [r7, #3]
 8004088:	6879      	ldr	r1, [r7, #4]
 800408a:	4613      	mov	r3, r2
 800408c:	011b      	lsls	r3, r3, #4
 800408e:	1a9b      	subs	r3, r3, r2
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	440b      	add	r3, r1
 8004094:	333c      	adds	r3, #60	@ 0x3c
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d10a      	bne.n	80040b2 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800409c:	78fa      	ldrb	r2, [r7, #3]
 800409e:	6879      	ldr	r1, [r7, #4]
 80040a0:	4613      	mov	r3, r2
 80040a2:	011b      	lsls	r3, r3, #4
 80040a4:	1a9b      	subs	r3, r3, r2
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	440b      	add	r3, r1
 80040aa:	332a      	adds	r3, #42	@ 0x2a
 80040ac:	2200      	movs	r2, #0
 80040ae:	701a      	strb	r2, [r3, #0]
      break;
 80040b0:	e018      	b.n	80040e4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80040b2:	78fa      	ldrb	r2, [r7, #3]
 80040b4:	6879      	ldr	r1, [r7, #4]
 80040b6:	4613      	mov	r3, r2
 80040b8:	011b      	lsls	r3, r3, #4
 80040ba:	1a9b      	subs	r3, r3, r2
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	440b      	add	r3, r1
 80040c0:	332a      	adds	r3, #42	@ 0x2a
 80040c2:	2202      	movs	r2, #2
 80040c4:	701a      	strb	r2, [r3, #0]
      break;
 80040c6:	e00d      	b.n	80040e4 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80040c8:	78fa      	ldrb	r2, [r7, #3]
 80040ca:	6879      	ldr	r1, [r7, #4]
 80040cc:	4613      	mov	r3, r2
 80040ce:	011b      	lsls	r3, r3, #4
 80040d0:	1a9b      	subs	r3, r3, r2
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	440b      	add	r3, r1
 80040d6:	332a      	adds	r3, #42	@ 0x2a
 80040d8:	2200      	movs	r2, #0
 80040da:	701a      	strb	r2, [r3, #0]
      break;
 80040dc:	e002      	b.n	80040e4 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80040de:	bf00      	nop
 80040e0:	e000      	b.n	80040e4 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80040e2:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80040e4:	78fa      	ldrb	r2, [r7, #3]
 80040e6:	6879      	ldr	r1, [r7, #4]
 80040e8:	4613      	mov	r3, r2
 80040ea:	011b      	lsls	r3, r3, #4
 80040ec:	1a9b      	subs	r3, r3, r2
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	440b      	add	r3, r1
 80040f2:	332c      	adds	r3, #44	@ 0x2c
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80040f8:	78fa      	ldrb	r2, [r7, #3]
 80040fa:	8b39      	ldrh	r1, [r7, #24]
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	4613      	mov	r3, r2
 8004100:	011b      	lsls	r3, r3, #4
 8004102:	1a9b      	subs	r3, r3, r2
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	4403      	add	r3, r0
 8004108:	3334      	adds	r3, #52	@ 0x34
 800410a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800410c:	78fa      	ldrb	r2, [r7, #3]
 800410e:	6879      	ldr	r1, [r7, #4]
 8004110:	4613      	mov	r3, r2
 8004112:	011b      	lsls	r3, r3, #4
 8004114:	1a9b      	subs	r3, r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	440b      	add	r3, r1
 800411a:	334c      	adds	r3, #76	@ 0x4c
 800411c:	2200      	movs	r2, #0
 800411e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004120:	78fa      	ldrb	r2, [r7, #3]
 8004122:	6879      	ldr	r1, [r7, #4]
 8004124:	4613      	mov	r3, r2
 8004126:	011b      	lsls	r3, r3, #4
 8004128:	1a9b      	subs	r3, r3, r2
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	440b      	add	r3, r1
 800412e:	3338      	adds	r3, #56	@ 0x38
 8004130:	2200      	movs	r2, #0
 8004132:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004134:	78fa      	ldrb	r2, [r7, #3]
 8004136:	6879      	ldr	r1, [r7, #4]
 8004138:	4613      	mov	r3, r2
 800413a:	011b      	lsls	r3, r3, #4
 800413c:	1a9b      	subs	r3, r3, r2
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	440b      	add	r3, r1
 8004142:	3315      	adds	r3, #21
 8004144:	78fa      	ldrb	r2, [r7, #3]
 8004146:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004148:	78fa      	ldrb	r2, [r7, #3]
 800414a:	6879      	ldr	r1, [r7, #4]
 800414c:	4613      	mov	r3, r2
 800414e:	011b      	lsls	r3, r3, #4
 8004150:	1a9b      	subs	r3, r3, r2
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	440b      	add	r3, r1
 8004156:	334d      	adds	r3, #77	@ 0x4d
 8004158:	2200      	movs	r2, #0
 800415a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6818      	ldr	r0, [r3, #0]
 8004160:	78fa      	ldrb	r2, [r7, #3]
 8004162:	4613      	mov	r3, r2
 8004164:	011b      	lsls	r3, r3, #4
 8004166:	1a9b      	subs	r3, r3, r2
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	3310      	adds	r3, #16
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	4413      	add	r3, r2
 8004170:	1d19      	adds	r1, r3, #4
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	799b      	ldrb	r3, [r3, #6]
 8004176:	461a      	mov	r2, r3
 8004178:	f005 f86c 	bl	8009254 <USB_HC_StartXfer>
 800417c:	4603      	mov	r3, r0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3708      	adds	r7, #8
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop

08004188 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b086      	sub	sp, #24
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4618      	mov	r0, r3
 80041a0:	f004 fd86 	bl	8008cb0 <USB_GetMode>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	f040 80fb 	bne.w	80043a2 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4618      	mov	r0, r3
 80041b2:	f004 fd49 	bl	8008c48 <USB_ReadInterrupts>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	f000 80f1 	beq.w	80043a0 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4618      	mov	r0, r3
 80041c4:	f004 fd40 	bl	8008c48 <USB_ReadInterrupts>
 80041c8:	4603      	mov	r3, r0
 80041ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80041d2:	d104      	bne.n	80041de <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80041dc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f004 fd30 	bl	8008c48 <USB_ReadInterrupts>
 80041e8:	4603      	mov	r3, r0
 80041ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80041ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041f2:	d104      	bne.n	80041fe <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80041fc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4618      	mov	r0, r3
 8004204:	f004 fd20 	bl	8008c48 <USB_ReadInterrupts>
 8004208:	4603      	mov	r3, r0
 800420a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800420e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004212:	d104      	bne.n	800421e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800421c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4618      	mov	r0, r3
 8004224:	f004 fd10 	bl	8008c48 <USB_ReadInterrupts>
 8004228:	4603      	mov	r3, r0
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	2b02      	cmp	r3, #2
 8004230:	d103      	bne.n	800423a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2202      	movs	r2, #2
 8004238:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4618      	mov	r0, r3
 8004240:	f004 fd02 	bl	8008c48 <USB_ReadInterrupts>
 8004244:	4603      	mov	r3, r0
 8004246:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800424a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800424e:	d120      	bne.n	8004292 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8004258:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0301 	and.w	r3, r3, #1
 8004266:	2b00      	cmp	r3, #0
 8004268:	d113      	bne.n	8004292 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800426a:	2110      	movs	r1, #16
 800426c:	6938      	ldr	r0, [r7, #16]
 800426e:	f004 fbf5 	bl	8008a5c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8004272:	6938      	ldr	r0, [r7, #16]
 8004274:	f004 fc24 	bl	8008ac0 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	7a5b      	ldrb	r3, [r3, #9]
 800427c:	2b02      	cmp	r3, #2
 800427e:	d105      	bne.n	800428c <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2101      	movs	r1, #1
 8004286:	4618      	mov	r0, r3
 8004288:	f004 fe06 	bl	8008e98 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f007 fd4b 	bl	800bd28 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4618      	mov	r0, r3
 8004298:	f004 fcd6 	bl	8008c48 <USB_ReadInterrupts>
 800429c:	4603      	mov	r3, r0
 800429e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80042a6:	d102      	bne.n	80042ae <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f001 fd4d 	bl	8005d48 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f004 fcc8 	bl	8008c48 <USB_ReadInterrupts>
 80042b8:	4603      	mov	r3, r0
 80042ba:	f003 0308 	and.w	r3, r3, #8
 80042be:	2b08      	cmp	r3, #8
 80042c0:	d106      	bne.n	80042d0 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f007 fd14 	bl	800bcf0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2208      	movs	r2, #8
 80042ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4618      	mov	r0, r3
 80042d6:	f004 fcb7 	bl	8008c48 <USB_ReadInterrupts>
 80042da:	4603      	mov	r3, r0
 80042dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80042e4:	d139      	bne.n	800435a <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f005 f9f6 	bl	80096dc <USB_HC_ReadInterrupt>
 80042f0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80042f2:	2300      	movs	r3, #0
 80042f4:	617b      	str	r3, [r7, #20]
 80042f6:	e025      	b.n	8004344 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	f003 030f 	and.w	r3, r3, #15
 80042fe:	68ba      	ldr	r2, [r7, #8]
 8004300:	fa22 f303 	lsr.w	r3, r2, r3
 8004304:	f003 0301 	and.w	r3, r3, #1
 8004308:	2b00      	cmp	r3, #0
 800430a:	d018      	beq.n	800433e <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	015a      	lsls	r2, r3, #5
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	4413      	add	r3, r2
 8004314:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800431e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004322:	d106      	bne.n	8004332 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	b2db      	uxtb	r3, r3
 8004328:	4619      	mov	r1, r3
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 f905 	bl	800453a <HCD_HC_IN_IRQHandler>
 8004330:	e005      	b.n	800433e <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	b2db      	uxtb	r3, r3
 8004336:	4619      	mov	r1, r3
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f000 ff67 	bl	800520c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	3301      	adds	r3, #1
 8004342:	617b      	str	r3, [r7, #20]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	795b      	ldrb	r3, [r3, #5]
 8004348:	461a      	mov	r2, r3
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	4293      	cmp	r3, r2
 800434e:	d3d3      	bcc.n	80042f8 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004358:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4618      	mov	r0, r3
 8004360:	f004 fc72 	bl	8008c48 <USB_ReadInterrupts>
 8004364:	4603      	mov	r3, r0
 8004366:	f003 0310 	and.w	r3, r3, #16
 800436a:	2b10      	cmp	r3, #16
 800436c:	d101      	bne.n	8004372 <HAL_HCD_IRQHandler+0x1ea>
 800436e:	2301      	movs	r3, #1
 8004370:	e000      	b.n	8004374 <HAL_HCD_IRQHandler+0x1ec>
 8004372:	2300      	movs	r3, #0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d014      	beq.n	80043a2 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	699a      	ldr	r2, [r3, #24]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f022 0210 	bic.w	r2, r2, #16
 8004386:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f001 fbfe 	bl	8005b8a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	699a      	ldr	r2, [r3, #24]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f042 0210 	orr.w	r2, r2, #16
 800439c:	619a      	str	r2, [r3, #24]
 800439e:	e000      	b.n	80043a2 <HAL_HCD_IRQHandler+0x21a>
      return;
 80043a0:	bf00      	nop
    }
  }
}
 80043a2:	3718      	adds	r7, #24
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d101      	bne.n	80043be <HAL_HCD_Start+0x16>
 80043ba:	2302      	movs	r3, #2
 80043bc:	e013      	b.n	80043e6 <HAL_HCD_Start+0x3e>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2201      	movs	r2, #1
 80043c2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2101      	movs	r1, #1
 80043cc:	4618      	mov	r0, r3
 80043ce:	f004 fdca 	bl	8008f66 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4618      	mov	r0, r3
 80043d8:	f004 fad2 	bl	8008980 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3708      	adds	r7, #8
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}

080043ee <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80043ee:	b580      	push	{r7, lr}
 80043f0:	b082      	sub	sp, #8
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d101      	bne.n	8004404 <HAL_HCD_Stop+0x16>
 8004400:	2302      	movs	r3, #2
 8004402:	e00d      	b.n	8004420 <HAL_HCD_Stop+0x32>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4618      	mov	r0, r3
 8004412:	f005 fa94 	bl	800993e <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3708      	adds	r7, #8
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4618      	mov	r0, r3
 8004436:	f004 fd6c 	bl	8008f12 <USB_ResetPort>
 800443a:	4603      	mov	r3, r0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3708      	adds	r7, #8
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	460b      	mov	r3, r1
 800444e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004450:	78fa      	ldrb	r2, [r7, #3]
 8004452:	6879      	ldr	r1, [r7, #4]
 8004454:	4613      	mov	r3, r2
 8004456:	011b      	lsls	r3, r3, #4
 8004458:	1a9b      	subs	r3, r3, r2
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	440b      	add	r3, r1
 800445e:	334c      	adds	r3, #76	@ 0x4c
 8004460:	781b      	ldrb	r3, [r3, #0]
}
 8004462:	4618      	mov	r0, r3
 8004464:	370c      	adds	r7, #12
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr

0800446e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800446e:	b480      	push	{r7}
 8004470:	b083      	sub	sp, #12
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
 8004476:	460b      	mov	r3, r1
 8004478:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800447a:	78fa      	ldrb	r2, [r7, #3]
 800447c:	6879      	ldr	r1, [r7, #4]
 800447e:	4613      	mov	r3, r2
 8004480:	011b      	lsls	r3, r3, #4
 8004482:	1a9b      	subs	r3, r3, r2
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	440b      	add	r3, r1
 8004488:	3338      	adds	r3, #56	@ 0x38
 800448a:	681b      	ldr	r3, [r3, #0]
}
 800448c:	4618      	mov	r0, r3
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4618      	mov	r0, r3
 80044a6:	f004 fdae 	bl	8009006 <USB_GetCurrentFrame>
 80044aa:	4603      	mov	r3, r0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3708      	adds	r7, #8
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4618      	mov	r0, r3
 80044c2:	f004 fd89 	bl	8008fd8 <USB_GetHostSpeed>
 80044c6:	4603      	mov	r3, r0
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3708      	adds	r7, #8
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	460b      	mov	r3, r1
 80044da:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80044dc:	78fa      	ldrb	r2, [r7, #3]
 80044de:	6879      	ldr	r1, [r7, #4]
 80044e0:	4613      	mov	r3, r2
 80044e2:	011b      	lsls	r3, r3, #4
 80044e4:	1a9b      	subs	r3, r3, r2
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	440b      	add	r3, r1
 80044ea:	331a      	adds	r3, #26
 80044ec:	2200      	movs	r2, #0
 80044ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80044f0:	78fa      	ldrb	r2, [r7, #3]
 80044f2:	6879      	ldr	r1, [r7, #4]
 80044f4:	4613      	mov	r3, r2
 80044f6:	011b      	lsls	r3, r3, #4
 80044f8:	1a9b      	subs	r3, r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	440b      	add	r3, r1
 80044fe:	331b      	adds	r3, #27
 8004500:	2200      	movs	r2, #0
 8004502:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8004504:	78fa      	ldrb	r2, [r7, #3]
 8004506:	6879      	ldr	r1, [r7, #4]
 8004508:	4613      	mov	r3, r2
 800450a:	011b      	lsls	r3, r3, #4
 800450c:	1a9b      	subs	r3, r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	440b      	add	r3, r1
 8004512:	3325      	adds	r3, #37	@ 0x25
 8004514:	2200      	movs	r2, #0
 8004516:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8004518:	78fa      	ldrb	r2, [r7, #3]
 800451a:	6879      	ldr	r1, [r7, #4]
 800451c:	4613      	mov	r3, r2
 800451e:	011b      	lsls	r3, r3, #4
 8004520:	1a9b      	subs	r3, r3, r2
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	440b      	add	r3, r1
 8004526:	3324      	adds	r3, #36	@ 0x24
 8004528:	2200      	movs	r2, #0
 800452a:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	370c      	adds	r7, #12
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr

0800453a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800453a:	b580      	push	{r7, lr}
 800453c:	b086      	sub	sp, #24
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
 8004542:	460b      	mov	r3, r1
 8004544:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	78fa      	ldrb	r2, [r7, #3]
 8004556:	4611      	mov	r1, r2
 8004558:	4618      	mov	r0, r3
 800455a:	f004 fb88 	bl	8008c6e <USB_ReadChInterrupts>
 800455e:	4603      	mov	r3, r0
 8004560:	f003 0304 	and.w	r3, r3, #4
 8004564:	2b04      	cmp	r3, #4
 8004566:	d11a      	bne.n	800459e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004568:	78fb      	ldrb	r3, [r7, #3]
 800456a:	015a      	lsls	r2, r3, #5
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	4413      	add	r3, r2
 8004570:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004574:	461a      	mov	r2, r3
 8004576:	2304      	movs	r3, #4
 8004578:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800457a:	78fa      	ldrb	r2, [r7, #3]
 800457c:	6879      	ldr	r1, [r7, #4]
 800457e:	4613      	mov	r3, r2
 8004580:	011b      	lsls	r3, r3, #4
 8004582:	1a9b      	subs	r3, r3, r2
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	440b      	add	r3, r1
 8004588:	334d      	adds	r3, #77	@ 0x4d
 800458a:	2207      	movs	r2, #7
 800458c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	78fa      	ldrb	r2, [r7, #3]
 8004594:	4611      	mov	r1, r2
 8004596:	4618      	mov	r0, r3
 8004598:	f005 f8b1 	bl	80096fe <USB_HC_Halt>
 800459c:	e09e      	b.n	80046dc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	78fa      	ldrb	r2, [r7, #3]
 80045a4:	4611      	mov	r1, r2
 80045a6:	4618      	mov	r0, r3
 80045a8:	f004 fb61 	bl	8008c6e <USB_ReadChInterrupts>
 80045ac:	4603      	mov	r3, r0
 80045ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045b6:	d11b      	bne.n	80045f0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80045b8:	78fb      	ldrb	r3, [r7, #3]
 80045ba:	015a      	lsls	r2, r3, #5
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	4413      	add	r3, r2
 80045c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045c4:	461a      	mov	r2, r3
 80045c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80045ca:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80045cc:	78fa      	ldrb	r2, [r7, #3]
 80045ce:	6879      	ldr	r1, [r7, #4]
 80045d0:	4613      	mov	r3, r2
 80045d2:	011b      	lsls	r3, r3, #4
 80045d4:	1a9b      	subs	r3, r3, r2
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	440b      	add	r3, r1
 80045da:	334d      	adds	r3, #77	@ 0x4d
 80045dc:	2208      	movs	r2, #8
 80045de:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	78fa      	ldrb	r2, [r7, #3]
 80045e6:	4611      	mov	r1, r2
 80045e8:	4618      	mov	r0, r3
 80045ea:	f005 f888 	bl	80096fe <USB_HC_Halt>
 80045ee:	e075      	b.n	80046dc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	78fa      	ldrb	r2, [r7, #3]
 80045f6:	4611      	mov	r1, r2
 80045f8:	4618      	mov	r0, r3
 80045fa:	f004 fb38 	bl	8008c6e <USB_ReadChInterrupts>
 80045fe:	4603      	mov	r3, r0
 8004600:	f003 0308 	and.w	r3, r3, #8
 8004604:	2b08      	cmp	r3, #8
 8004606:	d11a      	bne.n	800463e <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004608:	78fb      	ldrb	r3, [r7, #3]
 800460a:	015a      	lsls	r2, r3, #5
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	4413      	add	r3, r2
 8004610:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004614:	461a      	mov	r2, r3
 8004616:	2308      	movs	r3, #8
 8004618:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800461a:	78fa      	ldrb	r2, [r7, #3]
 800461c:	6879      	ldr	r1, [r7, #4]
 800461e:	4613      	mov	r3, r2
 8004620:	011b      	lsls	r3, r3, #4
 8004622:	1a9b      	subs	r3, r3, r2
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	440b      	add	r3, r1
 8004628:	334d      	adds	r3, #77	@ 0x4d
 800462a:	2206      	movs	r2, #6
 800462c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	78fa      	ldrb	r2, [r7, #3]
 8004634:	4611      	mov	r1, r2
 8004636:	4618      	mov	r0, r3
 8004638:	f005 f861 	bl	80096fe <USB_HC_Halt>
 800463c:	e04e      	b.n	80046dc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	78fa      	ldrb	r2, [r7, #3]
 8004644:	4611      	mov	r1, r2
 8004646:	4618      	mov	r0, r3
 8004648:	f004 fb11 	bl	8008c6e <USB_ReadChInterrupts>
 800464c:	4603      	mov	r3, r0
 800464e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004652:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004656:	d11b      	bne.n	8004690 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004658:	78fb      	ldrb	r3, [r7, #3]
 800465a:	015a      	lsls	r2, r3, #5
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	4413      	add	r3, r2
 8004660:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004664:	461a      	mov	r2, r3
 8004666:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800466a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800466c:	78fa      	ldrb	r2, [r7, #3]
 800466e:	6879      	ldr	r1, [r7, #4]
 8004670:	4613      	mov	r3, r2
 8004672:	011b      	lsls	r3, r3, #4
 8004674:	1a9b      	subs	r3, r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	440b      	add	r3, r1
 800467a:	334d      	adds	r3, #77	@ 0x4d
 800467c:	2209      	movs	r2, #9
 800467e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	78fa      	ldrb	r2, [r7, #3]
 8004686:	4611      	mov	r1, r2
 8004688:	4618      	mov	r0, r3
 800468a:	f005 f838 	bl	80096fe <USB_HC_Halt>
 800468e:	e025      	b.n	80046dc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	78fa      	ldrb	r2, [r7, #3]
 8004696:	4611      	mov	r1, r2
 8004698:	4618      	mov	r0, r3
 800469a:	f004 fae8 	bl	8008c6e <USB_ReadChInterrupts>
 800469e:	4603      	mov	r3, r0
 80046a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046a4:	2b80      	cmp	r3, #128	@ 0x80
 80046a6:	d119      	bne.n	80046dc <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80046a8:	78fb      	ldrb	r3, [r7, #3]
 80046aa:	015a      	lsls	r2, r3, #5
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	4413      	add	r3, r2
 80046b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046b4:	461a      	mov	r2, r3
 80046b6:	2380      	movs	r3, #128	@ 0x80
 80046b8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80046ba:	78fa      	ldrb	r2, [r7, #3]
 80046bc:	6879      	ldr	r1, [r7, #4]
 80046be:	4613      	mov	r3, r2
 80046c0:	011b      	lsls	r3, r3, #4
 80046c2:	1a9b      	subs	r3, r3, r2
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	440b      	add	r3, r1
 80046c8:	334d      	adds	r3, #77	@ 0x4d
 80046ca:	2207      	movs	r2, #7
 80046cc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	78fa      	ldrb	r2, [r7, #3]
 80046d4:	4611      	mov	r1, r2
 80046d6:	4618      	mov	r0, r3
 80046d8:	f005 f811 	bl	80096fe <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	78fa      	ldrb	r2, [r7, #3]
 80046e2:	4611      	mov	r1, r2
 80046e4:	4618      	mov	r0, r3
 80046e6:	f004 fac2 	bl	8008c6e <USB_ReadChInterrupts>
 80046ea:	4603      	mov	r3, r0
 80046ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046f4:	d112      	bne.n	800471c <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	78fa      	ldrb	r2, [r7, #3]
 80046fc:	4611      	mov	r1, r2
 80046fe:	4618      	mov	r0, r3
 8004700:	f004 fffd 	bl	80096fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004704:	78fb      	ldrb	r3, [r7, #3]
 8004706:	015a      	lsls	r2, r3, #5
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	4413      	add	r3, r2
 800470c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004710:	461a      	mov	r2, r3
 8004712:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004716:	6093      	str	r3, [r2, #8]
 8004718:	f000 bd75 	b.w	8005206 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	78fa      	ldrb	r2, [r7, #3]
 8004722:	4611      	mov	r1, r2
 8004724:	4618      	mov	r0, r3
 8004726:	f004 faa2 	bl	8008c6e <USB_ReadChInterrupts>
 800472a:	4603      	mov	r3, r0
 800472c:	f003 0301 	and.w	r3, r3, #1
 8004730:	2b01      	cmp	r3, #1
 8004732:	f040 8128 	bne.w	8004986 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004736:	78fb      	ldrb	r3, [r7, #3]
 8004738:	015a      	lsls	r2, r3, #5
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	4413      	add	r3, r2
 800473e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004742:	461a      	mov	r2, r3
 8004744:	2320      	movs	r3, #32
 8004746:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004748:	78fa      	ldrb	r2, [r7, #3]
 800474a:	6879      	ldr	r1, [r7, #4]
 800474c:	4613      	mov	r3, r2
 800474e:	011b      	lsls	r3, r3, #4
 8004750:	1a9b      	subs	r3, r3, r2
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	440b      	add	r3, r1
 8004756:	331b      	adds	r3, #27
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	2b01      	cmp	r3, #1
 800475c:	d119      	bne.n	8004792 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800475e:	78fa      	ldrb	r2, [r7, #3]
 8004760:	6879      	ldr	r1, [r7, #4]
 8004762:	4613      	mov	r3, r2
 8004764:	011b      	lsls	r3, r3, #4
 8004766:	1a9b      	subs	r3, r3, r2
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	440b      	add	r3, r1
 800476c:	331b      	adds	r3, #27
 800476e:	2200      	movs	r2, #0
 8004770:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004772:	78fb      	ldrb	r3, [r7, #3]
 8004774:	015a      	lsls	r2, r3, #5
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	4413      	add	r3, r2
 800477a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	78fa      	ldrb	r2, [r7, #3]
 8004782:	0151      	lsls	r1, r2, #5
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	440a      	add	r2, r1
 8004788:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800478c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004790:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	799b      	ldrb	r3, [r3, #6]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d01b      	beq.n	80047d2 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800479a:	78fa      	ldrb	r2, [r7, #3]
 800479c:	6879      	ldr	r1, [r7, #4]
 800479e:	4613      	mov	r3, r2
 80047a0:	011b      	lsls	r3, r3, #4
 80047a2:	1a9b      	subs	r3, r3, r2
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	440b      	add	r3, r1
 80047a8:	3330      	adds	r3, #48	@ 0x30
 80047aa:	6819      	ldr	r1, [r3, #0]
 80047ac:	78fb      	ldrb	r3, [r7, #3]
 80047ae:	015a      	lsls	r2, r3, #5
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	4413      	add	r3, r2
 80047b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047be:	78fa      	ldrb	r2, [r7, #3]
 80047c0:	1ac9      	subs	r1, r1, r3
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	4613      	mov	r3, r2
 80047c6:	011b      	lsls	r3, r3, #4
 80047c8:	1a9b      	subs	r3, r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	4403      	add	r3, r0
 80047ce:	3338      	adds	r3, #56	@ 0x38
 80047d0:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80047d2:	78fa      	ldrb	r2, [r7, #3]
 80047d4:	6879      	ldr	r1, [r7, #4]
 80047d6:	4613      	mov	r3, r2
 80047d8:	011b      	lsls	r3, r3, #4
 80047da:	1a9b      	subs	r3, r3, r2
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	440b      	add	r3, r1
 80047e0:	334d      	adds	r3, #77	@ 0x4d
 80047e2:	2201      	movs	r2, #1
 80047e4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80047e6:	78fa      	ldrb	r2, [r7, #3]
 80047e8:	6879      	ldr	r1, [r7, #4]
 80047ea:	4613      	mov	r3, r2
 80047ec:	011b      	lsls	r3, r3, #4
 80047ee:	1a9b      	subs	r3, r3, r2
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	440b      	add	r3, r1
 80047f4:	3344      	adds	r3, #68	@ 0x44
 80047f6:	2200      	movs	r2, #0
 80047f8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80047fa:	78fb      	ldrb	r3, [r7, #3]
 80047fc:	015a      	lsls	r2, r3, #5
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	4413      	add	r3, r2
 8004802:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004806:	461a      	mov	r2, r3
 8004808:	2301      	movs	r3, #1
 800480a:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800480c:	78fa      	ldrb	r2, [r7, #3]
 800480e:	6879      	ldr	r1, [r7, #4]
 8004810:	4613      	mov	r3, r2
 8004812:	011b      	lsls	r3, r3, #4
 8004814:	1a9b      	subs	r3, r3, r2
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	440b      	add	r3, r1
 800481a:	3326      	adds	r3, #38	@ 0x26
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00a      	beq.n	8004838 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004822:	78fa      	ldrb	r2, [r7, #3]
 8004824:	6879      	ldr	r1, [r7, #4]
 8004826:	4613      	mov	r3, r2
 8004828:	011b      	lsls	r3, r3, #4
 800482a:	1a9b      	subs	r3, r3, r2
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	440b      	add	r3, r1
 8004830:	3326      	adds	r3, #38	@ 0x26
 8004832:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004834:	2b02      	cmp	r3, #2
 8004836:	d110      	bne.n	800485a <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	78fa      	ldrb	r2, [r7, #3]
 800483e:	4611      	mov	r1, r2
 8004840:	4618      	mov	r0, r3
 8004842:	f004 ff5c 	bl	80096fe <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004846:	78fb      	ldrb	r3, [r7, #3]
 8004848:	015a      	lsls	r2, r3, #5
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	4413      	add	r3, r2
 800484e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004852:	461a      	mov	r2, r3
 8004854:	2310      	movs	r3, #16
 8004856:	6093      	str	r3, [r2, #8]
 8004858:	e03d      	b.n	80048d6 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800485a:	78fa      	ldrb	r2, [r7, #3]
 800485c:	6879      	ldr	r1, [r7, #4]
 800485e:	4613      	mov	r3, r2
 8004860:	011b      	lsls	r3, r3, #4
 8004862:	1a9b      	subs	r3, r3, r2
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	440b      	add	r3, r1
 8004868:	3326      	adds	r3, #38	@ 0x26
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	2b03      	cmp	r3, #3
 800486e:	d00a      	beq.n	8004886 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8004870:	78fa      	ldrb	r2, [r7, #3]
 8004872:	6879      	ldr	r1, [r7, #4]
 8004874:	4613      	mov	r3, r2
 8004876:	011b      	lsls	r3, r3, #4
 8004878:	1a9b      	subs	r3, r3, r2
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	440b      	add	r3, r1
 800487e:	3326      	adds	r3, #38	@ 0x26
 8004880:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8004882:	2b01      	cmp	r3, #1
 8004884:	d127      	bne.n	80048d6 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004886:	78fb      	ldrb	r3, [r7, #3]
 8004888:	015a      	lsls	r2, r3, #5
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	4413      	add	r3, r2
 800488e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	78fa      	ldrb	r2, [r7, #3]
 8004896:	0151      	lsls	r1, r2, #5
 8004898:	693a      	ldr	r2, [r7, #16]
 800489a:	440a      	add	r2, r1
 800489c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80048a0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80048a4:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80048a6:	78fa      	ldrb	r2, [r7, #3]
 80048a8:	6879      	ldr	r1, [r7, #4]
 80048aa:	4613      	mov	r3, r2
 80048ac:	011b      	lsls	r3, r3, #4
 80048ae:	1a9b      	subs	r3, r3, r2
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	440b      	add	r3, r1
 80048b4:	334c      	adds	r3, #76	@ 0x4c
 80048b6:	2201      	movs	r2, #1
 80048b8:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80048ba:	78fa      	ldrb	r2, [r7, #3]
 80048bc:	6879      	ldr	r1, [r7, #4]
 80048be:	4613      	mov	r3, r2
 80048c0:	011b      	lsls	r3, r3, #4
 80048c2:	1a9b      	subs	r3, r3, r2
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	440b      	add	r3, r1
 80048c8:	334c      	adds	r3, #76	@ 0x4c
 80048ca:	781a      	ldrb	r2, [r3, #0]
 80048cc:	78fb      	ldrb	r3, [r7, #3]
 80048ce:	4619      	mov	r1, r3
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f007 fa37 	bl	800bd44 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	799b      	ldrb	r3, [r3, #6]
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d13b      	bne.n	8004956 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80048de:	78fa      	ldrb	r2, [r7, #3]
 80048e0:	6879      	ldr	r1, [r7, #4]
 80048e2:	4613      	mov	r3, r2
 80048e4:	011b      	lsls	r3, r3, #4
 80048e6:	1a9b      	subs	r3, r3, r2
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	440b      	add	r3, r1
 80048ec:	3338      	adds	r3, #56	@ 0x38
 80048ee:	6819      	ldr	r1, [r3, #0]
 80048f0:	78fa      	ldrb	r2, [r7, #3]
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	4613      	mov	r3, r2
 80048f6:	011b      	lsls	r3, r3, #4
 80048f8:	1a9b      	subs	r3, r3, r2
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	4403      	add	r3, r0
 80048fe:	3328      	adds	r3, #40	@ 0x28
 8004900:	881b      	ldrh	r3, [r3, #0]
 8004902:	440b      	add	r3, r1
 8004904:	1e59      	subs	r1, r3, #1
 8004906:	78fa      	ldrb	r2, [r7, #3]
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	4613      	mov	r3, r2
 800490c:	011b      	lsls	r3, r3, #4
 800490e:	1a9b      	subs	r3, r3, r2
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	4403      	add	r3, r0
 8004914:	3328      	adds	r3, #40	@ 0x28
 8004916:	881b      	ldrh	r3, [r3, #0]
 8004918:	fbb1 f3f3 	udiv	r3, r1, r3
 800491c:	f003 0301 	and.w	r3, r3, #1
 8004920:	2b00      	cmp	r3, #0
 8004922:	f000 8470 	beq.w	8005206 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8004926:	78fa      	ldrb	r2, [r7, #3]
 8004928:	6879      	ldr	r1, [r7, #4]
 800492a:	4613      	mov	r3, r2
 800492c:	011b      	lsls	r3, r3, #4
 800492e:	1a9b      	subs	r3, r3, r2
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	440b      	add	r3, r1
 8004934:	333c      	adds	r3, #60	@ 0x3c
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	78fa      	ldrb	r2, [r7, #3]
 800493a:	f083 0301 	eor.w	r3, r3, #1
 800493e:	b2d8      	uxtb	r0, r3
 8004940:	6879      	ldr	r1, [r7, #4]
 8004942:	4613      	mov	r3, r2
 8004944:	011b      	lsls	r3, r3, #4
 8004946:	1a9b      	subs	r3, r3, r2
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	440b      	add	r3, r1
 800494c:	333c      	adds	r3, #60	@ 0x3c
 800494e:	4602      	mov	r2, r0
 8004950:	701a      	strb	r2, [r3, #0]
 8004952:	f000 bc58 	b.w	8005206 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8004956:	78fa      	ldrb	r2, [r7, #3]
 8004958:	6879      	ldr	r1, [r7, #4]
 800495a:	4613      	mov	r3, r2
 800495c:	011b      	lsls	r3, r3, #4
 800495e:	1a9b      	subs	r3, r3, r2
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	440b      	add	r3, r1
 8004964:	333c      	adds	r3, #60	@ 0x3c
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	78fa      	ldrb	r2, [r7, #3]
 800496a:	f083 0301 	eor.w	r3, r3, #1
 800496e:	b2d8      	uxtb	r0, r3
 8004970:	6879      	ldr	r1, [r7, #4]
 8004972:	4613      	mov	r3, r2
 8004974:	011b      	lsls	r3, r3, #4
 8004976:	1a9b      	subs	r3, r3, r2
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	440b      	add	r3, r1
 800497c:	333c      	adds	r3, #60	@ 0x3c
 800497e:	4602      	mov	r2, r0
 8004980:	701a      	strb	r2, [r3, #0]
 8004982:	f000 bc40 	b.w	8005206 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	78fa      	ldrb	r2, [r7, #3]
 800498c:	4611      	mov	r1, r2
 800498e:	4618      	mov	r0, r3
 8004990:	f004 f96d 	bl	8008c6e <USB_ReadChInterrupts>
 8004994:	4603      	mov	r3, r0
 8004996:	f003 0320 	and.w	r3, r3, #32
 800499a:	2b20      	cmp	r3, #32
 800499c:	d131      	bne.n	8004a02 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800499e:	78fb      	ldrb	r3, [r7, #3]
 80049a0:	015a      	lsls	r2, r3, #5
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	4413      	add	r3, r2
 80049a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049aa:	461a      	mov	r2, r3
 80049ac:	2320      	movs	r3, #32
 80049ae:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80049b0:	78fa      	ldrb	r2, [r7, #3]
 80049b2:	6879      	ldr	r1, [r7, #4]
 80049b4:	4613      	mov	r3, r2
 80049b6:	011b      	lsls	r3, r3, #4
 80049b8:	1a9b      	subs	r3, r3, r2
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	440b      	add	r3, r1
 80049be:	331a      	adds	r3, #26
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	f040 841f 	bne.w	8005206 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80049c8:	78fa      	ldrb	r2, [r7, #3]
 80049ca:	6879      	ldr	r1, [r7, #4]
 80049cc:	4613      	mov	r3, r2
 80049ce:	011b      	lsls	r3, r3, #4
 80049d0:	1a9b      	subs	r3, r3, r2
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	440b      	add	r3, r1
 80049d6:	331b      	adds	r3, #27
 80049d8:	2201      	movs	r2, #1
 80049da:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80049dc:	78fa      	ldrb	r2, [r7, #3]
 80049de:	6879      	ldr	r1, [r7, #4]
 80049e0:	4613      	mov	r3, r2
 80049e2:	011b      	lsls	r3, r3, #4
 80049e4:	1a9b      	subs	r3, r3, r2
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	440b      	add	r3, r1
 80049ea:	334d      	adds	r3, #77	@ 0x4d
 80049ec:	2203      	movs	r2, #3
 80049ee:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	78fa      	ldrb	r2, [r7, #3]
 80049f6:	4611      	mov	r1, r2
 80049f8:	4618      	mov	r0, r3
 80049fa:	f004 fe80 	bl	80096fe <USB_HC_Halt>
 80049fe:	f000 bc02 	b.w	8005206 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	78fa      	ldrb	r2, [r7, #3]
 8004a08:	4611      	mov	r1, r2
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f004 f92f 	bl	8008c6e <USB_ReadChInterrupts>
 8004a10:	4603      	mov	r3, r0
 8004a12:	f003 0302 	and.w	r3, r3, #2
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	f040 8305 	bne.w	8005026 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004a1c:	78fb      	ldrb	r3, [r7, #3]
 8004a1e:	015a      	lsls	r2, r3, #5
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	4413      	add	r3, r2
 8004a24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a28:	461a      	mov	r2, r3
 8004a2a:	2302      	movs	r3, #2
 8004a2c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004a2e:	78fa      	ldrb	r2, [r7, #3]
 8004a30:	6879      	ldr	r1, [r7, #4]
 8004a32:	4613      	mov	r3, r2
 8004a34:	011b      	lsls	r3, r3, #4
 8004a36:	1a9b      	subs	r3, r3, r2
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	440b      	add	r3, r1
 8004a3c:	334d      	adds	r3, #77	@ 0x4d
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d114      	bne.n	8004a6e <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004a44:	78fa      	ldrb	r2, [r7, #3]
 8004a46:	6879      	ldr	r1, [r7, #4]
 8004a48:	4613      	mov	r3, r2
 8004a4a:	011b      	lsls	r3, r3, #4
 8004a4c:	1a9b      	subs	r3, r3, r2
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	440b      	add	r3, r1
 8004a52:	334d      	adds	r3, #77	@ 0x4d
 8004a54:	2202      	movs	r2, #2
 8004a56:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004a58:	78fa      	ldrb	r2, [r7, #3]
 8004a5a:	6879      	ldr	r1, [r7, #4]
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	011b      	lsls	r3, r3, #4
 8004a60:	1a9b      	subs	r3, r3, r2
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	440b      	add	r3, r1
 8004a66:	334c      	adds	r3, #76	@ 0x4c
 8004a68:	2201      	movs	r2, #1
 8004a6a:	701a      	strb	r2, [r3, #0]
 8004a6c:	e2cc      	b.n	8005008 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004a6e:	78fa      	ldrb	r2, [r7, #3]
 8004a70:	6879      	ldr	r1, [r7, #4]
 8004a72:	4613      	mov	r3, r2
 8004a74:	011b      	lsls	r3, r3, #4
 8004a76:	1a9b      	subs	r3, r3, r2
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	440b      	add	r3, r1
 8004a7c:	334d      	adds	r3, #77	@ 0x4d
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	2b06      	cmp	r3, #6
 8004a82:	d114      	bne.n	8004aae <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004a84:	78fa      	ldrb	r2, [r7, #3]
 8004a86:	6879      	ldr	r1, [r7, #4]
 8004a88:	4613      	mov	r3, r2
 8004a8a:	011b      	lsls	r3, r3, #4
 8004a8c:	1a9b      	subs	r3, r3, r2
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	440b      	add	r3, r1
 8004a92:	334d      	adds	r3, #77	@ 0x4d
 8004a94:	2202      	movs	r2, #2
 8004a96:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8004a98:	78fa      	ldrb	r2, [r7, #3]
 8004a9a:	6879      	ldr	r1, [r7, #4]
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	011b      	lsls	r3, r3, #4
 8004aa0:	1a9b      	subs	r3, r3, r2
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	440b      	add	r3, r1
 8004aa6:	334c      	adds	r3, #76	@ 0x4c
 8004aa8:	2205      	movs	r2, #5
 8004aaa:	701a      	strb	r2, [r3, #0]
 8004aac:	e2ac      	b.n	8005008 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004aae:	78fa      	ldrb	r2, [r7, #3]
 8004ab0:	6879      	ldr	r1, [r7, #4]
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	011b      	lsls	r3, r3, #4
 8004ab6:	1a9b      	subs	r3, r3, r2
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	440b      	add	r3, r1
 8004abc:	334d      	adds	r3, #77	@ 0x4d
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	2b07      	cmp	r3, #7
 8004ac2:	d00b      	beq.n	8004adc <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004ac4:	78fa      	ldrb	r2, [r7, #3]
 8004ac6:	6879      	ldr	r1, [r7, #4]
 8004ac8:	4613      	mov	r3, r2
 8004aca:	011b      	lsls	r3, r3, #4
 8004acc:	1a9b      	subs	r3, r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	440b      	add	r3, r1
 8004ad2:	334d      	adds	r3, #77	@ 0x4d
 8004ad4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004ad6:	2b09      	cmp	r3, #9
 8004ad8:	f040 80a6 	bne.w	8004c28 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004adc:	78fa      	ldrb	r2, [r7, #3]
 8004ade:	6879      	ldr	r1, [r7, #4]
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	011b      	lsls	r3, r3, #4
 8004ae4:	1a9b      	subs	r3, r3, r2
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	440b      	add	r3, r1
 8004aea:	334d      	adds	r3, #77	@ 0x4d
 8004aec:	2202      	movs	r2, #2
 8004aee:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004af0:	78fa      	ldrb	r2, [r7, #3]
 8004af2:	6879      	ldr	r1, [r7, #4]
 8004af4:	4613      	mov	r3, r2
 8004af6:	011b      	lsls	r3, r3, #4
 8004af8:	1a9b      	subs	r3, r3, r2
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	440b      	add	r3, r1
 8004afe:	3344      	adds	r3, #68	@ 0x44
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	1c59      	adds	r1, r3, #1
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	4613      	mov	r3, r2
 8004b08:	011b      	lsls	r3, r3, #4
 8004b0a:	1a9b      	subs	r3, r3, r2
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	4403      	add	r3, r0
 8004b10:	3344      	adds	r3, #68	@ 0x44
 8004b12:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004b14:	78fa      	ldrb	r2, [r7, #3]
 8004b16:	6879      	ldr	r1, [r7, #4]
 8004b18:	4613      	mov	r3, r2
 8004b1a:	011b      	lsls	r3, r3, #4
 8004b1c:	1a9b      	subs	r3, r3, r2
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	440b      	add	r3, r1
 8004b22:	3344      	adds	r3, #68	@ 0x44
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d943      	bls.n	8004bb2 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004b2a:	78fa      	ldrb	r2, [r7, #3]
 8004b2c:	6879      	ldr	r1, [r7, #4]
 8004b2e:	4613      	mov	r3, r2
 8004b30:	011b      	lsls	r3, r3, #4
 8004b32:	1a9b      	subs	r3, r3, r2
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	440b      	add	r3, r1
 8004b38:	3344      	adds	r3, #68	@ 0x44
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8004b3e:	78fa      	ldrb	r2, [r7, #3]
 8004b40:	6879      	ldr	r1, [r7, #4]
 8004b42:	4613      	mov	r3, r2
 8004b44:	011b      	lsls	r3, r3, #4
 8004b46:	1a9b      	subs	r3, r3, r2
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	440b      	add	r3, r1
 8004b4c:	331a      	adds	r3, #26
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d123      	bne.n	8004b9c <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8004b54:	78fa      	ldrb	r2, [r7, #3]
 8004b56:	6879      	ldr	r1, [r7, #4]
 8004b58:	4613      	mov	r3, r2
 8004b5a:	011b      	lsls	r3, r3, #4
 8004b5c:	1a9b      	subs	r3, r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	440b      	add	r3, r1
 8004b62:	331b      	adds	r3, #27
 8004b64:	2200      	movs	r2, #0
 8004b66:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8004b68:	78fa      	ldrb	r2, [r7, #3]
 8004b6a:	6879      	ldr	r1, [r7, #4]
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	011b      	lsls	r3, r3, #4
 8004b70:	1a9b      	subs	r3, r3, r2
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	440b      	add	r3, r1
 8004b76:	331c      	adds	r3, #28
 8004b78:	2200      	movs	r2, #0
 8004b7a:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004b7c:	78fb      	ldrb	r3, [r7, #3]
 8004b7e:	015a      	lsls	r2, r3, #5
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	4413      	add	r3, r2
 8004b84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	78fa      	ldrb	r2, [r7, #3]
 8004b8c:	0151      	lsls	r1, r2, #5
 8004b8e:	693a      	ldr	r2, [r7, #16]
 8004b90:	440a      	add	r2, r1
 8004b92:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004b96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b9a:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004b9c:	78fa      	ldrb	r2, [r7, #3]
 8004b9e:	6879      	ldr	r1, [r7, #4]
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	011b      	lsls	r3, r3, #4
 8004ba4:	1a9b      	subs	r3, r3, r2
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	440b      	add	r3, r1
 8004baa:	334c      	adds	r3, #76	@ 0x4c
 8004bac:	2204      	movs	r2, #4
 8004bae:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004bb0:	e229      	b.n	8005006 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004bb2:	78fa      	ldrb	r2, [r7, #3]
 8004bb4:	6879      	ldr	r1, [r7, #4]
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	011b      	lsls	r3, r3, #4
 8004bba:	1a9b      	subs	r3, r3, r2
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	440b      	add	r3, r1
 8004bc0:	334c      	adds	r3, #76	@ 0x4c
 8004bc2:	2202      	movs	r2, #2
 8004bc4:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004bc6:	78fa      	ldrb	r2, [r7, #3]
 8004bc8:	6879      	ldr	r1, [r7, #4]
 8004bca:	4613      	mov	r3, r2
 8004bcc:	011b      	lsls	r3, r3, #4
 8004bce:	1a9b      	subs	r3, r3, r2
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	440b      	add	r3, r1
 8004bd4:	3326      	adds	r3, #38	@ 0x26
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d00b      	beq.n	8004bf4 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004bdc:	78fa      	ldrb	r2, [r7, #3]
 8004bde:	6879      	ldr	r1, [r7, #4]
 8004be0:	4613      	mov	r3, r2
 8004be2:	011b      	lsls	r3, r3, #4
 8004be4:	1a9b      	subs	r3, r3, r2
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	440b      	add	r3, r1
 8004bea:	3326      	adds	r3, #38	@ 0x26
 8004bec:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	f040 8209 	bne.w	8005006 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004bf4:	78fb      	ldrb	r3, [r7, #3]
 8004bf6:	015a      	lsls	r2, r3, #5
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004c0a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004c12:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004c14:	78fb      	ldrb	r3, [r7, #3]
 8004c16:	015a      	lsls	r2, r3, #5
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c20:	461a      	mov	r2, r3
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004c26:	e1ee      	b.n	8005006 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004c28:	78fa      	ldrb	r2, [r7, #3]
 8004c2a:	6879      	ldr	r1, [r7, #4]
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	011b      	lsls	r3, r3, #4
 8004c30:	1a9b      	subs	r3, r3, r2
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	440b      	add	r3, r1
 8004c36:	334d      	adds	r3, #77	@ 0x4d
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	2b05      	cmp	r3, #5
 8004c3c:	f040 80c8 	bne.w	8004dd0 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004c40:	78fa      	ldrb	r2, [r7, #3]
 8004c42:	6879      	ldr	r1, [r7, #4]
 8004c44:	4613      	mov	r3, r2
 8004c46:	011b      	lsls	r3, r3, #4
 8004c48:	1a9b      	subs	r3, r3, r2
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	440b      	add	r3, r1
 8004c4e:	334d      	adds	r3, #77	@ 0x4d
 8004c50:	2202      	movs	r2, #2
 8004c52:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004c54:	78fa      	ldrb	r2, [r7, #3]
 8004c56:	6879      	ldr	r1, [r7, #4]
 8004c58:	4613      	mov	r3, r2
 8004c5a:	011b      	lsls	r3, r3, #4
 8004c5c:	1a9b      	subs	r3, r3, r2
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	440b      	add	r3, r1
 8004c62:	331b      	adds	r3, #27
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	f040 81ce 	bne.w	8005008 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004c6c:	78fa      	ldrb	r2, [r7, #3]
 8004c6e:	6879      	ldr	r1, [r7, #4]
 8004c70:	4613      	mov	r3, r2
 8004c72:	011b      	lsls	r3, r3, #4
 8004c74:	1a9b      	subs	r3, r3, r2
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	440b      	add	r3, r1
 8004c7a:	3326      	adds	r3, #38	@ 0x26
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	2b03      	cmp	r3, #3
 8004c80:	d16b      	bne.n	8004d5a <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8004c82:	78fa      	ldrb	r2, [r7, #3]
 8004c84:	6879      	ldr	r1, [r7, #4]
 8004c86:	4613      	mov	r3, r2
 8004c88:	011b      	lsls	r3, r3, #4
 8004c8a:	1a9b      	subs	r3, r3, r2
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	440b      	add	r3, r1
 8004c90:	3348      	adds	r3, #72	@ 0x48
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	1c59      	adds	r1, r3, #1
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	4613      	mov	r3, r2
 8004c9a:	011b      	lsls	r3, r3, #4
 8004c9c:	1a9b      	subs	r3, r3, r2
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	4403      	add	r3, r0
 8004ca2:	3348      	adds	r3, #72	@ 0x48
 8004ca4:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8004ca6:	78fa      	ldrb	r2, [r7, #3]
 8004ca8:	6879      	ldr	r1, [r7, #4]
 8004caa:	4613      	mov	r3, r2
 8004cac:	011b      	lsls	r3, r3, #4
 8004cae:	1a9b      	subs	r3, r3, r2
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	440b      	add	r3, r1
 8004cb4:	3348      	adds	r3, #72	@ 0x48
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d943      	bls.n	8004d44 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8004cbc:	78fa      	ldrb	r2, [r7, #3]
 8004cbe:	6879      	ldr	r1, [r7, #4]
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	011b      	lsls	r3, r3, #4
 8004cc4:	1a9b      	subs	r3, r3, r2
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	440b      	add	r3, r1
 8004cca:	3348      	adds	r3, #72	@ 0x48
 8004ccc:	2200      	movs	r2, #0
 8004cce:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8004cd0:	78fa      	ldrb	r2, [r7, #3]
 8004cd2:	6879      	ldr	r1, [r7, #4]
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	011b      	lsls	r3, r3, #4
 8004cd8:	1a9b      	subs	r3, r3, r2
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	440b      	add	r3, r1
 8004cde:	331b      	adds	r3, #27
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8004ce4:	78fa      	ldrb	r2, [r7, #3]
 8004ce6:	6879      	ldr	r1, [r7, #4]
 8004ce8:	4613      	mov	r3, r2
 8004cea:	011b      	lsls	r3, r3, #4
 8004cec:	1a9b      	subs	r3, r3, r2
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	440b      	add	r3, r1
 8004cf2:	3344      	adds	r3, #68	@ 0x44
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d809      	bhi.n	8004d0e <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8004cfa:	78fa      	ldrb	r2, [r7, #3]
 8004cfc:	6879      	ldr	r1, [r7, #4]
 8004cfe:	4613      	mov	r3, r2
 8004d00:	011b      	lsls	r3, r3, #4
 8004d02:	1a9b      	subs	r3, r3, r2
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	440b      	add	r3, r1
 8004d08:	331c      	adds	r3, #28
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004d0e:	78fb      	ldrb	r3, [r7, #3]
 8004d10:	015a      	lsls	r2, r3, #5
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	4413      	add	r3, r2
 8004d16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	78fa      	ldrb	r2, [r7, #3]
 8004d1e:	0151      	lsls	r1, r2, #5
 8004d20:	693a      	ldr	r2, [r7, #16]
 8004d22:	440a      	add	r2, r1
 8004d24:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004d28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d2c:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8004d2e:	78fa      	ldrb	r2, [r7, #3]
 8004d30:	6879      	ldr	r1, [r7, #4]
 8004d32:	4613      	mov	r3, r2
 8004d34:	011b      	lsls	r3, r3, #4
 8004d36:	1a9b      	subs	r3, r3, r2
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	440b      	add	r3, r1
 8004d3c:	334c      	adds	r3, #76	@ 0x4c
 8004d3e:	2204      	movs	r2, #4
 8004d40:	701a      	strb	r2, [r3, #0]
 8004d42:	e014      	b.n	8004d6e <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004d44:	78fa      	ldrb	r2, [r7, #3]
 8004d46:	6879      	ldr	r1, [r7, #4]
 8004d48:	4613      	mov	r3, r2
 8004d4a:	011b      	lsls	r3, r3, #4
 8004d4c:	1a9b      	subs	r3, r3, r2
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	440b      	add	r3, r1
 8004d52:	334c      	adds	r3, #76	@ 0x4c
 8004d54:	2202      	movs	r2, #2
 8004d56:	701a      	strb	r2, [r3, #0]
 8004d58:	e009      	b.n	8004d6e <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004d5a:	78fa      	ldrb	r2, [r7, #3]
 8004d5c:	6879      	ldr	r1, [r7, #4]
 8004d5e:	4613      	mov	r3, r2
 8004d60:	011b      	lsls	r3, r3, #4
 8004d62:	1a9b      	subs	r3, r3, r2
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	440b      	add	r3, r1
 8004d68:	334c      	adds	r3, #76	@ 0x4c
 8004d6a:	2202      	movs	r2, #2
 8004d6c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004d6e:	78fa      	ldrb	r2, [r7, #3]
 8004d70:	6879      	ldr	r1, [r7, #4]
 8004d72:	4613      	mov	r3, r2
 8004d74:	011b      	lsls	r3, r3, #4
 8004d76:	1a9b      	subs	r3, r3, r2
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	440b      	add	r3, r1
 8004d7c:	3326      	adds	r3, #38	@ 0x26
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d00b      	beq.n	8004d9c <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004d84:	78fa      	ldrb	r2, [r7, #3]
 8004d86:	6879      	ldr	r1, [r7, #4]
 8004d88:	4613      	mov	r3, r2
 8004d8a:	011b      	lsls	r3, r3, #4
 8004d8c:	1a9b      	subs	r3, r3, r2
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	440b      	add	r3, r1
 8004d92:	3326      	adds	r3, #38	@ 0x26
 8004d94:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	f040 8136 	bne.w	8005008 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004d9c:	78fb      	ldrb	r3, [r7, #3]
 8004d9e:	015a      	lsls	r2, r3, #5
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	4413      	add	r3, r2
 8004da4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004db2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004dba:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004dbc:	78fb      	ldrb	r3, [r7, #3]
 8004dbe:	015a      	lsls	r2, r3, #5
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004dc8:	461a      	mov	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6013      	str	r3, [r2, #0]
 8004dce:	e11b      	b.n	8005008 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004dd0:	78fa      	ldrb	r2, [r7, #3]
 8004dd2:	6879      	ldr	r1, [r7, #4]
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	011b      	lsls	r3, r3, #4
 8004dd8:	1a9b      	subs	r3, r3, r2
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	440b      	add	r3, r1
 8004dde:	334d      	adds	r3, #77	@ 0x4d
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	2b03      	cmp	r3, #3
 8004de4:	f040 8081 	bne.w	8004eea <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004de8:	78fa      	ldrb	r2, [r7, #3]
 8004dea:	6879      	ldr	r1, [r7, #4]
 8004dec:	4613      	mov	r3, r2
 8004dee:	011b      	lsls	r3, r3, #4
 8004df0:	1a9b      	subs	r3, r3, r2
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	440b      	add	r3, r1
 8004df6:	334d      	adds	r3, #77	@ 0x4d
 8004df8:	2202      	movs	r2, #2
 8004dfa:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004dfc:	78fa      	ldrb	r2, [r7, #3]
 8004dfe:	6879      	ldr	r1, [r7, #4]
 8004e00:	4613      	mov	r3, r2
 8004e02:	011b      	lsls	r3, r3, #4
 8004e04:	1a9b      	subs	r3, r3, r2
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	440b      	add	r3, r1
 8004e0a:	331b      	adds	r3, #27
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	f040 80fa 	bne.w	8005008 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004e14:	78fa      	ldrb	r2, [r7, #3]
 8004e16:	6879      	ldr	r1, [r7, #4]
 8004e18:	4613      	mov	r3, r2
 8004e1a:	011b      	lsls	r3, r3, #4
 8004e1c:	1a9b      	subs	r3, r3, r2
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	440b      	add	r3, r1
 8004e22:	334c      	adds	r3, #76	@ 0x4c
 8004e24:	2202      	movs	r2, #2
 8004e26:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8004e28:	78fb      	ldrb	r3, [r7, #3]
 8004e2a:	015a      	lsls	r2, r3, #5
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	4413      	add	r3, r2
 8004e30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	78fa      	ldrb	r2, [r7, #3]
 8004e38:	0151      	lsls	r1, r2, #5
 8004e3a:	693a      	ldr	r2, [r7, #16]
 8004e3c:	440a      	add	r2, r1
 8004e3e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004e42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e46:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8004e48:	78fb      	ldrb	r3, [r7, #3]
 8004e4a:	015a      	lsls	r2, r3, #5
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	4413      	add	r3, r2
 8004e50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	78fa      	ldrb	r2, [r7, #3]
 8004e58:	0151      	lsls	r1, r2, #5
 8004e5a:	693a      	ldr	r2, [r7, #16]
 8004e5c:	440a      	add	r2, r1
 8004e5e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004e62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e66:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8004e68:	78fb      	ldrb	r3, [r7, #3]
 8004e6a:	015a      	lsls	r2, r3, #5
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	4413      	add	r3, r2
 8004e70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	78fa      	ldrb	r2, [r7, #3]
 8004e78:	0151      	lsls	r1, r2, #5
 8004e7a:	693a      	ldr	r2, [r7, #16]
 8004e7c:	440a      	add	r2, r1
 8004e7e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004e82:	f023 0320 	bic.w	r3, r3, #32
 8004e86:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004e88:	78fa      	ldrb	r2, [r7, #3]
 8004e8a:	6879      	ldr	r1, [r7, #4]
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	011b      	lsls	r3, r3, #4
 8004e90:	1a9b      	subs	r3, r3, r2
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	440b      	add	r3, r1
 8004e96:	3326      	adds	r3, #38	@ 0x26
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00b      	beq.n	8004eb6 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004e9e:	78fa      	ldrb	r2, [r7, #3]
 8004ea0:	6879      	ldr	r1, [r7, #4]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	011b      	lsls	r3, r3, #4
 8004ea6:	1a9b      	subs	r3, r3, r2
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	440b      	add	r3, r1
 8004eac:	3326      	adds	r3, #38	@ 0x26
 8004eae:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	f040 80a9 	bne.w	8005008 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004eb6:	78fb      	ldrb	r3, [r7, #3]
 8004eb8:	015a      	lsls	r2, r3, #5
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	4413      	add	r3, r2
 8004ebe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004ecc:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004ed4:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004ed6:	78fb      	ldrb	r3, [r7, #3]
 8004ed8:	015a      	lsls	r2, r3, #5
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	4413      	add	r3, r2
 8004ede:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6013      	str	r3, [r2, #0]
 8004ee8:	e08e      	b.n	8005008 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004eea:	78fa      	ldrb	r2, [r7, #3]
 8004eec:	6879      	ldr	r1, [r7, #4]
 8004eee:	4613      	mov	r3, r2
 8004ef0:	011b      	lsls	r3, r3, #4
 8004ef2:	1a9b      	subs	r3, r3, r2
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	440b      	add	r3, r1
 8004ef8:	334d      	adds	r3, #77	@ 0x4d
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	2b04      	cmp	r3, #4
 8004efe:	d143      	bne.n	8004f88 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004f00:	78fa      	ldrb	r2, [r7, #3]
 8004f02:	6879      	ldr	r1, [r7, #4]
 8004f04:	4613      	mov	r3, r2
 8004f06:	011b      	lsls	r3, r3, #4
 8004f08:	1a9b      	subs	r3, r3, r2
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	440b      	add	r3, r1
 8004f0e:	334d      	adds	r3, #77	@ 0x4d
 8004f10:	2202      	movs	r2, #2
 8004f12:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004f14:	78fa      	ldrb	r2, [r7, #3]
 8004f16:	6879      	ldr	r1, [r7, #4]
 8004f18:	4613      	mov	r3, r2
 8004f1a:	011b      	lsls	r3, r3, #4
 8004f1c:	1a9b      	subs	r3, r3, r2
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	440b      	add	r3, r1
 8004f22:	334c      	adds	r3, #76	@ 0x4c
 8004f24:	2202      	movs	r2, #2
 8004f26:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004f28:	78fa      	ldrb	r2, [r7, #3]
 8004f2a:	6879      	ldr	r1, [r7, #4]
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	011b      	lsls	r3, r3, #4
 8004f30:	1a9b      	subs	r3, r3, r2
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	440b      	add	r3, r1
 8004f36:	3326      	adds	r3, #38	@ 0x26
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00a      	beq.n	8004f54 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004f3e:	78fa      	ldrb	r2, [r7, #3]
 8004f40:	6879      	ldr	r1, [r7, #4]
 8004f42:	4613      	mov	r3, r2
 8004f44:	011b      	lsls	r3, r3, #4
 8004f46:	1a9b      	subs	r3, r3, r2
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	440b      	add	r3, r1
 8004f4c:	3326      	adds	r3, #38	@ 0x26
 8004f4e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004f50:	2b02      	cmp	r3, #2
 8004f52:	d159      	bne.n	8005008 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004f54:	78fb      	ldrb	r3, [r7, #3]
 8004f56:	015a      	lsls	r2, r3, #5
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004f6a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004f72:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004f74:	78fb      	ldrb	r3, [r7, #3]
 8004f76:	015a      	lsls	r2, r3, #5
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f80:	461a      	mov	r2, r3
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6013      	str	r3, [r2, #0]
 8004f86:	e03f      	b.n	8005008 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8004f88:	78fa      	ldrb	r2, [r7, #3]
 8004f8a:	6879      	ldr	r1, [r7, #4]
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	011b      	lsls	r3, r3, #4
 8004f90:	1a9b      	subs	r3, r3, r2
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	440b      	add	r3, r1
 8004f96:	334d      	adds	r3, #77	@ 0x4d
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	2b08      	cmp	r3, #8
 8004f9c:	d126      	bne.n	8004fec <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004f9e:	78fa      	ldrb	r2, [r7, #3]
 8004fa0:	6879      	ldr	r1, [r7, #4]
 8004fa2:	4613      	mov	r3, r2
 8004fa4:	011b      	lsls	r3, r3, #4
 8004fa6:	1a9b      	subs	r3, r3, r2
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	440b      	add	r3, r1
 8004fac:	334d      	adds	r3, #77	@ 0x4d
 8004fae:	2202      	movs	r2, #2
 8004fb0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004fb2:	78fa      	ldrb	r2, [r7, #3]
 8004fb4:	6879      	ldr	r1, [r7, #4]
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	011b      	lsls	r3, r3, #4
 8004fba:	1a9b      	subs	r3, r3, r2
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	440b      	add	r3, r1
 8004fc0:	3344      	adds	r3, #68	@ 0x44
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	1c59      	adds	r1, r3, #1
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	4613      	mov	r3, r2
 8004fca:	011b      	lsls	r3, r3, #4
 8004fcc:	1a9b      	subs	r3, r3, r2
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	4403      	add	r3, r0
 8004fd2:	3344      	adds	r3, #68	@ 0x44
 8004fd4:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8004fd6:	78fa      	ldrb	r2, [r7, #3]
 8004fd8:	6879      	ldr	r1, [r7, #4]
 8004fda:	4613      	mov	r3, r2
 8004fdc:	011b      	lsls	r3, r3, #4
 8004fde:	1a9b      	subs	r3, r3, r2
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	440b      	add	r3, r1
 8004fe4:	334c      	adds	r3, #76	@ 0x4c
 8004fe6:	2204      	movs	r2, #4
 8004fe8:	701a      	strb	r2, [r3, #0]
 8004fea:	e00d      	b.n	8005008 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8004fec:	78fa      	ldrb	r2, [r7, #3]
 8004fee:	6879      	ldr	r1, [r7, #4]
 8004ff0:	4613      	mov	r3, r2
 8004ff2:	011b      	lsls	r3, r3, #4
 8004ff4:	1a9b      	subs	r3, r3, r2
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	440b      	add	r3, r1
 8004ffa:	334d      	adds	r3, #77	@ 0x4d
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	f000 8100 	beq.w	8005204 <HCD_HC_IN_IRQHandler+0xcca>
 8005004:	e000      	b.n	8005008 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005006:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005008:	78fa      	ldrb	r2, [r7, #3]
 800500a:	6879      	ldr	r1, [r7, #4]
 800500c:	4613      	mov	r3, r2
 800500e:	011b      	lsls	r3, r3, #4
 8005010:	1a9b      	subs	r3, r3, r2
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	440b      	add	r3, r1
 8005016:	334c      	adds	r3, #76	@ 0x4c
 8005018:	781a      	ldrb	r2, [r3, #0]
 800501a:	78fb      	ldrb	r3, [r7, #3]
 800501c:	4619      	mov	r1, r3
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f006 fe90 	bl	800bd44 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005024:	e0ef      	b.n	8005206 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	78fa      	ldrb	r2, [r7, #3]
 800502c:	4611      	mov	r1, r2
 800502e:	4618      	mov	r0, r3
 8005030:	f003 fe1d 	bl	8008c6e <USB_ReadChInterrupts>
 8005034:	4603      	mov	r3, r0
 8005036:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800503a:	2b40      	cmp	r3, #64	@ 0x40
 800503c:	d12f      	bne.n	800509e <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800503e:	78fb      	ldrb	r3, [r7, #3]
 8005040:	015a      	lsls	r2, r3, #5
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	4413      	add	r3, r2
 8005046:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800504a:	461a      	mov	r2, r3
 800504c:	2340      	movs	r3, #64	@ 0x40
 800504e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8005050:	78fa      	ldrb	r2, [r7, #3]
 8005052:	6879      	ldr	r1, [r7, #4]
 8005054:	4613      	mov	r3, r2
 8005056:	011b      	lsls	r3, r3, #4
 8005058:	1a9b      	subs	r3, r3, r2
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	440b      	add	r3, r1
 800505e:	334d      	adds	r3, #77	@ 0x4d
 8005060:	2205      	movs	r2, #5
 8005062:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8005064:	78fa      	ldrb	r2, [r7, #3]
 8005066:	6879      	ldr	r1, [r7, #4]
 8005068:	4613      	mov	r3, r2
 800506a:	011b      	lsls	r3, r3, #4
 800506c:	1a9b      	subs	r3, r3, r2
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	440b      	add	r3, r1
 8005072:	331a      	adds	r3, #26
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d109      	bne.n	800508e <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800507a:	78fa      	ldrb	r2, [r7, #3]
 800507c:	6879      	ldr	r1, [r7, #4]
 800507e:	4613      	mov	r3, r2
 8005080:	011b      	lsls	r3, r3, #4
 8005082:	1a9b      	subs	r3, r3, r2
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	440b      	add	r3, r1
 8005088:	3344      	adds	r3, #68	@ 0x44
 800508a:	2200      	movs	r2, #0
 800508c:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	78fa      	ldrb	r2, [r7, #3]
 8005094:	4611      	mov	r1, r2
 8005096:	4618      	mov	r0, r3
 8005098:	f004 fb31 	bl	80096fe <USB_HC_Halt>
 800509c:	e0b3      	b.n	8005206 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	78fa      	ldrb	r2, [r7, #3]
 80050a4:	4611      	mov	r1, r2
 80050a6:	4618      	mov	r0, r3
 80050a8:	f003 fde1 	bl	8008c6e <USB_ReadChInterrupts>
 80050ac:	4603      	mov	r3, r0
 80050ae:	f003 0310 	and.w	r3, r3, #16
 80050b2:	2b10      	cmp	r3, #16
 80050b4:	f040 80a7 	bne.w	8005206 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80050b8:	78fa      	ldrb	r2, [r7, #3]
 80050ba:	6879      	ldr	r1, [r7, #4]
 80050bc:	4613      	mov	r3, r2
 80050be:	011b      	lsls	r3, r3, #4
 80050c0:	1a9b      	subs	r3, r3, r2
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	440b      	add	r3, r1
 80050c6:	3326      	adds	r3, #38	@ 0x26
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	2b03      	cmp	r3, #3
 80050cc:	d11b      	bne.n	8005106 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80050ce:	78fa      	ldrb	r2, [r7, #3]
 80050d0:	6879      	ldr	r1, [r7, #4]
 80050d2:	4613      	mov	r3, r2
 80050d4:	011b      	lsls	r3, r3, #4
 80050d6:	1a9b      	subs	r3, r3, r2
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	440b      	add	r3, r1
 80050dc:	3344      	adds	r3, #68	@ 0x44
 80050de:	2200      	movs	r2, #0
 80050e0:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80050e2:	78fa      	ldrb	r2, [r7, #3]
 80050e4:	6879      	ldr	r1, [r7, #4]
 80050e6:	4613      	mov	r3, r2
 80050e8:	011b      	lsls	r3, r3, #4
 80050ea:	1a9b      	subs	r3, r3, r2
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	440b      	add	r3, r1
 80050f0:	334d      	adds	r3, #77	@ 0x4d
 80050f2:	2204      	movs	r2, #4
 80050f4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	78fa      	ldrb	r2, [r7, #3]
 80050fc:	4611      	mov	r1, r2
 80050fe:	4618      	mov	r0, r3
 8005100:	f004 fafd 	bl	80096fe <USB_HC_Halt>
 8005104:	e03f      	b.n	8005186 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005106:	78fa      	ldrb	r2, [r7, #3]
 8005108:	6879      	ldr	r1, [r7, #4]
 800510a:	4613      	mov	r3, r2
 800510c:	011b      	lsls	r3, r3, #4
 800510e:	1a9b      	subs	r3, r3, r2
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	440b      	add	r3, r1
 8005114:	3326      	adds	r3, #38	@ 0x26
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d00a      	beq.n	8005132 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800511c:	78fa      	ldrb	r2, [r7, #3]
 800511e:	6879      	ldr	r1, [r7, #4]
 8005120:	4613      	mov	r3, r2
 8005122:	011b      	lsls	r3, r3, #4
 8005124:	1a9b      	subs	r3, r3, r2
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	440b      	add	r3, r1
 800512a:	3326      	adds	r3, #38	@ 0x26
 800512c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800512e:	2b02      	cmp	r3, #2
 8005130:	d129      	bne.n	8005186 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8005132:	78fa      	ldrb	r2, [r7, #3]
 8005134:	6879      	ldr	r1, [r7, #4]
 8005136:	4613      	mov	r3, r2
 8005138:	011b      	lsls	r3, r3, #4
 800513a:	1a9b      	subs	r3, r3, r2
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	440b      	add	r3, r1
 8005140:	3344      	adds	r3, #68	@ 0x44
 8005142:	2200      	movs	r2, #0
 8005144:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	799b      	ldrb	r3, [r3, #6]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00a      	beq.n	8005164 <HCD_HC_IN_IRQHandler+0xc2a>
 800514e:	78fa      	ldrb	r2, [r7, #3]
 8005150:	6879      	ldr	r1, [r7, #4]
 8005152:	4613      	mov	r3, r2
 8005154:	011b      	lsls	r3, r3, #4
 8005156:	1a9b      	subs	r3, r3, r2
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	440b      	add	r3, r1
 800515c:	331b      	adds	r3, #27
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	2b01      	cmp	r3, #1
 8005162:	d110      	bne.n	8005186 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8005164:	78fa      	ldrb	r2, [r7, #3]
 8005166:	6879      	ldr	r1, [r7, #4]
 8005168:	4613      	mov	r3, r2
 800516a:	011b      	lsls	r3, r3, #4
 800516c:	1a9b      	subs	r3, r3, r2
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	440b      	add	r3, r1
 8005172:	334d      	adds	r3, #77	@ 0x4d
 8005174:	2204      	movs	r2, #4
 8005176:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	78fa      	ldrb	r2, [r7, #3]
 800517e:	4611      	mov	r1, r2
 8005180:	4618      	mov	r0, r3
 8005182:	f004 fabc 	bl	80096fe <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8005186:	78fa      	ldrb	r2, [r7, #3]
 8005188:	6879      	ldr	r1, [r7, #4]
 800518a:	4613      	mov	r3, r2
 800518c:	011b      	lsls	r3, r3, #4
 800518e:	1a9b      	subs	r3, r3, r2
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	440b      	add	r3, r1
 8005194:	331b      	adds	r3, #27
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	2b01      	cmp	r3, #1
 800519a:	d129      	bne.n	80051f0 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800519c:	78fa      	ldrb	r2, [r7, #3]
 800519e:	6879      	ldr	r1, [r7, #4]
 80051a0:	4613      	mov	r3, r2
 80051a2:	011b      	lsls	r3, r3, #4
 80051a4:	1a9b      	subs	r3, r3, r2
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	440b      	add	r3, r1
 80051aa:	331b      	adds	r3, #27
 80051ac:	2200      	movs	r2, #0
 80051ae:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80051b0:	78fb      	ldrb	r3, [r7, #3]
 80051b2:	015a      	lsls	r2, r3, #5
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	4413      	add	r3, r2
 80051b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	78fa      	ldrb	r2, [r7, #3]
 80051c0:	0151      	lsls	r1, r2, #5
 80051c2:	693a      	ldr	r2, [r7, #16]
 80051c4:	440a      	add	r2, r1
 80051c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80051ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051ce:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80051d0:	78fb      	ldrb	r3, [r7, #3]
 80051d2:	015a      	lsls	r2, r3, #5
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	4413      	add	r3, r2
 80051d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	78fa      	ldrb	r2, [r7, #3]
 80051e0:	0151      	lsls	r1, r2, #5
 80051e2:	693a      	ldr	r2, [r7, #16]
 80051e4:	440a      	add	r2, r1
 80051e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80051ea:	f043 0320 	orr.w	r3, r3, #32
 80051ee:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80051f0:	78fb      	ldrb	r3, [r7, #3]
 80051f2:	015a      	lsls	r2, r3, #5
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	4413      	add	r3, r2
 80051f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051fc:	461a      	mov	r2, r3
 80051fe:	2310      	movs	r3, #16
 8005200:	6093      	str	r3, [r2, #8]
 8005202:	e000      	b.n	8005206 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8005204:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8005206:	3718      	adds	r7, #24
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b086      	sub	sp, #24
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	460b      	mov	r3, r1
 8005216:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	78fa      	ldrb	r2, [r7, #3]
 8005228:	4611      	mov	r1, r2
 800522a:	4618      	mov	r0, r3
 800522c:	f003 fd1f 	bl	8008c6e <USB_ReadChInterrupts>
 8005230:	4603      	mov	r3, r0
 8005232:	f003 0304 	and.w	r3, r3, #4
 8005236:	2b04      	cmp	r3, #4
 8005238:	d11b      	bne.n	8005272 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800523a:	78fb      	ldrb	r3, [r7, #3]
 800523c:	015a      	lsls	r2, r3, #5
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	4413      	add	r3, r2
 8005242:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005246:	461a      	mov	r2, r3
 8005248:	2304      	movs	r3, #4
 800524a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800524c:	78fa      	ldrb	r2, [r7, #3]
 800524e:	6879      	ldr	r1, [r7, #4]
 8005250:	4613      	mov	r3, r2
 8005252:	011b      	lsls	r3, r3, #4
 8005254:	1a9b      	subs	r3, r3, r2
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	440b      	add	r3, r1
 800525a:	334d      	adds	r3, #77	@ 0x4d
 800525c:	2207      	movs	r2, #7
 800525e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	78fa      	ldrb	r2, [r7, #3]
 8005266:	4611      	mov	r1, r2
 8005268:	4618      	mov	r0, r3
 800526a:	f004 fa48 	bl	80096fe <USB_HC_Halt>
 800526e:	f000 bc89 	b.w	8005b84 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	78fa      	ldrb	r2, [r7, #3]
 8005278:	4611      	mov	r1, r2
 800527a:	4618      	mov	r0, r3
 800527c:	f003 fcf7 	bl	8008c6e <USB_ReadChInterrupts>
 8005280:	4603      	mov	r3, r0
 8005282:	f003 0320 	and.w	r3, r3, #32
 8005286:	2b20      	cmp	r3, #32
 8005288:	f040 8082 	bne.w	8005390 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800528c:	78fb      	ldrb	r3, [r7, #3]
 800528e:	015a      	lsls	r2, r3, #5
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	4413      	add	r3, r2
 8005294:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005298:	461a      	mov	r2, r3
 800529a:	2320      	movs	r3, #32
 800529c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800529e:	78fa      	ldrb	r2, [r7, #3]
 80052a0:	6879      	ldr	r1, [r7, #4]
 80052a2:	4613      	mov	r3, r2
 80052a4:	011b      	lsls	r3, r3, #4
 80052a6:	1a9b      	subs	r3, r3, r2
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	440b      	add	r3, r1
 80052ac:	3319      	adds	r3, #25
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d124      	bne.n	80052fe <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80052b4:	78fa      	ldrb	r2, [r7, #3]
 80052b6:	6879      	ldr	r1, [r7, #4]
 80052b8:	4613      	mov	r3, r2
 80052ba:	011b      	lsls	r3, r3, #4
 80052bc:	1a9b      	subs	r3, r3, r2
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	440b      	add	r3, r1
 80052c2:	3319      	adds	r3, #25
 80052c4:	2200      	movs	r2, #0
 80052c6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80052c8:	78fa      	ldrb	r2, [r7, #3]
 80052ca:	6879      	ldr	r1, [r7, #4]
 80052cc:	4613      	mov	r3, r2
 80052ce:	011b      	lsls	r3, r3, #4
 80052d0:	1a9b      	subs	r3, r3, r2
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	440b      	add	r3, r1
 80052d6:	334c      	adds	r3, #76	@ 0x4c
 80052d8:	2202      	movs	r2, #2
 80052da:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80052dc:	78fa      	ldrb	r2, [r7, #3]
 80052de:	6879      	ldr	r1, [r7, #4]
 80052e0:	4613      	mov	r3, r2
 80052e2:	011b      	lsls	r3, r3, #4
 80052e4:	1a9b      	subs	r3, r3, r2
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	440b      	add	r3, r1
 80052ea:	334d      	adds	r3, #77	@ 0x4d
 80052ec:	2203      	movs	r2, #3
 80052ee:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	78fa      	ldrb	r2, [r7, #3]
 80052f6:	4611      	mov	r1, r2
 80052f8:	4618      	mov	r0, r3
 80052fa:	f004 fa00 	bl	80096fe <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80052fe:	78fa      	ldrb	r2, [r7, #3]
 8005300:	6879      	ldr	r1, [r7, #4]
 8005302:	4613      	mov	r3, r2
 8005304:	011b      	lsls	r3, r3, #4
 8005306:	1a9b      	subs	r3, r3, r2
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	440b      	add	r3, r1
 800530c:	331a      	adds	r3, #26
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	2b01      	cmp	r3, #1
 8005312:	f040 8437 	bne.w	8005b84 <HCD_HC_OUT_IRQHandler+0x978>
 8005316:	78fa      	ldrb	r2, [r7, #3]
 8005318:	6879      	ldr	r1, [r7, #4]
 800531a:	4613      	mov	r3, r2
 800531c:	011b      	lsls	r3, r3, #4
 800531e:	1a9b      	subs	r3, r3, r2
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	440b      	add	r3, r1
 8005324:	331b      	adds	r3, #27
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	f040 842b 	bne.w	8005b84 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800532e:	78fa      	ldrb	r2, [r7, #3]
 8005330:	6879      	ldr	r1, [r7, #4]
 8005332:	4613      	mov	r3, r2
 8005334:	011b      	lsls	r3, r3, #4
 8005336:	1a9b      	subs	r3, r3, r2
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	440b      	add	r3, r1
 800533c:	3326      	adds	r3, #38	@ 0x26
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	2b01      	cmp	r3, #1
 8005342:	d009      	beq.n	8005358 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8005344:	78fa      	ldrb	r2, [r7, #3]
 8005346:	6879      	ldr	r1, [r7, #4]
 8005348:	4613      	mov	r3, r2
 800534a:	011b      	lsls	r3, r3, #4
 800534c:	1a9b      	subs	r3, r3, r2
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	440b      	add	r3, r1
 8005352:	331b      	adds	r3, #27
 8005354:	2201      	movs	r2, #1
 8005356:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8005358:	78fa      	ldrb	r2, [r7, #3]
 800535a:	6879      	ldr	r1, [r7, #4]
 800535c:	4613      	mov	r3, r2
 800535e:	011b      	lsls	r3, r3, #4
 8005360:	1a9b      	subs	r3, r3, r2
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	440b      	add	r3, r1
 8005366:	334d      	adds	r3, #77	@ 0x4d
 8005368:	2203      	movs	r2, #3
 800536a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	78fa      	ldrb	r2, [r7, #3]
 8005372:	4611      	mov	r1, r2
 8005374:	4618      	mov	r0, r3
 8005376:	f004 f9c2 	bl	80096fe <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800537a:	78fa      	ldrb	r2, [r7, #3]
 800537c:	6879      	ldr	r1, [r7, #4]
 800537e:	4613      	mov	r3, r2
 8005380:	011b      	lsls	r3, r3, #4
 8005382:	1a9b      	subs	r3, r3, r2
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	440b      	add	r3, r1
 8005388:	3344      	adds	r3, #68	@ 0x44
 800538a:	2200      	movs	r2, #0
 800538c:	601a      	str	r2, [r3, #0]
 800538e:	e3f9      	b.n	8005b84 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	78fa      	ldrb	r2, [r7, #3]
 8005396:	4611      	mov	r1, r2
 8005398:	4618      	mov	r0, r3
 800539a:	f003 fc68 	bl	8008c6e <USB_ReadChInterrupts>
 800539e:	4603      	mov	r3, r0
 80053a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80053a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053a8:	d111      	bne.n	80053ce <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80053aa:	78fb      	ldrb	r3, [r7, #3]
 80053ac:	015a      	lsls	r2, r3, #5
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	4413      	add	r3, r2
 80053b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053b6:	461a      	mov	r2, r3
 80053b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80053bc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	78fa      	ldrb	r2, [r7, #3]
 80053c4:	4611      	mov	r1, r2
 80053c6:	4618      	mov	r0, r3
 80053c8:	f004 f999 	bl	80096fe <USB_HC_Halt>
 80053cc:	e3da      	b.n	8005b84 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	78fa      	ldrb	r2, [r7, #3]
 80053d4:	4611      	mov	r1, r2
 80053d6:	4618      	mov	r0, r3
 80053d8:	f003 fc49 	bl	8008c6e <USB_ReadChInterrupts>
 80053dc:	4603      	mov	r3, r0
 80053de:	f003 0301 	and.w	r3, r3, #1
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d168      	bne.n	80054b8 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80053e6:	78fa      	ldrb	r2, [r7, #3]
 80053e8:	6879      	ldr	r1, [r7, #4]
 80053ea:	4613      	mov	r3, r2
 80053ec:	011b      	lsls	r3, r3, #4
 80053ee:	1a9b      	subs	r3, r3, r2
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	440b      	add	r3, r1
 80053f4:	3344      	adds	r3, #68	@ 0x44
 80053f6:	2200      	movs	r2, #0
 80053f8:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	78fa      	ldrb	r2, [r7, #3]
 8005400:	4611      	mov	r1, r2
 8005402:	4618      	mov	r0, r3
 8005404:	f003 fc33 	bl	8008c6e <USB_ReadChInterrupts>
 8005408:	4603      	mov	r3, r0
 800540a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800540e:	2b40      	cmp	r3, #64	@ 0x40
 8005410:	d112      	bne.n	8005438 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8005412:	78fa      	ldrb	r2, [r7, #3]
 8005414:	6879      	ldr	r1, [r7, #4]
 8005416:	4613      	mov	r3, r2
 8005418:	011b      	lsls	r3, r3, #4
 800541a:	1a9b      	subs	r3, r3, r2
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	440b      	add	r3, r1
 8005420:	3319      	adds	r3, #25
 8005422:	2201      	movs	r2, #1
 8005424:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005426:	78fb      	ldrb	r3, [r7, #3]
 8005428:	015a      	lsls	r2, r3, #5
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	4413      	add	r3, r2
 800542e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005432:	461a      	mov	r2, r3
 8005434:	2340      	movs	r3, #64	@ 0x40
 8005436:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8005438:	78fa      	ldrb	r2, [r7, #3]
 800543a:	6879      	ldr	r1, [r7, #4]
 800543c:	4613      	mov	r3, r2
 800543e:	011b      	lsls	r3, r3, #4
 8005440:	1a9b      	subs	r3, r3, r2
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	440b      	add	r3, r1
 8005446:	331b      	adds	r3, #27
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d019      	beq.n	8005482 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800544e:	78fa      	ldrb	r2, [r7, #3]
 8005450:	6879      	ldr	r1, [r7, #4]
 8005452:	4613      	mov	r3, r2
 8005454:	011b      	lsls	r3, r3, #4
 8005456:	1a9b      	subs	r3, r3, r2
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	440b      	add	r3, r1
 800545c:	331b      	adds	r3, #27
 800545e:	2200      	movs	r2, #0
 8005460:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005462:	78fb      	ldrb	r3, [r7, #3]
 8005464:	015a      	lsls	r2, r3, #5
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	4413      	add	r3, r2
 800546a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	78fa      	ldrb	r2, [r7, #3]
 8005472:	0151      	lsls	r1, r2, #5
 8005474:	693a      	ldr	r2, [r7, #16]
 8005476:	440a      	add	r2, r1
 8005478:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800547c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005480:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8005482:	78fb      	ldrb	r3, [r7, #3]
 8005484:	015a      	lsls	r2, r3, #5
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	4413      	add	r3, r2
 800548a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800548e:	461a      	mov	r2, r3
 8005490:	2301      	movs	r3, #1
 8005492:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8005494:	78fa      	ldrb	r2, [r7, #3]
 8005496:	6879      	ldr	r1, [r7, #4]
 8005498:	4613      	mov	r3, r2
 800549a:	011b      	lsls	r3, r3, #4
 800549c:	1a9b      	subs	r3, r3, r2
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	440b      	add	r3, r1
 80054a2:	334d      	adds	r3, #77	@ 0x4d
 80054a4:	2201      	movs	r2, #1
 80054a6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	78fa      	ldrb	r2, [r7, #3]
 80054ae:	4611      	mov	r1, r2
 80054b0:	4618      	mov	r0, r3
 80054b2:	f004 f924 	bl	80096fe <USB_HC_Halt>
 80054b6:	e365      	b.n	8005b84 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	78fa      	ldrb	r2, [r7, #3]
 80054be:	4611      	mov	r1, r2
 80054c0:	4618      	mov	r0, r3
 80054c2:	f003 fbd4 	bl	8008c6e <USB_ReadChInterrupts>
 80054c6:	4603      	mov	r3, r0
 80054c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054cc:	2b40      	cmp	r3, #64	@ 0x40
 80054ce:	d139      	bne.n	8005544 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80054d0:	78fa      	ldrb	r2, [r7, #3]
 80054d2:	6879      	ldr	r1, [r7, #4]
 80054d4:	4613      	mov	r3, r2
 80054d6:	011b      	lsls	r3, r3, #4
 80054d8:	1a9b      	subs	r3, r3, r2
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	440b      	add	r3, r1
 80054de:	334d      	adds	r3, #77	@ 0x4d
 80054e0:	2205      	movs	r2, #5
 80054e2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80054e4:	78fa      	ldrb	r2, [r7, #3]
 80054e6:	6879      	ldr	r1, [r7, #4]
 80054e8:	4613      	mov	r3, r2
 80054ea:	011b      	lsls	r3, r3, #4
 80054ec:	1a9b      	subs	r3, r3, r2
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	440b      	add	r3, r1
 80054f2:	331a      	adds	r3, #26
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d109      	bne.n	800550e <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80054fa:	78fa      	ldrb	r2, [r7, #3]
 80054fc:	6879      	ldr	r1, [r7, #4]
 80054fe:	4613      	mov	r3, r2
 8005500:	011b      	lsls	r3, r3, #4
 8005502:	1a9b      	subs	r3, r3, r2
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	440b      	add	r3, r1
 8005508:	3319      	adds	r3, #25
 800550a:	2201      	movs	r2, #1
 800550c:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 800550e:	78fa      	ldrb	r2, [r7, #3]
 8005510:	6879      	ldr	r1, [r7, #4]
 8005512:	4613      	mov	r3, r2
 8005514:	011b      	lsls	r3, r3, #4
 8005516:	1a9b      	subs	r3, r3, r2
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	440b      	add	r3, r1
 800551c:	3344      	adds	r3, #68	@ 0x44
 800551e:	2200      	movs	r2, #0
 8005520:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	78fa      	ldrb	r2, [r7, #3]
 8005528:	4611      	mov	r1, r2
 800552a:	4618      	mov	r0, r3
 800552c:	f004 f8e7 	bl	80096fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005530:	78fb      	ldrb	r3, [r7, #3]
 8005532:	015a      	lsls	r2, r3, #5
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	4413      	add	r3, r2
 8005538:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800553c:	461a      	mov	r2, r3
 800553e:	2340      	movs	r3, #64	@ 0x40
 8005540:	6093      	str	r3, [r2, #8]
 8005542:	e31f      	b.n	8005b84 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	78fa      	ldrb	r2, [r7, #3]
 800554a:	4611      	mov	r1, r2
 800554c:	4618      	mov	r0, r3
 800554e:	f003 fb8e 	bl	8008c6e <USB_ReadChInterrupts>
 8005552:	4603      	mov	r3, r0
 8005554:	f003 0308 	and.w	r3, r3, #8
 8005558:	2b08      	cmp	r3, #8
 800555a:	d11a      	bne.n	8005592 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800555c:	78fb      	ldrb	r3, [r7, #3]
 800555e:	015a      	lsls	r2, r3, #5
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	4413      	add	r3, r2
 8005564:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005568:	461a      	mov	r2, r3
 800556a:	2308      	movs	r3, #8
 800556c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800556e:	78fa      	ldrb	r2, [r7, #3]
 8005570:	6879      	ldr	r1, [r7, #4]
 8005572:	4613      	mov	r3, r2
 8005574:	011b      	lsls	r3, r3, #4
 8005576:	1a9b      	subs	r3, r3, r2
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	440b      	add	r3, r1
 800557c:	334d      	adds	r3, #77	@ 0x4d
 800557e:	2206      	movs	r2, #6
 8005580:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	78fa      	ldrb	r2, [r7, #3]
 8005588:	4611      	mov	r1, r2
 800558a:	4618      	mov	r0, r3
 800558c:	f004 f8b7 	bl	80096fe <USB_HC_Halt>
 8005590:	e2f8      	b.n	8005b84 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	78fa      	ldrb	r2, [r7, #3]
 8005598:	4611      	mov	r1, r2
 800559a:	4618      	mov	r0, r3
 800559c:	f003 fb67 	bl	8008c6e <USB_ReadChInterrupts>
 80055a0:	4603      	mov	r3, r0
 80055a2:	f003 0310 	and.w	r3, r3, #16
 80055a6:	2b10      	cmp	r3, #16
 80055a8:	d144      	bne.n	8005634 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80055aa:	78fa      	ldrb	r2, [r7, #3]
 80055ac:	6879      	ldr	r1, [r7, #4]
 80055ae:	4613      	mov	r3, r2
 80055b0:	011b      	lsls	r3, r3, #4
 80055b2:	1a9b      	subs	r3, r3, r2
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	440b      	add	r3, r1
 80055b8:	3344      	adds	r3, #68	@ 0x44
 80055ba:	2200      	movs	r2, #0
 80055bc:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80055be:	78fa      	ldrb	r2, [r7, #3]
 80055c0:	6879      	ldr	r1, [r7, #4]
 80055c2:	4613      	mov	r3, r2
 80055c4:	011b      	lsls	r3, r3, #4
 80055c6:	1a9b      	subs	r3, r3, r2
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	440b      	add	r3, r1
 80055cc:	334d      	adds	r3, #77	@ 0x4d
 80055ce:	2204      	movs	r2, #4
 80055d0:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80055d2:	78fa      	ldrb	r2, [r7, #3]
 80055d4:	6879      	ldr	r1, [r7, #4]
 80055d6:	4613      	mov	r3, r2
 80055d8:	011b      	lsls	r3, r3, #4
 80055da:	1a9b      	subs	r3, r3, r2
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	440b      	add	r3, r1
 80055e0:	3319      	adds	r3, #25
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d114      	bne.n	8005612 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80055e8:	78fa      	ldrb	r2, [r7, #3]
 80055ea:	6879      	ldr	r1, [r7, #4]
 80055ec:	4613      	mov	r3, r2
 80055ee:	011b      	lsls	r3, r3, #4
 80055f0:	1a9b      	subs	r3, r3, r2
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	440b      	add	r3, r1
 80055f6:	3318      	adds	r3, #24
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d109      	bne.n	8005612 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80055fe:	78fa      	ldrb	r2, [r7, #3]
 8005600:	6879      	ldr	r1, [r7, #4]
 8005602:	4613      	mov	r3, r2
 8005604:	011b      	lsls	r3, r3, #4
 8005606:	1a9b      	subs	r3, r3, r2
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	440b      	add	r3, r1
 800560c:	3319      	adds	r3, #25
 800560e:	2201      	movs	r2, #1
 8005610:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	78fa      	ldrb	r2, [r7, #3]
 8005618:	4611      	mov	r1, r2
 800561a:	4618      	mov	r0, r3
 800561c:	f004 f86f 	bl	80096fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8005620:	78fb      	ldrb	r3, [r7, #3]
 8005622:	015a      	lsls	r2, r3, #5
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	4413      	add	r3, r2
 8005628:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800562c:	461a      	mov	r2, r3
 800562e:	2310      	movs	r3, #16
 8005630:	6093      	str	r3, [r2, #8]
 8005632:	e2a7      	b.n	8005b84 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	78fa      	ldrb	r2, [r7, #3]
 800563a:	4611      	mov	r1, r2
 800563c:	4618      	mov	r0, r3
 800563e:	f003 fb16 	bl	8008c6e <USB_ReadChInterrupts>
 8005642:	4603      	mov	r3, r0
 8005644:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005648:	2b80      	cmp	r3, #128	@ 0x80
 800564a:	f040 8083 	bne.w	8005754 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	799b      	ldrb	r3, [r3, #6]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d111      	bne.n	800567a <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8005656:	78fa      	ldrb	r2, [r7, #3]
 8005658:	6879      	ldr	r1, [r7, #4]
 800565a:	4613      	mov	r3, r2
 800565c:	011b      	lsls	r3, r3, #4
 800565e:	1a9b      	subs	r3, r3, r2
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	440b      	add	r3, r1
 8005664:	334d      	adds	r3, #77	@ 0x4d
 8005666:	2207      	movs	r2, #7
 8005668:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	78fa      	ldrb	r2, [r7, #3]
 8005670:	4611      	mov	r1, r2
 8005672:	4618      	mov	r0, r3
 8005674:	f004 f843 	bl	80096fe <USB_HC_Halt>
 8005678:	e062      	b.n	8005740 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800567a:	78fa      	ldrb	r2, [r7, #3]
 800567c:	6879      	ldr	r1, [r7, #4]
 800567e:	4613      	mov	r3, r2
 8005680:	011b      	lsls	r3, r3, #4
 8005682:	1a9b      	subs	r3, r3, r2
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	440b      	add	r3, r1
 8005688:	3344      	adds	r3, #68	@ 0x44
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	1c59      	adds	r1, r3, #1
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	4613      	mov	r3, r2
 8005692:	011b      	lsls	r3, r3, #4
 8005694:	1a9b      	subs	r3, r3, r2
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	4403      	add	r3, r0
 800569a:	3344      	adds	r3, #68	@ 0x44
 800569c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800569e:	78fa      	ldrb	r2, [r7, #3]
 80056a0:	6879      	ldr	r1, [r7, #4]
 80056a2:	4613      	mov	r3, r2
 80056a4:	011b      	lsls	r3, r3, #4
 80056a6:	1a9b      	subs	r3, r3, r2
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	440b      	add	r3, r1
 80056ac:	3344      	adds	r3, #68	@ 0x44
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d922      	bls.n	80056fa <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80056b4:	78fa      	ldrb	r2, [r7, #3]
 80056b6:	6879      	ldr	r1, [r7, #4]
 80056b8:	4613      	mov	r3, r2
 80056ba:	011b      	lsls	r3, r3, #4
 80056bc:	1a9b      	subs	r3, r3, r2
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	440b      	add	r3, r1
 80056c2:	3344      	adds	r3, #68	@ 0x44
 80056c4:	2200      	movs	r2, #0
 80056c6:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80056c8:	78fa      	ldrb	r2, [r7, #3]
 80056ca:	6879      	ldr	r1, [r7, #4]
 80056cc:	4613      	mov	r3, r2
 80056ce:	011b      	lsls	r3, r3, #4
 80056d0:	1a9b      	subs	r3, r3, r2
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	440b      	add	r3, r1
 80056d6:	334c      	adds	r3, #76	@ 0x4c
 80056d8:	2204      	movs	r2, #4
 80056da:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80056dc:	78fa      	ldrb	r2, [r7, #3]
 80056de:	6879      	ldr	r1, [r7, #4]
 80056e0:	4613      	mov	r3, r2
 80056e2:	011b      	lsls	r3, r3, #4
 80056e4:	1a9b      	subs	r3, r3, r2
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	440b      	add	r3, r1
 80056ea:	334c      	adds	r3, #76	@ 0x4c
 80056ec:	781a      	ldrb	r2, [r3, #0]
 80056ee:	78fb      	ldrb	r3, [r7, #3]
 80056f0:	4619      	mov	r1, r3
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f006 fb26 	bl	800bd44 <HAL_HCD_HC_NotifyURBChange_Callback>
 80056f8:	e022      	b.n	8005740 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80056fa:	78fa      	ldrb	r2, [r7, #3]
 80056fc:	6879      	ldr	r1, [r7, #4]
 80056fe:	4613      	mov	r3, r2
 8005700:	011b      	lsls	r3, r3, #4
 8005702:	1a9b      	subs	r3, r3, r2
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	440b      	add	r3, r1
 8005708:	334c      	adds	r3, #76	@ 0x4c
 800570a:	2202      	movs	r2, #2
 800570c:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800570e:	78fb      	ldrb	r3, [r7, #3]
 8005710:	015a      	lsls	r2, r3, #5
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	4413      	add	r3, r2
 8005716:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005724:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800572c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800572e:	78fb      	ldrb	r3, [r7, #3]
 8005730:	015a      	lsls	r2, r3, #5
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	4413      	add	r3, r2
 8005736:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800573a:	461a      	mov	r2, r3
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8005740:	78fb      	ldrb	r3, [r7, #3]
 8005742:	015a      	lsls	r2, r3, #5
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	4413      	add	r3, r2
 8005748:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800574c:	461a      	mov	r2, r3
 800574e:	2380      	movs	r3, #128	@ 0x80
 8005750:	6093      	str	r3, [r2, #8]
 8005752:	e217      	b.n	8005b84 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	78fa      	ldrb	r2, [r7, #3]
 800575a:	4611      	mov	r1, r2
 800575c:	4618      	mov	r0, r3
 800575e:	f003 fa86 	bl	8008c6e <USB_ReadChInterrupts>
 8005762:	4603      	mov	r3, r0
 8005764:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005768:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800576c:	d11b      	bne.n	80057a6 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800576e:	78fa      	ldrb	r2, [r7, #3]
 8005770:	6879      	ldr	r1, [r7, #4]
 8005772:	4613      	mov	r3, r2
 8005774:	011b      	lsls	r3, r3, #4
 8005776:	1a9b      	subs	r3, r3, r2
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	440b      	add	r3, r1
 800577c:	334d      	adds	r3, #77	@ 0x4d
 800577e:	2209      	movs	r2, #9
 8005780:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	78fa      	ldrb	r2, [r7, #3]
 8005788:	4611      	mov	r1, r2
 800578a:	4618      	mov	r0, r3
 800578c:	f003 ffb7 	bl	80096fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8005790:	78fb      	ldrb	r3, [r7, #3]
 8005792:	015a      	lsls	r2, r3, #5
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	4413      	add	r3, r2
 8005798:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800579c:	461a      	mov	r2, r3
 800579e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80057a2:	6093      	str	r3, [r2, #8]
 80057a4:	e1ee      	b.n	8005b84 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	78fa      	ldrb	r2, [r7, #3]
 80057ac:	4611      	mov	r1, r2
 80057ae:	4618      	mov	r0, r3
 80057b0:	f003 fa5d 	bl	8008c6e <USB_ReadChInterrupts>
 80057b4:	4603      	mov	r3, r0
 80057b6:	f003 0302 	and.w	r3, r3, #2
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	f040 81df 	bne.w	8005b7e <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80057c0:	78fb      	ldrb	r3, [r7, #3]
 80057c2:	015a      	lsls	r2, r3, #5
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	4413      	add	r3, r2
 80057c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057cc:	461a      	mov	r2, r3
 80057ce:	2302      	movs	r3, #2
 80057d0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80057d2:	78fa      	ldrb	r2, [r7, #3]
 80057d4:	6879      	ldr	r1, [r7, #4]
 80057d6:	4613      	mov	r3, r2
 80057d8:	011b      	lsls	r3, r3, #4
 80057da:	1a9b      	subs	r3, r3, r2
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	440b      	add	r3, r1
 80057e0:	334d      	adds	r3, #77	@ 0x4d
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	f040 8093 	bne.w	8005910 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80057ea:	78fa      	ldrb	r2, [r7, #3]
 80057ec:	6879      	ldr	r1, [r7, #4]
 80057ee:	4613      	mov	r3, r2
 80057f0:	011b      	lsls	r3, r3, #4
 80057f2:	1a9b      	subs	r3, r3, r2
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	440b      	add	r3, r1
 80057f8:	334d      	adds	r3, #77	@ 0x4d
 80057fa:	2202      	movs	r2, #2
 80057fc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80057fe:	78fa      	ldrb	r2, [r7, #3]
 8005800:	6879      	ldr	r1, [r7, #4]
 8005802:	4613      	mov	r3, r2
 8005804:	011b      	lsls	r3, r3, #4
 8005806:	1a9b      	subs	r3, r3, r2
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	440b      	add	r3, r1
 800580c:	334c      	adds	r3, #76	@ 0x4c
 800580e:	2201      	movs	r2, #1
 8005810:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8005812:	78fa      	ldrb	r2, [r7, #3]
 8005814:	6879      	ldr	r1, [r7, #4]
 8005816:	4613      	mov	r3, r2
 8005818:	011b      	lsls	r3, r3, #4
 800581a:	1a9b      	subs	r3, r3, r2
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	440b      	add	r3, r1
 8005820:	3326      	adds	r3, #38	@ 0x26
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	2b02      	cmp	r3, #2
 8005826:	d00b      	beq.n	8005840 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8005828:	78fa      	ldrb	r2, [r7, #3]
 800582a:	6879      	ldr	r1, [r7, #4]
 800582c:	4613      	mov	r3, r2
 800582e:	011b      	lsls	r3, r3, #4
 8005830:	1a9b      	subs	r3, r3, r2
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	440b      	add	r3, r1
 8005836:	3326      	adds	r3, #38	@ 0x26
 8005838:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800583a:	2b03      	cmp	r3, #3
 800583c:	f040 8190 	bne.w	8005b60 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	799b      	ldrb	r3, [r3, #6]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d115      	bne.n	8005874 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8005848:	78fa      	ldrb	r2, [r7, #3]
 800584a:	6879      	ldr	r1, [r7, #4]
 800584c:	4613      	mov	r3, r2
 800584e:	011b      	lsls	r3, r3, #4
 8005850:	1a9b      	subs	r3, r3, r2
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	440b      	add	r3, r1
 8005856:	333d      	adds	r3, #61	@ 0x3d
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	78fa      	ldrb	r2, [r7, #3]
 800585c:	f083 0301 	eor.w	r3, r3, #1
 8005860:	b2d8      	uxtb	r0, r3
 8005862:	6879      	ldr	r1, [r7, #4]
 8005864:	4613      	mov	r3, r2
 8005866:	011b      	lsls	r3, r3, #4
 8005868:	1a9b      	subs	r3, r3, r2
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	440b      	add	r3, r1
 800586e:	333d      	adds	r3, #61	@ 0x3d
 8005870:	4602      	mov	r2, r0
 8005872:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	799b      	ldrb	r3, [r3, #6]
 8005878:	2b01      	cmp	r3, #1
 800587a:	f040 8171 	bne.w	8005b60 <HCD_HC_OUT_IRQHandler+0x954>
 800587e:	78fa      	ldrb	r2, [r7, #3]
 8005880:	6879      	ldr	r1, [r7, #4]
 8005882:	4613      	mov	r3, r2
 8005884:	011b      	lsls	r3, r3, #4
 8005886:	1a9b      	subs	r3, r3, r2
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	440b      	add	r3, r1
 800588c:	3334      	adds	r3, #52	@ 0x34
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2b00      	cmp	r3, #0
 8005892:	f000 8165 	beq.w	8005b60 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8005896:	78fa      	ldrb	r2, [r7, #3]
 8005898:	6879      	ldr	r1, [r7, #4]
 800589a:	4613      	mov	r3, r2
 800589c:	011b      	lsls	r3, r3, #4
 800589e:	1a9b      	subs	r3, r3, r2
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	440b      	add	r3, r1
 80058a4:	3334      	adds	r3, #52	@ 0x34
 80058a6:	6819      	ldr	r1, [r3, #0]
 80058a8:	78fa      	ldrb	r2, [r7, #3]
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	4613      	mov	r3, r2
 80058ae:	011b      	lsls	r3, r3, #4
 80058b0:	1a9b      	subs	r3, r3, r2
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	4403      	add	r3, r0
 80058b6:	3328      	adds	r3, #40	@ 0x28
 80058b8:	881b      	ldrh	r3, [r3, #0]
 80058ba:	440b      	add	r3, r1
 80058bc:	1e59      	subs	r1, r3, #1
 80058be:	78fa      	ldrb	r2, [r7, #3]
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	4613      	mov	r3, r2
 80058c4:	011b      	lsls	r3, r3, #4
 80058c6:	1a9b      	subs	r3, r3, r2
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	4403      	add	r3, r0
 80058cc:	3328      	adds	r3, #40	@ 0x28
 80058ce:	881b      	ldrh	r3, [r3, #0]
 80058d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80058d4:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	f003 0301 	and.w	r3, r3, #1
 80058dc:	2b00      	cmp	r3, #0
 80058de:	f000 813f 	beq.w	8005b60 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80058e2:	78fa      	ldrb	r2, [r7, #3]
 80058e4:	6879      	ldr	r1, [r7, #4]
 80058e6:	4613      	mov	r3, r2
 80058e8:	011b      	lsls	r3, r3, #4
 80058ea:	1a9b      	subs	r3, r3, r2
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	440b      	add	r3, r1
 80058f0:	333d      	adds	r3, #61	@ 0x3d
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	78fa      	ldrb	r2, [r7, #3]
 80058f6:	f083 0301 	eor.w	r3, r3, #1
 80058fa:	b2d8      	uxtb	r0, r3
 80058fc:	6879      	ldr	r1, [r7, #4]
 80058fe:	4613      	mov	r3, r2
 8005900:	011b      	lsls	r3, r3, #4
 8005902:	1a9b      	subs	r3, r3, r2
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	440b      	add	r3, r1
 8005908:	333d      	adds	r3, #61	@ 0x3d
 800590a:	4602      	mov	r2, r0
 800590c:	701a      	strb	r2, [r3, #0]
 800590e:	e127      	b.n	8005b60 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8005910:	78fa      	ldrb	r2, [r7, #3]
 8005912:	6879      	ldr	r1, [r7, #4]
 8005914:	4613      	mov	r3, r2
 8005916:	011b      	lsls	r3, r3, #4
 8005918:	1a9b      	subs	r3, r3, r2
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	440b      	add	r3, r1
 800591e:	334d      	adds	r3, #77	@ 0x4d
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	2b03      	cmp	r3, #3
 8005924:	d120      	bne.n	8005968 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005926:	78fa      	ldrb	r2, [r7, #3]
 8005928:	6879      	ldr	r1, [r7, #4]
 800592a:	4613      	mov	r3, r2
 800592c:	011b      	lsls	r3, r3, #4
 800592e:	1a9b      	subs	r3, r3, r2
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	440b      	add	r3, r1
 8005934:	334d      	adds	r3, #77	@ 0x4d
 8005936:	2202      	movs	r2, #2
 8005938:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800593a:	78fa      	ldrb	r2, [r7, #3]
 800593c:	6879      	ldr	r1, [r7, #4]
 800593e:	4613      	mov	r3, r2
 8005940:	011b      	lsls	r3, r3, #4
 8005942:	1a9b      	subs	r3, r3, r2
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	440b      	add	r3, r1
 8005948:	331b      	adds	r3, #27
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	2b01      	cmp	r3, #1
 800594e:	f040 8107 	bne.w	8005b60 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005952:	78fa      	ldrb	r2, [r7, #3]
 8005954:	6879      	ldr	r1, [r7, #4]
 8005956:	4613      	mov	r3, r2
 8005958:	011b      	lsls	r3, r3, #4
 800595a:	1a9b      	subs	r3, r3, r2
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	440b      	add	r3, r1
 8005960:	334c      	adds	r3, #76	@ 0x4c
 8005962:	2202      	movs	r2, #2
 8005964:	701a      	strb	r2, [r3, #0]
 8005966:	e0fb      	b.n	8005b60 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8005968:	78fa      	ldrb	r2, [r7, #3]
 800596a:	6879      	ldr	r1, [r7, #4]
 800596c:	4613      	mov	r3, r2
 800596e:	011b      	lsls	r3, r3, #4
 8005970:	1a9b      	subs	r3, r3, r2
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	440b      	add	r3, r1
 8005976:	334d      	adds	r3, #77	@ 0x4d
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	2b04      	cmp	r3, #4
 800597c:	d13a      	bne.n	80059f4 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800597e:	78fa      	ldrb	r2, [r7, #3]
 8005980:	6879      	ldr	r1, [r7, #4]
 8005982:	4613      	mov	r3, r2
 8005984:	011b      	lsls	r3, r3, #4
 8005986:	1a9b      	subs	r3, r3, r2
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	440b      	add	r3, r1
 800598c:	334d      	adds	r3, #77	@ 0x4d
 800598e:	2202      	movs	r2, #2
 8005990:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005992:	78fa      	ldrb	r2, [r7, #3]
 8005994:	6879      	ldr	r1, [r7, #4]
 8005996:	4613      	mov	r3, r2
 8005998:	011b      	lsls	r3, r3, #4
 800599a:	1a9b      	subs	r3, r3, r2
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	440b      	add	r3, r1
 80059a0:	334c      	adds	r3, #76	@ 0x4c
 80059a2:	2202      	movs	r2, #2
 80059a4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80059a6:	78fa      	ldrb	r2, [r7, #3]
 80059a8:	6879      	ldr	r1, [r7, #4]
 80059aa:	4613      	mov	r3, r2
 80059ac:	011b      	lsls	r3, r3, #4
 80059ae:	1a9b      	subs	r3, r3, r2
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	440b      	add	r3, r1
 80059b4:	331b      	adds	r3, #27
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	f040 80d1 	bne.w	8005b60 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80059be:	78fa      	ldrb	r2, [r7, #3]
 80059c0:	6879      	ldr	r1, [r7, #4]
 80059c2:	4613      	mov	r3, r2
 80059c4:	011b      	lsls	r3, r3, #4
 80059c6:	1a9b      	subs	r3, r3, r2
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	440b      	add	r3, r1
 80059cc:	331b      	adds	r3, #27
 80059ce:	2200      	movs	r2, #0
 80059d0:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80059d2:	78fb      	ldrb	r3, [r7, #3]
 80059d4:	015a      	lsls	r2, r3, #5
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	4413      	add	r3, r2
 80059da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	78fa      	ldrb	r2, [r7, #3]
 80059e2:	0151      	lsls	r1, r2, #5
 80059e4:	693a      	ldr	r2, [r7, #16]
 80059e6:	440a      	add	r2, r1
 80059e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80059ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059f0:	6053      	str	r3, [r2, #4]
 80059f2:	e0b5      	b.n	8005b60 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80059f4:	78fa      	ldrb	r2, [r7, #3]
 80059f6:	6879      	ldr	r1, [r7, #4]
 80059f8:	4613      	mov	r3, r2
 80059fa:	011b      	lsls	r3, r3, #4
 80059fc:	1a9b      	subs	r3, r3, r2
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	440b      	add	r3, r1
 8005a02:	334d      	adds	r3, #77	@ 0x4d
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	2b05      	cmp	r3, #5
 8005a08:	d114      	bne.n	8005a34 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005a0a:	78fa      	ldrb	r2, [r7, #3]
 8005a0c:	6879      	ldr	r1, [r7, #4]
 8005a0e:	4613      	mov	r3, r2
 8005a10:	011b      	lsls	r3, r3, #4
 8005a12:	1a9b      	subs	r3, r3, r2
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	440b      	add	r3, r1
 8005a18:	334d      	adds	r3, #77	@ 0x4d
 8005a1a:	2202      	movs	r2, #2
 8005a1c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8005a1e:	78fa      	ldrb	r2, [r7, #3]
 8005a20:	6879      	ldr	r1, [r7, #4]
 8005a22:	4613      	mov	r3, r2
 8005a24:	011b      	lsls	r3, r3, #4
 8005a26:	1a9b      	subs	r3, r3, r2
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	440b      	add	r3, r1
 8005a2c:	334c      	adds	r3, #76	@ 0x4c
 8005a2e:	2202      	movs	r2, #2
 8005a30:	701a      	strb	r2, [r3, #0]
 8005a32:	e095      	b.n	8005b60 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8005a34:	78fa      	ldrb	r2, [r7, #3]
 8005a36:	6879      	ldr	r1, [r7, #4]
 8005a38:	4613      	mov	r3, r2
 8005a3a:	011b      	lsls	r3, r3, #4
 8005a3c:	1a9b      	subs	r3, r3, r2
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	440b      	add	r3, r1
 8005a42:	334d      	adds	r3, #77	@ 0x4d
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	2b06      	cmp	r3, #6
 8005a48:	d114      	bne.n	8005a74 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005a4a:	78fa      	ldrb	r2, [r7, #3]
 8005a4c:	6879      	ldr	r1, [r7, #4]
 8005a4e:	4613      	mov	r3, r2
 8005a50:	011b      	lsls	r3, r3, #4
 8005a52:	1a9b      	subs	r3, r3, r2
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	440b      	add	r3, r1
 8005a58:	334d      	adds	r3, #77	@ 0x4d
 8005a5a:	2202      	movs	r2, #2
 8005a5c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8005a5e:	78fa      	ldrb	r2, [r7, #3]
 8005a60:	6879      	ldr	r1, [r7, #4]
 8005a62:	4613      	mov	r3, r2
 8005a64:	011b      	lsls	r3, r3, #4
 8005a66:	1a9b      	subs	r3, r3, r2
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	440b      	add	r3, r1
 8005a6c:	334c      	adds	r3, #76	@ 0x4c
 8005a6e:	2205      	movs	r2, #5
 8005a70:	701a      	strb	r2, [r3, #0]
 8005a72:	e075      	b.n	8005b60 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005a74:	78fa      	ldrb	r2, [r7, #3]
 8005a76:	6879      	ldr	r1, [r7, #4]
 8005a78:	4613      	mov	r3, r2
 8005a7a:	011b      	lsls	r3, r3, #4
 8005a7c:	1a9b      	subs	r3, r3, r2
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	440b      	add	r3, r1
 8005a82:	334d      	adds	r3, #77	@ 0x4d
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	2b07      	cmp	r3, #7
 8005a88:	d00a      	beq.n	8005aa0 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8005a8a:	78fa      	ldrb	r2, [r7, #3]
 8005a8c:	6879      	ldr	r1, [r7, #4]
 8005a8e:	4613      	mov	r3, r2
 8005a90:	011b      	lsls	r3, r3, #4
 8005a92:	1a9b      	subs	r3, r3, r2
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	440b      	add	r3, r1
 8005a98:	334d      	adds	r3, #77	@ 0x4d
 8005a9a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005a9c:	2b09      	cmp	r3, #9
 8005a9e:	d170      	bne.n	8005b82 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005aa0:	78fa      	ldrb	r2, [r7, #3]
 8005aa2:	6879      	ldr	r1, [r7, #4]
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	011b      	lsls	r3, r3, #4
 8005aa8:	1a9b      	subs	r3, r3, r2
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	440b      	add	r3, r1
 8005aae:	334d      	adds	r3, #77	@ 0x4d
 8005ab0:	2202      	movs	r2, #2
 8005ab2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005ab4:	78fa      	ldrb	r2, [r7, #3]
 8005ab6:	6879      	ldr	r1, [r7, #4]
 8005ab8:	4613      	mov	r3, r2
 8005aba:	011b      	lsls	r3, r3, #4
 8005abc:	1a9b      	subs	r3, r3, r2
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	440b      	add	r3, r1
 8005ac2:	3344      	adds	r3, #68	@ 0x44
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	1c59      	adds	r1, r3, #1
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	4613      	mov	r3, r2
 8005acc:	011b      	lsls	r3, r3, #4
 8005ace:	1a9b      	subs	r3, r3, r2
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	4403      	add	r3, r0
 8005ad4:	3344      	adds	r3, #68	@ 0x44
 8005ad6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005ad8:	78fa      	ldrb	r2, [r7, #3]
 8005ada:	6879      	ldr	r1, [r7, #4]
 8005adc:	4613      	mov	r3, r2
 8005ade:	011b      	lsls	r3, r3, #4
 8005ae0:	1a9b      	subs	r3, r3, r2
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	440b      	add	r3, r1
 8005ae6:	3344      	adds	r3, #68	@ 0x44
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	2b02      	cmp	r3, #2
 8005aec:	d914      	bls.n	8005b18 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005aee:	78fa      	ldrb	r2, [r7, #3]
 8005af0:	6879      	ldr	r1, [r7, #4]
 8005af2:	4613      	mov	r3, r2
 8005af4:	011b      	lsls	r3, r3, #4
 8005af6:	1a9b      	subs	r3, r3, r2
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	440b      	add	r3, r1
 8005afc:	3344      	adds	r3, #68	@ 0x44
 8005afe:	2200      	movs	r2, #0
 8005b00:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005b02:	78fa      	ldrb	r2, [r7, #3]
 8005b04:	6879      	ldr	r1, [r7, #4]
 8005b06:	4613      	mov	r3, r2
 8005b08:	011b      	lsls	r3, r3, #4
 8005b0a:	1a9b      	subs	r3, r3, r2
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	440b      	add	r3, r1
 8005b10:	334c      	adds	r3, #76	@ 0x4c
 8005b12:	2204      	movs	r2, #4
 8005b14:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005b16:	e022      	b.n	8005b5e <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005b18:	78fa      	ldrb	r2, [r7, #3]
 8005b1a:	6879      	ldr	r1, [r7, #4]
 8005b1c:	4613      	mov	r3, r2
 8005b1e:	011b      	lsls	r3, r3, #4
 8005b20:	1a9b      	subs	r3, r3, r2
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	440b      	add	r3, r1
 8005b26:	334c      	adds	r3, #76	@ 0x4c
 8005b28:	2202      	movs	r2, #2
 8005b2a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005b2c:	78fb      	ldrb	r3, [r7, #3]
 8005b2e:	015a      	lsls	r2, r3, #5
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	4413      	add	r3, r2
 8005b34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005b42:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005b4a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005b4c:	78fb      	ldrb	r3, [r7, #3]
 8005b4e:	015a      	lsls	r2, r3, #5
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	4413      	add	r3, r2
 8005b54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b58:	461a      	mov	r2, r3
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005b5e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005b60:	78fa      	ldrb	r2, [r7, #3]
 8005b62:	6879      	ldr	r1, [r7, #4]
 8005b64:	4613      	mov	r3, r2
 8005b66:	011b      	lsls	r3, r3, #4
 8005b68:	1a9b      	subs	r3, r3, r2
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	440b      	add	r3, r1
 8005b6e:	334c      	adds	r3, #76	@ 0x4c
 8005b70:	781a      	ldrb	r2, [r3, #0]
 8005b72:	78fb      	ldrb	r3, [r7, #3]
 8005b74:	4619      	mov	r1, r3
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f006 f8e4 	bl	800bd44 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005b7c:	e002      	b.n	8005b84 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8005b7e:	bf00      	nop
 8005b80:	e000      	b.n	8005b84 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8005b82:	bf00      	nop
  }
}
 8005b84:	3718      	adds	r7, #24
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}

08005b8a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005b8a:	b580      	push	{r7, lr}
 8005b8c:	b08a      	sub	sp, #40	@ 0x28
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b9a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	6a1b      	ldr	r3, [r3, #32]
 8005ba2:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005ba4:	69fb      	ldr	r3, [r7, #28]
 8005ba6:	f003 030f 	and.w	r3, r3, #15
 8005baa:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	0c5b      	lsrs	r3, r3, #17
 8005bb0:	f003 030f 	and.w	r3, r3, #15
 8005bb4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005bb6:	69fb      	ldr	r3, [r7, #28]
 8005bb8:	091b      	lsrs	r3, r3, #4
 8005bba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005bbe:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	2b02      	cmp	r3, #2
 8005bc4:	d004      	beq.n	8005bd0 <HCD_RXQLVL_IRQHandler+0x46>
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	2b05      	cmp	r3, #5
 8005bca:	f000 80b6 	beq.w	8005d3a <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005bce:	e0b7      	b.n	8005d40 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	f000 80b3 	beq.w	8005d3e <HCD_RXQLVL_IRQHandler+0x1b4>
 8005bd8:	6879      	ldr	r1, [r7, #4]
 8005bda:	69ba      	ldr	r2, [r7, #24]
 8005bdc:	4613      	mov	r3, r2
 8005bde:	011b      	lsls	r3, r3, #4
 8005be0:	1a9b      	subs	r3, r3, r2
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	440b      	add	r3, r1
 8005be6:	332c      	adds	r3, #44	@ 0x2c
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	f000 80a7 	beq.w	8005d3e <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8005bf0:	6879      	ldr	r1, [r7, #4]
 8005bf2:	69ba      	ldr	r2, [r7, #24]
 8005bf4:	4613      	mov	r3, r2
 8005bf6:	011b      	lsls	r3, r3, #4
 8005bf8:	1a9b      	subs	r3, r3, r2
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	440b      	add	r3, r1
 8005bfe:	3338      	adds	r3, #56	@ 0x38
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	18d1      	adds	r1, r2, r3
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	69ba      	ldr	r2, [r7, #24]
 8005c0a:	4613      	mov	r3, r2
 8005c0c:	011b      	lsls	r3, r3, #4
 8005c0e:	1a9b      	subs	r3, r3, r2
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	4403      	add	r3, r0
 8005c14:	3334      	adds	r3, #52	@ 0x34
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4299      	cmp	r1, r3
 8005c1a:	f200 8083 	bhi.w	8005d24 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6818      	ldr	r0, [r3, #0]
 8005c22:	6879      	ldr	r1, [r7, #4]
 8005c24:	69ba      	ldr	r2, [r7, #24]
 8005c26:	4613      	mov	r3, r2
 8005c28:	011b      	lsls	r3, r3, #4
 8005c2a:	1a9b      	subs	r3, r3, r2
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	440b      	add	r3, r1
 8005c30:	332c      	adds	r3, #44	@ 0x2c
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	693a      	ldr	r2, [r7, #16]
 8005c36:	b292      	uxth	r2, r2
 8005c38:	4619      	mov	r1, r3
 8005c3a:	f002 ffad 	bl	8008b98 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8005c3e:	6879      	ldr	r1, [r7, #4]
 8005c40:	69ba      	ldr	r2, [r7, #24]
 8005c42:	4613      	mov	r3, r2
 8005c44:	011b      	lsls	r3, r3, #4
 8005c46:	1a9b      	subs	r3, r3, r2
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	440b      	add	r3, r1
 8005c4c:	332c      	adds	r3, #44	@ 0x2c
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	18d1      	adds	r1, r2, r3
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	69ba      	ldr	r2, [r7, #24]
 8005c58:	4613      	mov	r3, r2
 8005c5a:	011b      	lsls	r3, r3, #4
 8005c5c:	1a9b      	subs	r3, r3, r2
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	4403      	add	r3, r0
 8005c62:	332c      	adds	r3, #44	@ 0x2c
 8005c64:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8005c66:	6879      	ldr	r1, [r7, #4]
 8005c68:	69ba      	ldr	r2, [r7, #24]
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	011b      	lsls	r3, r3, #4
 8005c6e:	1a9b      	subs	r3, r3, r2
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	440b      	add	r3, r1
 8005c74:	3338      	adds	r3, #56	@ 0x38
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	18d1      	adds	r1, r2, r3
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	69ba      	ldr	r2, [r7, #24]
 8005c80:	4613      	mov	r3, r2
 8005c82:	011b      	lsls	r3, r3, #4
 8005c84:	1a9b      	subs	r3, r3, r2
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	4403      	add	r3, r0
 8005c8a:	3338      	adds	r3, #56	@ 0x38
 8005c8c:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	015a      	lsls	r2, r3, #5
 8005c92:	6a3b      	ldr	r3, [r7, #32]
 8005c94:	4413      	add	r3, r2
 8005c96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c9a:	691b      	ldr	r3, [r3, #16]
 8005c9c:	0cdb      	lsrs	r3, r3, #19
 8005c9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ca2:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005ca4:	6879      	ldr	r1, [r7, #4]
 8005ca6:	69ba      	ldr	r2, [r7, #24]
 8005ca8:	4613      	mov	r3, r2
 8005caa:	011b      	lsls	r3, r3, #4
 8005cac:	1a9b      	subs	r3, r3, r2
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	440b      	add	r3, r1
 8005cb2:	3328      	adds	r3, #40	@ 0x28
 8005cb4:	881b      	ldrh	r3, [r3, #0]
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d13f      	bne.n	8005d3e <HCD_RXQLVL_IRQHandler+0x1b4>
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d03c      	beq.n	8005d3e <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	015a      	lsls	r2, r3, #5
 8005cc8:	6a3b      	ldr	r3, [r7, #32]
 8005cca:	4413      	add	r3, r2
 8005ccc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005cda:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005ce2:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	015a      	lsls	r2, r3, #5
 8005ce8:	6a3b      	ldr	r3, [r7, #32]
 8005cea:	4413      	add	r3, r2
 8005cec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8005cf6:	6879      	ldr	r1, [r7, #4]
 8005cf8:	69ba      	ldr	r2, [r7, #24]
 8005cfa:	4613      	mov	r3, r2
 8005cfc:	011b      	lsls	r3, r3, #4
 8005cfe:	1a9b      	subs	r3, r3, r2
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	440b      	add	r3, r1
 8005d04:	333c      	adds	r3, #60	@ 0x3c
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	f083 0301 	eor.w	r3, r3, #1
 8005d0c:	b2d8      	uxtb	r0, r3
 8005d0e:	6879      	ldr	r1, [r7, #4]
 8005d10:	69ba      	ldr	r2, [r7, #24]
 8005d12:	4613      	mov	r3, r2
 8005d14:	011b      	lsls	r3, r3, #4
 8005d16:	1a9b      	subs	r3, r3, r2
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	440b      	add	r3, r1
 8005d1c:	333c      	adds	r3, #60	@ 0x3c
 8005d1e:	4602      	mov	r2, r0
 8005d20:	701a      	strb	r2, [r3, #0]
      break;
 8005d22:	e00c      	b.n	8005d3e <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8005d24:	6879      	ldr	r1, [r7, #4]
 8005d26:	69ba      	ldr	r2, [r7, #24]
 8005d28:	4613      	mov	r3, r2
 8005d2a:	011b      	lsls	r3, r3, #4
 8005d2c:	1a9b      	subs	r3, r3, r2
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	440b      	add	r3, r1
 8005d32:	334c      	adds	r3, #76	@ 0x4c
 8005d34:	2204      	movs	r2, #4
 8005d36:	701a      	strb	r2, [r3, #0]
      break;
 8005d38:	e001      	b.n	8005d3e <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8005d3a:	bf00      	nop
 8005d3c:	e000      	b.n	8005d40 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8005d3e:	bf00      	nop
  }
}
 8005d40:	bf00      	nop
 8005d42:	3728      	adds	r7, #40	@ 0x28
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b086      	sub	sp, #24
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005d74:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f003 0302 	and.w	r3, r3, #2
 8005d7c:	2b02      	cmp	r3, #2
 8005d7e:	d10b      	bne.n	8005d98 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f003 0301 	and.w	r3, r3, #1
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d102      	bne.n	8005d90 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f005 ffbe 	bl	800bd0c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	f043 0302 	orr.w	r3, r3, #2
 8005d96:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f003 0308 	and.w	r3, r3, #8
 8005d9e:	2b08      	cmp	r3, #8
 8005da0:	d132      	bne.n	8005e08 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	f043 0308 	orr.w	r3, r3, #8
 8005da8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f003 0304 	and.w	r3, r3, #4
 8005db0:	2b04      	cmp	r3, #4
 8005db2:	d126      	bne.n	8005e02 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	7a5b      	ldrb	r3, [r3, #9]
 8005db8:	2b02      	cmp	r3, #2
 8005dba:	d113      	bne.n	8005de4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8005dc2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005dc6:	d106      	bne.n	8005dd6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2102      	movs	r1, #2
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f003 f862 	bl	8008e98 <USB_InitFSLSPClkSel>
 8005dd4:	e011      	b.n	8005dfa <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	2101      	movs	r1, #1
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f003 f85b 	bl	8008e98 <USB_InitFSLSPClkSel>
 8005de2:	e00a      	b.n	8005dfa <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	79db      	ldrb	r3, [r3, #7]
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d106      	bne.n	8005dfa <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005df2:	461a      	mov	r2, r3
 8005df4:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8005df8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f005 ffb0 	bl	800bd60 <HAL_HCD_PortEnabled_Callback>
 8005e00:	e002      	b.n	8005e08 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f005 ffba 	bl	800bd7c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f003 0320 	and.w	r3, r3, #32
 8005e0e:	2b20      	cmp	r3, #32
 8005e10:	d103      	bne.n	8005e1a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	f043 0320 	orr.w	r3, r3, #32
 8005e18:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005e20:	461a      	mov	r2, r3
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	6013      	str	r3, [r2, #0]
}
 8005e26:	bf00      	nop
 8005e28:	3718      	adds	r7, #24
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
	...

08005e30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d101      	bne.n	8005e42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e12b      	b.n	800609a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d106      	bne.n	8005e5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f7fb fbc8 	bl	80015ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2224      	movs	r2, #36	@ 0x24
 8005e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f022 0201 	bic.w	r2, r2, #1
 8005e72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005e82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005e92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005e94:	f001 fa20 	bl	80072d8 <HAL_RCC_GetPCLK1Freq>
 8005e98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	4a81      	ldr	r2, [pc, #516]	@ (80060a4 <HAL_I2C_Init+0x274>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d807      	bhi.n	8005eb4 <HAL_I2C_Init+0x84>
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	4a80      	ldr	r2, [pc, #512]	@ (80060a8 <HAL_I2C_Init+0x278>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	bf94      	ite	ls
 8005eac:	2301      	movls	r3, #1
 8005eae:	2300      	movhi	r3, #0
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	e006      	b.n	8005ec2 <HAL_I2C_Init+0x92>
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	4a7d      	ldr	r2, [pc, #500]	@ (80060ac <HAL_I2C_Init+0x27c>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	bf94      	ite	ls
 8005ebc:	2301      	movls	r3, #1
 8005ebe:	2300      	movhi	r3, #0
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d001      	beq.n	8005eca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e0e7      	b.n	800609a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	4a78      	ldr	r2, [pc, #480]	@ (80060b0 <HAL_I2C_Init+0x280>)
 8005ece:	fba2 2303 	umull	r2, r3, r2, r3
 8005ed2:	0c9b      	lsrs	r3, r3, #18
 8005ed4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68ba      	ldr	r2, [r7, #8]
 8005ee6:	430a      	orrs	r2, r1
 8005ee8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	6a1b      	ldr	r3, [r3, #32]
 8005ef0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	4a6a      	ldr	r2, [pc, #424]	@ (80060a4 <HAL_I2C_Init+0x274>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d802      	bhi.n	8005f04 <HAL_I2C_Init+0xd4>
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	3301      	adds	r3, #1
 8005f02:	e009      	b.n	8005f18 <HAL_I2C_Init+0xe8>
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005f0a:	fb02 f303 	mul.w	r3, r2, r3
 8005f0e:	4a69      	ldr	r2, [pc, #420]	@ (80060b4 <HAL_I2C_Init+0x284>)
 8005f10:	fba2 2303 	umull	r2, r3, r2, r3
 8005f14:	099b      	lsrs	r3, r3, #6
 8005f16:	3301      	adds	r3, #1
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	6812      	ldr	r2, [r2, #0]
 8005f1c:	430b      	orrs	r3, r1
 8005f1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	69db      	ldr	r3, [r3, #28]
 8005f26:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005f2a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	495c      	ldr	r1, [pc, #368]	@ (80060a4 <HAL_I2C_Init+0x274>)
 8005f34:	428b      	cmp	r3, r1
 8005f36:	d819      	bhi.n	8005f6c <HAL_I2C_Init+0x13c>
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	1e59      	subs	r1, r3, #1
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	005b      	lsls	r3, r3, #1
 8005f42:	fbb1 f3f3 	udiv	r3, r1, r3
 8005f46:	1c59      	adds	r1, r3, #1
 8005f48:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005f4c:	400b      	ands	r3, r1
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d00a      	beq.n	8005f68 <HAL_I2C_Init+0x138>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	1e59      	subs	r1, r3, #1
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	005b      	lsls	r3, r3, #1
 8005f5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005f60:	3301      	adds	r3, #1
 8005f62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f66:	e051      	b.n	800600c <HAL_I2C_Init+0x1dc>
 8005f68:	2304      	movs	r3, #4
 8005f6a:	e04f      	b.n	800600c <HAL_I2C_Init+0x1dc>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d111      	bne.n	8005f98 <HAL_I2C_Init+0x168>
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	1e58      	subs	r0, r3, #1
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6859      	ldr	r1, [r3, #4]
 8005f7c:	460b      	mov	r3, r1
 8005f7e:	005b      	lsls	r3, r3, #1
 8005f80:	440b      	add	r3, r1
 8005f82:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f86:	3301      	adds	r3, #1
 8005f88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	bf0c      	ite	eq
 8005f90:	2301      	moveq	r3, #1
 8005f92:	2300      	movne	r3, #0
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	e012      	b.n	8005fbe <HAL_I2C_Init+0x18e>
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	1e58      	subs	r0, r3, #1
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6859      	ldr	r1, [r3, #4]
 8005fa0:	460b      	mov	r3, r1
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	440b      	add	r3, r1
 8005fa6:	0099      	lsls	r1, r3, #2
 8005fa8:	440b      	add	r3, r1
 8005faa:	fbb0 f3f3 	udiv	r3, r0, r3
 8005fae:	3301      	adds	r3, #1
 8005fb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	bf0c      	ite	eq
 8005fb8:	2301      	moveq	r3, #1
 8005fba:	2300      	movne	r3, #0
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d001      	beq.n	8005fc6 <HAL_I2C_Init+0x196>
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e022      	b.n	800600c <HAL_I2C_Init+0x1dc>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d10e      	bne.n	8005fec <HAL_I2C_Init+0x1bc>
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	1e58      	subs	r0, r3, #1
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6859      	ldr	r1, [r3, #4]
 8005fd6:	460b      	mov	r3, r1
 8005fd8:	005b      	lsls	r3, r3, #1
 8005fda:	440b      	add	r3, r1
 8005fdc:	fbb0 f3f3 	udiv	r3, r0, r3
 8005fe0:	3301      	adds	r3, #1
 8005fe2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fe6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fea:	e00f      	b.n	800600c <HAL_I2C_Init+0x1dc>
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	1e58      	subs	r0, r3, #1
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6859      	ldr	r1, [r3, #4]
 8005ff4:	460b      	mov	r3, r1
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	440b      	add	r3, r1
 8005ffa:	0099      	lsls	r1, r3, #2
 8005ffc:	440b      	add	r3, r1
 8005ffe:	fbb0 f3f3 	udiv	r3, r0, r3
 8006002:	3301      	adds	r3, #1
 8006004:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006008:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800600c:	6879      	ldr	r1, [r7, #4]
 800600e:	6809      	ldr	r1, [r1, #0]
 8006010:	4313      	orrs	r3, r2
 8006012:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	69da      	ldr	r2, [r3, #28]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a1b      	ldr	r3, [r3, #32]
 8006026:	431a      	orrs	r2, r3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	430a      	orrs	r2, r1
 800602e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800603a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	6911      	ldr	r1, [r2, #16]
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	68d2      	ldr	r2, [r2, #12]
 8006046:	4311      	orrs	r1, r2
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	6812      	ldr	r2, [r2, #0]
 800604c:	430b      	orrs	r3, r1
 800604e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	695a      	ldr	r2, [r3, #20]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	699b      	ldr	r3, [r3, #24]
 8006062:	431a      	orrs	r2, r3
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	430a      	orrs	r2, r1
 800606a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f042 0201 	orr.w	r2, r2, #1
 800607a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2220      	movs	r2, #32
 8006086:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006098:	2300      	movs	r3, #0
}
 800609a:	4618      	mov	r0, r3
 800609c:	3710      	adds	r7, #16
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	000186a0 	.word	0x000186a0
 80060a8:	001e847f 	.word	0x001e847f
 80060ac:	003d08ff 	.word	0x003d08ff
 80060b0:	431bde83 	.word	0x431bde83
 80060b4:	10624dd3 	.word	0x10624dd3

080060b8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b088      	sub	sp, #32
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d101      	bne.n	80060ca <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e128      	b.n	800631c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d109      	bne.n	80060ea <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4a90      	ldr	r2, [pc, #576]	@ (8006324 <HAL_I2S_Init+0x26c>)
 80060e2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f7fb fac9 	bl	800167c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2202      	movs	r2, #2
 80060ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	69db      	ldr	r3, [r3, #28]
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	6812      	ldr	r2, [r2, #0]
 80060fc:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8006100:	f023 030f 	bic.w	r3, r3, #15
 8006104:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	2202      	movs	r2, #2
 800610c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	695b      	ldr	r3, [r3, #20]
 8006112:	2b02      	cmp	r3, #2
 8006114:	d060      	beq.n	80061d8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	68db      	ldr	r3, [r3, #12]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d102      	bne.n	8006124 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800611e:	2310      	movs	r3, #16
 8006120:	617b      	str	r3, [r7, #20]
 8006122:	e001      	b.n	8006128 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006124:	2320      	movs	r3, #32
 8006126:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	2b20      	cmp	r3, #32
 800612e:	d802      	bhi.n	8006136 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	005b      	lsls	r3, r3, #1
 8006134:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8006136:	2001      	movs	r0, #1
 8006138:	f001 f9d2 	bl	80074e0 <HAL_RCCEx_GetPeriphCLKFreq>
 800613c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006146:	d125      	bne.n	8006194 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d010      	beq.n	8006172 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	68fa      	ldr	r2, [r7, #12]
 8006156:	fbb2 f2f3 	udiv	r2, r2, r3
 800615a:	4613      	mov	r3, r2
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	4413      	add	r3, r2
 8006160:	005b      	lsls	r3, r3, #1
 8006162:	461a      	mov	r2, r3
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	695b      	ldr	r3, [r3, #20]
 8006168:	fbb2 f3f3 	udiv	r3, r2, r3
 800616c:	3305      	adds	r3, #5
 800616e:	613b      	str	r3, [r7, #16]
 8006170:	e01f      	b.n	80061b2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	00db      	lsls	r3, r3, #3
 8006176:	68fa      	ldr	r2, [r7, #12]
 8006178:	fbb2 f2f3 	udiv	r2, r2, r3
 800617c:	4613      	mov	r3, r2
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	4413      	add	r3, r2
 8006182:	005b      	lsls	r3, r3, #1
 8006184:	461a      	mov	r2, r3
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	695b      	ldr	r3, [r3, #20]
 800618a:	fbb2 f3f3 	udiv	r3, r2, r3
 800618e:	3305      	adds	r3, #5
 8006190:	613b      	str	r3, [r7, #16]
 8006192:	e00e      	b.n	80061b2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006194:	68fa      	ldr	r2, [r7, #12]
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	fbb2 f2f3 	udiv	r2, r2, r3
 800619c:	4613      	mov	r3, r2
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	4413      	add	r3, r2
 80061a2:	005b      	lsls	r3, r3, #1
 80061a4:	461a      	mov	r2, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	695b      	ldr	r3, [r3, #20]
 80061aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80061ae:	3305      	adds	r3, #5
 80061b0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	4a5c      	ldr	r2, [pc, #368]	@ (8006328 <HAL_I2S_Init+0x270>)
 80061b6:	fba2 2303 	umull	r2, r3, r2, r3
 80061ba:	08db      	lsrs	r3, r3, #3
 80061bc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	f003 0301 	and.w	r3, r3, #1
 80061c4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80061c6:	693a      	ldr	r2, [r7, #16]
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	1ad3      	subs	r3, r2, r3
 80061cc:	085b      	lsrs	r3, r3, #1
 80061ce:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80061d0:	69bb      	ldr	r3, [r7, #24]
 80061d2:	021b      	lsls	r3, r3, #8
 80061d4:	61bb      	str	r3, [r7, #24]
 80061d6:	e003      	b.n	80061e0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80061d8:	2302      	movs	r3, #2
 80061da:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80061dc:	2300      	movs	r3, #0
 80061de:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d902      	bls.n	80061ec <HAL_I2S_Init+0x134>
 80061e6:	69fb      	ldr	r3, [r7, #28]
 80061e8:	2bff      	cmp	r3, #255	@ 0xff
 80061ea:	d907      	bls.n	80061fc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061f0:	f043 0210 	orr.w	r2, r3, #16
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	e08f      	b.n	800631c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	691a      	ldr	r2, [r3, #16]
 8006200:	69bb      	ldr	r3, [r7, #24]
 8006202:	ea42 0103 	orr.w	r1, r2, r3
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	69fa      	ldr	r2, [r7, #28]
 800620c:	430a      	orrs	r2, r1
 800620e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	69db      	ldr	r3, [r3, #28]
 8006216:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800621a:	f023 030f 	bic.w	r3, r3, #15
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	6851      	ldr	r1, [r2, #4]
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	6892      	ldr	r2, [r2, #8]
 8006226:	4311      	orrs	r1, r2
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	68d2      	ldr	r2, [r2, #12]
 800622c:	4311      	orrs	r1, r2
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	6992      	ldr	r2, [r2, #24]
 8006232:	430a      	orrs	r2, r1
 8006234:	431a      	orrs	r2, r3
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800623e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6a1b      	ldr	r3, [r3, #32]
 8006244:	2b01      	cmp	r3, #1
 8006246:	d161      	bne.n	800630c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4a38      	ldr	r2, [pc, #224]	@ (800632c <HAL_I2S_Init+0x274>)
 800624c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a37      	ldr	r2, [pc, #220]	@ (8006330 <HAL_I2S_Init+0x278>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d101      	bne.n	800625c <HAL_I2S_Init+0x1a4>
 8006258:	4b36      	ldr	r3, [pc, #216]	@ (8006334 <HAL_I2S_Init+0x27c>)
 800625a:	e001      	b.n	8006260 <HAL_I2S_Init+0x1a8>
 800625c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006260:	69db      	ldr	r3, [r3, #28]
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	6812      	ldr	r2, [r2, #0]
 8006266:	4932      	ldr	r1, [pc, #200]	@ (8006330 <HAL_I2S_Init+0x278>)
 8006268:	428a      	cmp	r2, r1
 800626a:	d101      	bne.n	8006270 <HAL_I2S_Init+0x1b8>
 800626c:	4a31      	ldr	r2, [pc, #196]	@ (8006334 <HAL_I2S_Init+0x27c>)
 800626e:	e001      	b.n	8006274 <HAL_I2S_Init+0x1bc>
 8006270:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8006274:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8006278:	f023 030f 	bic.w	r3, r3, #15
 800627c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a2b      	ldr	r2, [pc, #172]	@ (8006330 <HAL_I2S_Init+0x278>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d101      	bne.n	800628c <HAL_I2S_Init+0x1d4>
 8006288:	4b2a      	ldr	r3, [pc, #168]	@ (8006334 <HAL_I2S_Init+0x27c>)
 800628a:	e001      	b.n	8006290 <HAL_I2S_Init+0x1d8>
 800628c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006290:	2202      	movs	r2, #2
 8006292:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a25      	ldr	r2, [pc, #148]	@ (8006330 <HAL_I2S_Init+0x278>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d101      	bne.n	80062a2 <HAL_I2S_Init+0x1ea>
 800629e:	4b25      	ldr	r3, [pc, #148]	@ (8006334 <HAL_I2S_Init+0x27c>)
 80062a0:	e001      	b.n	80062a6 <HAL_I2S_Init+0x1ee>
 80062a2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80062a6:	69db      	ldr	r3, [r3, #28]
 80062a8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062b2:	d003      	beq.n	80062bc <HAL_I2S_Init+0x204>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d103      	bne.n	80062c4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80062bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80062c0:	613b      	str	r3, [r7, #16]
 80062c2:	e001      	b.n	80062c8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80062c4:	2300      	movs	r3, #0
 80062c6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80062d2:	4313      	orrs	r3, r2
 80062d4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80062dc:	4313      	orrs	r3, r2
 80062de:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	699b      	ldr	r3, [r3, #24]
 80062e4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80062e6:	4313      	orrs	r3, r2
 80062e8:	b29a      	uxth	r2, r3
 80062ea:	897b      	ldrh	r3, [r7, #10]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80062f4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a0d      	ldr	r2, [pc, #52]	@ (8006330 <HAL_I2S_Init+0x278>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d101      	bne.n	8006304 <HAL_I2S_Init+0x24c>
 8006300:	4b0c      	ldr	r3, [pc, #48]	@ (8006334 <HAL_I2S_Init+0x27c>)
 8006302:	e001      	b.n	8006308 <HAL_I2S_Init+0x250>
 8006304:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006308:	897a      	ldrh	r2, [r7, #10]
 800630a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2201      	movs	r2, #1
 8006316:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 800631a:	2300      	movs	r3, #0
}
 800631c:	4618      	mov	r0, r3
 800631e:	3720      	adds	r7, #32
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}
 8006324:	0800642f 	.word	0x0800642f
 8006328:	cccccccd 	.word	0xcccccccd
 800632c:	08006545 	.word	0x08006545
 8006330:	40003800 	.word	0x40003800
 8006334:	40003400 	.word	0x40003400

08006338 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006338:	b480      	push	{r7}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8006340:	bf00      	nop
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8006354:	bf00      	nop
 8006356:	370c      	adds	r7, #12
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8006368:	bf00      	nop
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b082      	sub	sp, #8
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006380:	881a      	ldrh	r2, [r3, #0]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800638c:	1c9a      	adds	r2, r3, #2
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006396:	b29b      	uxth	r3, r3
 8006398:	3b01      	subs	r3, #1
 800639a:	b29a      	uxth	r2, r3
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d10e      	bne.n	80063c8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	685a      	ldr	r2, [r3, #4]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80063b8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2201      	movs	r2, #1
 80063be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f7ff ffb8 	bl	8006338 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80063c8:	bf00      	nop
 80063ca:	3708      	adds	r7, #8
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b082      	sub	sp, #8
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	68da      	ldr	r2, [r3, #12]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063e2:	b292      	uxth	r2, r2
 80063e4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ea:	1c9a      	adds	r2, r3, #2
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	3b01      	subs	r3, #1
 80063f8:	b29a      	uxth	r2, r3
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006402:	b29b      	uxth	r3, r3
 8006404:	2b00      	cmp	r3, #0
 8006406:	d10e      	bne.n	8006426 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	685a      	ldr	r2, [r3, #4]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006416:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2201      	movs	r2, #1
 800641c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f7ff ff93 	bl	800634c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006426:	bf00      	nop
 8006428:	3708      	adds	r7, #8
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}

0800642e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800642e:	b580      	push	{r7, lr}
 8006430:	b086      	sub	sp, #24
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006444:	b2db      	uxtb	r3, r3
 8006446:	2b04      	cmp	r3, #4
 8006448:	d13a      	bne.n	80064c0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	f003 0301 	and.w	r3, r3, #1
 8006450:	2b01      	cmp	r3, #1
 8006452:	d109      	bne.n	8006468 <I2S_IRQHandler+0x3a>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800645e:	2b40      	cmp	r3, #64	@ 0x40
 8006460:	d102      	bne.n	8006468 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f7ff ffb4 	bl	80063d0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800646e:	2b40      	cmp	r3, #64	@ 0x40
 8006470:	d126      	bne.n	80064c0 <I2S_IRQHandler+0x92>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	f003 0320 	and.w	r3, r3, #32
 800647c:	2b20      	cmp	r3, #32
 800647e:	d11f      	bne.n	80064c0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	685a      	ldr	r2, [r3, #4]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800648e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006490:	2300      	movs	r3, #0
 8006492:	613b      	str	r3, [r7, #16]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	613b      	str	r3, [r7, #16]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	613b      	str	r3, [r7, #16]
 80064a4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2201      	movs	r2, #1
 80064aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064b2:	f043 0202 	orr.w	r2, r3, #2
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f7ff ff50 	bl	8006360 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	2b03      	cmp	r3, #3
 80064ca:	d136      	bne.n	800653a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	f003 0302 	and.w	r3, r3, #2
 80064d2:	2b02      	cmp	r3, #2
 80064d4:	d109      	bne.n	80064ea <I2S_IRQHandler+0xbc>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064e0:	2b80      	cmp	r3, #128	@ 0x80
 80064e2:	d102      	bne.n	80064ea <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f7ff ff45 	bl	8006374 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	f003 0308 	and.w	r3, r3, #8
 80064f0:	2b08      	cmp	r3, #8
 80064f2:	d122      	bne.n	800653a <I2S_IRQHandler+0x10c>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	f003 0320 	and.w	r3, r3, #32
 80064fe:	2b20      	cmp	r3, #32
 8006500:	d11b      	bne.n	800653a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	685a      	ldr	r2, [r3, #4]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006510:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006512:	2300      	movs	r3, #0
 8006514:	60fb      	str	r3, [r7, #12]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	60fb      	str	r3, [r7, #12]
 800651e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800652c:	f043 0204 	orr.w	r2, r3, #4
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f7ff ff13 	bl	8006360 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800653a:	bf00      	nop
 800653c:	3718      	adds	r7, #24
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
	...

08006544 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b088      	sub	sp, #32
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a92      	ldr	r2, [pc, #584]	@ (80067a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d101      	bne.n	8006562 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800655e:	4b92      	ldr	r3, [pc, #584]	@ (80067a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006560:	e001      	b.n	8006566 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8006562:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a8b      	ldr	r2, [pc, #556]	@ (80067a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d101      	bne.n	8006580 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800657c:	4b8a      	ldr	r3, [pc, #552]	@ (80067a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800657e:	e001      	b.n	8006584 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006580:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006590:	d004      	beq.n	800659c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	2b00      	cmp	r3, #0
 8006598:	f040 8099 	bne.w	80066ce <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800659c:	69fb      	ldr	r3, [r7, #28]
 800659e:	f003 0302 	and.w	r3, r3, #2
 80065a2:	2b02      	cmp	r3, #2
 80065a4:	d107      	bne.n	80065b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d002      	beq.n	80065b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 f925 	bl	8006800 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80065b6:	69bb      	ldr	r3, [r7, #24]
 80065b8:	f003 0301 	and.w	r3, r3, #1
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d107      	bne.n	80065d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d002      	beq.n	80065d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 f9c8 	bl	8006960 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80065d0:	69bb      	ldr	r3, [r7, #24]
 80065d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065d6:	2b40      	cmp	r3, #64	@ 0x40
 80065d8:	d13a      	bne.n	8006650 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	f003 0320 	and.w	r3, r3, #32
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d035      	beq.n	8006650 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a6e      	ldr	r2, [pc, #440]	@ (80067a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d101      	bne.n	80065f2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80065ee:	4b6e      	ldr	r3, [pc, #440]	@ (80067a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80065f0:	e001      	b.n	80065f6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80065f2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80065f6:	685a      	ldr	r2, [r3, #4]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4969      	ldr	r1, [pc, #420]	@ (80067a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80065fe:	428b      	cmp	r3, r1
 8006600:	d101      	bne.n	8006606 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8006602:	4b69      	ldr	r3, [pc, #420]	@ (80067a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006604:	e001      	b.n	800660a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8006606:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800660a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800660e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	685a      	ldr	r2, [r3, #4]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800661e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006620:	2300      	movs	r3, #0
 8006622:	60fb      	str	r3, [r7, #12]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	60fb      	str	r3, [r7, #12]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	60fb      	str	r3, [r7, #12]
 8006634:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2201      	movs	r2, #1
 800663a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006642:	f043 0202 	orr.w	r2, r3, #2
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f7ff fe88 	bl	8006360 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	f003 0308 	and.w	r3, r3, #8
 8006656:	2b08      	cmp	r3, #8
 8006658:	f040 80c3 	bne.w	80067e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	f003 0320 	and.w	r3, r3, #32
 8006662:	2b00      	cmp	r3, #0
 8006664:	f000 80bd 	beq.w	80067e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	685a      	ldr	r2, [r3, #4]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006676:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a49      	ldr	r2, [pc, #292]	@ (80067a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d101      	bne.n	8006686 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8006682:	4b49      	ldr	r3, [pc, #292]	@ (80067a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006684:	e001      	b.n	800668a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8006686:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800668a:	685a      	ldr	r2, [r3, #4]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4944      	ldr	r1, [pc, #272]	@ (80067a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006692:	428b      	cmp	r3, r1
 8006694:	d101      	bne.n	800669a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8006696:	4b44      	ldr	r3, [pc, #272]	@ (80067a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006698:	e001      	b.n	800669e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800669a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800669e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80066a2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80066a4:	2300      	movs	r3, #0
 80066a6:	60bb      	str	r3, [r7, #8]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	60bb      	str	r3, [r7, #8]
 80066b0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2201      	movs	r2, #1
 80066b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066be:	f043 0204 	orr.w	r2, r3, #4
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f7ff fe4a 	bl	8006360 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80066cc:	e089      	b.n	80067e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80066ce:	69bb      	ldr	r3, [r7, #24]
 80066d0:	f003 0302 	and.w	r3, r3, #2
 80066d4:	2b02      	cmp	r3, #2
 80066d6:	d107      	bne.n	80066e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d002      	beq.n	80066e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 f8be 	bl	8006864 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	f003 0301 	and.w	r3, r3, #1
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d107      	bne.n	8006702 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d002      	beq.n	8006702 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f000 f8fd 	bl	80068fc <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006702:	69fb      	ldr	r3, [r7, #28]
 8006704:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006708:	2b40      	cmp	r3, #64	@ 0x40
 800670a:	d12f      	bne.n	800676c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	f003 0320 	and.w	r3, r3, #32
 8006712:	2b00      	cmp	r3, #0
 8006714:	d02a      	beq.n	800676c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	685a      	ldr	r2, [r3, #4]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006724:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a1e      	ldr	r2, [pc, #120]	@ (80067a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d101      	bne.n	8006734 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006730:	4b1d      	ldr	r3, [pc, #116]	@ (80067a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006732:	e001      	b.n	8006738 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006734:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006738:	685a      	ldr	r2, [r3, #4]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4919      	ldr	r1, [pc, #100]	@ (80067a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006740:	428b      	cmp	r3, r1
 8006742:	d101      	bne.n	8006748 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006744:	4b18      	ldr	r3, [pc, #96]	@ (80067a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006746:	e001      	b.n	800674c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006748:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800674c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006750:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2201      	movs	r2, #1
 8006756:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800675e:	f043 0202 	orr.w	r2, r3, #2
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f7ff fdfa 	bl	8006360 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800676c:	69bb      	ldr	r3, [r7, #24]
 800676e:	f003 0308 	and.w	r3, r3, #8
 8006772:	2b08      	cmp	r3, #8
 8006774:	d136      	bne.n	80067e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	f003 0320 	and.w	r3, r3, #32
 800677c:	2b00      	cmp	r3, #0
 800677e:	d031      	beq.n	80067e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a07      	ldr	r2, [pc, #28]	@ (80067a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d101      	bne.n	800678e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800678a:	4b07      	ldr	r3, [pc, #28]	@ (80067a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800678c:	e001      	b.n	8006792 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800678e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006792:	685a      	ldr	r2, [r3, #4]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4902      	ldr	r1, [pc, #8]	@ (80067a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800679a:	428b      	cmp	r3, r1
 800679c:	d106      	bne.n	80067ac <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800679e:	4b02      	ldr	r3, [pc, #8]	@ (80067a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80067a0:	e006      	b.n	80067b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80067a2:	bf00      	nop
 80067a4:	40003800 	.word	0x40003800
 80067a8:	40003400 	.word	0x40003400
 80067ac:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80067b0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80067b4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	685a      	ldr	r2, [r3, #4]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80067c4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2201      	movs	r2, #1
 80067ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067d2:	f043 0204 	orr.w	r2, r3, #4
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f7ff fdc0 	bl	8006360 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80067e0:	e000      	b.n	80067e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80067e2:	bf00      	nop
}
 80067e4:	bf00      	nop
 80067e6:	3720      	adds	r7, #32
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b083      	sub	sp, #12
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80067f4:	bf00      	nop
 80067f6:	370c      	adds	r7, #12
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b082      	sub	sp, #8
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800680c:	1c99      	adds	r1, r3, #2
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	6251      	str	r1, [r2, #36]	@ 0x24
 8006812:	881a      	ldrh	r2, [r3, #0]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800681e:	b29b      	uxth	r3, r3
 8006820:	3b01      	subs	r3, #1
 8006822:	b29a      	uxth	r2, r3
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800682c:	b29b      	uxth	r3, r3
 800682e:	2b00      	cmp	r3, #0
 8006830:	d113      	bne.n	800685a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	685a      	ldr	r2, [r3, #4]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006840:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006846:	b29b      	uxth	r3, r3
 8006848:	2b00      	cmp	r3, #0
 800684a:	d106      	bne.n	800685a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f7ff ffc9 	bl	80067ec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800685a:	bf00      	nop
 800685c:	3708      	adds	r7, #8
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}
	...

08006864 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b082      	sub	sp, #8
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006870:	1c99      	adds	r1, r3, #2
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	6251      	str	r1, [r2, #36]	@ 0x24
 8006876:	8819      	ldrh	r1, [r3, #0]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a1d      	ldr	r2, [pc, #116]	@ (80068f4 <I2SEx_TxISR_I2SExt+0x90>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d101      	bne.n	8006886 <I2SEx_TxISR_I2SExt+0x22>
 8006882:	4b1d      	ldr	r3, [pc, #116]	@ (80068f8 <I2SEx_TxISR_I2SExt+0x94>)
 8006884:	e001      	b.n	800688a <I2SEx_TxISR_I2SExt+0x26>
 8006886:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800688a:	460a      	mov	r2, r1
 800688c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006892:	b29b      	uxth	r3, r3
 8006894:	3b01      	subs	r3, #1
 8006896:	b29a      	uxth	r2, r3
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d121      	bne.n	80068ea <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a12      	ldr	r2, [pc, #72]	@ (80068f4 <I2SEx_TxISR_I2SExt+0x90>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d101      	bne.n	80068b4 <I2SEx_TxISR_I2SExt+0x50>
 80068b0:	4b11      	ldr	r3, [pc, #68]	@ (80068f8 <I2SEx_TxISR_I2SExt+0x94>)
 80068b2:	e001      	b.n	80068b8 <I2SEx_TxISR_I2SExt+0x54>
 80068b4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80068b8:	685a      	ldr	r2, [r3, #4]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	490d      	ldr	r1, [pc, #52]	@ (80068f4 <I2SEx_TxISR_I2SExt+0x90>)
 80068c0:	428b      	cmp	r3, r1
 80068c2:	d101      	bne.n	80068c8 <I2SEx_TxISR_I2SExt+0x64>
 80068c4:	4b0c      	ldr	r3, [pc, #48]	@ (80068f8 <I2SEx_TxISR_I2SExt+0x94>)
 80068c6:	e001      	b.n	80068cc <I2SEx_TxISR_I2SExt+0x68>
 80068c8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80068cc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80068d0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d106      	bne.n	80068ea <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f7ff ff81 	bl	80067ec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80068ea:	bf00      	nop
 80068ec:	3708      	adds	r7, #8
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}
 80068f2:	bf00      	nop
 80068f4:	40003800 	.word	0x40003800
 80068f8:	40003400 	.word	0x40003400

080068fc <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b082      	sub	sp, #8
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	68d8      	ldr	r0, [r3, #12]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800690e:	1c99      	adds	r1, r3, #2
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8006914:	b282      	uxth	r2, r0
 8006916:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800691c:	b29b      	uxth	r3, r3
 800691e:	3b01      	subs	r3, #1
 8006920:	b29a      	uxth	r2, r3
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800692a:	b29b      	uxth	r3, r3
 800692c:	2b00      	cmp	r3, #0
 800692e:	d113      	bne.n	8006958 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	685a      	ldr	r2, [r3, #4]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800693e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006944:	b29b      	uxth	r3, r3
 8006946:	2b00      	cmp	r3, #0
 8006948:	d106      	bne.n	8006958 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2201      	movs	r2, #1
 800694e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f7ff ff4a 	bl	80067ec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006958:	bf00      	nop
 800695a:	3708      	adds	r7, #8
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}

08006960 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b082      	sub	sp, #8
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a20      	ldr	r2, [pc, #128]	@ (80069f0 <I2SEx_RxISR_I2SExt+0x90>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d101      	bne.n	8006976 <I2SEx_RxISR_I2SExt+0x16>
 8006972:	4b20      	ldr	r3, [pc, #128]	@ (80069f4 <I2SEx_RxISR_I2SExt+0x94>)
 8006974:	e001      	b.n	800697a <I2SEx_RxISR_I2SExt+0x1a>
 8006976:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800697a:	68d8      	ldr	r0, [r3, #12]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006980:	1c99      	adds	r1, r3, #2
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8006986:	b282      	uxth	r2, r0
 8006988:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800698e:	b29b      	uxth	r3, r3
 8006990:	3b01      	subs	r3, #1
 8006992:	b29a      	uxth	r2, r3
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800699c:	b29b      	uxth	r3, r3
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d121      	bne.n	80069e6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a12      	ldr	r2, [pc, #72]	@ (80069f0 <I2SEx_RxISR_I2SExt+0x90>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d101      	bne.n	80069b0 <I2SEx_RxISR_I2SExt+0x50>
 80069ac:	4b11      	ldr	r3, [pc, #68]	@ (80069f4 <I2SEx_RxISR_I2SExt+0x94>)
 80069ae:	e001      	b.n	80069b4 <I2SEx_RxISR_I2SExt+0x54>
 80069b0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80069b4:	685a      	ldr	r2, [r3, #4]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	490d      	ldr	r1, [pc, #52]	@ (80069f0 <I2SEx_RxISR_I2SExt+0x90>)
 80069bc:	428b      	cmp	r3, r1
 80069be:	d101      	bne.n	80069c4 <I2SEx_RxISR_I2SExt+0x64>
 80069c0:	4b0c      	ldr	r3, [pc, #48]	@ (80069f4 <I2SEx_RxISR_I2SExt+0x94>)
 80069c2:	e001      	b.n	80069c8 <I2SEx_RxISR_I2SExt+0x68>
 80069c4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80069c8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80069cc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d106      	bne.n	80069e6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2201      	movs	r2, #1
 80069dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f7ff ff03 	bl	80067ec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80069e6:	bf00      	nop
 80069e8:	3708      	adds	r7, #8
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}
 80069ee:	bf00      	nop
 80069f0:	40003800 	.word	0x40003800
 80069f4:	40003400 	.word	0x40003400

080069f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b086      	sub	sp, #24
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d101      	bne.n	8006a0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	e267      	b.n	8006eda <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f003 0301 	and.w	r3, r3, #1
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d075      	beq.n	8006b02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006a16:	4b88      	ldr	r3, [pc, #544]	@ (8006c38 <HAL_RCC_OscConfig+0x240>)
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	f003 030c 	and.w	r3, r3, #12
 8006a1e:	2b04      	cmp	r3, #4
 8006a20:	d00c      	beq.n	8006a3c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a22:	4b85      	ldr	r3, [pc, #532]	@ (8006c38 <HAL_RCC_OscConfig+0x240>)
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006a2a:	2b08      	cmp	r3, #8
 8006a2c:	d112      	bne.n	8006a54 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a2e:	4b82      	ldr	r3, [pc, #520]	@ (8006c38 <HAL_RCC_OscConfig+0x240>)
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a36:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006a3a:	d10b      	bne.n	8006a54 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a3c:	4b7e      	ldr	r3, [pc, #504]	@ (8006c38 <HAL_RCC_OscConfig+0x240>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d05b      	beq.n	8006b00 <HAL_RCC_OscConfig+0x108>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d157      	bne.n	8006b00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	e242      	b.n	8006eda <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a5c:	d106      	bne.n	8006a6c <HAL_RCC_OscConfig+0x74>
 8006a5e:	4b76      	ldr	r3, [pc, #472]	@ (8006c38 <HAL_RCC_OscConfig+0x240>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a75      	ldr	r2, [pc, #468]	@ (8006c38 <HAL_RCC_OscConfig+0x240>)
 8006a64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a68:	6013      	str	r3, [r2, #0]
 8006a6a:	e01d      	b.n	8006aa8 <HAL_RCC_OscConfig+0xb0>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006a74:	d10c      	bne.n	8006a90 <HAL_RCC_OscConfig+0x98>
 8006a76:	4b70      	ldr	r3, [pc, #448]	@ (8006c38 <HAL_RCC_OscConfig+0x240>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a6f      	ldr	r2, [pc, #444]	@ (8006c38 <HAL_RCC_OscConfig+0x240>)
 8006a7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006a80:	6013      	str	r3, [r2, #0]
 8006a82:	4b6d      	ldr	r3, [pc, #436]	@ (8006c38 <HAL_RCC_OscConfig+0x240>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a6c      	ldr	r2, [pc, #432]	@ (8006c38 <HAL_RCC_OscConfig+0x240>)
 8006a88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a8c:	6013      	str	r3, [r2, #0]
 8006a8e:	e00b      	b.n	8006aa8 <HAL_RCC_OscConfig+0xb0>
 8006a90:	4b69      	ldr	r3, [pc, #420]	@ (8006c38 <HAL_RCC_OscConfig+0x240>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a68      	ldr	r2, [pc, #416]	@ (8006c38 <HAL_RCC_OscConfig+0x240>)
 8006a96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a9a:	6013      	str	r3, [r2, #0]
 8006a9c:	4b66      	ldr	r3, [pc, #408]	@ (8006c38 <HAL_RCC_OscConfig+0x240>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a65      	ldr	r2, [pc, #404]	@ (8006c38 <HAL_RCC_OscConfig+0x240>)
 8006aa2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006aa6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d013      	beq.n	8006ad8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ab0:	f7fc f9f4 	bl	8002e9c <HAL_GetTick>
 8006ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ab6:	e008      	b.n	8006aca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ab8:	f7fc f9f0 	bl	8002e9c <HAL_GetTick>
 8006abc:	4602      	mov	r2, r0
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	1ad3      	subs	r3, r2, r3
 8006ac2:	2b64      	cmp	r3, #100	@ 0x64
 8006ac4:	d901      	bls.n	8006aca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006ac6:	2303      	movs	r3, #3
 8006ac8:	e207      	b.n	8006eda <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006aca:	4b5b      	ldr	r3, [pc, #364]	@ (8006c38 <HAL_RCC_OscConfig+0x240>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d0f0      	beq.n	8006ab8 <HAL_RCC_OscConfig+0xc0>
 8006ad6:	e014      	b.n	8006b02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ad8:	f7fc f9e0 	bl	8002e9c <HAL_GetTick>
 8006adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ade:	e008      	b.n	8006af2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ae0:	f7fc f9dc 	bl	8002e9c <HAL_GetTick>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	1ad3      	subs	r3, r2, r3
 8006aea:	2b64      	cmp	r3, #100	@ 0x64
 8006aec:	d901      	bls.n	8006af2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006aee:	2303      	movs	r3, #3
 8006af0:	e1f3      	b.n	8006eda <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006af2:	4b51      	ldr	r3, [pc, #324]	@ (8006c38 <HAL_RCC_OscConfig+0x240>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d1f0      	bne.n	8006ae0 <HAL_RCC_OscConfig+0xe8>
 8006afe:	e000      	b.n	8006b02 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f003 0302 	and.w	r3, r3, #2
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d063      	beq.n	8006bd6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006b0e:	4b4a      	ldr	r3, [pc, #296]	@ (8006c38 <HAL_RCC_OscConfig+0x240>)
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	f003 030c 	and.w	r3, r3, #12
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d00b      	beq.n	8006b32 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b1a:	4b47      	ldr	r3, [pc, #284]	@ (8006c38 <HAL_RCC_OscConfig+0x240>)
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006b22:	2b08      	cmp	r3, #8
 8006b24:	d11c      	bne.n	8006b60 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b26:	4b44      	ldr	r3, [pc, #272]	@ (8006c38 <HAL_RCC_OscConfig+0x240>)
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d116      	bne.n	8006b60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b32:	4b41      	ldr	r3, [pc, #260]	@ (8006c38 <HAL_RCC_OscConfig+0x240>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f003 0302 	and.w	r3, r3, #2
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d005      	beq.n	8006b4a <HAL_RCC_OscConfig+0x152>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	68db      	ldr	r3, [r3, #12]
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	d001      	beq.n	8006b4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e1c7      	b.n	8006eda <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b4a:	4b3b      	ldr	r3, [pc, #236]	@ (8006c38 <HAL_RCC_OscConfig+0x240>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	00db      	lsls	r3, r3, #3
 8006b58:	4937      	ldr	r1, [pc, #220]	@ (8006c38 <HAL_RCC_OscConfig+0x240>)
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b5e:	e03a      	b.n	8006bd6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	68db      	ldr	r3, [r3, #12]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d020      	beq.n	8006baa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b68:	4b34      	ldr	r3, [pc, #208]	@ (8006c3c <HAL_RCC_OscConfig+0x244>)
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b6e:	f7fc f995 	bl	8002e9c <HAL_GetTick>
 8006b72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b74:	e008      	b.n	8006b88 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b76:	f7fc f991 	bl	8002e9c <HAL_GetTick>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	1ad3      	subs	r3, r2, r3
 8006b80:	2b02      	cmp	r3, #2
 8006b82:	d901      	bls.n	8006b88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006b84:	2303      	movs	r3, #3
 8006b86:	e1a8      	b.n	8006eda <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b88:	4b2b      	ldr	r3, [pc, #172]	@ (8006c38 <HAL_RCC_OscConfig+0x240>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f003 0302 	and.w	r3, r3, #2
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d0f0      	beq.n	8006b76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b94:	4b28      	ldr	r3, [pc, #160]	@ (8006c38 <HAL_RCC_OscConfig+0x240>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	691b      	ldr	r3, [r3, #16]
 8006ba0:	00db      	lsls	r3, r3, #3
 8006ba2:	4925      	ldr	r1, [pc, #148]	@ (8006c38 <HAL_RCC_OscConfig+0x240>)
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	600b      	str	r3, [r1, #0]
 8006ba8:	e015      	b.n	8006bd6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006baa:	4b24      	ldr	r3, [pc, #144]	@ (8006c3c <HAL_RCC_OscConfig+0x244>)
 8006bac:	2200      	movs	r2, #0
 8006bae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bb0:	f7fc f974 	bl	8002e9c <HAL_GetTick>
 8006bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006bb6:	e008      	b.n	8006bca <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006bb8:	f7fc f970 	bl	8002e9c <HAL_GetTick>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	1ad3      	subs	r3, r2, r3
 8006bc2:	2b02      	cmp	r3, #2
 8006bc4:	d901      	bls.n	8006bca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006bc6:	2303      	movs	r3, #3
 8006bc8:	e187      	b.n	8006eda <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006bca:	4b1b      	ldr	r3, [pc, #108]	@ (8006c38 <HAL_RCC_OscConfig+0x240>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f003 0302 	and.w	r3, r3, #2
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d1f0      	bne.n	8006bb8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f003 0308 	and.w	r3, r3, #8
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d036      	beq.n	8006c50 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	695b      	ldr	r3, [r3, #20]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d016      	beq.n	8006c18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006bea:	4b15      	ldr	r3, [pc, #84]	@ (8006c40 <HAL_RCC_OscConfig+0x248>)
 8006bec:	2201      	movs	r2, #1
 8006bee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bf0:	f7fc f954 	bl	8002e9c <HAL_GetTick>
 8006bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006bf6:	e008      	b.n	8006c0a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006bf8:	f7fc f950 	bl	8002e9c <HAL_GetTick>
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	1ad3      	subs	r3, r2, r3
 8006c02:	2b02      	cmp	r3, #2
 8006c04:	d901      	bls.n	8006c0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006c06:	2303      	movs	r3, #3
 8006c08:	e167      	b.n	8006eda <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c0a:	4b0b      	ldr	r3, [pc, #44]	@ (8006c38 <HAL_RCC_OscConfig+0x240>)
 8006c0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c0e:	f003 0302 	and.w	r3, r3, #2
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d0f0      	beq.n	8006bf8 <HAL_RCC_OscConfig+0x200>
 8006c16:	e01b      	b.n	8006c50 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c18:	4b09      	ldr	r3, [pc, #36]	@ (8006c40 <HAL_RCC_OscConfig+0x248>)
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c1e:	f7fc f93d 	bl	8002e9c <HAL_GetTick>
 8006c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c24:	e00e      	b.n	8006c44 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c26:	f7fc f939 	bl	8002e9c <HAL_GetTick>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	1ad3      	subs	r3, r2, r3
 8006c30:	2b02      	cmp	r3, #2
 8006c32:	d907      	bls.n	8006c44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006c34:	2303      	movs	r3, #3
 8006c36:	e150      	b.n	8006eda <HAL_RCC_OscConfig+0x4e2>
 8006c38:	40023800 	.word	0x40023800
 8006c3c:	42470000 	.word	0x42470000
 8006c40:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c44:	4b88      	ldr	r3, [pc, #544]	@ (8006e68 <HAL_RCC_OscConfig+0x470>)
 8006c46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c48:	f003 0302 	and.w	r3, r3, #2
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d1ea      	bne.n	8006c26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f003 0304 	and.w	r3, r3, #4
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	f000 8097 	beq.w	8006d8c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c62:	4b81      	ldr	r3, [pc, #516]	@ (8006e68 <HAL_RCC_OscConfig+0x470>)
 8006c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d10f      	bne.n	8006c8e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c6e:	2300      	movs	r3, #0
 8006c70:	60bb      	str	r3, [r7, #8]
 8006c72:	4b7d      	ldr	r3, [pc, #500]	@ (8006e68 <HAL_RCC_OscConfig+0x470>)
 8006c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c76:	4a7c      	ldr	r2, [pc, #496]	@ (8006e68 <HAL_RCC_OscConfig+0x470>)
 8006c78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8006c7e:	4b7a      	ldr	r3, [pc, #488]	@ (8006e68 <HAL_RCC_OscConfig+0x470>)
 8006c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c86:	60bb      	str	r3, [r7, #8]
 8006c88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c8e:	4b77      	ldr	r3, [pc, #476]	@ (8006e6c <HAL_RCC_OscConfig+0x474>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d118      	bne.n	8006ccc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c9a:	4b74      	ldr	r3, [pc, #464]	@ (8006e6c <HAL_RCC_OscConfig+0x474>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a73      	ldr	r2, [pc, #460]	@ (8006e6c <HAL_RCC_OscConfig+0x474>)
 8006ca0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ca4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ca6:	f7fc f8f9 	bl	8002e9c <HAL_GetTick>
 8006caa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cac:	e008      	b.n	8006cc0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cae:	f7fc f8f5 	bl	8002e9c <HAL_GetTick>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	1ad3      	subs	r3, r2, r3
 8006cb8:	2b02      	cmp	r3, #2
 8006cba:	d901      	bls.n	8006cc0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006cbc:	2303      	movs	r3, #3
 8006cbe:	e10c      	b.n	8006eda <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cc0:	4b6a      	ldr	r3, [pc, #424]	@ (8006e6c <HAL_RCC_OscConfig+0x474>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d0f0      	beq.n	8006cae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d106      	bne.n	8006ce2 <HAL_RCC_OscConfig+0x2ea>
 8006cd4:	4b64      	ldr	r3, [pc, #400]	@ (8006e68 <HAL_RCC_OscConfig+0x470>)
 8006cd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cd8:	4a63      	ldr	r2, [pc, #396]	@ (8006e68 <HAL_RCC_OscConfig+0x470>)
 8006cda:	f043 0301 	orr.w	r3, r3, #1
 8006cde:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ce0:	e01c      	b.n	8006d1c <HAL_RCC_OscConfig+0x324>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	2b05      	cmp	r3, #5
 8006ce8:	d10c      	bne.n	8006d04 <HAL_RCC_OscConfig+0x30c>
 8006cea:	4b5f      	ldr	r3, [pc, #380]	@ (8006e68 <HAL_RCC_OscConfig+0x470>)
 8006cec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cee:	4a5e      	ldr	r2, [pc, #376]	@ (8006e68 <HAL_RCC_OscConfig+0x470>)
 8006cf0:	f043 0304 	orr.w	r3, r3, #4
 8006cf4:	6713      	str	r3, [r2, #112]	@ 0x70
 8006cf6:	4b5c      	ldr	r3, [pc, #368]	@ (8006e68 <HAL_RCC_OscConfig+0x470>)
 8006cf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cfa:	4a5b      	ldr	r2, [pc, #364]	@ (8006e68 <HAL_RCC_OscConfig+0x470>)
 8006cfc:	f043 0301 	orr.w	r3, r3, #1
 8006d00:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d02:	e00b      	b.n	8006d1c <HAL_RCC_OscConfig+0x324>
 8006d04:	4b58      	ldr	r3, [pc, #352]	@ (8006e68 <HAL_RCC_OscConfig+0x470>)
 8006d06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d08:	4a57      	ldr	r2, [pc, #348]	@ (8006e68 <HAL_RCC_OscConfig+0x470>)
 8006d0a:	f023 0301 	bic.w	r3, r3, #1
 8006d0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d10:	4b55      	ldr	r3, [pc, #340]	@ (8006e68 <HAL_RCC_OscConfig+0x470>)
 8006d12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d14:	4a54      	ldr	r2, [pc, #336]	@ (8006e68 <HAL_RCC_OscConfig+0x470>)
 8006d16:	f023 0304 	bic.w	r3, r3, #4
 8006d1a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d015      	beq.n	8006d50 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d24:	f7fc f8ba 	bl	8002e9c <HAL_GetTick>
 8006d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d2a:	e00a      	b.n	8006d42 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d2c:	f7fc f8b6 	bl	8002e9c <HAL_GetTick>
 8006d30:	4602      	mov	r2, r0
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	1ad3      	subs	r3, r2, r3
 8006d36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d901      	bls.n	8006d42 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006d3e:	2303      	movs	r3, #3
 8006d40:	e0cb      	b.n	8006eda <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d42:	4b49      	ldr	r3, [pc, #292]	@ (8006e68 <HAL_RCC_OscConfig+0x470>)
 8006d44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d46:	f003 0302 	and.w	r3, r3, #2
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d0ee      	beq.n	8006d2c <HAL_RCC_OscConfig+0x334>
 8006d4e:	e014      	b.n	8006d7a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d50:	f7fc f8a4 	bl	8002e9c <HAL_GetTick>
 8006d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d56:	e00a      	b.n	8006d6e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d58:	f7fc f8a0 	bl	8002e9c <HAL_GetTick>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	1ad3      	subs	r3, r2, r3
 8006d62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d901      	bls.n	8006d6e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006d6a:	2303      	movs	r3, #3
 8006d6c:	e0b5      	b.n	8006eda <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d6e:	4b3e      	ldr	r3, [pc, #248]	@ (8006e68 <HAL_RCC_OscConfig+0x470>)
 8006d70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d72:	f003 0302 	and.w	r3, r3, #2
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d1ee      	bne.n	8006d58 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006d7a:	7dfb      	ldrb	r3, [r7, #23]
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d105      	bne.n	8006d8c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d80:	4b39      	ldr	r3, [pc, #228]	@ (8006e68 <HAL_RCC_OscConfig+0x470>)
 8006d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d84:	4a38      	ldr	r2, [pc, #224]	@ (8006e68 <HAL_RCC_OscConfig+0x470>)
 8006d86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d8a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	699b      	ldr	r3, [r3, #24]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	f000 80a1 	beq.w	8006ed8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006d96:	4b34      	ldr	r3, [pc, #208]	@ (8006e68 <HAL_RCC_OscConfig+0x470>)
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	f003 030c 	and.w	r3, r3, #12
 8006d9e:	2b08      	cmp	r3, #8
 8006da0:	d05c      	beq.n	8006e5c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	699b      	ldr	r3, [r3, #24]
 8006da6:	2b02      	cmp	r3, #2
 8006da8:	d141      	bne.n	8006e2e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006daa:	4b31      	ldr	r3, [pc, #196]	@ (8006e70 <HAL_RCC_OscConfig+0x478>)
 8006dac:	2200      	movs	r2, #0
 8006dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006db0:	f7fc f874 	bl	8002e9c <HAL_GetTick>
 8006db4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006db6:	e008      	b.n	8006dca <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006db8:	f7fc f870 	bl	8002e9c <HAL_GetTick>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	2b02      	cmp	r3, #2
 8006dc4:	d901      	bls.n	8006dca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	e087      	b.n	8006eda <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006dca:	4b27      	ldr	r3, [pc, #156]	@ (8006e68 <HAL_RCC_OscConfig+0x470>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d1f0      	bne.n	8006db8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	69da      	ldr	r2, [r3, #28]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a1b      	ldr	r3, [r3, #32]
 8006dde:	431a      	orrs	r2, r3
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006de4:	019b      	lsls	r3, r3, #6
 8006de6:	431a      	orrs	r2, r3
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dec:	085b      	lsrs	r3, r3, #1
 8006dee:	3b01      	subs	r3, #1
 8006df0:	041b      	lsls	r3, r3, #16
 8006df2:	431a      	orrs	r2, r3
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006df8:	061b      	lsls	r3, r3, #24
 8006dfa:	491b      	ldr	r1, [pc, #108]	@ (8006e68 <HAL_RCC_OscConfig+0x470>)
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e00:	4b1b      	ldr	r3, [pc, #108]	@ (8006e70 <HAL_RCC_OscConfig+0x478>)
 8006e02:	2201      	movs	r2, #1
 8006e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e06:	f7fc f849 	bl	8002e9c <HAL_GetTick>
 8006e0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e0c:	e008      	b.n	8006e20 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e0e:	f7fc f845 	bl	8002e9c <HAL_GetTick>
 8006e12:	4602      	mov	r2, r0
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	1ad3      	subs	r3, r2, r3
 8006e18:	2b02      	cmp	r3, #2
 8006e1a:	d901      	bls.n	8006e20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006e1c:	2303      	movs	r3, #3
 8006e1e:	e05c      	b.n	8006eda <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e20:	4b11      	ldr	r3, [pc, #68]	@ (8006e68 <HAL_RCC_OscConfig+0x470>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d0f0      	beq.n	8006e0e <HAL_RCC_OscConfig+0x416>
 8006e2c:	e054      	b.n	8006ed8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e2e:	4b10      	ldr	r3, [pc, #64]	@ (8006e70 <HAL_RCC_OscConfig+0x478>)
 8006e30:	2200      	movs	r2, #0
 8006e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e34:	f7fc f832 	bl	8002e9c <HAL_GetTick>
 8006e38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e3a:	e008      	b.n	8006e4e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e3c:	f7fc f82e 	bl	8002e9c <HAL_GetTick>
 8006e40:	4602      	mov	r2, r0
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	1ad3      	subs	r3, r2, r3
 8006e46:	2b02      	cmp	r3, #2
 8006e48:	d901      	bls.n	8006e4e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006e4a:	2303      	movs	r3, #3
 8006e4c:	e045      	b.n	8006eda <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e4e:	4b06      	ldr	r3, [pc, #24]	@ (8006e68 <HAL_RCC_OscConfig+0x470>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d1f0      	bne.n	8006e3c <HAL_RCC_OscConfig+0x444>
 8006e5a:	e03d      	b.n	8006ed8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	699b      	ldr	r3, [r3, #24]
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d107      	bne.n	8006e74 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006e64:	2301      	movs	r3, #1
 8006e66:	e038      	b.n	8006eda <HAL_RCC_OscConfig+0x4e2>
 8006e68:	40023800 	.word	0x40023800
 8006e6c:	40007000 	.word	0x40007000
 8006e70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006e74:	4b1b      	ldr	r3, [pc, #108]	@ (8006ee4 <HAL_RCC_OscConfig+0x4ec>)
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	699b      	ldr	r3, [r3, #24]
 8006e7e:	2b01      	cmp	r3, #1
 8006e80:	d028      	beq.n	8006ed4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d121      	bne.n	8006ed4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d11a      	bne.n	8006ed4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e9e:	68fa      	ldr	r2, [r7, #12]
 8006ea0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006ea4:	4013      	ands	r3, r2
 8006ea6:	687a      	ldr	r2, [r7, #4]
 8006ea8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006eaa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d111      	bne.n	8006ed4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eba:	085b      	lsrs	r3, r3, #1
 8006ebc:	3b01      	subs	r3, #1
 8006ebe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d107      	bne.n	8006ed4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ece:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d001      	beq.n	8006ed8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	e000      	b.n	8006eda <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006ed8:	2300      	movs	r3, #0
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3718      	adds	r7, #24
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
 8006ee2:	bf00      	nop
 8006ee4:	40023800 	.word	0x40023800

08006ee8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b084      	sub	sp, #16
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d101      	bne.n	8006efc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	e0cc      	b.n	8007096 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006efc:	4b68      	ldr	r3, [pc, #416]	@ (80070a0 <HAL_RCC_ClockConfig+0x1b8>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f003 0307 	and.w	r3, r3, #7
 8006f04:	683a      	ldr	r2, [r7, #0]
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d90c      	bls.n	8006f24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f0a:	4b65      	ldr	r3, [pc, #404]	@ (80070a0 <HAL_RCC_ClockConfig+0x1b8>)
 8006f0c:	683a      	ldr	r2, [r7, #0]
 8006f0e:	b2d2      	uxtb	r2, r2
 8006f10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f12:	4b63      	ldr	r3, [pc, #396]	@ (80070a0 <HAL_RCC_ClockConfig+0x1b8>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f003 0307 	and.w	r3, r3, #7
 8006f1a:	683a      	ldr	r2, [r7, #0]
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d001      	beq.n	8006f24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006f20:	2301      	movs	r3, #1
 8006f22:	e0b8      	b.n	8007096 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f003 0302 	and.w	r3, r3, #2
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d020      	beq.n	8006f72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f003 0304 	and.w	r3, r3, #4
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d005      	beq.n	8006f48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006f3c:	4b59      	ldr	r3, [pc, #356]	@ (80070a4 <HAL_RCC_ClockConfig+0x1bc>)
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	4a58      	ldr	r2, [pc, #352]	@ (80070a4 <HAL_RCC_ClockConfig+0x1bc>)
 8006f42:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006f46:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f003 0308 	and.w	r3, r3, #8
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d005      	beq.n	8006f60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006f54:	4b53      	ldr	r3, [pc, #332]	@ (80070a4 <HAL_RCC_ClockConfig+0x1bc>)
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	4a52      	ldr	r2, [pc, #328]	@ (80070a4 <HAL_RCC_ClockConfig+0x1bc>)
 8006f5a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006f5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f60:	4b50      	ldr	r3, [pc, #320]	@ (80070a4 <HAL_RCC_ClockConfig+0x1bc>)
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	689b      	ldr	r3, [r3, #8]
 8006f6c:	494d      	ldr	r1, [pc, #308]	@ (80070a4 <HAL_RCC_ClockConfig+0x1bc>)
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f003 0301 	and.w	r3, r3, #1
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d044      	beq.n	8007008 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	2b01      	cmp	r3, #1
 8006f84:	d107      	bne.n	8006f96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f86:	4b47      	ldr	r3, [pc, #284]	@ (80070a4 <HAL_RCC_ClockConfig+0x1bc>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d119      	bne.n	8006fc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	e07f      	b.n	8007096 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	2b02      	cmp	r3, #2
 8006f9c:	d003      	beq.n	8006fa6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006fa2:	2b03      	cmp	r3, #3
 8006fa4:	d107      	bne.n	8006fb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fa6:	4b3f      	ldr	r3, [pc, #252]	@ (80070a4 <HAL_RCC_ClockConfig+0x1bc>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d109      	bne.n	8006fc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	e06f      	b.n	8007096 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006fb6:	4b3b      	ldr	r3, [pc, #236]	@ (80070a4 <HAL_RCC_ClockConfig+0x1bc>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f003 0302 	and.w	r3, r3, #2
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d101      	bne.n	8006fc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e067      	b.n	8007096 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006fc6:	4b37      	ldr	r3, [pc, #220]	@ (80070a4 <HAL_RCC_ClockConfig+0x1bc>)
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	f023 0203 	bic.w	r2, r3, #3
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	4934      	ldr	r1, [pc, #208]	@ (80070a4 <HAL_RCC_ClockConfig+0x1bc>)
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006fd8:	f7fb ff60 	bl	8002e9c <HAL_GetTick>
 8006fdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fde:	e00a      	b.n	8006ff6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006fe0:	f7fb ff5c 	bl	8002e9c <HAL_GetTick>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	1ad3      	subs	r3, r2, r3
 8006fea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d901      	bls.n	8006ff6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006ff2:	2303      	movs	r3, #3
 8006ff4:	e04f      	b.n	8007096 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ff6:	4b2b      	ldr	r3, [pc, #172]	@ (80070a4 <HAL_RCC_ClockConfig+0x1bc>)
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	f003 020c 	and.w	r2, r3, #12
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	429a      	cmp	r2, r3
 8007006:	d1eb      	bne.n	8006fe0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007008:	4b25      	ldr	r3, [pc, #148]	@ (80070a0 <HAL_RCC_ClockConfig+0x1b8>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 0307 	and.w	r3, r3, #7
 8007010:	683a      	ldr	r2, [r7, #0]
 8007012:	429a      	cmp	r2, r3
 8007014:	d20c      	bcs.n	8007030 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007016:	4b22      	ldr	r3, [pc, #136]	@ (80070a0 <HAL_RCC_ClockConfig+0x1b8>)
 8007018:	683a      	ldr	r2, [r7, #0]
 800701a:	b2d2      	uxtb	r2, r2
 800701c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800701e:	4b20      	ldr	r3, [pc, #128]	@ (80070a0 <HAL_RCC_ClockConfig+0x1b8>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f003 0307 	and.w	r3, r3, #7
 8007026:	683a      	ldr	r2, [r7, #0]
 8007028:	429a      	cmp	r2, r3
 800702a:	d001      	beq.n	8007030 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	e032      	b.n	8007096 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f003 0304 	and.w	r3, r3, #4
 8007038:	2b00      	cmp	r3, #0
 800703a:	d008      	beq.n	800704e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800703c:	4b19      	ldr	r3, [pc, #100]	@ (80070a4 <HAL_RCC_ClockConfig+0x1bc>)
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	4916      	ldr	r1, [pc, #88]	@ (80070a4 <HAL_RCC_ClockConfig+0x1bc>)
 800704a:	4313      	orrs	r3, r2
 800704c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f003 0308 	and.w	r3, r3, #8
 8007056:	2b00      	cmp	r3, #0
 8007058:	d009      	beq.n	800706e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800705a:	4b12      	ldr	r3, [pc, #72]	@ (80070a4 <HAL_RCC_ClockConfig+0x1bc>)
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	691b      	ldr	r3, [r3, #16]
 8007066:	00db      	lsls	r3, r3, #3
 8007068:	490e      	ldr	r1, [pc, #56]	@ (80070a4 <HAL_RCC_ClockConfig+0x1bc>)
 800706a:	4313      	orrs	r3, r2
 800706c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800706e:	f000 f821 	bl	80070b4 <HAL_RCC_GetSysClockFreq>
 8007072:	4602      	mov	r2, r0
 8007074:	4b0b      	ldr	r3, [pc, #44]	@ (80070a4 <HAL_RCC_ClockConfig+0x1bc>)
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	091b      	lsrs	r3, r3, #4
 800707a:	f003 030f 	and.w	r3, r3, #15
 800707e:	490a      	ldr	r1, [pc, #40]	@ (80070a8 <HAL_RCC_ClockConfig+0x1c0>)
 8007080:	5ccb      	ldrb	r3, [r1, r3]
 8007082:	fa22 f303 	lsr.w	r3, r2, r3
 8007086:	4a09      	ldr	r2, [pc, #36]	@ (80070ac <HAL_RCC_ClockConfig+0x1c4>)
 8007088:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800708a:	4b09      	ldr	r3, [pc, #36]	@ (80070b0 <HAL_RCC_ClockConfig+0x1c8>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4618      	mov	r0, r3
 8007090:	f7fb fec0 	bl	8002e14 <HAL_InitTick>

  return HAL_OK;
 8007094:	2300      	movs	r3, #0
}
 8007096:	4618      	mov	r0, r3
 8007098:	3710      	adds	r7, #16
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}
 800709e:	bf00      	nop
 80070a0:	40023c00 	.word	0x40023c00
 80070a4:	40023800 	.word	0x40023800
 80070a8:	0800f0a4 	.word	0x0800f0a4
 80070ac:	2000000c 	.word	0x2000000c
 80070b0:	2000001c 	.word	0x2000001c

080070b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80070b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80070b8:	b094      	sub	sp, #80	@ 0x50
 80070ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80070bc:	2300      	movs	r3, #0
 80070be:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80070c0:	2300      	movs	r3, #0
 80070c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80070c4:	2300      	movs	r3, #0
 80070c6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80070c8:	2300      	movs	r3, #0
 80070ca:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80070cc:	4b79      	ldr	r3, [pc, #484]	@ (80072b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	f003 030c 	and.w	r3, r3, #12
 80070d4:	2b08      	cmp	r3, #8
 80070d6:	d00d      	beq.n	80070f4 <HAL_RCC_GetSysClockFreq+0x40>
 80070d8:	2b08      	cmp	r3, #8
 80070da:	f200 80e1 	bhi.w	80072a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d002      	beq.n	80070e8 <HAL_RCC_GetSysClockFreq+0x34>
 80070e2:	2b04      	cmp	r3, #4
 80070e4:	d003      	beq.n	80070ee <HAL_RCC_GetSysClockFreq+0x3a>
 80070e6:	e0db      	b.n	80072a0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80070e8:	4b73      	ldr	r3, [pc, #460]	@ (80072b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80070ea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80070ec:	e0db      	b.n	80072a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80070ee:	4b73      	ldr	r3, [pc, #460]	@ (80072bc <HAL_RCC_GetSysClockFreq+0x208>)
 80070f0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80070f2:	e0d8      	b.n	80072a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80070f4:	4b6f      	ldr	r3, [pc, #444]	@ (80072b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80070fc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80070fe:	4b6d      	ldr	r3, [pc, #436]	@ (80072b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007106:	2b00      	cmp	r3, #0
 8007108:	d063      	beq.n	80071d2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800710a:	4b6a      	ldr	r3, [pc, #424]	@ (80072b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	099b      	lsrs	r3, r3, #6
 8007110:	2200      	movs	r2, #0
 8007112:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007114:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007118:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800711c:	633b      	str	r3, [r7, #48]	@ 0x30
 800711e:	2300      	movs	r3, #0
 8007120:	637b      	str	r3, [r7, #52]	@ 0x34
 8007122:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007126:	4622      	mov	r2, r4
 8007128:	462b      	mov	r3, r5
 800712a:	f04f 0000 	mov.w	r0, #0
 800712e:	f04f 0100 	mov.w	r1, #0
 8007132:	0159      	lsls	r1, r3, #5
 8007134:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007138:	0150      	lsls	r0, r2, #5
 800713a:	4602      	mov	r2, r0
 800713c:	460b      	mov	r3, r1
 800713e:	4621      	mov	r1, r4
 8007140:	1a51      	subs	r1, r2, r1
 8007142:	6139      	str	r1, [r7, #16]
 8007144:	4629      	mov	r1, r5
 8007146:	eb63 0301 	sbc.w	r3, r3, r1
 800714a:	617b      	str	r3, [r7, #20]
 800714c:	f04f 0200 	mov.w	r2, #0
 8007150:	f04f 0300 	mov.w	r3, #0
 8007154:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007158:	4659      	mov	r1, fp
 800715a:	018b      	lsls	r3, r1, #6
 800715c:	4651      	mov	r1, sl
 800715e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007162:	4651      	mov	r1, sl
 8007164:	018a      	lsls	r2, r1, #6
 8007166:	4651      	mov	r1, sl
 8007168:	ebb2 0801 	subs.w	r8, r2, r1
 800716c:	4659      	mov	r1, fp
 800716e:	eb63 0901 	sbc.w	r9, r3, r1
 8007172:	f04f 0200 	mov.w	r2, #0
 8007176:	f04f 0300 	mov.w	r3, #0
 800717a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800717e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007182:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007186:	4690      	mov	r8, r2
 8007188:	4699      	mov	r9, r3
 800718a:	4623      	mov	r3, r4
 800718c:	eb18 0303 	adds.w	r3, r8, r3
 8007190:	60bb      	str	r3, [r7, #8]
 8007192:	462b      	mov	r3, r5
 8007194:	eb49 0303 	adc.w	r3, r9, r3
 8007198:	60fb      	str	r3, [r7, #12]
 800719a:	f04f 0200 	mov.w	r2, #0
 800719e:	f04f 0300 	mov.w	r3, #0
 80071a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80071a6:	4629      	mov	r1, r5
 80071a8:	024b      	lsls	r3, r1, #9
 80071aa:	4621      	mov	r1, r4
 80071ac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80071b0:	4621      	mov	r1, r4
 80071b2:	024a      	lsls	r2, r1, #9
 80071b4:	4610      	mov	r0, r2
 80071b6:	4619      	mov	r1, r3
 80071b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071ba:	2200      	movs	r2, #0
 80071bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80071be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80071c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80071c4:	f7f9 fcf8 	bl	8000bb8 <__aeabi_uldivmod>
 80071c8:	4602      	mov	r2, r0
 80071ca:	460b      	mov	r3, r1
 80071cc:	4613      	mov	r3, r2
 80071ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80071d0:	e058      	b.n	8007284 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80071d2:	4b38      	ldr	r3, [pc, #224]	@ (80072b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	099b      	lsrs	r3, r3, #6
 80071d8:	2200      	movs	r2, #0
 80071da:	4618      	mov	r0, r3
 80071dc:	4611      	mov	r1, r2
 80071de:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80071e2:	623b      	str	r3, [r7, #32]
 80071e4:	2300      	movs	r3, #0
 80071e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80071e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80071ec:	4642      	mov	r2, r8
 80071ee:	464b      	mov	r3, r9
 80071f0:	f04f 0000 	mov.w	r0, #0
 80071f4:	f04f 0100 	mov.w	r1, #0
 80071f8:	0159      	lsls	r1, r3, #5
 80071fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80071fe:	0150      	lsls	r0, r2, #5
 8007200:	4602      	mov	r2, r0
 8007202:	460b      	mov	r3, r1
 8007204:	4641      	mov	r1, r8
 8007206:	ebb2 0a01 	subs.w	sl, r2, r1
 800720a:	4649      	mov	r1, r9
 800720c:	eb63 0b01 	sbc.w	fp, r3, r1
 8007210:	f04f 0200 	mov.w	r2, #0
 8007214:	f04f 0300 	mov.w	r3, #0
 8007218:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800721c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007220:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007224:	ebb2 040a 	subs.w	r4, r2, sl
 8007228:	eb63 050b 	sbc.w	r5, r3, fp
 800722c:	f04f 0200 	mov.w	r2, #0
 8007230:	f04f 0300 	mov.w	r3, #0
 8007234:	00eb      	lsls	r3, r5, #3
 8007236:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800723a:	00e2      	lsls	r2, r4, #3
 800723c:	4614      	mov	r4, r2
 800723e:	461d      	mov	r5, r3
 8007240:	4643      	mov	r3, r8
 8007242:	18e3      	adds	r3, r4, r3
 8007244:	603b      	str	r3, [r7, #0]
 8007246:	464b      	mov	r3, r9
 8007248:	eb45 0303 	adc.w	r3, r5, r3
 800724c:	607b      	str	r3, [r7, #4]
 800724e:	f04f 0200 	mov.w	r2, #0
 8007252:	f04f 0300 	mov.w	r3, #0
 8007256:	e9d7 4500 	ldrd	r4, r5, [r7]
 800725a:	4629      	mov	r1, r5
 800725c:	028b      	lsls	r3, r1, #10
 800725e:	4621      	mov	r1, r4
 8007260:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007264:	4621      	mov	r1, r4
 8007266:	028a      	lsls	r2, r1, #10
 8007268:	4610      	mov	r0, r2
 800726a:	4619      	mov	r1, r3
 800726c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800726e:	2200      	movs	r2, #0
 8007270:	61bb      	str	r3, [r7, #24]
 8007272:	61fa      	str	r2, [r7, #28]
 8007274:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007278:	f7f9 fc9e 	bl	8000bb8 <__aeabi_uldivmod>
 800727c:	4602      	mov	r2, r0
 800727e:	460b      	mov	r3, r1
 8007280:	4613      	mov	r3, r2
 8007282:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007284:	4b0b      	ldr	r3, [pc, #44]	@ (80072b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	0c1b      	lsrs	r3, r3, #16
 800728a:	f003 0303 	and.w	r3, r3, #3
 800728e:	3301      	adds	r3, #1
 8007290:	005b      	lsls	r3, r3, #1
 8007292:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007294:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007296:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007298:	fbb2 f3f3 	udiv	r3, r2, r3
 800729c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800729e:	e002      	b.n	80072a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80072a0:	4b05      	ldr	r3, [pc, #20]	@ (80072b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80072a2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80072a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80072a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3750      	adds	r7, #80	@ 0x50
 80072ac:	46bd      	mov	sp, r7
 80072ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80072b2:	bf00      	nop
 80072b4:	40023800 	.word	0x40023800
 80072b8:	00f42400 	.word	0x00f42400
 80072bc:	007a1200 	.word	0x007a1200

080072c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80072c0:	b480      	push	{r7}
 80072c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80072c4:	4b03      	ldr	r3, [pc, #12]	@ (80072d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80072c6:	681b      	ldr	r3, [r3, #0]
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr
 80072d2:	bf00      	nop
 80072d4:	2000000c 	.word	0x2000000c

080072d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80072dc:	f7ff fff0 	bl	80072c0 <HAL_RCC_GetHCLKFreq>
 80072e0:	4602      	mov	r2, r0
 80072e2:	4b05      	ldr	r3, [pc, #20]	@ (80072f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	0a9b      	lsrs	r3, r3, #10
 80072e8:	f003 0307 	and.w	r3, r3, #7
 80072ec:	4903      	ldr	r1, [pc, #12]	@ (80072fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80072ee:	5ccb      	ldrb	r3, [r1, r3]
 80072f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	bd80      	pop	{r7, pc}
 80072f8:	40023800 	.word	0x40023800
 80072fc:	0800f0b4 	.word	0x0800f0b4

08007300 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b086      	sub	sp, #24
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007308:	2300      	movs	r3, #0
 800730a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800730c:	2300      	movs	r3, #0
 800730e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f003 0301 	and.w	r3, r3, #1
 8007318:	2b00      	cmp	r3, #0
 800731a:	d105      	bne.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007324:	2b00      	cmp	r3, #0
 8007326:	d038      	beq.n	800739a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007328:	4b68      	ldr	r3, [pc, #416]	@ (80074cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800732a:	2200      	movs	r2, #0
 800732c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800732e:	f7fb fdb5 	bl	8002e9c <HAL_GetTick>
 8007332:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007334:	e008      	b.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007336:	f7fb fdb1 	bl	8002e9c <HAL_GetTick>
 800733a:	4602      	mov	r2, r0
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	1ad3      	subs	r3, r2, r3
 8007340:	2b02      	cmp	r3, #2
 8007342:	d901      	bls.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007344:	2303      	movs	r3, #3
 8007346:	e0bd      	b.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007348:	4b61      	ldr	r3, [pc, #388]	@ (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007350:	2b00      	cmp	r3, #0
 8007352:	d1f0      	bne.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	685a      	ldr	r2, [r3, #4]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	019b      	lsls	r3, r3, #6
 800735e:	431a      	orrs	r2, r3
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	68db      	ldr	r3, [r3, #12]
 8007364:	071b      	lsls	r3, r3, #28
 8007366:	495a      	ldr	r1, [pc, #360]	@ (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007368:	4313      	orrs	r3, r2
 800736a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800736e:	4b57      	ldr	r3, [pc, #348]	@ (80074cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007370:	2201      	movs	r2, #1
 8007372:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007374:	f7fb fd92 	bl	8002e9c <HAL_GetTick>
 8007378:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800737a:	e008      	b.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800737c:	f7fb fd8e 	bl	8002e9c <HAL_GetTick>
 8007380:	4602      	mov	r2, r0
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	1ad3      	subs	r3, r2, r3
 8007386:	2b02      	cmp	r3, #2
 8007388:	d901      	bls.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800738a:	2303      	movs	r3, #3
 800738c:	e09a      	b.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800738e:	4b50      	ldr	r3, [pc, #320]	@ (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007396:	2b00      	cmp	r3, #0
 8007398:	d0f0      	beq.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f003 0302 	and.w	r3, r3, #2
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	f000 8083 	beq.w	80074ae <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80073a8:	2300      	movs	r3, #0
 80073aa:	60fb      	str	r3, [r7, #12]
 80073ac:	4b48      	ldr	r3, [pc, #288]	@ (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073b0:	4a47      	ldr	r2, [pc, #284]	@ (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80073b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80073b8:	4b45      	ldr	r3, [pc, #276]	@ (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073c0:	60fb      	str	r3, [r7, #12]
 80073c2:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80073c4:	4b43      	ldr	r3, [pc, #268]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a42      	ldr	r2, [pc, #264]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80073ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80073ce:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80073d0:	f7fb fd64 	bl	8002e9c <HAL_GetTick>
 80073d4:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80073d6:	e008      	b.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073d8:	f7fb fd60 	bl	8002e9c <HAL_GetTick>
 80073dc:	4602      	mov	r2, r0
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	1ad3      	subs	r3, r2, r3
 80073e2:	2b02      	cmp	r3, #2
 80073e4:	d901      	bls.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80073e6:	2303      	movs	r3, #3
 80073e8:	e06c      	b.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80073ea:	4b3a      	ldr	r3, [pc, #232]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d0f0      	beq.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80073f6:	4b36      	ldr	r3, [pc, #216]	@ (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073fe:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d02f      	beq.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	691b      	ldr	r3, [r3, #16]
 800740a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800740e:	693a      	ldr	r2, [r7, #16]
 8007410:	429a      	cmp	r2, r3
 8007412:	d028      	beq.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007414:	4b2e      	ldr	r3, [pc, #184]	@ (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007416:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007418:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800741c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800741e:	4b2e      	ldr	r3, [pc, #184]	@ (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007420:	2201      	movs	r2, #1
 8007422:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007424:	4b2c      	ldr	r3, [pc, #176]	@ (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007426:	2200      	movs	r2, #0
 8007428:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800742a:	4a29      	ldr	r2, [pc, #164]	@ (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007430:	4b27      	ldr	r3, [pc, #156]	@ (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007432:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007434:	f003 0301 	and.w	r3, r3, #1
 8007438:	2b01      	cmp	r3, #1
 800743a:	d114      	bne.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800743c:	f7fb fd2e 	bl	8002e9c <HAL_GetTick>
 8007440:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007442:	e00a      	b.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007444:	f7fb fd2a 	bl	8002e9c <HAL_GetTick>
 8007448:	4602      	mov	r2, r0
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	1ad3      	subs	r3, r2, r3
 800744e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007452:	4293      	cmp	r3, r2
 8007454:	d901      	bls.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8007456:	2303      	movs	r3, #3
 8007458:	e034      	b.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800745a:	4b1d      	ldr	r3, [pc, #116]	@ (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800745c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800745e:	f003 0302 	and.w	r3, r3, #2
 8007462:	2b00      	cmp	r3, #0
 8007464:	d0ee      	beq.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	691b      	ldr	r3, [r3, #16]
 800746a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800746e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007472:	d10d      	bne.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8007474:	4b16      	ldr	r3, [pc, #88]	@ (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	691b      	ldr	r3, [r3, #16]
 8007480:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007484:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007488:	4911      	ldr	r1, [pc, #68]	@ (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800748a:	4313      	orrs	r3, r2
 800748c:	608b      	str	r3, [r1, #8]
 800748e:	e005      	b.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8007490:	4b0f      	ldr	r3, [pc, #60]	@ (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	4a0e      	ldr	r2, [pc, #56]	@ (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007496:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800749a:	6093      	str	r3, [r2, #8]
 800749c:	4b0c      	ldr	r3, [pc, #48]	@ (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800749e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	691b      	ldr	r3, [r3, #16]
 80074a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074a8:	4909      	ldr	r1, [pc, #36]	@ (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074aa:	4313      	orrs	r3, r2
 80074ac:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f003 0308 	and.w	r3, r3, #8
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d003      	beq.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	7d1a      	ldrb	r2, [r3, #20]
 80074be:	4b07      	ldr	r3, [pc, #28]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80074c0:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80074c2:	2300      	movs	r3, #0
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3718      	adds	r7, #24
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}
 80074cc:	42470068 	.word	0x42470068
 80074d0:	40023800 	.word	0x40023800
 80074d4:	40007000 	.word	0x40007000
 80074d8:	42470e40 	.word	0x42470e40
 80074dc:	424711e0 	.word	0x424711e0

080074e0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b087      	sub	sp, #28
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80074e8:	2300      	movs	r3, #0
 80074ea:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80074ec:	2300      	movs	r3, #0
 80074ee:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80074f0:	2300      	movs	r3, #0
 80074f2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80074f4:	2300      	movs	r3, #0
 80074f6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	d141      	bne.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80074fe:	4b25      	ldr	r3, [pc, #148]	@ (8007594 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007506:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d006      	beq.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007514:	d131      	bne.n	800757a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007516:	4b20      	ldr	r3, [pc, #128]	@ (8007598 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007518:	617b      	str	r3, [r7, #20]
          break;
 800751a:	e031      	b.n	8007580 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800751c:	4b1d      	ldr	r3, [pc, #116]	@ (8007594 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007524:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007528:	d109      	bne.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800752a:	4b1a      	ldr	r3, [pc, #104]	@ (8007594 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800752c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007530:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007534:	4a19      	ldr	r2, [pc, #100]	@ (800759c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8007536:	fbb2 f3f3 	udiv	r3, r2, r3
 800753a:	613b      	str	r3, [r7, #16]
 800753c:	e008      	b.n	8007550 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800753e:	4b15      	ldr	r3, [pc, #84]	@ (8007594 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007540:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007544:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007548:	4a15      	ldr	r2, [pc, #84]	@ (80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 800754a:	fbb2 f3f3 	udiv	r3, r2, r3
 800754e:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007550:	4b10      	ldr	r3, [pc, #64]	@ (8007594 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007552:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007556:	099b      	lsrs	r3, r3, #6
 8007558:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	fb02 f303 	mul.w	r3, r2, r3
 8007562:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007564:	4b0b      	ldr	r3, [pc, #44]	@ (8007594 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007566:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800756a:	0f1b      	lsrs	r3, r3, #28
 800756c:	f003 0307 	and.w	r3, r3, #7
 8007570:	68ba      	ldr	r2, [r7, #8]
 8007572:	fbb2 f3f3 	udiv	r3, r2, r3
 8007576:	617b      	str	r3, [r7, #20]
          break;
 8007578:	e002      	b.n	8007580 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 800757a:	2300      	movs	r3, #0
 800757c:	617b      	str	r3, [r7, #20]
          break;
 800757e:	bf00      	nop
        }
      }
      break;
 8007580:	e000      	b.n	8007584 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
    default:
    {
      break;
 8007582:	bf00      	nop
    }
  }
  return frequency;
 8007584:	697b      	ldr	r3, [r7, #20]
}
 8007586:	4618      	mov	r0, r3
 8007588:	371c      	adds	r7, #28
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr
 8007592:	bf00      	nop
 8007594:	40023800 	.word	0x40023800
 8007598:	00bb8000 	.word	0x00bb8000
 800759c:	007a1200 	.word	0x007a1200
 80075a0:	00f42400 	.word	0x00f42400

080075a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b082      	sub	sp, #8
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d101      	bne.n	80075b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	e07b      	b.n	80076ae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d108      	bne.n	80075d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80075c6:	d009      	beq.n	80075dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	61da      	str	r2, [r3, #28]
 80075ce:	e005      	b.n	80075dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80075e8:	b2db      	uxtb	r3, r3
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d106      	bne.n	80075fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2200      	movs	r2, #0
 80075f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f7fa f90e 	bl	8001818 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2202      	movs	r2, #2
 8007600:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007612:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	689b      	ldr	r3, [r3, #8]
 8007620:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007624:	431a      	orrs	r2, r3
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	68db      	ldr	r3, [r3, #12]
 800762a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800762e:	431a      	orrs	r2, r3
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	691b      	ldr	r3, [r3, #16]
 8007634:	f003 0302 	and.w	r3, r3, #2
 8007638:	431a      	orrs	r2, r3
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	695b      	ldr	r3, [r3, #20]
 800763e:	f003 0301 	and.w	r3, r3, #1
 8007642:	431a      	orrs	r2, r3
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	699b      	ldr	r3, [r3, #24]
 8007648:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800764c:	431a      	orrs	r2, r3
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	69db      	ldr	r3, [r3, #28]
 8007652:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007656:	431a      	orrs	r2, r3
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6a1b      	ldr	r3, [r3, #32]
 800765c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007660:	ea42 0103 	orr.w	r1, r2, r3
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007668:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	430a      	orrs	r2, r1
 8007672:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	699b      	ldr	r3, [r3, #24]
 8007678:	0c1b      	lsrs	r3, r3, #16
 800767a:	f003 0104 	and.w	r1, r3, #4
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007682:	f003 0210 	and.w	r2, r3, #16
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	430a      	orrs	r2, r1
 800768c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	69da      	ldr	r2, [r3, #28]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800769c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2200      	movs	r2, #0
 80076a2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2201      	movs	r2, #1
 80076a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80076ac:	2300      	movs	r3, #0
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3708      	adds	r7, #8
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}

080076b6 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076b6:	b580      	push	{r7, lr}
 80076b8:	b088      	sub	sp, #32
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	60f8      	str	r0, [r7, #12]
 80076be:	60b9      	str	r1, [r7, #8]
 80076c0:	603b      	str	r3, [r7, #0]
 80076c2:	4613      	mov	r3, r2
 80076c4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80076c6:	f7fb fbe9 	bl	8002e9c <HAL_GetTick>
 80076ca:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80076cc:	88fb      	ldrh	r3, [r7, #6]
 80076ce:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d001      	beq.n	80076e0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80076dc:	2302      	movs	r3, #2
 80076de:	e12a      	b.n	8007936 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d002      	beq.n	80076ec <HAL_SPI_Transmit+0x36>
 80076e6:	88fb      	ldrh	r3, [r7, #6]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d101      	bne.n	80076f0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80076ec:	2301      	movs	r3, #1
 80076ee:	e122      	b.n	8007936 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80076f6:	2b01      	cmp	r3, #1
 80076f8:	d101      	bne.n	80076fe <HAL_SPI_Transmit+0x48>
 80076fa:	2302      	movs	r3, #2
 80076fc:	e11b      	b.n	8007936 <HAL_SPI_Transmit+0x280>
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2201      	movs	r2, #1
 8007702:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2203      	movs	r2, #3
 800770a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2200      	movs	r2, #0
 8007712:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	68ba      	ldr	r2, [r7, #8]
 8007718:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	88fa      	ldrh	r2, [r7, #6]
 800771e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	88fa      	ldrh	r2, [r7, #6]
 8007724:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2200      	movs	r2, #0
 800772a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2200      	movs	r2, #0
 8007730:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2200      	movs	r2, #0
 8007736:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2200      	movs	r2, #0
 800773c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2200      	movs	r2, #0
 8007742:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800774c:	d10f      	bne.n	800776e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800775c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800776c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007778:	2b40      	cmp	r3, #64	@ 0x40
 800777a:	d007      	beq.n	800778c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	681a      	ldr	r2, [r3, #0]
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800778a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	68db      	ldr	r3, [r3, #12]
 8007790:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007794:	d152      	bne.n	800783c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d002      	beq.n	80077a4 <HAL_SPI_Transmit+0xee>
 800779e:	8b7b      	ldrh	r3, [r7, #26]
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d145      	bne.n	8007830 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077a8:	881a      	ldrh	r2, [r3, #0]
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077b4:	1c9a      	adds	r2, r3, #2
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80077be:	b29b      	uxth	r3, r3
 80077c0:	3b01      	subs	r3, #1
 80077c2:	b29a      	uxth	r2, r3
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80077c8:	e032      	b.n	8007830 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	f003 0302 	and.w	r3, r3, #2
 80077d4:	2b02      	cmp	r3, #2
 80077d6:	d112      	bne.n	80077fe <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077dc:	881a      	ldrh	r2, [r3, #0]
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077e8:	1c9a      	adds	r2, r3, #2
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	3b01      	subs	r3, #1
 80077f6:	b29a      	uxth	r2, r3
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	86da      	strh	r2, [r3, #54]	@ 0x36
 80077fc:	e018      	b.n	8007830 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80077fe:	f7fb fb4d 	bl	8002e9c <HAL_GetTick>
 8007802:	4602      	mov	r2, r0
 8007804:	69fb      	ldr	r3, [r7, #28]
 8007806:	1ad3      	subs	r3, r2, r3
 8007808:	683a      	ldr	r2, [r7, #0]
 800780a:	429a      	cmp	r2, r3
 800780c:	d803      	bhi.n	8007816 <HAL_SPI_Transmit+0x160>
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007814:	d102      	bne.n	800781c <HAL_SPI_Transmit+0x166>
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d109      	bne.n	8007830 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2201      	movs	r2, #1
 8007820:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2200      	movs	r2, #0
 8007828:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800782c:	2303      	movs	r3, #3
 800782e:	e082      	b.n	8007936 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007834:	b29b      	uxth	r3, r3
 8007836:	2b00      	cmp	r3, #0
 8007838:	d1c7      	bne.n	80077ca <HAL_SPI_Transmit+0x114>
 800783a:	e053      	b.n	80078e4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d002      	beq.n	800784a <HAL_SPI_Transmit+0x194>
 8007844:	8b7b      	ldrh	r3, [r7, #26]
 8007846:	2b01      	cmp	r3, #1
 8007848:	d147      	bne.n	80078da <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	330c      	adds	r3, #12
 8007854:	7812      	ldrb	r2, [r2, #0]
 8007856:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800785c:	1c5a      	adds	r2, r3, #1
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007866:	b29b      	uxth	r3, r3
 8007868:	3b01      	subs	r3, #1
 800786a:	b29a      	uxth	r2, r3
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007870:	e033      	b.n	80078da <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	689b      	ldr	r3, [r3, #8]
 8007878:	f003 0302 	and.w	r3, r3, #2
 800787c:	2b02      	cmp	r3, #2
 800787e:	d113      	bne.n	80078a8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	330c      	adds	r3, #12
 800788a:	7812      	ldrb	r2, [r2, #0]
 800788c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007892:	1c5a      	adds	r2, r3, #1
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800789c:	b29b      	uxth	r3, r3
 800789e:	3b01      	subs	r3, #1
 80078a0:	b29a      	uxth	r2, r3
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80078a6:	e018      	b.n	80078da <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80078a8:	f7fb faf8 	bl	8002e9c <HAL_GetTick>
 80078ac:	4602      	mov	r2, r0
 80078ae:	69fb      	ldr	r3, [r7, #28]
 80078b0:	1ad3      	subs	r3, r2, r3
 80078b2:	683a      	ldr	r2, [r7, #0]
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d803      	bhi.n	80078c0 <HAL_SPI_Transmit+0x20a>
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078be:	d102      	bne.n	80078c6 <HAL_SPI_Transmit+0x210>
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d109      	bne.n	80078da <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2201      	movs	r2, #1
 80078ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2200      	movs	r2, #0
 80078d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80078d6:	2303      	movs	r3, #3
 80078d8:	e02d      	b.n	8007936 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80078de:	b29b      	uxth	r3, r3
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d1c6      	bne.n	8007872 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80078e4:	69fa      	ldr	r2, [r7, #28]
 80078e6:	6839      	ldr	r1, [r7, #0]
 80078e8:	68f8      	ldr	r0, [r7, #12]
 80078ea:	f000 fced 	bl	80082c8 <SPI_EndRxTxTransaction>
 80078ee:	4603      	mov	r3, r0
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d002      	beq.n	80078fa <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2220      	movs	r2, #32
 80078f8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	689b      	ldr	r3, [r3, #8]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d10a      	bne.n	8007918 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007902:	2300      	movs	r3, #0
 8007904:	617b      	str	r3, [r7, #20]
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	68db      	ldr	r3, [r3, #12]
 800790c:	617b      	str	r3, [r7, #20]
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	689b      	ldr	r3, [r3, #8]
 8007914:	617b      	str	r3, [r7, #20]
 8007916:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2201      	movs	r2, #1
 800791c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2200      	movs	r2, #0
 8007924:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800792c:	2b00      	cmp	r3, #0
 800792e:	d001      	beq.n	8007934 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8007930:	2301      	movs	r3, #1
 8007932:	e000      	b.n	8007936 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8007934:	2300      	movs	r3, #0
  }
}
 8007936:	4618      	mov	r0, r3
 8007938:	3720      	adds	r7, #32
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}

0800793e <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800793e:	b580      	push	{r7, lr}
 8007940:	b088      	sub	sp, #32
 8007942:	af02      	add	r7, sp, #8
 8007944:	60f8      	str	r0, [r7, #12]
 8007946:	60b9      	str	r1, [r7, #8]
 8007948:	603b      	str	r3, [r7, #0]
 800794a:	4613      	mov	r3, r2
 800794c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007954:	b2db      	uxtb	r3, r3
 8007956:	2b01      	cmp	r3, #1
 8007958:	d001      	beq.n	800795e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800795a:	2302      	movs	r3, #2
 800795c:	e104      	b.n	8007b68 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d002      	beq.n	800796a <HAL_SPI_Receive+0x2c>
 8007964:	88fb      	ldrh	r3, [r7, #6]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d101      	bne.n	800796e <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 800796a:	2301      	movs	r3, #1
 800796c:	e0fc      	b.n	8007b68 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007976:	d112      	bne.n	800799e <HAL_SPI_Receive+0x60>
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	689b      	ldr	r3, [r3, #8]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d10e      	bne.n	800799e <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2204      	movs	r2, #4
 8007984:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007988:	88fa      	ldrh	r2, [r7, #6]
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	9300      	str	r3, [sp, #0]
 800798e:	4613      	mov	r3, r2
 8007990:	68ba      	ldr	r2, [r7, #8]
 8007992:	68b9      	ldr	r1, [r7, #8]
 8007994:	68f8      	ldr	r0, [r7, #12]
 8007996:	f000 f8eb 	bl	8007b70 <HAL_SPI_TransmitReceive>
 800799a:	4603      	mov	r3, r0
 800799c:	e0e4      	b.n	8007b68 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800799e:	f7fb fa7d 	bl	8002e9c <HAL_GetTick>
 80079a2:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	d101      	bne.n	80079b2 <HAL_SPI_Receive+0x74>
 80079ae:	2302      	movs	r3, #2
 80079b0:	e0da      	b.n	8007b68 <HAL_SPI_Receive+0x22a>
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2201      	movs	r2, #1
 80079b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2204      	movs	r2, #4
 80079be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2200      	movs	r2, #0
 80079c6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	68ba      	ldr	r2, [r7, #8]
 80079cc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	88fa      	ldrh	r2, [r7, #6]
 80079d2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	88fa      	ldrh	r2, [r7, #6]
 80079d8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2200      	movs	r2, #0
 80079de:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2200      	movs	r2, #0
 80079e4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2200      	movs	r2, #0
 80079ea:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2200      	movs	r2, #0
 80079f0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	2200      	movs	r2, #0
 80079f6:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a00:	d10f      	bne.n	8007a22 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007a10:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	681a      	ldr	r2, [r3, #0]
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007a20:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a2c:	2b40      	cmp	r3, #64	@ 0x40
 8007a2e:	d007      	beq.n	8007a40 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	681a      	ldr	r2, [r3, #0]
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007a3e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	68db      	ldr	r3, [r3, #12]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d170      	bne.n	8007b2a <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007a48:	e035      	b.n	8007ab6 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	689b      	ldr	r3, [r3, #8]
 8007a50:	f003 0301 	and.w	r3, r3, #1
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	d115      	bne.n	8007a84 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f103 020c 	add.w	r2, r3, #12
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a64:	7812      	ldrb	r2, [r2, #0]
 8007a66:	b2d2      	uxtb	r2, r2
 8007a68:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a6e:	1c5a      	adds	r2, r3, #1
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	3b01      	subs	r3, #1
 8007a7c:	b29a      	uxth	r2, r3
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007a82:	e018      	b.n	8007ab6 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a84:	f7fb fa0a 	bl	8002e9c <HAL_GetTick>
 8007a88:	4602      	mov	r2, r0
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	1ad3      	subs	r3, r2, r3
 8007a8e:	683a      	ldr	r2, [r7, #0]
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d803      	bhi.n	8007a9c <HAL_SPI_Receive+0x15e>
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a9a:	d102      	bne.n	8007aa2 <HAL_SPI_Receive+0x164>
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d109      	bne.n	8007ab6 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2201      	movs	r2, #1
 8007aa6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2200      	movs	r2, #0
 8007aae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007ab2:	2303      	movs	r3, #3
 8007ab4:	e058      	b.n	8007b68 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d1c4      	bne.n	8007a4a <HAL_SPI_Receive+0x10c>
 8007ac0:	e038      	b.n	8007b34 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	689b      	ldr	r3, [r3, #8]
 8007ac8:	f003 0301 	and.w	r3, r3, #1
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d113      	bne.n	8007af8 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	68da      	ldr	r2, [r3, #12]
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ada:	b292      	uxth	r2, r2
 8007adc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ae2:	1c9a      	adds	r2, r3, #2
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007aec:	b29b      	uxth	r3, r3
 8007aee:	3b01      	subs	r3, #1
 8007af0:	b29a      	uxth	r2, r3
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007af6:	e018      	b.n	8007b2a <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007af8:	f7fb f9d0 	bl	8002e9c <HAL_GetTick>
 8007afc:	4602      	mov	r2, r0
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	1ad3      	subs	r3, r2, r3
 8007b02:	683a      	ldr	r2, [r7, #0]
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d803      	bhi.n	8007b10 <HAL_SPI_Receive+0x1d2>
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b0e:	d102      	bne.n	8007b16 <HAL_SPI_Receive+0x1d8>
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d109      	bne.n	8007b2a <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2201      	movs	r2, #1
 8007b1a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2200      	movs	r2, #0
 8007b22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007b26:	2303      	movs	r3, #3
 8007b28:	e01e      	b.n	8007b68 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d1c6      	bne.n	8007ac2 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b34:	697a      	ldr	r2, [r7, #20]
 8007b36:	6839      	ldr	r1, [r7, #0]
 8007b38:	68f8      	ldr	r0, [r7, #12]
 8007b3a:	f000 fb5f 	bl	80081fc <SPI_EndRxTransaction>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d002      	beq.n	8007b4a <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2220      	movs	r2, #32
 8007b48:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2200      	movs	r2, #0
 8007b56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d001      	beq.n	8007b66 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8007b62:	2301      	movs	r3, #1
 8007b64:	e000      	b.n	8007b68 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8007b66:	2300      	movs	r3, #0
  }
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3718      	adds	r7, #24
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b08a      	sub	sp, #40	@ 0x28
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	60f8      	str	r0, [r7, #12]
 8007b78:	60b9      	str	r1, [r7, #8]
 8007b7a:	607a      	str	r2, [r7, #4]
 8007b7c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007b82:	f7fb f98b 	bl	8002e9c <HAL_GetTick>
 8007b86:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007b8e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007b96:	887b      	ldrh	r3, [r7, #2]
 8007b98:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007b9a:	7ffb      	ldrb	r3, [r7, #31]
 8007b9c:	2b01      	cmp	r3, #1
 8007b9e:	d00c      	beq.n	8007bba <HAL_SPI_TransmitReceive+0x4a>
 8007ba0:	69bb      	ldr	r3, [r7, #24]
 8007ba2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007ba6:	d106      	bne.n	8007bb6 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d102      	bne.n	8007bb6 <HAL_SPI_TransmitReceive+0x46>
 8007bb0:	7ffb      	ldrb	r3, [r7, #31]
 8007bb2:	2b04      	cmp	r3, #4
 8007bb4:	d001      	beq.n	8007bba <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8007bb6:	2302      	movs	r3, #2
 8007bb8:	e17f      	b.n	8007eba <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d005      	beq.n	8007bcc <HAL_SPI_TransmitReceive+0x5c>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d002      	beq.n	8007bcc <HAL_SPI_TransmitReceive+0x5c>
 8007bc6:	887b      	ldrh	r3, [r7, #2]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d101      	bne.n	8007bd0 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8007bcc:	2301      	movs	r3, #1
 8007bce:	e174      	b.n	8007eba <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007bd6:	2b01      	cmp	r3, #1
 8007bd8:	d101      	bne.n	8007bde <HAL_SPI_TransmitReceive+0x6e>
 8007bda:	2302      	movs	r3, #2
 8007bdc:	e16d      	b.n	8007eba <HAL_SPI_TransmitReceive+0x34a>
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2201      	movs	r2, #1
 8007be2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007bec:	b2db      	uxtb	r3, r3
 8007bee:	2b04      	cmp	r3, #4
 8007bf0:	d003      	beq.n	8007bfa <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2205      	movs	r2, #5
 8007bf6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	687a      	ldr	r2, [r7, #4]
 8007c04:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	887a      	ldrh	r2, [r7, #2]
 8007c0a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	887a      	ldrh	r2, [r7, #2]
 8007c10:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	68ba      	ldr	r2, [r7, #8]
 8007c16:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	887a      	ldrh	r2, [r7, #2]
 8007c1c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	887a      	ldrh	r2, [r7, #2]
 8007c22:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2200      	movs	r2, #0
 8007c28:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c3a:	2b40      	cmp	r3, #64	@ 0x40
 8007c3c:	d007      	beq.n	8007c4e <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007c4c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	68db      	ldr	r3, [r3, #12]
 8007c52:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c56:	d17e      	bne.n	8007d56 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d002      	beq.n	8007c66 <HAL_SPI_TransmitReceive+0xf6>
 8007c60:	8afb      	ldrh	r3, [r7, #22]
 8007c62:	2b01      	cmp	r3, #1
 8007c64:	d16c      	bne.n	8007d40 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c6a:	881a      	ldrh	r2, [r3, #0]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c76:	1c9a      	adds	r2, r3, #2
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	3b01      	subs	r3, #1
 8007c84:	b29a      	uxth	r2, r3
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c8a:	e059      	b.n	8007d40 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	689b      	ldr	r3, [r3, #8]
 8007c92:	f003 0302 	and.w	r3, r3, #2
 8007c96:	2b02      	cmp	r3, #2
 8007c98:	d11b      	bne.n	8007cd2 <HAL_SPI_TransmitReceive+0x162>
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d016      	beq.n	8007cd2 <HAL_SPI_TransmitReceive+0x162>
 8007ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ca6:	2b01      	cmp	r3, #1
 8007ca8:	d113      	bne.n	8007cd2 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cae:	881a      	ldrh	r2, [r3, #0]
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cba:	1c9a      	adds	r2, r3, #2
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	3b01      	subs	r3, #1
 8007cc8:	b29a      	uxth	r2, r3
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	689b      	ldr	r3, [r3, #8]
 8007cd8:	f003 0301 	and.w	r3, r3, #1
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d119      	bne.n	8007d14 <HAL_SPI_TransmitReceive+0x1a4>
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d014      	beq.n	8007d14 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	68da      	ldr	r2, [r3, #12]
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cf4:	b292      	uxth	r2, r2
 8007cf6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cfc:	1c9a      	adds	r2, r3, #2
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	3b01      	subs	r3, #1
 8007d0a:	b29a      	uxth	r2, r3
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007d10:	2301      	movs	r3, #1
 8007d12:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007d14:	f7fb f8c2 	bl	8002e9c <HAL_GetTick>
 8007d18:	4602      	mov	r2, r0
 8007d1a:	6a3b      	ldr	r3, [r7, #32]
 8007d1c:	1ad3      	subs	r3, r2, r3
 8007d1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d80d      	bhi.n	8007d40 <HAL_SPI_TransmitReceive+0x1d0>
 8007d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d2a:	d009      	beq.n	8007d40 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2200      	movs	r2, #0
 8007d38:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007d3c:	2303      	movs	r3, #3
 8007d3e:	e0bc      	b.n	8007eba <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d1a0      	bne.n	8007c8c <HAL_SPI_TransmitReceive+0x11c>
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d4e:	b29b      	uxth	r3, r3
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d19b      	bne.n	8007c8c <HAL_SPI_TransmitReceive+0x11c>
 8007d54:	e082      	b.n	8007e5c <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d002      	beq.n	8007d64 <HAL_SPI_TransmitReceive+0x1f4>
 8007d5e:	8afb      	ldrh	r3, [r7, #22]
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	d171      	bne.n	8007e48 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	330c      	adds	r3, #12
 8007d6e:	7812      	ldrb	r2, [r2, #0]
 8007d70:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d76:	1c5a      	adds	r2, r3, #1
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	3b01      	subs	r3, #1
 8007d84:	b29a      	uxth	r2, r3
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d8a:	e05d      	b.n	8007e48 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	689b      	ldr	r3, [r3, #8]
 8007d92:	f003 0302 	and.w	r3, r3, #2
 8007d96:	2b02      	cmp	r3, #2
 8007d98:	d11c      	bne.n	8007dd4 <HAL_SPI_TransmitReceive+0x264>
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d9e:	b29b      	uxth	r3, r3
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d017      	beq.n	8007dd4 <HAL_SPI_TransmitReceive+0x264>
 8007da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	d114      	bne.n	8007dd4 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	330c      	adds	r3, #12
 8007db4:	7812      	ldrb	r2, [r2, #0]
 8007db6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dbc:	1c5a      	adds	r2, r3, #1
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	3b01      	subs	r3, #1
 8007dca:	b29a      	uxth	r2, r3
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	689b      	ldr	r3, [r3, #8]
 8007dda:	f003 0301 	and.w	r3, r3, #1
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	d119      	bne.n	8007e16 <HAL_SPI_TransmitReceive+0x2a6>
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007de6:	b29b      	uxth	r3, r3
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d014      	beq.n	8007e16 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	68da      	ldr	r2, [r3, #12]
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007df6:	b2d2      	uxtb	r2, r2
 8007df8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dfe:	1c5a      	adds	r2, r3, #1
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e08:	b29b      	uxth	r3, r3
 8007e0a:	3b01      	subs	r3, #1
 8007e0c:	b29a      	uxth	r2, r3
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007e12:	2301      	movs	r3, #1
 8007e14:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007e16:	f7fb f841 	bl	8002e9c <HAL_GetTick>
 8007e1a:	4602      	mov	r2, r0
 8007e1c:	6a3b      	ldr	r3, [r7, #32]
 8007e1e:	1ad3      	subs	r3, r2, r3
 8007e20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e22:	429a      	cmp	r2, r3
 8007e24:	d803      	bhi.n	8007e2e <HAL_SPI_TransmitReceive+0x2be>
 8007e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e2c:	d102      	bne.n	8007e34 <HAL_SPI_TransmitReceive+0x2c4>
 8007e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d109      	bne.n	8007e48 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	2201      	movs	r2, #1
 8007e38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007e44:	2303      	movs	r3, #3
 8007e46:	e038      	b.n	8007eba <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d19c      	bne.n	8007d8c <HAL_SPI_TransmitReceive+0x21c>
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d197      	bne.n	8007d8c <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007e5c:	6a3a      	ldr	r2, [r7, #32]
 8007e5e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007e60:	68f8      	ldr	r0, [r7, #12]
 8007e62:	f000 fa31 	bl	80082c8 <SPI_EndRxTxTransaction>
 8007e66:	4603      	mov	r3, r0
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d008      	beq.n	8007e7e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2220      	movs	r2, #32
 8007e70:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2200      	movs	r2, #0
 8007e76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	e01d      	b.n	8007eba <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d10a      	bne.n	8007e9c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e86:	2300      	movs	r3, #0
 8007e88:	613b      	str	r3, [r7, #16]
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	68db      	ldr	r3, [r3, #12]
 8007e90:	613b      	str	r3, [r7, #16]
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	613b      	str	r3, [r7, #16]
 8007e9a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d001      	beq.n	8007eb8 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	e000      	b.n	8007eba <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8007eb8:	2300      	movs	r3, #0
  }
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3728      	adds	r7, #40	@ 0x28
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}
	...

08007ec4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b088      	sub	sp, #32
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	689b      	ldr	r3, [r3, #8]
 8007eda:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007edc:	69bb      	ldr	r3, [r7, #24]
 8007ede:	099b      	lsrs	r3, r3, #6
 8007ee0:	f003 0301 	and.w	r3, r3, #1
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d10f      	bne.n	8007f08 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007ee8:	69bb      	ldr	r3, [r7, #24]
 8007eea:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d00a      	beq.n	8007f08 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007ef2:	69fb      	ldr	r3, [r7, #28]
 8007ef4:	099b      	lsrs	r3, r3, #6
 8007ef6:	f003 0301 	and.w	r3, r3, #1
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d004      	beq.n	8007f08 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	4798      	blx	r3
    return;
 8007f06:	e0d7      	b.n	80080b8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007f08:	69bb      	ldr	r3, [r7, #24]
 8007f0a:	085b      	lsrs	r3, r3, #1
 8007f0c:	f003 0301 	and.w	r3, r3, #1
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d00a      	beq.n	8007f2a <HAL_SPI_IRQHandler+0x66>
 8007f14:	69fb      	ldr	r3, [r7, #28]
 8007f16:	09db      	lsrs	r3, r3, #7
 8007f18:	f003 0301 	and.w	r3, r3, #1
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d004      	beq.n	8007f2a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	4798      	blx	r3
    return;
 8007f28:	e0c6      	b.n	80080b8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007f2a:	69bb      	ldr	r3, [r7, #24]
 8007f2c:	095b      	lsrs	r3, r3, #5
 8007f2e:	f003 0301 	and.w	r3, r3, #1
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d10c      	bne.n	8007f50 <HAL_SPI_IRQHandler+0x8c>
 8007f36:	69bb      	ldr	r3, [r7, #24]
 8007f38:	099b      	lsrs	r3, r3, #6
 8007f3a:	f003 0301 	and.w	r3, r3, #1
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d106      	bne.n	8007f50 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007f42:	69bb      	ldr	r3, [r7, #24]
 8007f44:	0a1b      	lsrs	r3, r3, #8
 8007f46:	f003 0301 	and.w	r3, r3, #1
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	f000 80b4 	beq.w	80080b8 <HAL_SPI_IRQHandler+0x1f4>
 8007f50:	69fb      	ldr	r3, [r7, #28]
 8007f52:	095b      	lsrs	r3, r3, #5
 8007f54:	f003 0301 	and.w	r3, r3, #1
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	f000 80ad 	beq.w	80080b8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007f5e:	69bb      	ldr	r3, [r7, #24]
 8007f60:	099b      	lsrs	r3, r3, #6
 8007f62:	f003 0301 	and.w	r3, r3, #1
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d023      	beq.n	8007fb2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007f70:	b2db      	uxtb	r3, r3
 8007f72:	2b03      	cmp	r3, #3
 8007f74:	d011      	beq.n	8007f9a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f7a:	f043 0204 	orr.w	r2, r3, #4
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007f82:	2300      	movs	r3, #0
 8007f84:	617b      	str	r3, [r7, #20]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	68db      	ldr	r3, [r3, #12]
 8007f8c:	617b      	str	r3, [r7, #20]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	617b      	str	r3, [r7, #20]
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	e00b      	b.n	8007fb2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	613b      	str	r3, [r7, #16]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	68db      	ldr	r3, [r3, #12]
 8007fa4:	613b      	str	r3, [r7, #16]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	689b      	ldr	r3, [r3, #8]
 8007fac:	613b      	str	r3, [r7, #16]
 8007fae:	693b      	ldr	r3, [r7, #16]
        return;
 8007fb0:	e082      	b.n	80080b8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007fb2:	69bb      	ldr	r3, [r7, #24]
 8007fb4:	095b      	lsrs	r3, r3, #5
 8007fb6:	f003 0301 	and.w	r3, r3, #1
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d014      	beq.n	8007fe8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fc2:	f043 0201 	orr.w	r2, r3, #1
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007fca:	2300      	movs	r3, #0
 8007fcc:	60fb      	str	r3, [r7, #12]
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	689b      	ldr	r3, [r3, #8]
 8007fd4:	60fb      	str	r3, [r7, #12]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007fe4:	601a      	str	r2, [r3, #0]
 8007fe6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007fe8:	69bb      	ldr	r3, [r7, #24]
 8007fea:	0a1b      	lsrs	r3, r3, #8
 8007fec:	f003 0301 	and.w	r3, r3, #1
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d00c      	beq.n	800800e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ff8:	f043 0208 	orr.w	r2, r3, #8
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008000:	2300      	movs	r3, #0
 8008002:	60bb      	str	r3, [r7, #8]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	689b      	ldr	r3, [r3, #8]
 800800a:	60bb      	str	r3, [r7, #8]
 800800c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008012:	2b00      	cmp	r3, #0
 8008014:	d04f      	beq.n	80080b6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	685a      	ldr	r2, [r3, #4]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008024:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2201      	movs	r2, #1
 800802a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800802e:	69fb      	ldr	r3, [r7, #28]
 8008030:	f003 0302 	and.w	r3, r3, #2
 8008034:	2b00      	cmp	r3, #0
 8008036:	d104      	bne.n	8008042 <HAL_SPI_IRQHandler+0x17e>
 8008038:	69fb      	ldr	r3, [r7, #28]
 800803a:	f003 0301 	and.w	r3, r3, #1
 800803e:	2b00      	cmp	r3, #0
 8008040:	d034      	beq.n	80080ac <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	685a      	ldr	r2, [r3, #4]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f022 0203 	bic.w	r2, r2, #3
 8008050:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008056:	2b00      	cmp	r3, #0
 8008058:	d011      	beq.n	800807e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800805e:	4a18      	ldr	r2, [pc, #96]	@ (80080c0 <HAL_SPI_IRQHandler+0x1fc>)
 8008060:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008066:	4618      	mov	r0, r3
 8008068:	f7fb f982 	bl	8003370 <HAL_DMA_Abort_IT>
 800806c:	4603      	mov	r3, r0
 800806e:	2b00      	cmp	r3, #0
 8008070:	d005      	beq.n	800807e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008076:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008082:	2b00      	cmp	r3, #0
 8008084:	d016      	beq.n	80080b4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800808a:	4a0d      	ldr	r2, [pc, #52]	@ (80080c0 <HAL_SPI_IRQHandler+0x1fc>)
 800808c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008092:	4618      	mov	r0, r3
 8008094:	f7fb f96c 	bl	8003370 <HAL_DMA_Abort_IT>
 8008098:	4603      	mov	r3, r0
 800809a:	2b00      	cmp	r3, #0
 800809c:	d00a      	beq.n	80080b4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080a2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 80080aa:	e003      	b.n	80080b4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f7f9 ff55 	bl	8001f5c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80080b2:	e000      	b.n	80080b6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80080b4:	bf00      	nop
    return;
 80080b6:	bf00      	nop
  }
}
 80080b8:	3720      	adds	r7, #32
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}
 80080be:	bf00      	nop
 80080c0:	080080c5 	.word	0x080080c5

080080c4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b084      	sub	sp, #16
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080d0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2200      	movs	r2, #0
 80080d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2200      	movs	r2, #0
 80080dc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80080de:	68f8      	ldr	r0, [r7, #12]
 80080e0:	f7f9 ff3c 	bl	8001f5c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80080e4:	bf00      	nop
 80080e6:	3710      	adds	r7, #16
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b088      	sub	sp, #32
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	60f8      	str	r0, [r7, #12]
 80080f4:	60b9      	str	r1, [r7, #8]
 80080f6:	603b      	str	r3, [r7, #0]
 80080f8:	4613      	mov	r3, r2
 80080fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80080fc:	f7fa fece 	bl	8002e9c <HAL_GetTick>
 8008100:	4602      	mov	r2, r0
 8008102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008104:	1a9b      	subs	r3, r3, r2
 8008106:	683a      	ldr	r2, [r7, #0]
 8008108:	4413      	add	r3, r2
 800810a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800810c:	f7fa fec6 	bl	8002e9c <HAL_GetTick>
 8008110:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008112:	4b39      	ldr	r3, [pc, #228]	@ (80081f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	015b      	lsls	r3, r3, #5
 8008118:	0d1b      	lsrs	r3, r3, #20
 800811a:	69fa      	ldr	r2, [r7, #28]
 800811c:	fb02 f303 	mul.w	r3, r2, r3
 8008120:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008122:	e055      	b.n	80081d0 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800812a:	d051      	beq.n	80081d0 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800812c:	f7fa feb6 	bl	8002e9c <HAL_GetTick>
 8008130:	4602      	mov	r2, r0
 8008132:	69bb      	ldr	r3, [r7, #24]
 8008134:	1ad3      	subs	r3, r2, r3
 8008136:	69fa      	ldr	r2, [r7, #28]
 8008138:	429a      	cmp	r2, r3
 800813a:	d902      	bls.n	8008142 <SPI_WaitFlagStateUntilTimeout+0x56>
 800813c:	69fb      	ldr	r3, [r7, #28]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d13d      	bne.n	80081be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	685a      	ldr	r2, [r3, #4]
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008150:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800815a:	d111      	bne.n	8008180 <SPI_WaitFlagStateUntilTimeout+0x94>
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	689b      	ldr	r3, [r3, #8]
 8008160:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008164:	d004      	beq.n	8008170 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	689b      	ldr	r3, [r3, #8]
 800816a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800816e:	d107      	bne.n	8008180 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	681a      	ldr	r2, [r3, #0]
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800817e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008184:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008188:	d10f      	bne.n	80081aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	681a      	ldr	r2, [r3, #0]
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008198:	601a      	str	r2, [r3, #0]
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	681a      	ldr	r2, [r3, #0]
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80081a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2201      	movs	r2, #1
 80081ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2200      	movs	r2, #0
 80081b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80081ba:	2303      	movs	r3, #3
 80081bc:	e018      	b.n	80081f0 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d102      	bne.n	80081ca <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80081c4:	2300      	movs	r3, #0
 80081c6:	61fb      	str	r3, [r7, #28]
 80081c8:	e002      	b.n	80081d0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	3b01      	subs	r3, #1
 80081ce:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	689a      	ldr	r2, [r3, #8]
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	4013      	ands	r3, r2
 80081da:	68ba      	ldr	r2, [r7, #8]
 80081dc:	429a      	cmp	r2, r3
 80081de:	bf0c      	ite	eq
 80081e0:	2301      	moveq	r3, #1
 80081e2:	2300      	movne	r3, #0
 80081e4:	b2db      	uxtb	r3, r3
 80081e6:	461a      	mov	r2, r3
 80081e8:	79fb      	ldrb	r3, [r7, #7]
 80081ea:	429a      	cmp	r2, r3
 80081ec:	d19a      	bne.n	8008124 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80081ee:	2300      	movs	r3, #0
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3720      	adds	r7, #32
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}
 80081f8:	2000000c 	.word	0x2000000c

080081fc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b086      	sub	sp, #24
 8008200:	af02      	add	r7, sp, #8
 8008202:	60f8      	str	r0, [r7, #12]
 8008204:	60b9      	str	r1, [r7, #8]
 8008206:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008210:	d111      	bne.n	8008236 <SPI_EndRxTransaction+0x3a>
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	689b      	ldr	r3, [r3, #8]
 8008216:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800821a:	d004      	beq.n	8008226 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	689b      	ldr	r3, [r3, #8]
 8008220:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008224:	d107      	bne.n	8008236 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	681a      	ldr	r2, [r3, #0]
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008234:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800823e:	d12a      	bne.n	8008296 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	689b      	ldr	r3, [r3, #8]
 8008244:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008248:	d012      	beq.n	8008270 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	9300      	str	r3, [sp, #0]
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	2200      	movs	r2, #0
 8008252:	2180      	movs	r1, #128	@ 0x80
 8008254:	68f8      	ldr	r0, [r7, #12]
 8008256:	f7ff ff49 	bl	80080ec <SPI_WaitFlagStateUntilTimeout>
 800825a:	4603      	mov	r3, r0
 800825c:	2b00      	cmp	r3, #0
 800825e:	d02d      	beq.n	80082bc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008264:	f043 0220 	orr.w	r2, r3, #32
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800826c:	2303      	movs	r3, #3
 800826e:	e026      	b.n	80082be <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	9300      	str	r3, [sp, #0]
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	2200      	movs	r2, #0
 8008278:	2101      	movs	r1, #1
 800827a:	68f8      	ldr	r0, [r7, #12]
 800827c:	f7ff ff36 	bl	80080ec <SPI_WaitFlagStateUntilTimeout>
 8008280:	4603      	mov	r3, r0
 8008282:	2b00      	cmp	r3, #0
 8008284:	d01a      	beq.n	80082bc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800828a:	f043 0220 	orr.w	r2, r3, #32
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8008292:	2303      	movs	r3, #3
 8008294:	e013      	b.n	80082be <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	9300      	str	r3, [sp, #0]
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	2200      	movs	r2, #0
 800829e:	2101      	movs	r1, #1
 80082a0:	68f8      	ldr	r0, [r7, #12]
 80082a2:	f7ff ff23 	bl	80080ec <SPI_WaitFlagStateUntilTimeout>
 80082a6:	4603      	mov	r3, r0
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d007      	beq.n	80082bc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082b0:	f043 0220 	orr.w	r2, r3, #32
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80082b8:	2303      	movs	r3, #3
 80082ba:	e000      	b.n	80082be <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80082bc:	2300      	movs	r3, #0
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3710      	adds	r7, #16
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}
	...

080082c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b088      	sub	sp, #32
 80082cc:	af02      	add	r7, sp, #8
 80082ce:	60f8      	str	r0, [r7, #12]
 80082d0:	60b9      	str	r1, [r7, #8]
 80082d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	9300      	str	r3, [sp, #0]
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	2201      	movs	r2, #1
 80082dc:	2102      	movs	r1, #2
 80082de:	68f8      	ldr	r0, [r7, #12]
 80082e0:	f7ff ff04 	bl	80080ec <SPI_WaitFlagStateUntilTimeout>
 80082e4:	4603      	mov	r3, r0
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d007      	beq.n	80082fa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082ee:	f043 0220 	orr.w	r2, r3, #32
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80082f6:	2303      	movs	r3, #3
 80082f8:	e032      	b.n	8008360 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80082fa:	4b1b      	ldr	r3, [pc, #108]	@ (8008368 <SPI_EndRxTxTransaction+0xa0>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a1b      	ldr	r2, [pc, #108]	@ (800836c <SPI_EndRxTxTransaction+0xa4>)
 8008300:	fba2 2303 	umull	r2, r3, r2, r3
 8008304:	0d5b      	lsrs	r3, r3, #21
 8008306:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800830a:	fb02 f303 	mul.w	r3, r2, r3
 800830e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008318:	d112      	bne.n	8008340 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	9300      	str	r3, [sp, #0]
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	2200      	movs	r2, #0
 8008322:	2180      	movs	r1, #128	@ 0x80
 8008324:	68f8      	ldr	r0, [r7, #12]
 8008326:	f7ff fee1 	bl	80080ec <SPI_WaitFlagStateUntilTimeout>
 800832a:	4603      	mov	r3, r0
 800832c:	2b00      	cmp	r3, #0
 800832e:	d016      	beq.n	800835e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008334:	f043 0220 	orr.w	r2, r3, #32
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800833c:	2303      	movs	r3, #3
 800833e:	e00f      	b.n	8008360 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d00a      	beq.n	800835c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8008346:	697b      	ldr	r3, [r7, #20]
 8008348:	3b01      	subs	r3, #1
 800834a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	689b      	ldr	r3, [r3, #8]
 8008352:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008356:	2b80      	cmp	r3, #128	@ 0x80
 8008358:	d0f2      	beq.n	8008340 <SPI_EndRxTxTransaction+0x78>
 800835a:	e000      	b.n	800835e <SPI_EndRxTxTransaction+0x96>
        break;
 800835c:	bf00      	nop
  }

  return HAL_OK;
 800835e:	2300      	movs	r3, #0
}
 8008360:	4618      	mov	r0, r3
 8008362:	3718      	adds	r7, #24
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}
 8008368:	2000000c 	.word	0x2000000c
 800836c:	165e9f81 	.word	0x165e9f81

08008370 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b082      	sub	sp, #8
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d101      	bne.n	8008382 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800837e:	2301      	movs	r3, #1
 8008380:	e041      	b.n	8008406 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008388:	b2db      	uxtb	r3, r3
 800838a:	2b00      	cmp	r3, #0
 800838c:	d106      	bne.n	800839c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2200      	movs	r2, #0
 8008392:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f7f9 faf6 	bl	8001988 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2202      	movs	r2, #2
 80083a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681a      	ldr	r2, [r3, #0]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	3304      	adds	r3, #4
 80083ac:	4619      	mov	r1, r3
 80083ae:	4610      	mov	r0, r2
 80083b0:	f000 f8f4 	bl	800859c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2201      	movs	r2, #1
 80083b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2201      	movs	r2, #1
 80083c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2201      	movs	r2, #1
 80083c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2201      	movs	r2, #1
 80083d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2201      	movs	r2, #1
 80083d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2201      	movs	r2, #1
 80083e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2201      	movs	r2, #1
 80083e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2201      	movs	r2, #1
 80083f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2201      	movs	r2, #1
 80083f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2201      	movs	r2, #1
 8008400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008404:	2300      	movs	r3, #0
}
 8008406:	4618      	mov	r0, r3
 8008408:	3708      	adds	r7, #8
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}

0800840e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800840e:	b580      	push	{r7, lr}
 8008410:	b084      	sub	sp, #16
 8008412:	af00      	add	r7, sp, #0
 8008414:	6078      	str	r0, [r7, #4]
 8008416:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008418:	2300      	movs	r3, #0
 800841a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008422:	2b01      	cmp	r3, #1
 8008424:	d101      	bne.n	800842a <HAL_TIM_ConfigClockSource+0x1c>
 8008426:	2302      	movs	r3, #2
 8008428:	e0b4      	b.n	8008594 <HAL_TIM_ConfigClockSource+0x186>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2201      	movs	r2, #1
 800842e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2202      	movs	r2, #2
 8008436:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	689b      	ldr	r3, [r3, #8]
 8008440:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008448:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008450:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	68ba      	ldr	r2, [r7, #8]
 8008458:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008462:	d03e      	beq.n	80084e2 <HAL_TIM_ConfigClockSource+0xd4>
 8008464:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008468:	f200 8087 	bhi.w	800857a <HAL_TIM_ConfigClockSource+0x16c>
 800846c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008470:	f000 8086 	beq.w	8008580 <HAL_TIM_ConfigClockSource+0x172>
 8008474:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008478:	d87f      	bhi.n	800857a <HAL_TIM_ConfigClockSource+0x16c>
 800847a:	2b70      	cmp	r3, #112	@ 0x70
 800847c:	d01a      	beq.n	80084b4 <HAL_TIM_ConfigClockSource+0xa6>
 800847e:	2b70      	cmp	r3, #112	@ 0x70
 8008480:	d87b      	bhi.n	800857a <HAL_TIM_ConfigClockSource+0x16c>
 8008482:	2b60      	cmp	r3, #96	@ 0x60
 8008484:	d050      	beq.n	8008528 <HAL_TIM_ConfigClockSource+0x11a>
 8008486:	2b60      	cmp	r3, #96	@ 0x60
 8008488:	d877      	bhi.n	800857a <HAL_TIM_ConfigClockSource+0x16c>
 800848a:	2b50      	cmp	r3, #80	@ 0x50
 800848c:	d03c      	beq.n	8008508 <HAL_TIM_ConfigClockSource+0xfa>
 800848e:	2b50      	cmp	r3, #80	@ 0x50
 8008490:	d873      	bhi.n	800857a <HAL_TIM_ConfigClockSource+0x16c>
 8008492:	2b40      	cmp	r3, #64	@ 0x40
 8008494:	d058      	beq.n	8008548 <HAL_TIM_ConfigClockSource+0x13a>
 8008496:	2b40      	cmp	r3, #64	@ 0x40
 8008498:	d86f      	bhi.n	800857a <HAL_TIM_ConfigClockSource+0x16c>
 800849a:	2b30      	cmp	r3, #48	@ 0x30
 800849c:	d064      	beq.n	8008568 <HAL_TIM_ConfigClockSource+0x15a>
 800849e:	2b30      	cmp	r3, #48	@ 0x30
 80084a0:	d86b      	bhi.n	800857a <HAL_TIM_ConfigClockSource+0x16c>
 80084a2:	2b20      	cmp	r3, #32
 80084a4:	d060      	beq.n	8008568 <HAL_TIM_ConfigClockSource+0x15a>
 80084a6:	2b20      	cmp	r3, #32
 80084a8:	d867      	bhi.n	800857a <HAL_TIM_ConfigClockSource+0x16c>
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d05c      	beq.n	8008568 <HAL_TIM_ConfigClockSource+0x15a>
 80084ae:	2b10      	cmp	r3, #16
 80084b0:	d05a      	beq.n	8008568 <HAL_TIM_ConfigClockSource+0x15a>
 80084b2:	e062      	b.n	800857a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80084c4:	f000 f96a 	bl	800879c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	689b      	ldr	r3, [r3, #8]
 80084ce:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80084d6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	68ba      	ldr	r2, [r7, #8]
 80084de:	609a      	str	r2, [r3, #8]
      break;
 80084e0:	e04f      	b.n	8008582 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80084f2:	f000 f953 	bl	800879c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	689a      	ldr	r2, [r3, #8]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008504:	609a      	str	r2, [r3, #8]
      break;
 8008506:	e03c      	b.n	8008582 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008514:	461a      	mov	r2, r3
 8008516:	f000 f8c7 	bl	80086a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	2150      	movs	r1, #80	@ 0x50
 8008520:	4618      	mov	r0, r3
 8008522:	f000 f920 	bl	8008766 <TIM_ITRx_SetConfig>
      break;
 8008526:	e02c      	b.n	8008582 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008534:	461a      	mov	r2, r3
 8008536:	f000 f8e6 	bl	8008706 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	2160      	movs	r1, #96	@ 0x60
 8008540:	4618      	mov	r0, r3
 8008542:	f000 f910 	bl	8008766 <TIM_ITRx_SetConfig>
      break;
 8008546:	e01c      	b.n	8008582 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008554:	461a      	mov	r2, r3
 8008556:	f000 f8a7 	bl	80086a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	2140      	movs	r1, #64	@ 0x40
 8008560:	4618      	mov	r0, r3
 8008562:	f000 f900 	bl	8008766 <TIM_ITRx_SetConfig>
      break;
 8008566:	e00c      	b.n	8008582 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681a      	ldr	r2, [r3, #0]
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4619      	mov	r1, r3
 8008572:	4610      	mov	r0, r2
 8008574:	f000 f8f7 	bl	8008766 <TIM_ITRx_SetConfig>
      break;
 8008578:	e003      	b.n	8008582 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800857a:	2301      	movs	r3, #1
 800857c:	73fb      	strb	r3, [r7, #15]
      break;
 800857e:	e000      	b.n	8008582 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008580:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2201      	movs	r2, #1
 8008586:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2200      	movs	r2, #0
 800858e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008592:	7bfb      	ldrb	r3, [r7, #15]
}
 8008594:	4618      	mov	r0, r3
 8008596:	3710      	adds	r7, #16
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}

0800859c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800859c:	b480      	push	{r7}
 800859e:	b085      	sub	sp, #20
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
 80085a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	4a37      	ldr	r2, [pc, #220]	@ (800868c <TIM_Base_SetConfig+0xf0>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d00f      	beq.n	80085d4 <TIM_Base_SetConfig+0x38>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085ba:	d00b      	beq.n	80085d4 <TIM_Base_SetConfig+0x38>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	4a34      	ldr	r2, [pc, #208]	@ (8008690 <TIM_Base_SetConfig+0xf4>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d007      	beq.n	80085d4 <TIM_Base_SetConfig+0x38>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	4a33      	ldr	r2, [pc, #204]	@ (8008694 <TIM_Base_SetConfig+0xf8>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d003      	beq.n	80085d4 <TIM_Base_SetConfig+0x38>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	4a32      	ldr	r2, [pc, #200]	@ (8008698 <TIM_Base_SetConfig+0xfc>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d108      	bne.n	80085e6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	68fa      	ldr	r2, [r7, #12]
 80085e2:	4313      	orrs	r3, r2
 80085e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	4a28      	ldr	r2, [pc, #160]	@ (800868c <TIM_Base_SetConfig+0xf0>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d01b      	beq.n	8008626 <TIM_Base_SetConfig+0x8a>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085f4:	d017      	beq.n	8008626 <TIM_Base_SetConfig+0x8a>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	4a25      	ldr	r2, [pc, #148]	@ (8008690 <TIM_Base_SetConfig+0xf4>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d013      	beq.n	8008626 <TIM_Base_SetConfig+0x8a>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	4a24      	ldr	r2, [pc, #144]	@ (8008694 <TIM_Base_SetConfig+0xf8>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d00f      	beq.n	8008626 <TIM_Base_SetConfig+0x8a>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	4a23      	ldr	r2, [pc, #140]	@ (8008698 <TIM_Base_SetConfig+0xfc>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d00b      	beq.n	8008626 <TIM_Base_SetConfig+0x8a>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	4a22      	ldr	r2, [pc, #136]	@ (800869c <TIM_Base_SetConfig+0x100>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d007      	beq.n	8008626 <TIM_Base_SetConfig+0x8a>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	4a21      	ldr	r2, [pc, #132]	@ (80086a0 <TIM_Base_SetConfig+0x104>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d003      	beq.n	8008626 <TIM_Base_SetConfig+0x8a>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	4a20      	ldr	r2, [pc, #128]	@ (80086a4 <TIM_Base_SetConfig+0x108>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d108      	bne.n	8008638 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800862c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	68db      	ldr	r3, [r3, #12]
 8008632:	68fa      	ldr	r2, [r7, #12]
 8008634:	4313      	orrs	r3, r2
 8008636:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	695b      	ldr	r3, [r3, #20]
 8008642:	4313      	orrs	r3, r2
 8008644:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	689a      	ldr	r2, [r3, #8]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	681a      	ldr	r2, [r3, #0]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	4a0c      	ldr	r2, [pc, #48]	@ (800868c <TIM_Base_SetConfig+0xf0>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d103      	bne.n	8008666 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	691a      	ldr	r2, [r3, #16]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f043 0204 	orr.w	r2, r3, #4
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2201      	movs	r2, #1
 8008676:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	68fa      	ldr	r2, [r7, #12]
 800867c:	601a      	str	r2, [r3, #0]
}
 800867e:	bf00      	nop
 8008680:	3714      	adds	r7, #20
 8008682:	46bd      	mov	sp, r7
 8008684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008688:	4770      	bx	lr
 800868a:	bf00      	nop
 800868c:	40010000 	.word	0x40010000
 8008690:	40000400 	.word	0x40000400
 8008694:	40000800 	.word	0x40000800
 8008698:	40000c00 	.word	0x40000c00
 800869c:	40014000 	.word	0x40014000
 80086a0:	40014400 	.word	0x40014400
 80086a4:	40014800 	.word	0x40014800

080086a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b087      	sub	sp, #28
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	60f8      	str	r0, [r7, #12]
 80086b0:	60b9      	str	r1, [r7, #8]
 80086b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	6a1b      	ldr	r3, [r3, #32]
 80086b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	6a1b      	ldr	r3, [r3, #32]
 80086be:	f023 0201 	bic.w	r2, r3, #1
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	699b      	ldr	r3, [r3, #24]
 80086ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80086d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	011b      	lsls	r3, r3, #4
 80086d8:	693a      	ldr	r2, [r7, #16]
 80086da:	4313      	orrs	r3, r2
 80086dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	f023 030a 	bic.w	r3, r3, #10
 80086e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80086e6:	697a      	ldr	r2, [r7, #20]
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	4313      	orrs	r3, r2
 80086ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	693a      	ldr	r2, [r7, #16]
 80086f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	697a      	ldr	r2, [r7, #20]
 80086f8:	621a      	str	r2, [r3, #32]
}
 80086fa:	bf00      	nop
 80086fc:	371c      	adds	r7, #28
 80086fe:	46bd      	mov	sp, r7
 8008700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008704:	4770      	bx	lr

08008706 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008706:	b480      	push	{r7}
 8008708:	b087      	sub	sp, #28
 800870a:	af00      	add	r7, sp, #0
 800870c:	60f8      	str	r0, [r7, #12]
 800870e:	60b9      	str	r1, [r7, #8]
 8008710:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	6a1b      	ldr	r3, [r3, #32]
 8008716:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	6a1b      	ldr	r3, [r3, #32]
 800871c:	f023 0210 	bic.w	r2, r3, #16
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	699b      	ldr	r3, [r3, #24]
 8008728:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008730:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	031b      	lsls	r3, r3, #12
 8008736:	693a      	ldr	r2, [r7, #16]
 8008738:	4313      	orrs	r3, r2
 800873a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008742:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	011b      	lsls	r3, r3, #4
 8008748:	697a      	ldr	r2, [r7, #20]
 800874a:	4313      	orrs	r3, r2
 800874c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	693a      	ldr	r2, [r7, #16]
 8008752:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	697a      	ldr	r2, [r7, #20]
 8008758:	621a      	str	r2, [r3, #32]
}
 800875a:	bf00      	nop
 800875c:	371c      	adds	r7, #28
 800875e:	46bd      	mov	sp, r7
 8008760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008764:	4770      	bx	lr

08008766 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008766:	b480      	push	{r7}
 8008768:	b085      	sub	sp, #20
 800876a:	af00      	add	r7, sp, #0
 800876c:	6078      	str	r0, [r7, #4]
 800876e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	689b      	ldr	r3, [r3, #8]
 8008774:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800877c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800877e:	683a      	ldr	r2, [r7, #0]
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	4313      	orrs	r3, r2
 8008784:	f043 0307 	orr.w	r3, r3, #7
 8008788:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	68fa      	ldr	r2, [r7, #12]
 800878e:	609a      	str	r2, [r3, #8]
}
 8008790:	bf00      	nop
 8008792:	3714      	adds	r7, #20
 8008794:	46bd      	mov	sp, r7
 8008796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879a:	4770      	bx	lr

0800879c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800879c:	b480      	push	{r7}
 800879e:	b087      	sub	sp, #28
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	60f8      	str	r0, [r7, #12]
 80087a4:	60b9      	str	r1, [r7, #8]
 80087a6:	607a      	str	r2, [r7, #4]
 80087a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	689b      	ldr	r3, [r3, #8]
 80087ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80087b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	021a      	lsls	r2, r3, #8
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	431a      	orrs	r2, r3
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	4313      	orrs	r3, r2
 80087c4:	697a      	ldr	r2, [r7, #20]
 80087c6:	4313      	orrs	r3, r2
 80087c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	697a      	ldr	r2, [r7, #20]
 80087ce:	609a      	str	r2, [r3, #8]
}
 80087d0:	bf00      	nop
 80087d2:	371c      	adds	r7, #28
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr

080087dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80087dc:	b480      	push	{r7}
 80087de:	b085      	sub	sp, #20
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	d101      	bne.n	80087f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80087f0:	2302      	movs	r3, #2
 80087f2:	e050      	b.n	8008896 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2201      	movs	r2, #1
 80087f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2202      	movs	r2, #2
 8008800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	685b      	ldr	r3, [r3, #4]
 800880a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	689b      	ldr	r3, [r3, #8]
 8008812:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800881a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	68fa      	ldr	r2, [r7, #12]
 8008822:	4313      	orrs	r3, r2
 8008824:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	68fa      	ldr	r2, [r7, #12]
 800882c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4a1c      	ldr	r2, [pc, #112]	@ (80088a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d018      	beq.n	800886a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008840:	d013      	beq.n	800886a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	4a18      	ldr	r2, [pc, #96]	@ (80088a8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008848:	4293      	cmp	r3, r2
 800884a:	d00e      	beq.n	800886a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4a16      	ldr	r2, [pc, #88]	@ (80088ac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d009      	beq.n	800886a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	4a15      	ldr	r2, [pc, #84]	@ (80088b0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d004      	beq.n	800886a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4a13      	ldr	r2, [pc, #76]	@ (80088b4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d10c      	bne.n	8008884 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008870:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	685b      	ldr	r3, [r3, #4]
 8008876:	68ba      	ldr	r2, [r7, #8]
 8008878:	4313      	orrs	r3, r2
 800887a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	68ba      	ldr	r2, [r7, #8]
 8008882:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2201      	movs	r2, #1
 8008888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2200      	movs	r2, #0
 8008890:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008894:	2300      	movs	r3, #0
}
 8008896:	4618      	mov	r0, r3
 8008898:	3714      	adds	r7, #20
 800889a:	46bd      	mov	sp, r7
 800889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a0:	4770      	bx	lr
 80088a2:	bf00      	nop
 80088a4:	40010000 	.word	0x40010000
 80088a8:	40000400 	.word	0x40000400
 80088ac:	40000800 	.word	0x40000800
 80088b0:	40000c00 	.word	0x40000c00
 80088b4:	40014000 	.word	0x40014000

080088b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80088b8:	b084      	sub	sp, #16
 80088ba:	b580      	push	{r7, lr}
 80088bc:	b084      	sub	sp, #16
 80088be:	af00      	add	r7, sp, #0
 80088c0:	6078      	str	r0, [r7, #4]
 80088c2:	f107 001c 	add.w	r0, r7, #28
 80088c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80088ca:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80088ce:	2b01      	cmp	r3, #1
 80088d0:	d123      	bne.n	800891a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088d6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	68db      	ldr	r3, [r3, #12]
 80088e2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80088e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80088ea:	687a      	ldr	r2, [r7, #4]
 80088ec:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	68db      	ldr	r3, [r3, #12]
 80088f2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80088fa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80088fe:	2b01      	cmp	r3, #1
 8008900:	d105      	bne.n	800890e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	68db      	ldr	r3, [r3, #12]
 8008906:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f000 f9dc 	bl	8008ccc <USB_CoreReset>
 8008914:	4603      	mov	r3, r0
 8008916:	73fb      	strb	r3, [r7, #15]
 8008918:	e01b      	b.n	8008952 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	68db      	ldr	r3, [r3, #12]
 800891e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 f9d0 	bl	8008ccc <USB_CoreReset>
 800892c:	4603      	mov	r3, r0
 800892e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008930:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008934:	2b00      	cmp	r3, #0
 8008936:	d106      	bne.n	8008946 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800893c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	639a      	str	r2, [r3, #56]	@ 0x38
 8008944:	e005      	b.n	8008952 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800894a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008952:	7fbb      	ldrb	r3, [r7, #30]
 8008954:	2b01      	cmp	r3, #1
 8008956:	d10b      	bne.n	8008970 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	689b      	ldr	r3, [r3, #8]
 800895c:	f043 0206 	orr.w	r2, r3, #6
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	689b      	ldr	r3, [r3, #8]
 8008968:	f043 0220 	orr.w	r2, r3, #32
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008970:	7bfb      	ldrb	r3, [r7, #15]
}
 8008972:	4618      	mov	r0, r3
 8008974:	3710      	adds	r7, #16
 8008976:	46bd      	mov	sp, r7
 8008978:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800897c:	b004      	add	sp, #16
 800897e:	4770      	bx	lr

08008980 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008980:	b480      	push	{r7}
 8008982:	b083      	sub	sp, #12
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	689b      	ldr	r3, [r3, #8]
 800898c:	f043 0201 	orr.w	r2, r3, #1
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008994:	2300      	movs	r3, #0
}
 8008996:	4618      	mov	r0, r3
 8008998:	370c      	adds	r7, #12
 800899a:	46bd      	mov	sp, r7
 800899c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a0:	4770      	bx	lr

080089a2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80089a2:	b480      	push	{r7}
 80089a4:	b083      	sub	sp, #12
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	689b      	ldr	r3, [r3, #8]
 80089ae:	f023 0201 	bic.w	r2, r3, #1
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80089b6:	2300      	movs	r3, #0
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	370c      	adds	r7, #12
 80089bc:	46bd      	mov	sp, r7
 80089be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c2:	4770      	bx	lr

080089c4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b084      	sub	sp, #16
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
 80089cc:	460b      	mov	r3, r1
 80089ce:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80089d0:	2300      	movs	r3, #0
 80089d2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	68db      	ldr	r3, [r3, #12]
 80089d8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80089e0:	78fb      	ldrb	r3, [r7, #3]
 80089e2:	2b01      	cmp	r3, #1
 80089e4:	d115      	bne.n	8008a12 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	68db      	ldr	r3, [r3, #12]
 80089ea:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80089f2:	200a      	movs	r0, #10
 80089f4:	f7fa fa5e 	bl	8002eb4 <HAL_Delay>
      ms += 10U;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	330a      	adds	r3, #10
 80089fc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f000 f956 	bl	8008cb0 <USB_GetMode>
 8008a04:	4603      	mov	r3, r0
 8008a06:	2b01      	cmp	r3, #1
 8008a08:	d01e      	beq.n	8008a48 <USB_SetCurrentMode+0x84>
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	2bc7      	cmp	r3, #199	@ 0xc7
 8008a0e:	d9f0      	bls.n	80089f2 <USB_SetCurrentMode+0x2e>
 8008a10:	e01a      	b.n	8008a48 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008a12:	78fb      	ldrb	r3, [r7, #3]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d115      	bne.n	8008a44 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	68db      	ldr	r3, [r3, #12]
 8008a1c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008a24:	200a      	movs	r0, #10
 8008a26:	f7fa fa45 	bl	8002eb4 <HAL_Delay>
      ms += 10U;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	330a      	adds	r3, #10
 8008a2e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f000 f93d 	bl	8008cb0 <USB_GetMode>
 8008a36:	4603      	mov	r3, r0
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d005      	beq.n	8008a48 <USB_SetCurrentMode+0x84>
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	2bc7      	cmp	r3, #199	@ 0xc7
 8008a40:	d9f0      	bls.n	8008a24 <USB_SetCurrentMode+0x60>
 8008a42:	e001      	b.n	8008a48 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008a44:	2301      	movs	r3, #1
 8008a46:	e005      	b.n	8008a54 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	2bc8      	cmp	r3, #200	@ 0xc8
 8008a4c:	d101      	bne.n	8008a52 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008a4e:	2301      	movs	r3, #1
 8008a50:	e000      	b.n	8008a54 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008a52:	2300      	movs	r3, #0
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3710      	adds	r7, #16
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}

08008a5c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b085      	sub	sp, #20
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
 8008a64:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008a66:	2300      	movs	r3, #0
 8008a68:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	3301      	adds	r3, #1
 8008a6e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008a76:	d901      	bls.n	8008a7c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008a78:	2303      	movs	r3, #3
 8008a7a:	e01b      	b.n	8008ab4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	691b      	ldr	r3, [r3, #16]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	daf2      	bge.n	8008a6a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008a84:	2300      	movs	r3, #0
 8008a86:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	019b      	lsls	r3, r3, #6
 8008a8c:	f043 0220 	orr.w	r2, r3, #32
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	3301      	adds	r3, #1
 8008a98:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008aa0:	d901      	bls.n	8008aa6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008aa2:	2303      	movs	r3, #3
 8008aa4:	e006      	b.n	8008ab4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	691b      	ldr	r3, [r3, #16]
 8008aaa:	f003 0320 	and.w	r3, r3, #32
 8008aae:	2b20      	cmp	r3, #32
 8008ab0:	d0f0      	beq.n	8008a94 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008ab2:	2300      	movs	r3, #0
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3714      	adds	r7, #20
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abe:	4770      	bx	lr

08008ac0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b085      	sub	sp, #20
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	3301      	adds	r3, #1
 8008ad0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008ad8:	d901      	bls.n	8008ade <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008ada:	2303      	movs	r3, #3
 8008adc:	e018      	b.n	8008b10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	691b      	ldr	r3, [r3, #16]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	daf2      	bge.n	8008acc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2210      	movs	r2, #16
 8008aee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	3301      	adds	r3, #1
 8008af4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008afc:	d901      	bls.n	8008b02 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008afe:	2303      	movs	r3, #3
 8008b00:	e006      	b.n	8008b10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	691b      	ldr	r3, [r3, #16]
 8008b06:	f003 0310 	and.w	r3, r3, #16
 8008b0a:	2b10      	cmp	r3, #16
 8008b0c:	d0f0      	beq.n	8008af0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008b0e:	2300      	movs	r3, #0
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3714      	adds	r7, #20
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr

08008b1c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b089      	sub	sp, #36	@ 0x24
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	60f8      	str	r0, [r7, #12]
 8008b24:	60b9      	str	r1, [r7, #8]
 8008b26:	4611      	mov	r1, r2
 8008b28:	461a      	mov	r2, r3
 8008b2a:	460b      	mov	r3, r1
 8008b2c:	71fb      	strb	r3, [r7, #7]
 8008b2e:	4613      	mov	r3, r2
 8008b30:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008b3a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d123      	bne.n	8008b8a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008b42:	88bb      	ldrh	r3, [r7, #4]
 8008b44:	3303      	adds	r3, #3
 8008b46:	089b      	lsrs	r3, r3, #2
 8008b48:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	61bb      	str	r3, [r7, #24]
 8008b4e:	e018      	b.n	8008b82 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008b50:	79fb      	ldrb	r3, [r7, #7]
 8008b52:	031a      	lsls	r2, r3, #12
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	4413      	add	r3, r2
 8008b58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b5c:	461a      	mov	r2, r3
 8008b5e:	69fb      	ldr	r3, [r7, #28]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008b64:	69fb      	ldr	r3, [r7, #28]
 8008b66:	3301      	adds	r3, #1
 8008b68:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008b6a:	69fb      	ldr	r3, [r7, #28]
 8008b6c:	3301      	adds	r3, #1
 8008b6e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008b70:	69fb      	ldr	r3, [r7, #28]
 8008b72:	3301      	adds	r3, #1
 8008b74:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008b76:	69fb      	ldr	r3, [r7, #28]
 8008b78:	3301      	adds	r3, #1
 8008b7a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008b7c:	69bb      	ldr	r3, [r7, #24]
 8008b7e:	3301      	adds	r3, #1
 8008b80:	61bb      	str	r3, [r7, #24]
 8008b82:	69ba      	ldr	r2, [r7, #24]
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	429a      	cmp	r2, r3
 8008b88:	d3e2      	bcc.n	8008b50 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008b8a:	2300      	movs	r3, #0
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3724      	adds	r7, #36	@ 0x24
 8008b90:	46bd      	mov	sp, r7
 8008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b96:	4770      	bx	lr

08008b98 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b08b      	sub	sp, #44	@ 0x2c
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	60f8      	str	r0, [r7, #12]
 8008ba0:	60b9      	str	r1, [r7, #8]
 8008ba2:	4613      	mov	r3, r2
 8008ba4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008bae:	88fb      	ldrh	r3, [r7, #6]
 8008bb0:	089b      	lsrs	r3, r3, #2
 8008bb2:	b29b      	uxth	r3, r3
 8008bb4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008bb6:	88fb      	ldrh	r3, [r7, #6]
 8008bb8:	f003 0303 	and.w	r3, r3, #3
 8008bbc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	623b      	str	r3, [r7, #32]
 8008bc2:	e014      	b.n	8008bee <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008bc4:	69bb      	ldr	r3, [r7, #24]
 8008bc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008bca:	681a      	ldr	r2, [r3, #0]
 8008bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bce:	601a      	str	r2, [r3, #0]
    pDest++;
 8008bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bd2:	3301      	adds	r3, #1
 8008bd4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bd8:	3301      	adds	r3, #1
 8008bda:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bde:	3301      	adds	r3, #1
 8008be0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008be4:	3301      	adds	r3, #1
 8008be6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008be8:	6a3b      	ldr	r3, [r7, #32]
 8008bea:	3301      	adds	r3, #1
 8008bec:	623b      	str	r3, [r7, #32]
 8008bee:	6a3a      	ldr	r2, [r7, #32]
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	d3e6      	bcc.n	8008bc4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008bf6:	8bfb      	ldrh	r3, [r7, #30]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d01e      	beq.n	8008c3a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008c00:	69bb      	ldr	r3, [r7, #24]
 8008c02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008c06:	461a      	mov	r2, r3
 8008c08:	f107 0310 	add.w	r3, r7, #16
 8008c0c:	6812      	ldr	r2, [r2, #0]
 8008c0e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008c10:	693a      	ldr	r2, [r7, #16]
 8008c12:	6a3b      	ldr	r3, [r7, #32]
 8008c14:	b2db      	uxtb	r3, r3
 8008c16:	00db      	lsls	r3, r3, #3
 8008c18:	fa22 f303 	lsr.w	r3, r2, r3
 8008c1c:	b2da      	uxtb	r2, r3
 8008c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c20:	701a      	strb	r2, [r3, #0]
      i++;
 8008c22:	6a3b      	ldr	r3, [r7, #32]
 8008c24:	3301      	adds	r3, #1
 8008c26:	623b      	str	r3, [r7, #32]
      pDest++;
 8008c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c2a:	3301      	adds	r3, #1
 8008c2c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008c2e:	8bfb      	ldrh	r3, [r7, #30]
 8008c30:	3b01      	subs	r3, #1
 8008c32:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008c34:	8bfb      	ldrh	r3, [r7, #30]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d1ea      	bne.n	8008c10 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	372c      	adds	r7, #44	@ 0x2c
 8008c40:	46bd      	mov	sp, r7
 8008c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c46:	4770      	bx	lr

08008c48 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b085      	sub	sp, #20
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	695b      	ldr	r3, [r3, #20]
 8008c54:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	699b      	ldr	r3, [r3, #24]
 8008c5a:	68fa      	ldr	r2, [r7, #12]
 8008c5c:	4013      	ands	r3, r2
 8008c5e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008c60:	68fb      	ldr	r3, [r7, #12]
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3714      	adds	r7, #20
 8008c66:	46bd      	mov	sp, r7
 8008c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6c:	4770      	bx	lr

08008c6e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8008c6e:	b480      	push	{r7}
 8008c70:	b085      	sub	sp, #20
 8008c72:	af00      	add	r7, sp, #0
 8008c74:	6078      	str	r0, [r7, #4]
 8008c76:	460b      	mov	r3, r1
 8008c78:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8008c7e:	78fb      	ldrb	r3, [r7, #3]
 8008c80:	015a      	lsls	r2, r3, #5
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	4413      	add	r3, r2
 8008c86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c8a:	689b      	ldr	r3, [r3, #8]
 8008c8c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8008c8e:	78fb      	ldrb	r3, [r7, #3]
 8008c90:	015a      	lsls	r2, r3, #5
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	4413      	add	r3, r2
 8008c96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c9a:	68db      	ldr	r3, [r3, #12]
 8008c9c:	68ba      	ldr	r2, [r7, #8]
 8008c9e:	4013      	ands	r3, r2
 8008ca0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008ca2:	68bb      	ldr	r3, [r7, #8]
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3714      	adds	r7, #20
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cae:	4770      	bx	lr

08008cb0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b083      	sub	sp, #12
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	695b      	ldr	r3, [r3, #20]
 8008cbc:	f003 0301 	and.w	r3, r3, #1
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	370c      	adds	r7, #12
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr

08008ccc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b085      	sub	sp, #20
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	3301      	adds	r3, #1
 8008cdc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008ce4:	d901      	bls.n	8008cea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008ce6:	2303      	movs	r3, #3
 8008ce8:	e022      	b.n	8008d30 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	691b      	ldr	r3, [r3, #16]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	daf2      	bge.n	8008cd8 <USB_CoreReset+0xc>

  count = 10U;
 8008cf2:	230a      	movs	r3, #10
 8008cf4:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8008cf6:	e002      	b.n	8008cfe <USB_CoreReset+0x32>
  {
    count--;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	3b01      	subs	r3, #1
 8008cfc:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d1f9      	bne.n	8008cf8 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	691b      	ldr	r3, [r3, #16]
 8008d08:	f043 0201 	orr.w	r2, r3, #1
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	3301      	adds	r3, #1
 8008d14:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008d1c:	d901      	bls.n	8008d22 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8008d1e:	2303      	movs	r3, #3
 8008d20:	e006      	b.n	8008d30 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	691b      	ldr	r3, [r3, #16]
 8008d26:	f003 0301 	and.w	r3, r3, #1
 8008d2a:	2b01      	cmp	r3, #1
 8008d2c:	d0f0      	beq.n	8008d10 <USB_CoreReset+0x44>

  return HAL_OK;
 8008d2e:	2300      	movs	r3, #0
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3714      	adds	r7, #20
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr

08008d3c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008d3c:	b084      	sub	sp, #16
 8008d3e:	b580      	push	{r7, lr}
 8008d40:	b086      	sub	sp, #24
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	6078      	str	r0, [r7, #4]
 8008d46:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008d4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008d5c:	461a      	mov	r2, r3
 8008d5e:	2300      	movs	r3, #0
 8008d60:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d66:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d72:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d7e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	68db      	ldr	r3, [r3, #12]
 8008d8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d119      	bne.n	8008dc6 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008d92:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008d96:	2b01      	cmp	r3, #1
 8008d98:	d10a      	bne.n	8008db0 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	68fa      	ldr	r2, [r7, #12]
 8008da4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008da8:	f043 0304 	orr.w	r3, r3, #4
 8008dac:	6013      	str	r3, [r2, #0]
 8008dae:	e014      	b.n	8008dda <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	68fa      	ldr	r2, [r7, #12]
 8008dba:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008dbe:	f023 0304 	bic.w	r3, r3, #4
 8008dc2:	6013      	str	r3, [r2, #0]
 8008dc4:	e009      	b.n	8008dda <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	68fa      	ldr	r2, [r7, #12]
 8008dd0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008dd4:	f023 0304 	bic.w	r3, r3, #4
 8008dd8:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008dda:	2110      	movs	r1, #16
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f7ff fe3d 	bl	8008a5c <USB_FlushTxFifo>
 8008de2:	4603      	mov	r3, r0
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d001      	beq.n	8008dec <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8008de8:	2301      	movs	r3, #1
 8008dea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f7ff fe67 	bl	8008ac0 <USB_FlushRxFifo>
 8008df2:	4603      	mov	r3, r0
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d001      	beq.n	8008dfc <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8008df8:	2301      	movs	r3, #1
 8008dfa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	613b      	str	r3, [r7, #16]
 8008e00:	e015      	b.n	8008e2e <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	015a      	lsls	r2, r3, #5
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	4413      	add	r3, r2
 8008e0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e0e:	461a      	mov	r2, r3
 8008e10:	f04f 33ff 	mov.w	r3, #4294967295
 8008e14:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	015a      	lsls	r2, r3, #5
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	4413      	add	r3, r2
 8008e1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e22:	461a      	mov	r2, r3
 8008e24:	2300      	movs	r3, #0
 8008e26:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	3301      	adds	r3, #1
 8008e2c:	613b      	str	r3, [r7, #16]
 8008e2e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008e32:	461a      	mov	r2, r3
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d3e3      	bcc.n	8008e02 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f04f 32ff 	mov.w	r2, #4294967295
 8008e46:	615a      	str	r2, [r3, #20]
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2280      	movs	r2, #128	@ 0x80
 8008e4c:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	4a0e      	ldr	r2, [pc, #56]	@ (8008e8c <USB_HostInit+0x150>)
 8008e52:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	4a0e      	ldr	r2, [pc, #56]	@ (8008e90 <USB_HostInit+0x154>)
 8008e58:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008e5c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d105      	bne.n	8008e70 <USB_HostInit+0x134>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	699b      	ldr	r3, [r3, #24]
 8008e68:	f043 0210 	orr.w	r2, r3, #16
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	699a      	ldr	r2, [r3, #24]
 8008e74:	4b07      	ldr	r3, [pc, #28]	@ (8008e94 <USB_HostInit+0x158>)
 8008e76:	4313      	orrs	r3, r2
 8008e78:	687a      	ldr	r2, [r7, #4]
 8008e7a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8008e7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3718      	adds	r7, #24
 8008e82:	46bd      	mov	sp, r7
 8008e84:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008e88:	b004      	add	sp, #16
 8008e8a:	4770      	bx	lr
 8008e8c:	00600080 	.word	0x00600080
 8008e90:	004000e0 	.word	0x004000e0
 8008e94:	a3200008 	.word	0xa3200008

08008e98 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b085      	sub	sp, #20
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	460b      	mov	r3, r1
 8008ea2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	68fa      	ldr	r2, [r7, #12]
 8008eb2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008eb6:	f023 0303 	bic.w	r3, r3, #3
 8008eba:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008ec2:	681a      	ldr	r2, [r3, #0]
 8008ec4:	78fb      	ldrb	r3, [r7, #3]
 8008ec6:	f003 0303 	and.w	r3, r3, #3
 8008eca:	68f9      	ldr	r1, [r7, #12]
 8008ecc:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008ed4:	78fb      	ldrb	r3, [r7, #3]
 8008ed6:	2b01      	cmp	r3, #1
 8008ed8:	d107      	bne.n	8008eea <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008ee0:	461a      	mov	r2, r3
 8008ee2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008ee6:	6053      	str	r3, [r2, #4]
 8008ee8:	e00c      	b.n	8008f04 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8008eea:	78fb      	ldrb	r3, [r7, #3]
 8008eec:	2b02      	cmp	r3, #2
 8008eee:	d107      	bne.n	8008f00 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008ef6:	461a      	mov	r2, r3
 8008ef8:	f241 7370 	movw	r3, #6000	@ 0x1770
 8008efc:	6053      	str	r3, [r2, #4]
 8008efe:	e001      	b.n	8008f04 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8008f00:	2301      	movs	r3, #1
 8008f02:	e000      	b.n	8008f06 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8008f04:	2300      	movs	r3, #0
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3714      	adds	r7, #20
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f10:	4770      	bx	lr

08008f12 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8008f12:	b580      	push	{r7, lr}
 8008f14:	b084      	sub	sp, #16
 8008f16:	af00      	add	r7, sp, #0
 8008f18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8008f32:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	68fa      	ldr	r2, [r7, #12]
 8008f38:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008f3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008f40:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008f42:	2064      	movs	r0, #100	@ 0x64
 8008f44:	f7f9 ffb6 	bl	8002eb4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	68fa      	ldr	r2, [r7, #12]
 8008f4c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008f50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008f54:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008f56:	200a      	movs	r0, #10
 8008f58:	f7f9 ffac 	bl	8002eb4 <HAL_Delay>

  return HAL_OK;
 8008f5c:	2300      	movs	r3, #0
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3710      	adds	r7, #16
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}

08008f66 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008f66:	b480      	push	{r7}
 8008f68:	b085      	sub	sp, #20
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	6078      	str	r0, [r7, #4]
 8008f6e:	460b      	mov	r3, r1
 8008f70:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008f76:	2300      	movs	r3, #0
 8008f78:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8008f8a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d109      	bne.n	8008faa <USB_DriveVbus+0x44>
 8008f96:	78fb      	ldrb	r3, [r7, #3]
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	d106      	bne.n	8008faa <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	68fa      	ldr	r2, [r7, #12]
 8008fa0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008fa4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008fa8:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008fb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008fb4:	d109      	bne.n	8008fca <USB_DriveVbus+0x64>
 8008fb6:	78fb      	ldrb	r3, [r7, #3]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d106      	bne.n	8008fca <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	68fa      	ldr	r2, [r7, #12]
 8008fc0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008fc4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008fc8:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008fca:	2300      	movs	r3, #0
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	3714      	adds	r7, #20
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd6:	4770      	bx	lr

08008fd8 <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b085      	sub	sp, #20
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	0c5b      	lsrs	r3, r3, #17
 8008ff6:	f003 0303 	and.w	r3, r3, #3
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3714      	adds	r7, #20
 8008ffe:	46bd      	mov	sp, r7
 8009000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009004:	4770      	bx	lr

08009006 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8009006:	b480      	push	{r7}
 8009008:	b085      	sub	sp, #20
 800900a:	af00      	add	r7, sp, #0
 800900c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009018:	689b      	ldr	r3, [r3, #8]
 800901a:	b29b      	uxth	r3, r3
}
 800901c:	4618      	mov	r0, r3
 800901e:	3714      	adds	r7, #20
 8009020:	46bd      	mov	sp, r7
 8009022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009026:	4770      	bx	lr

08009028 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b088      	sub	sp, #32
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	4608      	mov	r0, r1
 8009032:	4611      	mov	r1, r2
 8009034:	461a      	mov	r2, r3
 8009036:	4603      	mov	r3, r0
 8009038:	70fb      	strb	r3, [r7, #3]
 800903a:	460b      	mov	r3, r1
 800903c:	70bb      	strb	r3, [r7, #2]
 800903e:	4613      	mov	r3, r2
 8009040:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8009042:	2300      	movs	r3, #0
 8009044:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800904a:	78fb      	ldrb	r3, [r7, #3]
 800904c:	015a      	lsls	r2, r3, #5
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	4413      	add	r3, r2
 8009052:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009056:	461a      	mov	r2, r3
 8009058:	f04f 33ff 	mov.w	r3, #4294967295
 800905c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800905e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009062:	2b03      	cmp	r3, #3
 8009064:	d867      	bhi.n	8009136 <USB_HC_Init+0x10e>
 8009066:	a201      	add	r2, pc, #4	@ (adr r2, 800906c <USB_HC_Init+0x44>)
 8009068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800906c:	0800907d 	.word	0x0800907d
 8009070:	080090f9 	.word	0x080090f9
 8009074:	0800907d 	.word	0x0800907d
 8009078:	080090bb 	.word	0x080090bb
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800907c:	78fb      	ldrb	r3, [r7, #3]
 800907e:	015a      	lsls	r2, r3, #5
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	4413      	add	r3, r2
 8009084:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009088:	461a      	mov	r2, r3
 800908a:	f240 439d 	movw	r3, #1181	@ 0x49d
 800908e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8009090:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009094:	2b00      	cmp	r3, #0
 8009096:	da51      	bge.n	800913c <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009098:	78fb      	ldrb	r3, [r7, #3]
 800909a:	015a      	lsls	r2, r3, #5
 800909c:	693b      	ldr	r3, [r7, #16]
 800909e:	4413      	add	r3, r2
 80090a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090a4:	68db      	ldr	r3, [r3, #12]
 80090a6:	78fa      	ldrb	r2, [r7, #3]
 80090a8:	0151      	lsls	r1, r2, #5
 80090aa:	693a      	ldr	r2, [r7, #16]
 80090ac:	440a      	add	r2, r1
 80090ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80090b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80090b6:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 80090b8:	e040      	b.n	800913c <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80090ba:	78fb      	ldrb	r3, [r7, #3]
 80090bc:	015a      	lsls	r2, r3, #5
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	4413      	add	r3, r2
 80090c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090c6:	461a      	mov	r2, r3
 80090c8:	f240 639d 	movw	r3, #1693	@ 0x69d
 80090cc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80090ce:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	da34      	bge.n	8009140 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80090d6:	78fb      	ldrb	r3, [r7, #3]
 80090d8:	015a      	lsls	r2, r3, #5
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	4413      	add	r3, r2
 80090de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090e2:	68db      	ldr	r3, [r3, #12]
 80090e4:	78fa      	ldrb	r2, [r7, #3]
 80090e6:	0151      	lsls	r1, r2, #5
 80090e8:	693a      	ldr	r2, [r7, #16]
 80090ea:	440a      	add	r2, r1
 80090ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80090f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80090f4:	60d3      	str	r3, [r2, #12]
      }

      break;
 80090f6:	e023      	b.n	8009140 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80090f8:	78fb      	ldrb	r3, [r7, #3]
 80090fa:	015a      	lsls	r2, r3, #5
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	4413      	add	r3, r2
 8009100:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009104:	461a      	mov	r2, r3
 8009106:	f240 2325 	movw	r3, #549	@ 0x225
 800910a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800910c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009110:	2b00      	cmp	r3, #0
 8009112:	da17      	bge.n	8009144 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8009114:	78fb      	ldrb	r3, [r7, #3]
 8009116:	015a      	lsls	r2, r3, #5
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	4413      	add	r3, r2
 800911c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009120:	68db      	ldr	r3, [r3, #12]
 8009122:	78fa      	ldrb	r2, [r7, #3]
 8009124:	0151      	lsls	r1, r2, #5
 8009126:	693a      	ldr	r2, [r7, #16]
 8009128:	440a      	add	r2, r1
 800912a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800912e:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8009132:	60d3      	str	r3, [r2, #12]
      }
      break;
 8009134:	e006      	b.n	8009144 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 8009136:	2301      	movs	r3, #1
 8009138:	77fb      	strb	r3, [r7, #31]
      break;
 800913a:	e004      	b.n	8009146 <USB_HC_Init+0x11e>
      break;
 800913c:	bf00      	nop
 800913e:	e002      	b.n	8009146 <USB_HC_Init+0x11e>
      break;
 8009140:	bf00      	nop
 8009142:	e000      	b.n	8009146 <USB_HC_Init+0x11e>
      break;
 8009144:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8009146:	78fb      	ldrb	r3, [r7, #3]
 8009148:	015a      	lsls	r2, r3, #5
 800914a:	693b      	ldr	r3, [r7, #16]
 800914c:	4413      	add	r3, r2
 800914e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009152:	461a      	mov	r2, r3
 8009154:	2300      	movs	r3, #0
 8009156:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8009158:	78fb      	ldrb	r3, [r7, #3]
 800915a:	015a      	lsls	r2, r3, #5
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	4413      	add	r3, r2
 8009160:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009164:	68db      	ldr	r3, [r3, #12]
 8009166:	78fa      	ldrb	r2, [r7, #3]
 8009168:	0151      	lsls	r1, r2, #5
 800916a:	693a      	ldr	r2, [r7, #16]
 800916c:	440a      	add	r2, r1
 800916e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009172:	f043 0302 	orr.w	r3, r3, #2
 8009176:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8009178:	693b      	ldr	r3, [r7, #16]
 800917a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800917e:	699a      	ldr	r2, [r3, #24]
 8009180:	78fb      	ldrb	r3, [r7, #3]
 8009182:	f003 030f 	and.w	r3, r3, #15
 8009186:	2101      	movs	r1, #1
 8009188:	fa01 f303 	lsl.w	r3, r1, r3
 800918c:	6939      	ldr	r1, [r7, #16]
 800918e:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8009192:	4313      	orrs	r3, r2
 8009194:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	699b      	ldr	r3, [r3, #24]
 800919a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80091a2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	da03      	bge.n	80091b2 <USB_HC_Init+0x18a>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80091aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80091ae:	61bb      	str	r3, [r7, #24]
 80091b0:	e001      	b.n	80091b6 <USB_HC_Init+0x18e>
  }
  else
  {
    HCcharEpDir = 0U;
 80091b2:	2300      	movs	r3, #0
 80091b4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f7ff ff0e 	bl	8008fd8 <USB_GetHostSpeed>
 80091bc:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80091be:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80091c2:	2b02      	cmp	r3, #2
 80091c4:	d106      	bne.n	80091d4 <USB_HC_Init+0x1ac>
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	2b02      	cmp	r3, #2
 80091ca:	d003      	beq.n	80091d4 <USB_HC_Init+0x1ac>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80091cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80091d0:	617b      	str	r3, [r7, #20]
 80091d2:	e001      	b.n	80091d8 <USB_HC_Init+0x1b0>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80091d4:	2300      	movs	r3, #0
 80091d6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80091d8:	787b      	ldrb	r3, [r7, #1]
 80091da:	059b      	lsls	r3, r3, #22
 80091dc:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80091e0:	78bb      	ldrb	r3, [r7, #2]
 80091e2:	02db      	lsls	r3, r3, #11
 80091e4:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80091e8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80091ea:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80091ee:	049b      	lsls	r3, r3, #18
 80091f0:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80091f4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80091f6:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80091f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80091fc:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80091fe:	69bb      	ldr	r3, [r7, #24]
 8009200:	431a      	orrs	r2, r3
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009206:	78fa      	ldrb	r2, [r7, #3]
 8009208:	0151      	lsls	r1, r2, #5
 800920a:	693a      	ldr	r2, [r7, #16]
 800920c:	440a      	add	r2, r1
 800920e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8009212:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009216:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8009218:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800921c:	2b03      	cmp	r3, #3
 800921e:	d003      	beq.n	8009228 <USB_HC_Init+0x200>
 8009220:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009224:	2b01      	cmp	r3, #1
 8009226:	d10f      	bne.n	8009248 <USB_HC_Init+0x220>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8009228:	78fb      	ldrb	r3, [r7, #3]
 800922a:	015a      	lsls	r2, r3, #5
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	4413      	add	r3, r2
 8009230:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	78fa      	ldrb	r2, [r7, #3]
 8009238:	0151      	lsls	r1, r2, #5
 800923a:	693a      	ldr	r2, [r7, #16]
 800923c:	440a      	add	r2, r1
 800923e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009242:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009246:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8009248:	7ffb      	ldrb	r3, [r7, #31]
}
 800924a:	4618      	mov	r0, r3
 800924c:	3720      	adds	r7, #32
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}
 8009252:	bf00      	nop

08009254 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b08c      	sub	sp, #48	@ 0x30
 8009258:	af02      	add	r7, sp, #8
 800925a:	60f8      	str	r0, [r7, #12]
 800925c:	60b9      	str	r1, [r7, #8]
 800925e:	4613      	mov	r3, r2
 8009260:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	785b      	ldrb	r3, [r3, #1]
 800926a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800926c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009270:	837b      	strh	r3, [r7, #26]
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	799b      	ldrb	r3, [r3, #6]
 8009276:	2b01      	cmp	r3, #1
 8009278:	d158      	bne.n	800932c <USB_HC_StartXfer+0xd8>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800927a:	2301      	movs	r3, #1
 800927c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	78db      	ldrb	r3, [r3, #3]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d007      	beq.n	8009296 <USB_HC_StartXfer+0x42>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009286:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009288:	68ba      	ldr	r2, [r7, #8]
 800928a:	8a92      	ldrh	r2, [r2, #20]
 800928c:	fb03 f202 	mul.w	r2, r3, r2
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	61da      	str	r2, [r3, #28]
 8009294:	e079      	b.n	800938a <USB_HC_StartXfer+0x136>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	7c9b      	ldrb	r3, [r3, #18]
 800929a:	2b01      	cmp	r3, #1
 800929c:	d130      	bne.n	8009300 <USB_HC_StartXfer+0xac>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	6a1b      	ldr	r3, [r3, #32]
 80092a2:	2bbc      	cmp	r3, #188	@ 0xbc
 80092a4:	d918      	bls.n	80092d8 <USB_HC_StartXfer+0x84>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	8a9b      	ldrh	r3, [r3, #20]
 80092aa:	461a      	mov	r2, r3
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	69da      	ldr	r2, [r3, #28]
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	68db      	ldr	r3, [r3, #12]
 80092bc:	2b01      	cmp	r3, #1
 80092be:	d003      	beq.n	80092c8 <USB_HC_StartXfer+0x74>
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	68db      	ldr	r3, [r3, #12]
 80092c4:	2b02      	cmp	r3, #2
 80092c6:	d103      	bne.n	80092d0 <USB_HC_StartXfer+0x7c>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	2202      	movs	r2, #2
 80092cc:	60da      	str	r2, [r3, #12]
 80092ce:	e05c      	b.n	800938a <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	2201      	movs	r2, #1
 80092d4:	60da      	str	r2, [r3, #12]
 80092d6:	e058      	b.n	800938a <USB_HC_StartXfer+0x136>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	6a1a      	ldr	r2, [r3, #32]
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	68db      	ldr	r3, [r3, #12]
 80092e4:	2b01      	cmp	r3, #1
 80092e6:	d007      	beq.n	80092f8 <USB_HC_StartXfer+0xa4>
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	68db      	ldr	r3, [r3, #12]
 80092ec:	2b02      	cmp	r3, #2
 80092ee:	d003      	beq.n	80092f8 <USB_HC_StartXfer+0xa4>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	2204      	movs	r2, #4
 80092f4:	60da      	str	r2, [r3, #12]
 80092f6:	e048      	b.n	800938a <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	2203      	movs	r2, #3
 80092fc:	60da      	str	r2, [r3, #12]
 80092fe:	e044      	b.n	800938a <USB_HC_StartXfer+0x136>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8009300:	79fb      	ldrb	r3, [r7, #7]
 8009302:	2b01      	cmp	r3, #1
 8009304:	d10d      	bne.n	8009322 <USB_HC_StartXfer+0xce>
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	6a1b      	ldr	r3, [r3, #32]
 800930a:	68ba      	ldr	r2, [r7, #8]
 800930c:	8a92      	ldrh	r2, [r2, #20]
 800930e:	4293      	cmp	r3, r2
 8009310:	d907      	bls.n	8009322 <USB_HC_StartXfer+0xce>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009312:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009314:	68ba      	ldr	r2, [r7, #8]
 8009316:	8a92      	ldrh	r2, [r2, #20]
 8009318:	fb03 f202 	mul.w	r2, r3, r2
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	61da      	str	r2, [r3, #28]
 8009320:	e033      	b.n	800938a <USB_HC_StartXfer+0x136>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	6a1a      	ldr	r2, [r3, #32]
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	61da      	str	r2, [r3, #28]
 800932a:	e02e      	b.n	800938a <USB_HC_StartXfer+0x136>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	6a1b      	ldr	r3, [r3, #32]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d018      	beq.n	8009366 <USB_HC_StartXfer+0x112>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	6a1b      	ldr	r3, [r3, #32]
 8009338:	68ba      	ldr	r2, [r7, #8]
 800933a:	8a92      	ldrh	r2, [r2, #20]
 800933c:	4413      	add	r3, r2
 800933e:	3b01      	subs	r3, #1
 8009340:	68ba      	ldr	r2, [r7, #8]
 8009342:	8a92      	ldrh	r2, [r2, #20]
 8009344:	fbb3 f3f2 	udiv	r3, r3, r2
 8009348:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800934a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800934c:	8b7b      	ldrh	r3, [r7, #26]
 800934e:	429a      	cmp	r2, r3
 8009350:	d90b      	bls.n	800936a <USB_HC_StartXfer+0x116>
      {
        num_packets = max_hc_pkt_count;
 8009352:	8b7b      	ldrh	r3, [r7, #26]
 8009354:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009356:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009358:	68ba      	ldr	r2, [r7, #8]
 800935a:	8a92      	ldrh	r2, [r2, #20]
 800935c:	fb03 f202 	mul.w	r2, r3, r2
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	61da      	str	r2, [r3, #28]
 8009364:	e001      	b.n	800936a <USB_HC_StartXfer+0x116>
      }
    }
    else
    {
      num_packets = 1U;
 8009366:	2301      	movs	r3, #1
 8009368:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	78db      	ldrb	r3, [r3, #3]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d007      	beq.n	8009382 <USB_HC_StartXfer+0x12e>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009372:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009374:	68ba      	ldr	r2, [r7, #8]
 8009376:	8a92      	ldrh	r2, [r2, #20]
 8009378:	fb03 f202 	mul.w	r2, r3, r2
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	61da      	str	r2, [r3, #28]
 8009380:	e003      	b.n	800938a <USB_HC_StartXfer+0x136>
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	6a1a      	ldr	r2, [r3, #32]
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	69db      	ldr	r3, [r3, #28]
 800938e:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009392:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009394:	04d9      	lsls	r1, r3, #19
 8009396:	4ba4      	ldr	r3, [pc, #656]	@ (8009628 <USB_HC_StartXfer+0x3d4>)
 8009398:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800939a:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	7d9b      	ldrb	r3, [r3, #22]
 80093a0:	075b      	lsls	r3, r3, #29
 80093a2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80093a6:	69f9      	ldr	r1, [r7, #28]
 80093a8:	0148      	lsls	r0, r1, #5
 80093aa:	6a39      	ldr	r1, [r7, #32]
 80093ac:	4401      	add	r1, r0
 80093ae:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80093b2:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80093b4:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80093b6:	79fb      	ldrb	r3, [r7, #7]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d009      	beq.n	80093d0 <USB_HC_StartXfer+0x17c>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	6999      	ldr	r1, [r3, #24]
 80093c0:	69fb      	ldr	r3, [r7, #28]
 80093c2:	015a      	lsls	r2, r3, #5
 80093c4:	6a3b      	ldr	r3, [r7, #32]
 80093c6:	4413      	add	r3, r2
 80093c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80093cc:	460a      	mov	r2, r1
 80093ce:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80093d0:	6a3b      	ldr	r3, [r7, #32]
 80093d2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80093d6:	689b      	ldr	r3, [r3, #8]
 80093d8:	f003 0301 	and.w	r3, r3, #1
 80093dc:	2b00      	cmp	r3, #0
 80093de:	bf0c      	ite	eq
 80093e0:	2301      	moveq	r3, #1
 80093e2:	2300      	movne	r3, #0
 80093e4:	b2db      	uxtb	r3, r3
 80093e6:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80093e8:	69fb      	ldr	r3, [r7, #28]
 80093ea:	015a      	lsls	r2, r3, #5
 80093ec:	6a3b      	ldr	r3, [r7, #32]
 80093ee:	4413      	add	r3, r2
 80093f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	69fa      	ldr	r2, [r7, #28]
 80093f8:	0151      	lsls	r1, r2, #5
 80093fa:	6a3a      	ldr	r2, [r7, #32]
 80093fc:	440a      	add	r2, r1
 80093fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009402:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009406:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8009408:	69fb      	ldr	r3, [r7, #28]
 800940a:	015a      	lsls	r2, r3, #5
 800940c:	6a3b      	ldr	r3, [r7, #32]
 800940e:	4413      	add	r3, r2
 8009410:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009414:	681a      	ldr	r2, [r3, #0]
 8009416:	7e7b      	ldrb	r3, [r7, #25]
 8009418:	075b      	lsls	r3, r3, #29
 800941a:	69f9      	ldr	r1, [r7, #28]
 800941c:	0148      	lsls	r0, r1, #5
 800941e:	6a39      	ldr	r1, [r7, #32]
 8009420:	4401      	add	r1, r0
 8009422:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8009426:	4313      	orrs	r3, r2
 8009428:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	799b      	ldrb	r3, [r3, #6]
 800942e:	2b01      	cmp	r3, #1
 8009430:	f040 80c4 	bne.w	80095bc <USB_HC_StartXfer+0x368>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	7c5b      	ldrb	r3, [r3, #17]
 8009438:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800943a:	68ba      	ldr	r2, [r7, #8]
 800943c:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800943e:	4313      	orrs	r3, r2
 8009440:	69fa      	ldr	r2, [r7, #28]
 8009442:	0151      	lsls	r1, r2, #5
 8009444:	6a3a      	ldr	r2, [r7, #32]
 8009446:	440a      	add	r2, r1
 8009448:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800944c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8009450:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8009452:	69fb      	ldr	r3, [r7, #28]
 8009454:	015a      	lsls	r2, r3, #5
 8009456:	6a3b      	ldr	r3, [r7, #32]
 8009458:	4413      	add	r3, r2
 800945a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800945e:	68db      	ldr	r3, [r3, #12]
 8009460:	69fa      	ldr	r2, [r7, #28]
 8009462:	0151      	lsls	r1, r2, #5
 8009464:	6a3a      	ldr	r2, [r7, #32]
 8009466:	440a      	add	r2, r1
 8009468:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800946c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009470:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	79db      	ldrb	r3, [r3, #7]
 8009476:	2b01      	cmp	r3, #1
 8009478:	d123      	bne.n	80094c2 <USB_HC_StartXfer+0x26e>
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	78db      	ldrb	r3, [r3, #3]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d11f      	bne.n	80094c2 <USB_HC_StartXfer+0x26e>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8009482:	69fb      	ldr	r3, [r7, #28]
 8009484:	015a      	lsls	r2, r3, #5
 8009486:	6a3b      	ldr	r3, [r7, #32]
 8009488:	4413      	add	r3, r2
 800948a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800948e:	685b      	ldr	r3, [r3, #4]
 8009490:	69fa      	ldr	r2, [r7, #28]
 8009492:	0151      	lsls	r1, r2, #5
 8009494:	6a3a      	ldr	r2, [r7, #32]
 8009496:	440a      	add	r2, r1
 8009498:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800949c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80094a0:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80094a2:	69fb      	ldr	r3, [r7, #28]
 80094a4:	015a      	lsls	r2, r3, #5
 80094a6:	6a3b      	ldr	r3, [r7, #32]
 80094a8:	4413      	add	r3, r2
 80094aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80094ae:	68db      	ldr	r3, [r3, #12]
 80094b0:	69fa      	ldr	r2, [r7, #28]
 80094b2:	0151      	lsls	r1, r2, #5
 80094b4:	6a3a      	ldr	r2, [r7, #32]
 80094b6:	440a      	add	r2, r1
 80094b8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80094bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80094c0:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	7c9b      	ldrb	r3, [r3, #18]
 80094c6:	2b01      	cmp	r3, #1
 80094c8:	d003      	beq.n	80094d2 <USB_HC_StartXfer+0x27e>
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	7c9b      	ldrb	r3, [r3, #18]
 80094ce:	2b03      	cmp	r3, #3
 80094d0:	d117      	bne.n	8009502 <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80094d6:	2b01      	cmp	r3, #1
 80094d8:	d113      	bne.n	8009502 <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	78db      	ldrb	r3, [r3, #3]
 80094de:	2b01      	cmp	r3, #1
 80094e0:	d10f      	bne.n	8009502 <USB_HC_StartXfer+0x2ae>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80094e2:	69fb      	ldr	r3, [r7, #28]
 80094e4:	015a      	lsls	r2, r3, #5
 80094e6:	6a3b      	ldr	r3, [r7, #32]
 80094e8:	4413      	add	r3, r2
 80094ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80094ee:	685b      	ldr	r3, [r3, #4]
 80094f0:	69fa      	ldr	r2, [r7, #28]
 80094f2:	0151      	lsls	r1, r2, #5
 80094f4:	6a3a      	ldr	r2, [r7, #32]
 80094f6:	440a      	add	r2, r1
 80094f8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80094fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009500:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8009502:	68bb      	ldr	r3, [r7, #8]
 8009504:	7c9b      	ldrb	r3, [r3, #18]
 8009506:	2b01      	cmp	r3, #1
 8009508:	d163      	bne.n	80095d2 <USB_HC_StartXfer+0x37e>
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	78db      	ldrb	r3, [r3, #3]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d15f      	bne.n	80095d2 <USB_HC_StartXfer+0x37e>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	68db      	ldr	r3, [r3, #12]
 8009516:	3b01      	subs	r3, #1
 8009518:	2b03      	cmp	r3, #3
 800951a:	d859      	bhi.n	80095d0 <USB_HC_StartXfer+0x37c>
 800951c:	a201      	add	r2, pc, #4	@ (adr r2, 8009524 <USB_HC_StartXfer+0x2d0>)
 800951e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009522:	bf00      	nop
 8009524:	08009535 	.word	0x08009535
 8009528:	08009557 	.word	0x08009557
 800952c:	08009579 	.word	0x08009579
 8009530:	0800959b 	.word	0x0800959b
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8009534:	69fb      	ldr	r3, [r7, #28]
 8009536:	015a      	lsls	r2, r3, #5
 8009538:	6a3b      	ldr	r3, [r7, #32]
 800953a:	4413      	add	r3, r2
 800953c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009540:	685b      	ldr	r3, [r3, #4]
 8009542:	69fa      	ldr	r2, [r7, #28]
 8009544:	0151      	lsls	r1, r2, #5
 8009546:	6a3a      	ldr	r2, [r7, #32]
 8009548:	440a      	add	r2, r1
 800954a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800954e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009552:	6053      	str	r3, [r2, #4]
          break;
 8009554:	e03d      	b.n	80095d2 <USB_HC_StartXfer+0x37e>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8009556:	69fb      	ldr	r3, [r7, #28]
 8009558:	015a      	lsls	r2, r3, #5
 800955a:	6a3b      	ldr	r3, [r7, #32]
 800955c:	4413      	add	r3, r2
 800955e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	69fa      	ldr	r2, [r7, #28]
 8009566:	0151      	lsls	r1, r2, #5
 8009568:	6a3a      	ldr	r2, [r7, #32]
 800956a:	440a      	add	r2, r1
 800956c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009570:	f043 030e 	orr.w	r3, r3, #14
 8009574:	6053      	str	r3, [r2, #4]
          break;
 8009576:	e02c      	b.n	80095d2 <USB_HC_StartXfer+0x37e>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8009578:	69fb      	ldr	r3, [r7, #28]
 800957a:	015a      	lsls	r2, r3, #5
 800957c:	6a3b      	ldr	r3, [r7, #32]
 800957e:	4413      	add	r3, r2
 8009580:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009584:	685b      	ldr	r3, [r3, #4]
 8009586:	69fa      	ldr	r2, [r7, #28]
 8009588:	0151      	lsls	r1, r2, #5
 800958a:	6a3a      	ldr	r2, [r7, #32]
 800958c:	440a      	add	r2, r1
 800958e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009592:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009596:	6053      	str	r3, [r2, #4]
          break;
 8009598:	e01b      	b.n	80095d2 <USB_HC_StartXfer+0x37e>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800959a:	69fb      	ldr	r3, [r7, #28]
 800959c:	015a      	lsls	r2, r3, #5
 800959e:	6a3b      	ldr	r3, [r7, #32]
 80095a0:	4413      	add	r3, r2
 80095a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80095a6:	685b      	ldr	r3, [r3, #4]
 80095a8:	69fa      	ldr	r2, [r7, #28]
 80095aa:	0151      	lsls	r1, r2, #5
 80095ac:	6a3a      	ldr	r2, [r7, #32]
 80095ae:	440a      	add	r2, r1
 80095b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80095b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80095b8:	6053      	str	r3, [r2, #4]
          break;
 80095ba:	e00a      	b.n	80095d2 <USB_HC_StartXfer+0x37e>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80095bc:	69fb      	ldr	r3, [r7, #28]
 80095be:	015a      	lsls	r2, r3, #5
 80095c0:	6a3b      	ldr	r3, [r7, #32]
 80095c2:	4413      	add	r3, r2
 80095c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80095c8:	461a      	mov	r2, r3
 80095ca:	2300      	movs	r3, #0
 80095cc:	6053      	str	r3, [r2, #4]
 80095ce:	e000      	b.n	80095d2 <USB_HC_StartXfer+0x37e>
          break;
 80095d0:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80095d2:	69fb      	ldr	r3, [r7, #28]
 80095d4:	015a      	lsls	r2, r3, #5
 80095d6:	6a3b      	ldr	r3, [r7, #32]
 80095d8:	4413      	add	r3, r2
 80095da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80095e8:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	78db      	ldrb	r3, [r3, #3]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d004      	beq.n	80095fc <USB_HC_StartXfer+0x3a8>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80095f2:	693b      	ldr	r3, [r7, #16]
 80095f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80095f8:	613b      	str	r3, [r7, #16]
 80095fa:	e003      	b.n	8009604 <USB_HC_StartXfer+0x3b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009602:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800960a:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800960c:	69fb      	ldr	r3, [r7, #28]
 800960e:	015a      	lsls	r2, r3, #5
 8009610:	6a3b      	ldr	r3, [r7, #32]
 8009612:	4413      	add	r3, r2
 8009614:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009618:	461a      	mov	r2, r3
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800961e:	79fb      	ldrb	r3, [r7, #7]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d003      	beq.n	800962c <USB_HC_StartXfer+0x3d8>
  {
    return HAL_OK;
 8009624:	2300      	movs	r3, #0
 8009626:	e055      	b.n	80096d4 <USB_HC_StartXfer+0x480>
 8009628:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	78db      	ldrb	r3, [r3, #3]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d14e      	bne.n	80096d2 <USB_HC_StartXfer+0x47e>
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	6a1b      	ldr	r3, [r3, #32]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d04a      	beq.n	80096d2 <USB_HC_StartXfer+0x47e>
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	79db      	ldrb	r3, [r3, #7]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d146      	bne.n	80096d2 <USB_HC_StartXfer+0x47e>
  {
    switch (hc->ep_type)
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	7c9b      	ldrb	r3, [r3, #18]
 8009648:	2b03      	cmp	r3, #3
 800964a:	d831      	bhi.n	80096b0 <USB_HC_StartXfer+0x45c>
 800964c:	a201      	add	r2, pc, #4	@ (adr r2, 8009654 <USB_HC_StartXfer+0x400>)
 800964e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009652:	bf00      	nop
 8009654:	08009665 	.word	0x08009665
 8009658:	08009689 	.word	0x08009689
 800965c:	08009665 	.word	0x08009665
 8009660:	08009689 	.word	0x08009689
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	6a1b      	ldr	r3, [r3, #32]
 8009668:	3303      	adds	r3, #3
 800966a:	089b      	lsrs	r3, r3, #2
 800966c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800966e:	8afa      	ldrh	r2, [r7, #22]
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009674:	b29b      	uxth	r3, r3
 8009676:	429a      	cmp	r2, r3
 8009678:	d91c      	bls.n	80096b4 <USB_HC_StartXfer+0x460>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	699b      	ldr	r3, [r3, #24]
 800967e:	f043 0220 	orr.w	r2, r3, #32
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	619a      	str	r2, [r3, #24]
        }
        break;
 8009686:	e015      	b.n	80096b4 <USB_HC_StartXfer+0x460>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	6a1b      	ldr	r3, [r3, #32]
 800968c:	3303      	adds	r3, #3
 800968e:	089b      	lsrs	r3, r3, #2
 8009690:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8009692:	8afa      	ldrh	r2, [r7, #22]
 8009694:	6a3b      	ldr	r3, [r7, #32]
 8009696:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800969a:	691b      	ldr	r3, [r3, #16]
 800969c:	b29b      	uxth	r3, r3
 800969e:	429a      	cmp	r2, r3
 80096a0:	d90a      	bls.n	80096b8 <USB_HC_StartXfer+0x464>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	699b      	ldr	r3, [r3, #24]
 80096a6:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	619a      	str	r2, [r3, #24]
        }
        break;
 80096ae:	e003      	b.n	80096b8 <USB_HC_StartXfer+0x464>

      default:
        break;
 80096b0:	bf00      	nop
 80096b2:	e002      	b.n	80096ba <USB_HC_StartXfer+0x466>
        break;
 80096b4:	bf00      	nop
 80096b6:	e000      	b.n	80096ba <USB_HC_StartXfer+0x466>
        break;
 80096b8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	6999      	ldr	r1, [r3, #24]
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	785a      	ldrb	r2, [r3, #1]
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	6a1b      	ldr	r3, [r3, #32]
 80096c6:	b29b      	uxth	r3, r3
 80096c8:	2000      	movs	r0, #0
 80096ca:	9000      	str	r0, [sp, #0]
 80096cc:	68f8      	ldr	r0, [r7, #12]
 80096ce:	f7ff fa25 	bl	8008b1c <USB_WritePacket>
  }

  return HAL_OK;
 80096d2:	2300      	movs	r3, #0
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	3728      	adds	r7, #40	@ 0x28
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}

080096dc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80096dc:	b480      	push	{r7}
 80096de:	b085      	sub	sp, #20
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80096ee:	695b      	ldr	r3, [r3, #20]
 80096f0:	b29b      	uxth	r3, r3
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3714      	adds	r7, #20
 80096f6:	46bd      	mov	sp, r7
 80096f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fc:	4770      	bx	lr

080096fe <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80096fe:	b480      	push	{r7}
 8009700:	b089      	sub	sp, #36	@ 0x24
 8009702:	af00      	add	r7, sp, #0
 8009704:	6078      	str	r0, [r7, #4]
 8009706:	460b      	mov	r3, r1
 8009708:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800970e:	78fb      	ldrb	r3, [r7, #3]
 8009710:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8009712:	2300      	movs	r3, #0
 8009714:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8009716:	69bb      	ldr	r3, [r7, #24]
 8009718:	015a      	lsls	r2, r3, #5
 800971a:	69fb      	ldr	r3, [r7, #28]
 800971c:	4413      	add	r3, r2
 800971e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	0c9b      	lsrs	r3, r3, #18
 8009726:	f003 0303 	and.w	r3, r3, #3
 800972a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800972c:	69bb      	ldr	r3, [r7, #24]
 800972e:	015a      	lsls	r2, r3, #5
 8009730:	69fb      	ldr	r3, [r7, #28]
 8009732:	4413      	add	r3, r2
 8009734:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	0fdb      	lsrs	r3, r3, #31
 800973c:	f003 0301 	and.w	r3, r3, #1
 8009740:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8009742:	69bb      	ldr	r3, [r7, #24]
 8009744:	015a      	lsls	r2, r3, #5
 8009746:	69fb      	ldr	r3, [r7, #28]
 8009748:	4413      	add	r3, r2
 800974a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	0fdb      	lsrs	r3, r3, #31
 8009752:	f003 0301 	and.w	r3, r3, #1
 8009756:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	689b      	ldr	r3, [r3, #8]
 800975c:	f003 0320 	and.w	r3, r3, #32
 8009760:	2b20      	cmp	r3, #32
 8009762:	d10d      	bne.n	8009780 <USB_HC_Halt+0x82>
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d10a      	bne.n	8009780 <USB_HC_Halt+0x82>
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d005      	beq.n	800977c <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	2b01      	cmp	r3, #1
 8009774:	d002      	beq.n	800977c <USB_HC_Halt+0x7e>
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	2b03      	cmp	r3, #3
 800977a:	d101      	bne.n	8009780 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800977c:	2300      	movs	r3, #0
 800977e:	e0d8      	b.n	8009932 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009780:	697b      	ldr	r3, [r7, #20]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d002      	beq.n	800978c <USB_HC_Halt+0x8e>
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	2b02      	cmp	r3, #2
 800978a:	d173      	bne.n	8009874 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800978c:	69bb      	ldr	r3, [r7, #24]
 800978e:	015a      	lsls	r2, r3, #5
 8009790:	69fb      	ldr	r3, [r7, #28]
 8009792:	4413      	add	r3, r2
 8009794:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	69ba      	ldr	r2, [r7, #24]
 800979c:	0151      	lsls	r1, r2, #5
 800979e:	69fa      	ldr	r2, [r7, #28]
 80097a0:	440a      	add	r2, r1
 80097a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80097a6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80097aa:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	689b      	ldr	r3, [r3, #8]
 80097b0:	f003 0320 	and.w	r3, r3, #32
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d14a      	bne.n	800984e <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097bc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d133      	bne.n	800982c <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80097c4:	69bb      	ldr	r3, [r7, #24]
 80097c6:	015a      	lsls	r2, r3, #5
 80097c8:	69fb      	ldr	r3, [r7, #28]
 80097ca:	4413      	add	r3, r2
 80097cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	69ba      	ldr	r2, [r7, #24]
 80097d4:	0151      	lsls	r1, r2, #5
 80097d6:	69fa      	ldr	r2, [r7, #28]
 80097d8:	440a      	add	r2, r1
 80097da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80097de:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80097e2:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80097e4:	69bb      	ldr	r3, [r7, #24]
 80097e6:	015a      	lsls	r2, r3, #5
 80097e8:	69fb      	ldr	r3, [r7, #28]
 80097ea:	4413      	add	r3, r2
 80097ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	69ba      	ldr	r2, [r7, #24]
 80097f4:	0151      	lsls	r1, r2, #5
 80097f6:	69fa      	ldr	r2, [r7, #28]
 80097f8:	440a      	add	r2, r1
 80097fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80097fe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009802:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	3301      	adds	r3, #1
 8009808:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009810:	d82e      	bhi.n	8009870 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009812:	69bb      	ldr	r3, [r7, #24]
 8009814:	015a      	lsls	r2, r3, #5
 8009816:	69fb      	ldr	r3, [r7, #28]
 8009818:	4413      	add	r3, r2
 800981a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009824:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009828:	d0ec      	beq.n	8009804 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800982a:	e081      	b.n	8009930 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800982c:	69bb      	ldr	r3, [r7, #24]
 800982e:	015a      	lsls	r2, r3, #5
 8009830:	69fb      	ldr	r3, [r7, #28]
 8009832:	4413      	add	r3, r2
 8009834:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	69ba      	ldr	r2, [r7, #24]
 800983c:	0151      	lsls	r1, r2, #5
 800983e:	69fa      	ldr	r2, [r7, #28]
 8009840:	440a      	add	r2, r1
 8009842:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009846:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800984a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800984c:	e070      	b.n	8009930 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800984e:	69bb      	ldr	r3, [r7, #24]
 8009850:	015a      	lsls	r2, r3, #5
 8009852:	69fb      	ldr	r3, [r7, #28]
 8009854:	4413      	add	r3, r2
 8009856:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	69ba      	ldr	r2, [r7, #24]
 800985e:	0151      	lsls	r1, r2, #5
 8009860:	69fa      	ldr	r2, [r7, #28]
 8009862:	440a      	add	r2, r1
 8009864:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009868:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800986c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800986e:	e05f      	b.n	8009930 <USB_HC_Halt+0x232>
            break;
 8009870:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009872:	e05d      	b.n	8009930 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009874:	69bb      	ldr	r3, [r7, #24]
 8009876:	015a      	lsls	r2, r3, #5
 8009878:	69fb      	ldr	r3, [r7, #28]
 800987a:	4413      	add	r3, r2
 800987c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	69ba      	ldr	r2, [r7, #24]
 8009884:	0151      	lsls	r1, r2, #5
 8009886:	69fa      	ldr	r2, [r7, #28]
 8009888:	440a      	add	r2, r1
 800988a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800988e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009892:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009894:	69fb      	ldr	r3, [r7, #28]
 8009896:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800989a:	691b      	ldr	r3, [r3, #16]
 800989c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d133      	bne.n	800990c <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80098a4:	69bb      	ldr	r3, [r7, #24]
 80098a6:	015a      	lsls	r2, r3, #5
 80098a8:	69fb      	ldr	r3, [r7, #28]
 80098aa:	4413      	add	r3, r2
 80098ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	69ba      	ldr	r2, [r7, #24]
 80098b4:	0151      	lsls	r1, r2, #5
 80098b6:	69fa      	ldr	r2, [r7, #28]
 80098b8:	440a      	add	r2, r1
 80098ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80098be:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80098c2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80098c4:	69bb      	ldr	r3, [r7, #24]
 80098c6:	015a      	lsls	r2, r3, #5
 80098c8:	69fb      	ldr	r3, [r7, #28]
 80098ca:	4413      	add	r3, r2
 80098cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	69ba      	ldr	r2, [r7, #24]
 80098d4:	0151      	lsls	r1, r2, #5
 80098d6:	69fa      	ldr	r2, [r7, #28]
 80098d8:	440a      	add	r2, r1
 80098da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80098de:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80098e2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	3301      	adds	r3, #1
 80098e8:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80098f0:	d81d      	bhi.n	800992e <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80098f2:	69bb      	ldr	r3, [r7, #24]
 80098f4:	015a      	lsls	r2, r3, #5
 80098f6:	69fb      	ldr	r3, [r7, #28]
 80098f8:	4413      	add	r3, r2
 80098fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009904:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009908:	d0ec      	beq.n	80098e4 <USB_HC_Halt+0x1e6>
 800990a:	e011      	b.n	8009930 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800990c:	69bb      	ldr	r3, [r7, #24]
 800990e:	015a      	lsls	r2, r3, #5
 8009910:	69fb      	ldr	r3, [r7, #28]
 8009912:	4413      	add	r3, r2
 8009914:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	69ba      	ldr	r2, [r7, #24]
 800991c:	0151      	lsls	r1, r2, #5
 800991e:	69fa      	ldr	r2, [r7, #28]
 8009920:	440a      	add	r2, r1
 8009922:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009926:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800992a:	6013      	str	r3, [r2, #0]
 800992c:	e000      	b.n	8009930 <USB_HC_Halt+0x232>
          break;
 800992e:	bf00      	nop
    }
  }

  return HAL_OK;
 8009930:	2300      	movs	r3, #0
}
 8009932:	4618      	mov	r0, r3
 8009934:	3724      	adds	r7, #36	@ 0x24
 8009936:	46bd      	mov	sp, r7
 8009938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993c:	4770      	bx	lr

0800993e <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800993e:	b580      	push	{r7, lr}
 8009940:	b088      	sub	sp, #32
 8009942:	af00      	add	r7, sp, #0
 8009944:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8009946:	2300      	movs	r3, #0
 8009948:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800994e:	2300      	movs	r3, #0
 8009950:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f7ff f825 	bl	80089a2 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009958:	2110      	movs	r1, #16
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f7ff f87e 	bl	8008a5c <USB_FlushTxFifo>
 8009960:	4603      	mov	r3, r0
 8009962:	2b00      	cmp	r3, #0
 8009964:	d001      	beq.n	800996a <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8009966:	2301      	movs	r3, #1
 8009968:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f7ff f8a8 	bl	8008ac0 <USB_FlushRxFifo>
 8009970:	4603      	mov	r3, r0
 8009972:	2b00      	cmp	r3, #0
 8009974:	d001      	beq.n	800997a <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8009976:	2301      	movs	r3, #1
 8009978:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800997a:	2300      	movs	r3, #0
 800997c:	61bb      	str	r3, [r7, #24]
 800997e:	e01f      	b.n	80099c0 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8009980:	69bb      	ldr	r3, [r7, #24]
 8009982:	015a      	lsls	r2, r3, #5
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	4413      	add	r3, r2
 8009988:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009990:	693b      	ldr	r3, [r7, #16]
 8009992:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009996:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8009998:	693b      	ldr	r3, [r7, #16]
 800999a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800999e:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80099a6:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80099a8:	69bb      	ldr	r3, [r7, #24]
 80099aa:	015a      	lsls	r2, r3, #5
 80099ac:	697b      	ldr	r3, [r7, #20]
 80099ae:	4413      	add	r3, r2
 80099b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80099b4:	461a      	mov	r2, r3
 80099b6:	693b      	ldr	r3, [r7, #16]
 80099b8:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80099ba:	69bb      	ldr	r3, [r7, #24]
 80099bc:	3301      	adds	r3, #1
 80099be:	61bb      	str	r3, [r7, #24]
 80099c0:	69bb      	ldr	r3, [r7, #24]
 80099c2:	2b0f      	cmp	r3, #15
 80099c4:	d9dc      	bls.n	8009980 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80099c6:	2300      	movs	r3, #0
 80099c8:	61bb      	str	r3, [r7, #24]
 80099ca:	e034      	b.n	8009a36 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80099cc:	69bb      	ldr	r3, [r7, #24]
 80099ce:	015a      	lsls	r2, r3, #5
 80099d0:	697b      	ldr	r3, [r7, #20]
 80099d2:	4413      	add	r3, r2
 80099d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80099dc:	693b      	ldr	r3, [r7, #16]
 80099de:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80099e2:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80099ea:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80099ec:	693b      	ldr	r3, [r7, #16]
 80099ee:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80099f2:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80099f4:	69bb      	ldr	r3, [r7, #24]
 80099f6:	015a      	lsls	r2, r3, #5
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	4413      	add	r3, r2
 80099fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009a00:	461a      	mov	r2, r3
 8009a02:	693b      	ldr	r3, [r7, #16]
 8009a04:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	3301      	adds	r3, #1
 8009a0a:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009a12:	d80c      	bhi.n	8009a2e <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009a14:	69bb      	ldr	r3, [r7, #24]
 8009a16:	015a      	lsls	r2, r3, #5
 8009a18:	697b      	ldr	r3, [r7, #20]
 8009a1a:	4413      	add	r3, r2
 8009a1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009a26:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009a2a:	d0ec      	beq.n	8009a06 <USB_StopHost+0xc8>
 8009a2c:	e000      	b.n	8009a30 <USB_StopHost+0xf2>
        break;
 8009a2e:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009a30:	69bb      	ldr	r3, [r7, #24]
 8009a32:	3301      	adds	r3, #1
 8009a34:	61bb      	str	r3, [r7, #24]
 8009a36:	69bb      	ldr	r3, [r7, #24]
 8009a38:	2b0f      	cmp	r3, #15
 8009a3a:	d9c7      	bls.n	80099cc <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009a42:	461a      	mov	r2, r3
 8009a44:	f04f 33ff 	mov.w	r3, #4294967295
 8009a48:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8009a50:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f7fe ff94 	bl	8008980 <USB_EnableGlobalInt>

  return ret;
 8009a58:	7ffb      	ldrb	r3, [r7, #31]
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3720      	adds	r7, #32
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}

08009a62 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009a62:	b590      	push	{r4, r7, lr}
 8009a64:	b089      	sub	sp, #36	@ 0x24
 8009a66:	af04      	add	r7, sp, #16
 8009a68:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	2202      	movs	r2, #2
 8009a6e:	2102      	movs	r1, #2
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f000 fc84 	bl	800a37e <USBH_FindInterface>
 8009a76:	4603      	mov	r3, r0
 8009a78:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009a7a:	7bfb      	ldrb	r3, [r7, #15]
 8009a7c:	2bff      	cmp	r3, #255	@ 0xff
 8009a7e:	d002      	beq.n	8009a86 <USBH_CDC_InterfaceInit+0x24>
 8009a80:	7bfb      	ldrb	r3, [r7, #15]
 8009a82:	2b01      	cmp	r3, #1
 8009a84:	d901      	bls.n	8009a8a <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009a86:	2302      	movs	r3, #2
 8009a88:	e13d      	b.n	8009d06 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8009a8a:	7bfb      	ldrb	r3, [r7, #15]
 8009a8c:	4619      	mov	r1, r3
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f000 fc59 	bl	800a346 <USBH_SelectInterface>
 8009a94:	4603      	mov	r3, r0
 8009a96:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009a98:	7bbb      	ldrb	r3, [r7, #14]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d001      	beq.n	8009aa2 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8009a9e:	2302      	movs	r3, #2
 8009aa0:	e131      	b.n	8009d06 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8009aa8:	2050      	movs	r0, #80	@ 0x50
 8009aaa:	f002 fb6b 	bl	800c184 <malloc>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009ab8:	69db      	ldr	r3, [r3, #28]
 8009aba:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d101      	bne.n	8009ac6 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8009ac2:	2302      	movs	r3, #2
 8009ac4:	e11f      	b.n	8009d06 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8009ac6:	2250      	movs	r2, #80	@ 0x50
 8009ac8:	2100      	movs	r1, #0
 8009aca:	68b8      	ldr	r0, [r7, #8]
 8009acc:	f003 f973 	bl	800cdb6 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009ad0:	7bfb      	ldrb	r3, [r7, #15]
 8009ad2:	687a      	ldr	r2, [r7, #4]
 8009ad4:	211a      	movs	r1, #26
 8009ad6:	fb01 f303 	mul.w	r3, r1, r3
 8009ada:	4413      	add	r3, r2
 8009adc:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009ae0:	781b      	ldrb	r3, [r3, #0]
 8009ae2:	b25b      	sxtb	r3, r3
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	da15      	bge.n	8009b14 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009ae8:	7bfb      	ldrb	r3, [r7, #15]
 8009aea:	687a      	ldr	r2, [r7, #4]
 8009aec:	211a      	movs	r1, #26
 8009aee:	fb01 f303 	mul.w	r3, r1, r3
 8009af2:	4413      	add	r3, r2
 8009af4:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009af8:	781a      	ldrb	r2, [r3, #0]
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009afe:	7bfb      	ldrb	r3, [r7, #15]
 8009b00:	687a      	ldr	r2, [r7, #4]
 8009b02:	211a      	movs	r1, #26
 8009b04:	fb01 f303 	mul.w	r3, r1, r3
 8009b08:	4413      	add	r3, r2
 8009b0a:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009b0e:	881a      	ldrh	r2, [r3, #0]
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	785b      	ldrb	r3, [r3, #1]
 8009b18:	4619      	mov	r1, r3
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f001 ffc5 	bl	800baaa <USBH_AllocPipe>
 8009b20:	4603      	mov	r3, r0
 8009b22:	461a      	mov	r2, r3
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	7819      	ldrb	r1, [r3, #0]
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	7858      	ldrb	r0, [r3, #1]
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009b3c:	68ba      	ldr	r2, [r7, #8]
 8009b3e:	8952      	ldrh	r2, [r2, #10]
 8009b40:	9202      	str	r2, [sp, #8]
 8009b42:	2203      	movs	r2, #3
 8009b44:	9201      	str	r2, [sp, #4]
 8009b46:	9300      	str	r3, [sp, #0]
 8009b48:	4623      	mov	r3, r4
 8009b4a:	4602      	mov	r2, r0
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f001 ff7d 	bl	800ba4c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	781b      	ldrb	r3, [r3, #0]
 8009b56:	2200      	movs	r2, #0
 8009b58:	4619      	mov	r1, r3
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f002 fa8c 	bl	800c078 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8009b60:	2300      	movs	r3, #0
 8009b62:	2200      	movs	r2, #0
 8009b64:	210a      	movs	r1, #10
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f000 fc09 	bl	800a37e <USBH_FindInterface>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009b70:	7bfb      	ldrb	r3, [r7, #15]
 8009b72:	2bff      	cmp	r3, #255	@ 0xff
 8009b74:	d002      	beq.n	8009b7c <USBH_CDC_InterfaceInit+0x11a>
 8009b76:	7bfb      	ldrb	r3, [r7, #15]
 8009b78:	2b01      	cmp	r3, #1
 8009b7a:	d901      	bls.n	8009b80 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009b7c:	2302      	movs	r3, #2
 8009b7e:	e0c2      	b.n	8009d06 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009b80:	7bfb      	ldrb	r3, [r7, #15]
 8009b82:	687a      	ldr	r2, [r7, #4]
 8009b84:	211a      	movs	r1, #26
 8009b86:	fb01 f303 	mul.w	r3, r1, r3
 8009b8a:	4413      	add	r3, r2
 8009b8c:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009b90:	781b      	ldrb	r3, [r3, #0]
 8009b92:	b25b      	sxtb	r3, r3
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	da16      	bge.n	8009bc6 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009b98:	7bfb      	ldrb	r3, [r7, #15]
 8009b9a:	687a      	ldr	r2, [r7, #4]
 8009b9c:	211a      	movs	r1, #26
 8009b9e:	fb01 f303 	mul.w	r3, r1, r3
 8009ba2:	4413      	add	r3, r2
 8009ba4:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009ba8:	781a      	ldrb	r2, [r3, #0]
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009bae:	7bfb      	ldrb	r3, [r7, #15]
 8009bb0:	687a      	ldr	r2, [r7, #4]
 8009bb2:	211a      	movs	r1, #26
 8009bb4:	fb01 f303 	mul.w	r3, r1, r3
 8009bb8:	4413      	add	r3, r2
 8009bba:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009bbe:	881a      	ldrh	r2, [r3, #0]
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	835a      	strh	r2, [r3, #26]
 8009bc4:	e015      	b.n	8009bf2 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009bc6:	7bfb      	ldrb	r3, [r7, #15]
 8009bc8:	687a      	ldr	r2, [r7, #4]
 8009bca:	211a      	movs	r1, #26
 8009bcc:	fb01 f303 	mul.w	r3, r1, r3
 8009bd0:	4413      	add	r3, r2
 8009bd2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009bd6:	781a      	ldrb	r2, [r3, #0]
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009bdc:	7bfb      	ldrb	r3, [r7, #15]
 8009bde:	687a      	ldr	r2, [r7, #4]
 8009be0:	211a      	movs	r1, #26
 8009be2:	fb01 f303 	mul.w	r3, r1, r3
 8009be6:	4413      	add	r3, r2
 8009be8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009bec:	881a      	ldrh	r2, [r3, #0]
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8009bf2:	7bfb      	ldrb	r3, [r7, #15]
 8009bf4:	687a      	ldr	r2, [r7, #4]
 8009bf6:	211a      	movs	r1, #26
 8009bf8:	fb01 f303 	mul.w	r3, r1, r3
 8009bfc:	4413      	add	r3, r2
 8009bfe:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009c02:	781b      	ldrb	r3, [r3, #0]
 8009c04:	b25b      	sxtb	r3, r3
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	da16      	bge.n	8009c38 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009c0a:	7bfb      	ldrb	r3, [r7, #15]
 8009c0c:	687a      	ldr	r2, [r7, #4]
 8009c0e:	211a      	movs	r1, #26
 8009c10:	fb01 f303 	mul.w	r3, r1, r3
 8009c14:	4413      	add	r3, r2
 8009c16:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009c1a:	781a      	ldrb	r2, [r3, #0]
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009c20:	7bfb      	ldrb	r3, [r7, #15]
 8009c22:	687a      	ldr	r2, [r7, #4]
 8009c24:	211a      	movs	r1, #26
 8009c26:	fb01 f303 	mul.w	r3, r1, r3
 8009c2a:	4413      	add	r3, r2
 8009c2c:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8009c30:	881a      	ldrh	r2, [r3, #0]
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	835a      	strh	r2, [r3, #26]
 8009c36:	e015      	b.n	8009c64 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009c38:	7bfb      	ldrb	r3, [r7, #15]
 8009c3a:	687a      	ldr	r2, [r7, #4]
 8009c3c:	211a      	movs	r1, #26
 8009c3e:	fb01 f303 	mul.w	r3, r1, r3
 8009c42:	4413      	add	r3, r2
 8009c44:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009c48:	781a      	ldrb	r2, [r3, #0]
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009c4e:	7bfb      	ldrb	r3, [r7, #15]
 8009c50:	687a      	ldr	r2, [r7, #4]
 8009c52:	211a      	movs	r1, #26
 8009c54:	fb01 f303 	mul.w	r3, r1, r3
 8009c58:	4413      	add	r3, r2
 8009c5a:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8009c5e:	881a      	ldrh	r2, [r3, #0]
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	7b9b      	ldrb	r3, [r3, #14]
 8009c68:	4619      	mov	r1, r3
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f001 ff1d 	bl	800baaa <USBH_AllocPipe>
 8009c70:	4603      	mov	r3, r0
 8009c72:	461a      	mov	r2, r3
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	7bdb      	ldrb	r3, [r3, #15]
 8009c7c:	4619      	mov	r1, r3
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f001 ff13 	bl	800baaa <USBH_AllocPipe>
 8009c84:	4603      	mov	r3, r0
 8009c86:	461a      	mov	r2, r3
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	7b59      	ldrb	r1, [r3, #13]
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	7b98      	ldrb	r0, [r3, #14]
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009ca0:	68ba      	ldr	r2, [r7, #8]
 8009ca2:	8b12      	ldrh	r2, [r2, #24]
 8009ca4:	9202      	str	r2, [sp, #8]
 8009ca6:	2202      	movs	r2, #2
 8009ca8:	9201      	str	r2, [sp, #4]
 8009caa:	9300      	str	r3, [sp, #0]
 8009cac:	4623      	mov	r3, r4
 8009cae:	4602      	mov	r2, r0
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f001 fecb 	bl	800ba4c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	7b19      	ldrb	r1, [r3, #12]
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	7bd8      	ldrb	r0, [r3, #15]
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009cca:	68ba      	ldr	r2, [r7, #8]
 8009ccc:	8b52      	ldrh	r2, [r2, #26]
 8009cce:	9202      	str	r2, [sp, #8]
 8009cd0:	2202      	movs	r2, #2
 8009cd2:	9201      	str	r2, [sp, #4]
 8009cd4:	9300      	str	r3, [sp, #0]
 8009cd6:	4623      	mov	r3, r4
 8009cd8:	4602      	mov	r2, r0
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f001 feb6 	bl	800ba4c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	7b5b      	ldrb	r3, [r3, #13]
 8009cec:	2200      	movs	r2, #0
 8009cee:	4619      	mov	r1, r3
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f002 f9c1 	bl	800c078 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	7b1b      	ldrb	r3, [r3, #12]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	4619      	mov	r1, r3
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	f002 f9ba 	bl	800c078 <USBH_LL_SetToggle>

  return USBH_OK;
 8009d04:	2300      	movs	r3, #0
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	3714      	adds	r7, #20
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd90      	pop	{r4, r7, pc}

08009d0e <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009d0e:	b580      	push	{r7, lr}
 8009d10:	b084      	sub	sp, #16
 8009d12:	af00      	add	r7, sp, #0
 8009d14:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009d1c:	69db      	ldr	r3, [r3, #28]
 8009d1e:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	781b      	ldrb	r3, [r3, #0]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d00e      	beq.n	8009d46 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	781b      	ldrb	r3, [r3, #0]
 8009d2c:	4619      	mov	r1, r3
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f001 feab 	bl	800ba8a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	781b      	ldrb	r3, [r3, #0]
 8009d38:	4619      	mov	r1, r3
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f001 fed6 	bl	800baec <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	2200      	movs	r2, #0
 8009d44:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	7b1b      	ldrb	r3, [r3, #12]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d00e      	beq.n	8009d6c <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	7b1b      	ldrb	r3, [r3, #12]
 8009d52:	4619      	mov	r1, r3
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f001 fe98 	bl	800ba8a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	7b1b      	ldrb	r3, [r3, #12]
 8009d5e:	4619      	mov	r1, r3
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f001 fec3 	bl	800baec <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	7b5b      	ldrb	r3, [r3, #13]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d00e      	beq.n	8009d92 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	7b5b      	ldrb	r3, [r3, #13]
 8009d78:	4619      	mov	r1, r3
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f001 fe85 	bl	800ba8a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	7b5b      	ldrb	r3, [r3, #13]
 8009d84:	4619      	mov	r1, r3
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f001 feb0 	bl	800baec <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009d98:	69db      	ldr	r3, [r3, #28]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d00b      	beq.n	8009db6 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009da4:	69db      	ldr	r3, [r3, #28]
 8009da6:	4618      	mov	r0, r3
 8009da8:	f002 f9f4 	bl	800c194 <free>
    phost->pActiveClass->pData = 0U;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009db2:	2200      	movs	r2, #0
 8009db4:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009db6:	2300      	movs	r3, #0
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	3710      	adds	r7, #16
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}

08009dc0 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b084      	sub	sp, #16
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009dce:	69db      	ldr	r3, [r3, #28]
 8009dd0:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	3340      	adds	r3, #64	@ 0x40
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f000 f8b2 	bl	8009f42 <GetLineCoding>
 8009dde:	4603      	mov	r3, r0
 8009de0:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8009de2:	7afb      	ldrb	r3, [r7, #11]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d105      	bne.n	8009df4 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009dee:	2102      	movs	r1, #2
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8009df4:	7afb      	ldrb	r3, [r7, #11]
}
 8009df6:	4618      	mov	r0, r3
 8009df8:	3710      	adds	r7, #16
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bd80      	pop	{r7, pc}
	...

08009e00 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b084      	sub	sp, #16
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009e08:	2301      	movs	r3, #1
 8009e0a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009e16:	69db      	ldr	r3, [r3, #28]
 8009e18:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8009e1a:	68bb      	ldr	r3, [r7, #8]
 8009e1c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8009e20:	2b04      	cmp	r3, #4
 8009e22:	d877      	bhi.n	8009f14 <USBH_CDC_Process+0x114>
 8009e24:	a201      	add	r2, pc, #4	@ (adr r2, 8009e2c <USBH_CDC_Process+0x2c>)
 8009e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e2a:	bf00      	nop
 8009e2c:	08009e41 	.word	0x08009e41
 8009e30:	08009e47 	.word	0x08009e47
 8009e34:	08009e77 	.word	0x08009e77
 8009e38:	08009eeb 	.word	0x08009eeb
 8009e3c:	08009ef9 	.word	0x08009ef9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8009e40:	2300      	movs	r3, #0
 8009e42:	73fb      	strb	r3, [r7, #15]
      break;
 8009e44:	e06d      	b.n	8009f22 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009e4a:	4619      	mov	r1, r3
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f000 f897 	bl	8009f80 <SetLineCoding>
 8009e52:	4603      	mov	r3, r0
 8009e54:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009e56:	7bbb      	ldrb	r3, [r7, #14]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d104      	bne.n	8009e66 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	2202      	movs	r2, #2
 8009e60:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009e64:	e058      	b.n	8009f18 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8009e66:	7bbb      	ldrb	r3, [r7, #14]
 8009e68:	2b01      	cmp	r3, #1
 8009e6a:	d055      	beq.n	8009f18 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	2204      	movs	r2, #4
 8009e70:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8009e74:	e050      	b.n	8009f18 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	3340      	adds	r3, #64	@ 0x40
 8009e7a:	4619      	mov	r1, r3
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f000 f860 	bl	8009f42 <GetLineCoding>
 8009e82:	4603      	mov	r3, r0
 8009e84:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009e86:	7bbb      	ldrb	r3, [r7, #14]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d126      	bne.n	8009eda <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	2200      	movs	r2, #0
 8009e90:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009e9e:	791b      	ldrb	r3, [r3, #4]
 8009ea0:	429a      	cmp	r2, r3
 8009ea2:	d13b      	bne.n	8009f1c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009eae:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009eb0:	429a      	cmp	r2, r3
 8009eb2:	d133      	bne.n	8009f1c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8009eba:	68bb      	ldr	r3, [r7, #8]
 8009ebc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009ebe:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009ec0:	429a      	cmp	r2, r3
 8009ec2:	d12b      	bne.n	8009f1c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009ecc:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009ece:	429a      	cmp	r2, r3
 8009ed0:	d124      	bne.n	8009f1c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f000 f958 	bl	800a188 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009ed8:	e020      	b.n	8009f1c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8009eda:	7bbb      	ldrb	r3, [r7, #14]
 8009edc:	2b01      	cmp	r3, #1
 8009ede:	d01d      	beq.n	8009f1c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	2204      	movs	r2, #4
 8009ee4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8009ee8:	e018      	b.n	8009f1c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f000 f867 	bl	8009fbe <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f000 f8da 	bl	800a0aa <CDC_ProcessReception>
      break;
 8009ef6:	e014      	b.n	8009f22 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8009ef8:	2100      	movs	r1, #0
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f001 f81e 	bl	800af3c <USBH_ClrFeature>
 8009f00:	4603      	mov	r3, r0
 8009f02:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009f04:	7bbb      	ldrb	r3, [r7, #14]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d10a      	bne.n	8009f20 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8009f12:	e005      	b.n	8009f20 <USBH_CDC_Process+0x120>

    default:
      break;
 8009f14:	bf00      	nop
 8009f16:	e004      	b.n	8009f22 <USBH_CDC_Process+0x122>
      break;
 8009f18:	bf00      	nop
 8009f1a:	e002      	b.n	8009f22 <USBH_CDC_Process+0x122>
      break;
 8009f1c:	bf00      	nop
 8009f1e:	e000      	b.n	8009f22 <USBH_CDC_Process+0x122>
      break;
 8009f20:	bf00      	nop

  }

  return status;
 8009f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f24:	4618      	mov	r0, r3
 8009f26:	3710      	adds	r7, #16
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	bd80      	pop	{r7, pc}

08009f2c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	b083      	sub	sp, #12
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009f34:	2300      	movs	r3, #0
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	370c      	adds	r7, #12
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f40:	4770      	bx	lr

08009f42 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8009f42:	b580      	push	{r7, lr}
 8009f44:	b082      	sub	sp, #8
 8009f46:	af00      	add	r7, sp, #0
 8009f48:	6078      	str	r0, [r7, #4]
 8009f4a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	22a1      	movs	r2, #161	@ 0xa1
 8009f50:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2221      	movs	r2, #33	@ 0x21
 8009f56:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2200      	movs	r2, #0
 8009f62:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2207      	movs	r2, #7
 8009f68:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	2207      	movs	r2, #7
 8009f6e:	4619      	mov	r1, r3
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f001 fb17 	bl	800b5a4 <USBH_CtlReq>
 8009f76:	4603      	mov	r3, r0
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3708      	adds	r7, #8
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}

08009f80 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b082      	sub	sp, #8
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
 8009f88:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2221      	movs	r2, #33	@ 0x21
 8009f8e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2220      	movs	r2, #32
 8009f94:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2200      	movs	r2, #0
 8009f9a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2207      	movs	r2, #7
 8009fa6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	2207      	movs	r2, #7
 8009fac:	4619      	mov	r1, r3
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f001 faf8 	bl	800b5a4 <USBH_CtlReq>
 8009fb4:	4603      	mov	r3, r0
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	3708      	adds	r7, #8
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}

08009fbe <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8009fbe:	b580      	push	{r7, lr}
 8009fc0:	b086      	sub	sp, #24
 8009fc2:	af02      	add	r7, sp, #8
 8009fc4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009fcc:	69db      	ldr	r3, [r3, #28]
 8009fce:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8009fda:	2b01      	cmp	r3, #1
 8009fdc:	d002      	beq.n	8009fe4 <CDC_ProcessTransmission+0x26>
 8009fde:	2b02      	cmp	r3, #2
 8009fe0:	d023      	beq.n	800a02a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8009fe2:	e05e      	b.n	800a0a2 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fe8:	68fa      	ldr	r2, [r7, #12]
 8009fea:	8b12      	ldrh	r2, [r2, #24]
 8009fec:	4293      	cmp	r3, r2
 8009fee:	d90b      	bls.n	800a008 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	69d9      	ldr	r1, [r3, #28]
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	8b1a      	ldrh	r2, [r3, #24]
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	7b5b      	ldrb	r3, [r3, #13]
 8009ffc:	2001      	movs	r0, #1
 8009ffe:	9000      	str	r0, [sp, #0]
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f001 fce0 	bl	800b9c6 <USBH_BulkSendData>
 800a006:	e00b      	b.n	800a020 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800a010:	b29a      	uxth	r2, r3
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	7b5b      	ldrb	r3, [r3, #13]
 800a016:	2001      	movs	r0, #1
 800a018:	9000      	str	r0, [sp, #0]
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f001 fcd3 	bl	800b9c6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	2202      	movs	r2, #2
 800a024:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800a028:	e03b      	b.n	800a0a2 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	7b5b      	ldrb	r3, [r3, #13]
 800a02e:	4619      	mov	r1, r3
 800a030:	6878      	ldr	r0, [r7, #4]
 800a032:	f001 fff7 	bl	800c024 <USBH_LL_GetURBState>
 800a036:	4603      	mov	r3, r0
 800a038:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800a03a:	7afb      	ldrb	r3, [r7, #11]
 800a03c:	2b01      	cmp	r3, #1
 800a03e:	d128      	bne.n	800a092 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a044:	68fa      	ldr	r2, [r7, #12]
 800a046:	8b12      	ldrh	r2, [r2, #24]
 800a048:	4293      	cmp	r3, r2
 800a04a:	d90e      	bls.n	800a06a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a050:	68fa      	ldr	r2, [r7, #12]
 800a052:	8b12      	ldrh	r2, [r2, #24]
 800a054:	1a9a      	subs	r2, r3, r2
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	69db      	ldr	r3, [r3, #28]
 800a05e:	68fa      	ldr	r2, [r7, #12]
 800a060:	8b12      	ldrh	r2, [r2, #24]
 800a062:	441a      	add	r2, r3
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	61da      	str	r2, [r3, #28]
 800a068:	e002      	b.n	800a070 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	2200      	movs	r2, #0
 800a06e:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a074:	2b00      	cmp	r3, #0
 800a076:	d004      	beq.n	800a082 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	2201      	movs	r2, #1
 800a07c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800a080:	e00e      	b.n	800a0a0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	2200      	movs	r2, #0
 800a086:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f000 f868 	bl	800a160 <USBH_CDC_TransmitCallback>
      break;
 800a090:	e006      	b.n	800a0a0 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800a092:	7afb      	ldrb	r3, [r7, #11]
 800a094:	2b02      	cmp	r3, #2
 800a096:	d103      	bne.n	800a0a0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	2201      	movs	r2, #1
 800a09c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800a0a0:	bf00      	nop
  }
}
 800a0a2:	bf00      	nop
 800a0a4:	3710      	adds	r7, #16
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}

0800a0aa <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800a0aa:	b580      	push	{r7, lr}
 800a0ac:	b086      	sub	sp, #24
 800a0ae:	af00      	add	r7, sp, #0
 800a0b0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a0b8:	69db      	ldr	r3, [r3, #28]
 800a0ba:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800a0c0:	697b      	ldr	r3, [r7, #20]
 800a0c2:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800a0c6:	2b03      	cmp	r3, #3
 800a0c8:	d002      	beq.n	800a0d0 <CDC_ProcessReception+0x26>
 800a0ca:	2b04      	cmp	r3, #4
 800a0cc:	d00e      	beq.n	800a0ec <CDC_ProcessReception+0x42>
        /* .. */
      }
      break;

    default:
      break;
 800a0ce:	e043      	b.n	800a158 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800a0d0:	697b      	ldr	r3, [r7, #20]
 800a0d2:	6a19      	ldr	r1, [r3, #32]
 800a0d4:	697b      	ldr	r3, [r7, #20]
 800a0d6:	8b5a      	ldrh	r2, [r3, #26]
 800a0d8:	697b      	ldr	r3, [r7, #20]
 800a0da:	7b1b      	ldrb	r3, [r3, #12]
 800a0dc:	6878      	ldr	r0, [r7, #4]
 800a0de:	f001 fc97 	bl	800ba10 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	2204      	movs	r2, #4
 800a0e6:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800a0ea:	e035      	b.n	800a158 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	7b1b      	ldrb	r3, [r3, #12]
 800a0f0:	4619      	mov	r1, r3
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f001 ff96 	bl	800c024 <USBH_LL_GetURBState>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800a0fc:	7cfb      	ldrb	r3, [r7, #19]
 800a0fe:	2b01      	cmp	r3, #1
 800a100:	d129      	bne.n	800a156 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800a102:	697b      	ldr	r3, [r7, #20]
 800a104:	7b1b      	ldrb	r3, [r3, #12]
 800a106:	4619      	mov	r1, r3
 800a108:	6878      	ldr	r0, [r7, #4]
 800a10a:	f001 fef9 	bl	800bf00 <USBH_LL_GetLastXferSize>
 800a10e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 800a110:	697b      	ldr	r3, [r7, #20]
 800a112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a114:	68fa      	ldr	r2, [r7, #12]
 800a116:	429a      	cmp	r2, r3
 800a118:	d016      	beq.n	800a148 <CDC_ProcessReception+0x9e>
 800a11a:	697b      	ldr	r3, [r7, #20]
 800a11c:	8b5b      	ldrh	r3, [r3, #26]
 800a11e:	461a      	mov	r2, r3
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	4293      	cmp	r3, r2
 800a124:	d110      	bne.n	800a148 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800a126:	697b      	ldr	r3, [r7, #20]
 800a128:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	1ad2      	subs	r2, r2, r3
 800a12e:	697b      	ldr	r3, [r7, #20]
 800a130:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800a132:	697b      	ldr	r3, [r7, #20]
 800a134:	6a1a      	ldr	r2, [r3, #32]
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	441a      	add	r2, r3
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	2203      	movs	r2, #3
 800a142:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800a146:	e006      	b.n	800a156 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800a148:	697b      	ldr	r3, [r7, #20]
 800a14a:	2200      	movs	r2, #0
 800a14c:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f000 f80f 	bl	800a174 <USBH_CDC_ReceiveCallback>
      break;
 800a156:	bf00      	nop
  }
}
 800a158:	bf00      	nop
 800a15a:	3718      	adds	r7, #24
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}

0800a160 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800a160:	b480      	push	{r7}
 800a162:	b083      	sub	sp, #12
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a168:	bf00      	nop
 800a16a:	370c      	adds	r7, #12
 800a16c:	46bd      	mov	sp, r7
 800a16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a172:	4770      	bx	lr

0800a174 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800a174:	b480      	push	{r7}
 800a176:	b083      	sub	sp, #12
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a17c:	bf00      	nop
 800a17e:	370c      	adds	r7, #12
 800a180:	46bd      	mov	sp, r7
 800a182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a186:	4770      	bx	lr

0800a188 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800a188:	b480      	push	{r7}
 800a18a:	b083      	sub	sp, #12
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a190:	bf00      	nop
 800a192:	370c      	adds	r7, #12
 800a194:	46bd      	mov	sp, r7
 800a196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19a:	4770      	bx	lr

0800a19c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b084      	sub	sp, #16
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	60f8      	str	r0, [r7, #12]
 800a1a4:	60b9      	str	r1, [r7, #8]
 800a1a6:	4613      	mov	r3, r2
 800a1a8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d101      	bne.n	800a1b4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a1b0:	2302      	movs	r3, #2
 800a1b2:	e029      	b.n	800a208 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	79fa      	ldrb	r2, [r7, #7]
 800a1b8:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	2200      	movs	r2, #0
 800a1c0:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800a1cc:	68f8      	ldr	r0, [r7, #12]
 800a1ce:	f000 f81f 	bl	800a210 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	2200      	movs	r2, #0
 800a1de:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a1f2:	68bb      	ldr	r3, [r7, #8]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d003      	beq.n	800a200 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	68ba      	ldr	r2, [r7, #8]
 800a1fc:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800a200:	68f8      	ldr	r0, [r7, #12]
 800a202:	f001 fdc9 	bl	800bd98 <USBH_LL_Init>

  return USBH_OK;
 800a206:	2300      	movs	r3, #0
}
 800a208:	4618      	mov	r0, r3
 800a20a:	3710      	adds	r7, #16
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bd80      	pop	{r7, pc}

0800a210 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b084      	sub	sp, #16
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a218:	2300      	movs	r3, #0
 800a21a:	60fb      	str	r3, [r7, #12]
 800a21c:	e009      	b.n	800a232 <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 800a21e:	687a      	ldr	r2, [r7, #4]
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	33e0      	adds	r3, #224	@ 0xe0
 800a224:	009b      	lsls	r3, r3, #2
 800a226:	4413      	add	r3, r2
 800a228:	2200      	movs	r2, #0
 800a22a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	3301      	adds	r3, #1
 800a230:	60fb      	str	r3, [r7, #12]
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	2b0f      	cmp	r3, #15
 800a236:	d9f2      	bls.n	800a21e <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a238:	2300      	movs	r3, #0
 800a23a:	60fb      	str	r3, [r7, #12]
 800a23c:	e009      	b.n	800a252 <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 800a23e:	687a      	ldr	r2, [r7, #4]
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	4413      	add	r3, r2
 800a244:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a248:	2200      	movs	r2, #0
 800a24a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	3301      	adds	r3, #1
 800a250:	60fb      	str	r3, [r7, #12]
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a258:	d3f1      	bcc.n	800a23e <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2200      	movs	r2, #0
 800a25e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2200      	movs	r2, #0
 800a264:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2201      	movs	r2, #1
 800a26a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2200      	movs	r2, #0
 800a270:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2201      	movs	r2, #1
 800a278:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2240      	movs	r2, #64	@ 0x40
 800a27e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2200      	movs	r2, #0
 800a284:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2200      	movs	r2, #0
 800a28a:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2201      	movs	r2, #1
 800a292:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2200      	movs	r2, #0
 800a29a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	331c      	adds	r3, #28
 800a2aa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a2ae:	2100      	movs	r1, #0
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	f002 fd80 	bl	800cdb6 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a2bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a2c0:	2100      	movs	r1, #0
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f002 fd77 	bl	800cdb6 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800a2ce:	2212      	movs	r2, #18
 800a2d0:	2100      	movs	r1, #0
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	f002 fd6f 	bl	800cdb6 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a2de:	223e      	movs	r2, #62	@ 0x3e
 800a2e0:	2100      	movs	r1, #0
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	f002 fd67 	bl	800cdb6 <memset>

  return USBH_OK;
 800a2e8:	2300      	movs	r3, #0
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3710      	adds	r7, #16
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}

0800a2f2 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a2f2:	b480      	push	{r7}
 800a2f4:	b085      	sub	sp, #20
 800a2f6:	af00      	add	r7, sp, #0
 800a2f8:	6078      	str	r0, [r7, #4]
 800a2fa:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d016      	beq.n	800a334 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d10e      	bne.n	800a32e <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800a316:	1c59      	adds	r1, r3, #1
 800a318:	687a      	ldr	r2, [r7, #4]
 800a31a:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800a31e:	687a      	ldr	r2, [r7, #4]
 800a320:	33de      	adds	r3, #222	@ 0xde
 800a322:	6839      	ldr	r1, [r7, #0]
 800a324:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a328:	2300      	movs	r3, #0
 800a32a:	73fb      	strb	r3, [r7, #15]
 800a32c:	e004      	b.n	800a338 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a32e:	2302      	movs	r3, #2
 800a330:	73fb      	strb	r3, [r7, #15]
 800a332:	e001      	b.n	800a338 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a334:	2302      	movs	r3, #2
 800a336:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a338:	7bfb      	ldrb	r3, [r7, #15]
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	3714      	adds	r7, #20
 800a33e:	46bd      	mov	sp, r7
 800a340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a344:	4770      	bx	lr

0800a346 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a346:	b480      	push	{r7}
 800a348:	b085      	sub	sp, #20
 800a34a:	af00      	add	r7, sp, #0
 800a34c:	6078      	str	r0, [r7, #4]
 800a34e:	460b      	mov	r3, r1
 800a350:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a352:	2300      	movs	r3, #0
 800a354:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800a35c:	78fa      	ldrb	r2, [r7, #3]
 800a35e:	429a      	cmp	r2, r3
 800a360:	d204      	bcs.n	800a36c <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	78fa      	ldrb	r2, [r7, #3]
 800a366:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800a36a:	e001      	b.n	800a370 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a36c:	2302      	movs	r3, #2
 800a36e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a370:	7bfb      	ldrb	r3, [r7, #15]
}
 800a372:	4618      	mov	r0, r3
 800a374:	3714      	adds	r7, #20
 800a376:	46bd      	mov	sp, r7
 800a378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37c:	4770      	bx	lr

0800a37e <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a37e:	b480      	push	{r7}
 800a380:	b087      	sub	sp, #28
 800a382:	af00      	add	r7, sp, #0
 800a384:	6078      	str	r0, [r7, #4]
 800a386:	4608      	mov	r0, r1
 800a388:	4611      	mov	r1, r2
 800a38a:	461a      	mov	r2, r3
 800a38c:	4603      	mov	r3, r0
 800a38e:	70fb      	strb	r3, [r7, #3]
 800a390:	460b      	mov	r3, r1
 800a392:	70bb      	strb	r3, [r7, #2]
 800a394:	4613      	mov	r3, r2
 800a396:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a398:	2300      	movs	r3, #0
 800a39a:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a39c:	2300      	movs	r3, #0
 800a39e:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a3a6:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a3a8:	e025      	b.n	800a3f6 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a3aa:	7dfb      	ldrb	r3, [r7, #23]
 800a3ac:	221a      	movs	r2, #26
 800a3ae:	fb02 f303 	mul.w	r3, r2, r3
 800a3b2:	3308      	adds	r3, #8
 800a3b4:	68fa      	ldr	r2, [r7, #12]
 800a3b6:	4413      	add	r3, r2
 800a3b8:	3302      	adds	r3, #2
 800a3ba:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a3bc:	693b      	ldr	r3, [r7, #16]
 800a3be:	795b      	ldrb	r3, [r3, #5]
 800a3c0:	78fa      	ldrb	r2, [r7, #3]
 800a3c2:	429a      	cmp	r2, r3
 800a3c4:	d002      	beq.n	800a3cc <USBH_FindInterface+0x4e>
 800a3c6:	78fb      	ldrb	r3, [r7, #3]
 800a3c8:	2bff      	cmp	r3, #255	@ 0xff
 800a3ca:	d111      	bne.n	800a3f0 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a3cc:	693b      	ldr	r3, [r7, #16]
 800a3ce:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a3d0:	78ba      	ldrb	r2, [r7, #2]
 800a3d2:	429a      	cmp	r2, r3
 800a3d4:	d002      	beq.n	800a3dc <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a3d6:	78bb      	ldrb	r3, [r7, #2]
 800a3d8:	2bff      	cmp	r3, #255	@ 0xff
 800a3da:	d109      	bne.n	800a3f0 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a3dc:	693b      	ldr	r3, [r7, #16]
 800a3de:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a3e0:	787a      	ldrb	r2, [r7, #1]
 800a3e2:	429a      	cmp	r2, r3
 800a3e4:	d002      	beq.n	800a3ec <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a3e6:	787b      	ldrb	r3, [r7, #1]
 800a3e8:	2bff      	cmp	r3, #255	@ 0xff
 800a3ea:	d101      	bne.n	800a3f0 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a3ec:	7dfb      	ldrb	r3, [r7, #23]
 800a3ee:	e006      	b.n	800a3fe <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a3f0:	7dfb      	ldrb	r3, [r7, #23]
 800a3f2:	3301      	adds	r3, #1
 800a3f4:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a3f6:	7dfb      	ldrb	r3, [r7, #23]
 800a3f8:	2b01      	cmp	r3, #1
 800a3fa:	d9d6      	bls.n	800a3aa <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a3fc:	23ff      	movs	r3, #255	@ 0xff
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	371c      	adds	r7, #28
 800a402:	46bd      	mov	sp, r7
 800a404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a408:	4770      	bx	lr

0800a40a <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800a40a:	b580      	push	{r7, lr}
 800a40c:	b082      	sub	sp, #8
 800a40e:	af00      	add	r7, sp, #0
 800a410:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	f001 fcfc 	bl	800be10 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800a418:	2101      	movs	r1, #1
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	f001 fe15 	bl	800c04a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a420:	2300      	movs	r3, #0
}
 800a422:	4618      	mov	r0, r3
 800a424:	3708      	adds	r7, #8
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}
	...

0800a42c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b088      	sub	sp, #32
 800a430:	af04      	add	r7, sp, #16
 800a432:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a434:	2302      	movs	r3, #2
 800a436:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a438:	2300      	movs	r3, #0
 800a43a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800a442:	b2db      	uxtb	r3, r3
 800a444:	2b01      	cmp	r3, #1
 800a446:	d102      	bne.n	800a44e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2203      	movs	r2, #3
 800a44c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	781b      	ldrb	r3, [r3, #0]
 800a452:	b2db      	uxtb	r3, r3
 800a454:	2b0b      	cmp	r3, #11
 800a456:	f200 81bc 	bhi.w	800a7d2 <USBH_Process+0x3a6>
 800a45a:	a201      	add	r2, pc, #4	@ (adr r2, 800a460 <USBH_Process+0x34>)
 800a45c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a460:	0800a491 	.word	0x0800a491
 800a464:	0800a4c3 	.word	0x0800a4c3
 800a468:	0800a52d 	.word	0x0800a52d
 800a46c:	0800a76d 	.word	0x0800a76d
 800a470:	0800a7d3 	.word	0x0800a7d3
 800a474:	0800a5cd 	.word	0x0800a5cd
 800a478:	0800a713 	.word	0x0800a713
 800a47c:	0800a603 	.word	0x0800a603
 800a480:	0800a623 	.word	0x0800a623
 800a484:	0800a641 	.word	0x0800a641
 800a488:	0800a685 	.word	0x0800a685
 800a48c:	0800a755 	.word	0x0800a755
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800a496:	b2db      	uxtb	r3, r3
 800a498:	2b00      	cmp	r3, #0
 800a49a:	f000 819c 	beq.w	800a7d6 <USBH_Process+0x3aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2201      	movs	r2, #1
 800a4a2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a4a4:	20c8      	movs	r0, #200	@ 0xc8
 800a4a6:	f001 fe1a 	bl	800c0de <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f001 fd0d 	bl	800beca <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800a4c0:	e189      	b.n	800a7d6 <USBH_Process+0x3aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800a4c8:	b2db      	uxtb	r3, r3
 800a4ca:	2b01      	cmp	r3, #1
 800a4cc:	d107      	bne.n	800a4de <USBH_Process+0xb2>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2202      	movs	r2, #2
 800a4da:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a4dc:	e18a      	b.n	800a7f4 <USBH_Process+0x3c8>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800a4e4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a4e8:	d914      	bls.n	800a514 <USBH_Process+0xe8>
          phost->device.RstCnt++;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800a4f0:	3301      	adds	r3, #1
 800a4f2:	b2da      	uxtb	r2, r3
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800a500:	2b03      	cmp	r3, #3
 800a502:	d903      	bls.n	800a50c <USBH_Process+0xe0>
            phost->gState = HOST_ABORT_STATE;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	220d      	movs	r2, #13
 800a508:	701a      	strb	r2, [r3, #0]
      break;
 800a50a:	e173      	b.n	800a7f4 <USBH_Process+0x3c8>
            phost->gState = HOST_IDLE;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2200      	movs	r2, #0
 800a510:	701a      	strb	r2, [r3, #0]
      break;
 800a512:	e16f      	b.n	800a7f4 <USBH_Process+0x3c8>
          phost->Timeout += 10U;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800a51a:	f103 020a 	add.w	r2, r3, #10
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800a524:	200a      	movs	r0, #10
 800a526:	f001 fdda 	bl	800c0de <USBH_Delay>
      break;
 800a52a:	e163      	b.n	800a7f4 <USBH_Process+0x3c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a532:	2b00      	cmp	r3, #0
 800a534:	d005      	beq.n	800a542 <USBH_Process+0x116>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a53c:	2104      	movs	r1, #4
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a542:	2064      	movs	r0, #100	@ 0x64
 800a544:	f001 fdcb 	bl	800c0de <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800a548:	6878      	ldr	r0, [r7, #4]
 800a54a:	f001 fc97 	bl	800be7c <USBH_LL_GetSpeed>
 800a54e:	4603      	mov	r3, r0
 800a550:	461a      	mov	r2, r3
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2205      	movs	r2, #5
 800a55c:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a55e:	2100      	movs	r1, #0
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	f001 faa2 	bl	800baaa <USBH_AllocPipe>
 800a566:	4603      	mov	r3, r0
 800a568:	461a      	mov	r2, r3
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a56e:	2180      	movs	r1, #128	@ 0x80
 800a570:	6878      	ldr	r0, [r7, #4]
 800a572:	f001 fa9a 	bl	800baaa <USBH_AllocPipe>
 800a576:	4603      	mov	r3, r0
 800a578:	461a      	mov	r2, r3
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	7919      	ldrb	r1, [r3, #4]
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a58e:	687a      	ldr	r2, [r7, #4]
 800a590:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a592:	9202      	str	r2, [sp, #8]
 800a594:	2200      	movs	r2, #0
 800a596:	9201      	str	r2, [sp, #4]
 800a598:	9300      	str	r3, [sp, #0]
 800a59a:	4603      	mov	r3, r0
 800a59c:	2280      	movs	r2, #128	@ 0x80
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	f001 fa54 	bl	800ba4c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	7959      	ldrb	r1, [r3, #5]
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a5b4:	687a      	ldr	r2, [r7, #4]
 800a5b6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a5b8:	9202      	str	r2, [sp, #8]
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	9201      	str	r2, [sp, #4]
 800a5be:	9300      	str	r3, [sp, #0]
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f001 fa41 	bl	800ba4c <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a5ca:	e113      	b.n	800a7f4 <USBH_Process+0x3c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f000 f917 	bl	800a800 <USBH_HandleEnum>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a5d6:	7bbb      	ldrb	r3, [r7, #14]
 800a5d8:	b2db      	uxtb	r3, r3
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	f040 80fd 	bne.w	800a7da <USBH_Process+0x3ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800a5ee:	2b01      	cmp	r3, #1
 800a5f0:	d103      	bne.n	800a5fa <USBH_Process+0x1ce>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2208      	movs	r2, #8
 800a5f6:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800a5f8:	e0ef      	b.n	800a7da <USBH_Process+0x3ae>
          phost->gState = HOST_INPUT;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2207      	movs	r2, #7
 800a5fe:	701a      	strb	r2, [r3, #0]
      break;
 800a600:	e0eb      	b.n	800a7da <USBH_Process+0x3ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a608:	2b00      	cmp	r3, #0
 800a60a:	f000 80e8 	beq.w	800a7de <USBH_Process+0x3b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a614:	2101      	movs	r1, #1
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2208      	movs	r2, #8
 800a61e:	701a      	strb	r2, [r3, #0]
#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 800a620:	e0dd      	b.n	800a7de <USBH_Process+0x3b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800a628:	4619      	mov	r1, r3
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f000 fc3f 	bl	800aeae <USBH_SetCfg>
 800a630:	4603      	mov	r3, r0
 800a632:	2b00      	cmp	r3, #0
 800a634:	f040 80d5 	bne.w	800a7e2 <USBH_Process+0x3b6>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2209      	movs	r2, #9
 800a63c:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a63e:	e0d0      	b.n	800a7e2 <USBH_Process+0x3b6>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800a646:	f003 0320 	and.w	r3, r3, #32
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d016      	beq.n	800a67c <USBH_Process+0x250>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800a64e:	2101      	movs	r1, #1
 800a650:	6878      	ldr	r0, [r7, #4]
 800a652:	f000 fc4f 	bl	800aef4 <USBH_SetFeature>
 800a656:	4603      	mov	r3, r0
 800a658:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a65a:	7bbb      	ldrb	r3, [r7, #14]
 800a65c:	b2db      	uxtb	r3, r3
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d103      	bne.n	800a66a <USBH_Process+0x23e>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	220a      	movs	r2, #10
 800a666:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a668:	e0bd      	b.n	800a7e6 <USBH_Process+0x3ba>
        else if (status == USBH_NOT_SUPPORTED)
 800a66a:	7bbb      	ldrb	r3, [r7, #14]
 800a66c:	b2db      	uxtb	r3, r3
 800a66e:	2b03      	cmp	r3, #3
 800a670:	f040 80b9 	bne.w	800a7e6 <USBH_Process+0x3ba>
          phost->gState = HOST_CHECK_CLASS;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	220a      	movs	r2, #10
 800a678:	701a      	strb	r2, [r3, #0]
      break;
 800a67a:	e0b4      	b.n	800a7e6 <USBH_Process+0x3ba>
        phost->gState = HOST_CHECK_CLASS;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	220a      	movs	r2, #10
 800a680:	701a      	strb	r2, [r3, #0]
      break;
 800a682:	e0b0      	b.n	800a7e6 <USBH_Process+0x3ba>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	f000 80ad 	beq.w	800a7ea <USBH_Process+0x3be>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2200      	movs	r2, #0
 800a694:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a698:	2300      	movs	r3, #0
 800a69a:	73fb      	strb	r3, [r7, #15]
 800a69c:	e016      	b.n	800a6cc <USBH_Process+0x2a0>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a69e:	7bfa      	ldrb	r2, [r7, #15]
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	32de      	adds	r2, #222	@ 0xde
 800a6a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6a8:	791a      	ldrb	r2, [r3, #4]
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800a6b0:	429a      	cmp	r2, r3
 800a6b2:	d108      	bne.n	800a6c6 <USBH_Process+0x29a>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a6b4:	7bfa      	ldrb	r2, [r7, #15]
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	32de      	adds	r2, #222	@ 0xde
 800a6ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800a6c4:	e005      	b.n	800a6d2 <USBH_Process+0x2a6>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a6c6:	7bfb      	ldrb	r3, [r7, #15]
 800a6c8:	3301      	adds	r3, #1
 800a6ca:	73fb      	strb	r3, [r7, #15]
 800a6cc:	7bfb      	ldrb	r3, [r7, #15]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d0e5      	beq.n	800a69e <USBH_Process+0x272>
          }
        }

        if (phost->pActiveClass != NULL)
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d016      	beq.n	800a70a <USBH_Process+0x2de>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a6e2:	689b      	ldr	r3, [r3, #8]
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	4798      	blx	r3
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d109      	bne.n	800a702 <USBH_Process+0x2d6>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2206      	movs	r2, #6
 800a6f2:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a6fa:	2103      	movs	r1, #3
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	4798      	blx	r3
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a700:	e073      	b.n	800a7ea <USBH_Process+0x3be>
            phost->gState = HOST_ABORT_STATE;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	220d      	movs	r2, #13
 800a706:	701a      	strb	r2, [r3, #0]
      break;
 800a708:	e06f      	b.n	800a7ea <USBH_Process+0x3be>
          phost->gState = HOST_ABORT_STATE;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	220d      	movs	r2, #13
 800a70e:	701a      	strb	r2, [r3, #0]
      break;
 800a710:	e06b      	b.n	800a7ea <USBH_Process+0x3be>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d017      	beq.n	800a74c <USBH_Process+0x320>
      {
        status = phost->pActiveClass->Requests(phost);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a722:	691b      	ldr	r3, [r3, #16]
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	4798      	blx	r3
 800a728:	4603      	mov	r3, r0
 800a72a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a72c:	7bbb      	ldrb	r3, [r7, #14]
 800a72e:	b2db      	uxtb	r3, r3
 800a730:	2b00      	cmp	r3, #0
 800a732:	d103      	bne.n	800a73c <USBH_Process+0x310>
        {
          phost->gState = HOST_CLASS;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	220b      	movs	r2, #11
 800a738:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a73a:	e058      	b.n	800a7ee <USBH_Process+0x3c2>
        else if (status == USBH_FAIL)
 800a73c:	7bbb      	ldrb	r3, [r7, #14]
 800a73e:	b2db      	uxtb	r3, r3
 800a740:	2b02      	cmp	r3, #2
 800a742:	d154      	bne.n	800a7ee <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	220d      	movs	r2, #13
 800a748:	701a      	strb	r2, [r3, #0]
      break;
 800a74a:	e050      	b.n	800a7ee <USBH_Process+0x3c2>
        phost->gState = HOST_ABORT_STATE;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	220d      	movs	r2, #13
 800a750:	701a      	strb	r2, [r3, #0]
      break;
 800a752:	e04c      	b.n	800a7ee <USBH_Process+0x3c2>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d049      	beq.n	800a7f2 <USBH_Process+0x3c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a764:	695b      	ldr	r3, [r3, #20]
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	4798      	blx	r3
      }
      break;
 800a76a:	e042      	b.n	800a7f2 <USBH_Process+0x3c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2200      	movs	r2, #0
 800a770:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800a774:	6878      	ldr	r0, [r7, #4]
 800a776:	f7ff fd4b 	bl	800a210 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a780:	2b00      	cmp	r3, #0
 800a782:	d009      	beq.n	800a798 <USBH_Process+0x36c>
      {
        phost->pActiveClass->DeInit(phost);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a78a:	68db      	ldr	r3, [r3, #12]
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2200      	movs	r2, #0
 800a794:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d005      	beq.n	800a7ae <USBH_Process+0x382>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a7a8:	2105      	movs	r1, #5
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800a7b4:	b2db      	uxtb	r3, r3
 800a7b6:	2b01      	cmp	r3, #1
 800a7b8:	d107      	bne.n	800a7ca <USBH_Process+0x39e>
      {
        phost->device.is_ReEnumerated = 0U;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2200      	movs	r2, #0
 800a7be:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f7ff fe21 	bl	800a40a <USBH_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a7c8:	e014      	b.n	800a7f4 <USBH_Process+0x3c8>
        (void)USBH_LL_Start(phost);
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f001 fb20 	bl	800be10 <USBH_LL_Start>
      break;
 800a7d0:	e010      	b.n	800a7f4 <USBH_Process+0x3c8>

    case HOST_ABORT_STATE:
    default :
      break;
 800a7d2:	bf00      	nop
 800a7d4:	e00e      	b.n	800a7f4 <USBH_Process+0x3c8>
      break;
 800a7d6:	bf00      	nop
 800a7d8:	e00c      	b.n	800a7f4 <USBH_Process+0x3c8>
      break;
 800a7da:	bf00      	nop
 800a7dc:	e00a      	b.n	800a7f4 <USBH_Process+0x3c8>
    break;
 800a7de:	bf00      	nop
 800a7e0:	e008      	b.n	800a7f4 <USBH_Process+0x3c8>
      break;
 800a7e2:	bf00      	nop
 800a7e4:	e006      	b.n	800a7f4 <USBH_Process+0x3c8>
      break;
 800a7e6:	bf00      	nop
 800a7e8:	e004      	b.n	800a7f4 <USBH_Process+0x3c8>
      break;
 800a7ea:	bf00      	nop
 800a7ec:	e002      	b.n	800a7f4 <USBH_Process+0x3c8>
      break;
 800a7ee:	bf00      	nop
 800a7f0:	e000      	b.n	800a7f4 <USBH_Process+0x3c8>
      break;
 800a7f2:	bf00      	nop
  }
  return USBH_OK;
 800a7f4:	2300      	movs	r3, #0
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3710      	adds	r7, #16
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}
 800a7fe:	bf00      	nop

0800a800 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b088      	sub	sp, #32
 800a804:	af04      	add	r7, sp, #16
 800a806:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a808:	2301      	movs	r3, #1
 800a80a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a80c:	2301      	movs	r3, #1
 800a80e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	785b      	ldrb	r3, [r3, #1]
 800a814:	2b07      	cmp	r3, #7
 800a816:	f200 81bd 	bhi.w	800ab94 <USBH_HandleEnum+0x394>
 800a81a:	a201      	add	r2, pc, #4	@ (adr r2, 800a820 <USBH_HandleEnum+0x20>)
 800a81c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a820:	0800a841 	.word	0x0800a841
 800a824:	0800a8fb 	.word	0x0800a8fb
 800a828:	0800a965 	.word	0x0800a965
 800a82c:	0800a9ef 	.word	0x0800a9ef
 800a830:	0800aa59 	.word	0x0800aa59
 800a834:	0800aac9 	.word	0x0800aac9
 800a838:	0800ab0f 	.word	0x0800ab0f
 800a83c:	0800ab55 	.word	0x0800ab55
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a840:	2108      	movs	r1, #8
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f000 fa50 	bl	800ace8 <USBH_Get_DevDesc>
 800a848:	4603      	mov	r3, r0
 800a84a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a84c:	7bbb      	ldrb	r3, [r7, #14]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d12e      	bne.n	800a8b0 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2201      	movs	r2, #1
 800a860:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	7919      	ldrb	r1, [r3, #4]
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a872:	687a      	ldr	r2, [r7, #4]
 800a874:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a876:	9202      	str	r2, [sp, #8]
 800a878:	2200      	movs	r2, #0
 800a87a:	9201      	str	r2, [sp, #4]
 800a87c:	9300      	str	r3, [sp, #0]
 800a87e:	4603      	mov	r3, r0
 800a880:	2280      	movs	r2, #128	@ 0x80
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f001 f8e2 	bl	800ba4c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	7959      	ldrb	r1, [r3, #5]
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a898:	687a      	ldr	r2, [r7, #4]
 800a89a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a89c:	9202      	str	r2, [sp, #8]
 800a89e:	2200      	movs	r2, #0
 800a8a0:	9201      	str	r2, [sp, #4]
 800a8a2:	9300      	str	r3, [sp, #0]
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f001 f8cf 	bl	800ba4c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a8ae:	e173      	b.n	800ab98 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a8b0:	7bbb      	ldrb	r3, [r7, #14]
 800a8b2:	2b03      	cmp	r3, #3
 800a8b4:	f040 8170 	bne.w	800ab98 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a8be:	3301      	adds	r3, #1
 800a8c0:	b2da      	uxtb	r2, r3
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a8ce:	2b03      	cmp	r3, #3
 800a8d0:	d903      	bls.n	800a8da <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	220d      	movs	r2, #13
 800a8d6:	701a      	strb	r2, [r3, #0]
      break;
 800a8d8:	e15e      	b.n	800ab98 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	795b      	ldrb	r3, [r3, #5]
 800a8de:	4619      	mov	r1, r3
 800a8e0:	6878      	ldr	r0, [r7, #4]
 800a8e2:	f001 f903 	bl	800baec <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	791b      	ldrb	r3, [r3, #4]
 800a8ea:	4619      	mov	r1, r3
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	f001 f8fd 	bl	800baec <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	701a      	strb	r2, [r3, #0]
      break;
 800a8f8:	e14e      	b.n	800ab98 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a8fa:	2112      	movs	r1, #18
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	f000 f9f3 	bl	800ace8 <USBH_Get_DevDesc>
 800a902:	4603      	mov	r3, r0
 800a904:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a906:	7bbb      	ldrb	r3, [r7, #14]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d103      	bne.n	800a914 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2202      	movs	r2, #2
 800a910:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a912:	e143      	b.n	800ab9c <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a914:	7bbb      	ldrb	r3, [r7, #14]
 800a916:	2b03      	cmp	r3, #3
 800a918:	f040 8140 	bne.w	800ab9c <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a922:	3301      	adds	r3, #1
 800a924:	b2da      	uxtb	r2, r3
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a932:	2b03      	cmp	r3, #3
 800a934:	d903      	bls.n	800a93e <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	220d      	movs	r2, #13
 800a93a:	701a      	strb	r2, [r3, #0]
      break;
 800a93c:	e12e      	b.n	800ab9c <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	795b      	ldrb	r3, [r3, #5]
 800a942:	4619      	mov	r1, r3
 800a944:	6878      	ldr	r0, [r7, #4]
 800a946:	f001 f8d1 	bl	800baec <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	791b      	ldrb	r3, [r3, #4]
 800a94e:	4619      	mov	r1, r3
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f001 f8cb 	bl	800baec <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2200      	movs	r2, #0
 800a95a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2200      	movs	r2, #0
 800a960:	701a      	strb	r2, [r3, #0]
      break;
 800a962:	e11b      	b.n	800ab9c <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a964:	2101      	movs	r1, #1
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f000 fa7d 	bl	800ae66 <USBH_SetAddress>
 800a96c:	4603      	mov	r3, r0
 800a96e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a970:	7bbb      	ldrb	r3, [r7, #14]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d130      	bne.n	800a9d8 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800a976:	2002      	movs	r0, #2
 800a978:	f001 fbb1 	bl	800c0de <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2201      	movs	r2, #1
 800a980:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2203      	movs	r2, #3
 800a988:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	7919      	ldrb	r1, [r3, #4]
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a99a:	687a      	ldr	r2, [r7, #4]
 800a99c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a99e:	9202      	str	r2, [sp, #8]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	9201      	str	r2, [sp, #4]
 800a9a4:	9300      	str	r3, [sp, #0]
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	2280      	movs	r2, #128	@ 0x80
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f001 f84e 	bl	800ba4c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	7959      	ldrb	r1, [r3, #5]
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a9c0:	687a      	ldr	r2, [r7, #4]
 800a9c2:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a9c4:	9202      	str	r2, [sp, #8]
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	9201      	str	r2, [sp, #4]
 800a9ca:	9300      	str	r3, [sp, #0]
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f001 f83b 	bl	800ba4c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a9d6:	e0e3      	b.n	800aba0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a9d8:	7bbb      	ldrb	r3, [r7, #14]
 800a9da:	2b03      	cmp	r3, #3
 800a9dc:	f040 80e0 	bne.w	800aba0 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	220d      	movs	r2, #13
 800a9e4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	705a      	strb	r2, [r3, #1]
      break;
 800a9ec:	e0d8      	b.n	800aba0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a9ee:	2109      	movs	r1, #9
 800a9f0:	6878      	ldr	r0, [r7, #4]
 800a9f2:	f000 f9a5 	bl	800ad40 <USBH_Get_CfgDesc>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a9fa:	7bbb      	ldrb	r3, [r7, #14]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d103      	bne.n	800aa08 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2204      	movs	r2, #4
 800aa04:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800aa06:	e0cd      	b.n	800aba4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aa08:	7bbb      	ldrb	r3, [r7, #14]
 800aa0a:	2b03      	cmp	r3, #3
 800aa0c:	f040 80ca 	bne.w	800aba4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800aa16:	3301      	adds	r3, #1
 800aa18:	b2da      	uxtb	r2, r3
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800aa26:	2b03      	cmp	r3, #3
 800aa28:	d903      	bls.n	800aa32 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	220d      	movs	r2, #13
 800aa2e:	701a      	strb	r2, [r3, #0]
      break;
 800aa30:	e0b8      	b.n	800aba4 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	795b      	ldrb	r3, [r3, #5]
 800aa36:	4619      	mov	r1, r3
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	f001 f857 	bl	800baec <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	791b      	ldrb	r3, [r3, #4]
 800aa42:	4619      	mov	r1, r3
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	f001 f851 	bl	800baec <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2200      	movs	r2, #0
 800aa54:	701a      	strb	r2, [r3, #0]
      break;
 800aa56:	e0a5      	b.n	800aba4 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800aa5e:	4619      	mov	r1, r3
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	f000 f96d 	bl	800ad40 <USBH_Get_CfgDesc>
 800aa66:	4603      	mov	r3, r0
 800aa68:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800aa6a:	7bbb      	ldrb	r3, [r7, #14]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d103      	bne.n	800aa78 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2205      	movs	r2, #5
 800aa74:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800aa76:	e097      	b.n	800aba8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aa78:	7bbb      	ldrb	r3, [r7, #14]
 800aa7a:	2b03      	cmp	r3, #3
 800aa7c:	f040 8094 	bne.w	800aba8 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800aa86:	3301      	adds	r3, #1
 800aa88:	b2da      	uxtb	r2, r3
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800aa96:	2b03      	cmp	r3, #3
 800aa98:	d903      	bls.n	800aaa2 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	220d      	movs	r2, #13
 800aa9e:	701a      	strb	r2, [r3, #0]
      break;
 800aaa0:	e082      	b.n	800aba8 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	795b      	ldrb	r3, [r3, #5]
 800aaa6:	4619      	mov	r1, r3
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	f001 f81f 	bl	800baec <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	791b      	ldrb	r3, [r3, #4]
 800aab2:	4619      	mov	r1, r3
 800aab4:	6878      	ldr	r0, [r7, #4]
 800aab6:	f001 f819 	bl	800baec <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2200      	movs	r2, #0
 800aabe:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2200      	movs	r2, #0
 800aac4:	701a      	strb	r2, [r3, #0]
      break;
 800aac6:	e06f      	b.n	800aba8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d019      	beq.n	800ab06 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800aade:	23ff      	movs	r3, #255	@ 0xff
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f000 f957 	bl	800ad94 <USBH_Get_StringDesc>
 800aae6:	4603      	mov	r3, r0
 800aae8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800aaea:	7bbb      	ldrb	r3, [r7, #14]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d103      	bne.n	800aaf8 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2206      	movs	r2, #6
 800aaf4:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800aaf6:	e059      	b.n	800abac <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aaf8:	7bbb      	ldrb	r3, [r7, #14]
 800aafa:	2b03      	cmp	r3, #3
 800aafc:	d156      	bne.n	800abac <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2206      	movs	r2, #6
 800ab02:	705a      	strb	r2, [r3, #1]
      break;
 800ab04:	e052      	b.n	800abac <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	2206      	movs	r2, #6
 800ab0a:	705a      	strb	r2, [r3, #1]
      break;
 800ab0c:	e04e      	b.n	800abac <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d019      	beq.n	800ab4c <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ab24:	23ff      	movs	r3, #255	@ 0xff
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	f000 f934 	bl	800ad94 <USBH_Get_StringDesc>
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ab30:	7bbb      	ldrb	r3, [r7, #14]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d103      	bne.n	800ab3e <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	2207      	movs	r2, #7
 800ab3a:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800ab3c:	e038      	b.n	800abb0 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ab3e:	7bbb      	ldrb	r3, [r7, #14]
 800ab40:	2b03      	cmp	r3, #3
 800ab42:	d135      	bne.n	800abb0 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2207      	movs	r2, #7
 800ab48:	705a      	strb	r2, [r3, #1]
      break;
 800ab4a:	e031      	b.n	800abb0 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2207      	movs	r2, #7
 800ab50:	705a      	strb	r2, [r3, #1]
      break;
 800ab52:	e02d      	b.n	800abb0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d017      	beq.n	800ab8e <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ab6a:	23ff      	movs	r3, #255	@ 0xff
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	f000 f911 	bl	800ad94 <USBH_Get_StringDesc>
 800ab72:	4603      	mov	r3, r0
 800ab74:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ab76:	7bbb      	ldrb	r3, [r7, #14]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d102      	bne.n	800ab82 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800ab80:	e018      	b.n	800abb4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ab82:	7bbb      	ldrb	r3, [r7, #14]
 800ab84:	2b03      	cmp	r3, #3
 800ab86:	d115      	bne.n	800abb4 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800ab88:	2300      	movs	r3, #0
 800ab8a:	73fb      	strb	r3, [r7, #15]
      break;
 800ab8c:	e012      	b.n	800abb4 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800ab8e:	2300      	movs	r3, #0
 800ab90:	73fb      	strb	r3, [r7, #15]
      break;
 800ab92:	e00f      	b.n	800abb4 <USBH_HandleEnum+0x3b4>

    default:
      break;
 800ab94:	bf00      	nop
 800ab96:	e00e      	b.n	800abb6 <USBH_HandleEnum+0x3b6>
      break;
 800ab98:	bf00      	nop
 800ab9a:	e00c      	b.n	800abb6 <USBH_HandleEnum+0x3b6>
      break;
 800ab9c:	bf00      	nop
 800ab9e:	e00a      	b.n	800abb6 <USBH_HandleEnum+0x3b6>
      break;
 800aba0:	bf00      	nop
 800aba2:	e008      	b.n	800abb6 <USBH_HandleEnum+0x3b6>
      break;
 800aba4:	bf00      	nop
 800aba6:	e006      	b.n	800abb6 <USBH_HandleEnum+0x3b6>
      break;
 800aba8:	bf00      	nop
 800abaa:	e004      	b.n	800abb6 <USBH_HandleEnum+0x3b6>
      break;
 800abac:	bf00      	nop
 800abae:	e002      	b.n	800abb6 <USBH_HandleEnum+0x3b6>
      break;
 800abb0:	bf00      	nop
 800abb2:	e000      	b.n	800abb6 <USBH_HandleEnum+0x3b6>
      break;
 800abb4:	bf00      	nop
  }
  return Status;
 800abb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800abb8:	4618      	mov	r0, r3
 800abba:	3710      	adds	r7, #16
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bd80      	pop	{r7, pc}

0800abc0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800abc0:	b480      	push	{r7}
 800abc2:	b083      	sub	sp, #12
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
 800abc8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	683a      	ldr	r2, [r7, #0]
 800abce:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800abd2:	bf00      	nop
 800abd4:	370c      	adds	r7, #12
 800abd6:	46bd      	mov	sp, r7
 800abd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abdc:	4770      	bx	lr

0800abde <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800abde:	b580      	push	{r7, lr}
 800abe0:	b082      	sub	sp, #8
 800abe2:	af00      	add	r7, sp, #0
 800abe4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800abec:	1c5a      	adds	r2, r3, #1
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800abf4:	6878      	ldr	r0, [r7, #4]
 800abf6:	f000 f804 	bl	800ac02 <USBH_HandleSof>
}
 800abfa:	bf00      	nop
 800abfc:	3708      	adds	r7, #8
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd80      	pop	{r7, pc}

0800ac02 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800ac02:	b580      	push	{r7, lr}
 800ac04:	b082      	sub	sp, #8
 800ac06:	af00      	add	r7, sp, #0
 800ac08:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	781b      	ldrb	r3, [r3, #0]
 800ac0e:	b2db      	uxtb	r3, r3
 800ac10:	2b0b      	cmp	r3, #11
 800ac12:	d10a      	bne.n	800ac2a <USBH_HandleSof+0x28>
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d005      	beq.n	800ac2a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ac24:	699b      	ldr	r3, [r3, #24]
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	4798      	blx	r3
  }
}
 800ac2a:	bf00      	nop
 800ac2c:	3708      	adds	r7, #8
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	bd80      	pop	{r7, pc}

0800ac32 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800ac32:	b480      	push	{r7}
 800ac34:	b083      	sub	sp, #12
 800ac36:	af00      	add	r7, sp, #0
 800ac38:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	2201      	movs	r2, #1
 800ac3e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
 800ac42:	bf00      	nop
}
 800ac44:	370c      	adds	r7, #12
 800ac46:	46bd      	mov	sp, r7
 800ac48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4c:	4770      	bx	lr

0800ac4e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800ac4e:	b480      	push	{r7}
 800ac50:	b083      	sub	sp, #12
 800ac52:	af00      	add	r7, sp, #0
 800ac54:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2200      	movs	r2, #0
 800ac5a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2201      	movs	r2, #1
 800ac62:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 800ac66:	bf00      	nop
}
 800ac68:	370c      	adds	r7, #12
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac70:	4770      	bx	lr

0800ac72 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800ac72:	b480      	push	{r7}
 800ac74:	b083      	sub	sp, #12
 800ac76:	af00      	add	r7, sp, #0
 800ac78:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2201      	movs	r2, #1
 800ac7e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	2200      	movs	r2, #0
 800ac86:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800ac92:	2300      	movs	r3, #0
}
 800ac94:	4618      	mov	r0, r3
 800ac96:	370c      	adds	r7, #12
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9e:	4770      	bx	lr

0800aca0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b082      	sub	sp, #8
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2201      	movs	r2, #1
 800acac:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2200      	movs	r2, #0
 800acb4:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2200      	movs	r2, #0
 800acbc:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	f001 f8c0 	bl	800be46 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	791b      	ldrb	r3, [r3, #4]
 800acca:	4619      	mov	r1, r3
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f000 ff0d 	bl	800baec <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	795b      	ldrb	r3, [r3, #5]
 800acd6:	4619      	mov	r1, r3
 800acd8:	6878      	ldr	r0, [r7, #4]
 800acda:	f000 ff07 	bl	800baec <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800acde:	2300      	movs	r3, #0
}
 800ace0:	4618      	mov	r0, r3
 800ace2:	3708      	adds	r7, #8
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}

0800ace8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b086      	sub	sp, #24
 800acec:	af02      	add	r7, sp, #8
 800acee:	6078      	str	r0, [r7, #4]
 800acf0:	460b      	mov	r3, r1
 800acf2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800acf4:	887b      	ldrh	r3, [r7, #2]
 800acf6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800acfa:	d901      	bls.n	800ad00 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800acfc:	2303      	movs	r3, #3
 800acfe:	e01b      	b.n	800ad38 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800ad06:	887b      	ldrh	r3, [r7, #2]
 800ad08:	9300      	str	r3, [sp, #0]
 800ad0a:	4613      	mov	r3, r2
 800ad0c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ad10:	2100      	movs	r1, #0
 800ad12:	6878      	ldr	r0, [r7, #4]
 800ad14:	f000 f872 	bl	800adfc <USBH_GetDescriptor>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800ad1c:	7bfb      	ldrb	r3, [r7, #15]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d109      	bne.n	800ad36 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800ad28:	887a      	ldrh	r2, [r7, #2]
 800ad2a:	4619      	mov	r1, r3
 800ad2c:	6878      	ldr	r0, [r7, #4]
 800ad2e:	f000 f929 	bl	800af84 <USBH_ParseDevDesc>
 800ad32:	4603      	mov	r3, r0
 800ad34:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ad36:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad38:	4618      	mov	r0, r3
 800ad3a:	3710      	adds	r7, #16
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	bd80      	pop	{r7, pc}

0800ad40 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b086      	sub	sp, #24
 800ad44:	af02      	add	r7, sp, #8
 800ad46:	6078      	str	r0, [r7, #4]
 800ad48:	460b      	mov	r3, r1
 800ad4a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	331c      	adds	r3, #28
 800ad50:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800ad52:	887b      	ldrh	r3, [r7, #2]
 800ad54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ad58:	d901      	bls.n	800ad5e <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800ad5a:	2303      	movs	r3, #3
 800ad5c:	e016      	b.n	800ad8c <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800ad5e:	887b      	ldrh	r3, [r7, #2]
 800ad60:	9300      	str	r3, [sp, #0]
 800ad62:	68bb      	ldr	r3, [r7, #8]
 800ad64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ad68:	2100      	movs	r1, #0
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f000 f846 	bl	800adfc <USBH_GetDescriptor>
 800ad70:	4603      	mov	r3, r0
 800ad72:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800ad74:	7bfb      	ldrb	r3, [r7, #15]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d107      	bne.n	800ad8a <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800ad7a:	887b      	ldrh	r3, [r7, #2]
 800ad7c:	461a      	mov	r2, r3
 800ad7e:	68b9      	ldr	r1, [r7, #8]
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f000 f9af 	bl	800b0e4 <USBH_ParseCfgDesc>
 800ad86:	4603      	mov	r3, r0
 800ad88:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ad8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	3710      	adds	r7, #16
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bd80      	pop	{r7, pc}

0800ad94 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b088      	sub	sp, #32
 800ad98:	af02      	add	r7, sp, #8
 800ad9a:	60f8      	str	r0, [r7, #12]
 800ad9c:	607a      	str	r2, [r7, #4]
 800ad9e:	461a      	mov	r2, r3
 800ada0:	460b      	mov	r3, r1
 800ada2:	72fb      	strb	r3, [r7, #11]
 800ada4:	4613      	mov	r3, r2
 800ada6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800ada8:	893b      	ldrh	r3, [r7, #8]
 800adaa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800adae:	d802      	bhi.n	800adb6 <USBH_Get_StringDesc+0x22>
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d101      	bne.n	800adba <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800adb6:	2303      	movs	r3, #3
 800adb8:	e01c      	b.n	800adf4 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800adba:	7afb      	ldrb	r3, [r7, #11]
 800adbc:	b29b      	uxth	r3, r3
 800adbe:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800adc2:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800adca:	893b      	ldrh	r3, [r7, #8]
 800adcc:	9300      	str	r3, [sp, #0]
 800adce:	460b      	mov	r3, r1
 800add0:	2100      	movs	r1, #0
 800add2:	68f8      	ldr	r0, [r7, #12]
 800add4:	f000 f812 	bl	800adfc <USBH_GetDescriptor>
 800add8:	4603      	mov	r3, r0
 800adda:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800addc:	7dfb      	ldrb	r3, [r7, #23]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d107      	bne.n	800adf2 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800ade8:	893a      	ldrh	r2, [r7, #8]
 800adea:	6879      	ldr	r1, [r7, #4]
 800adec:	4618      	mov	r0, r3
 800adee:	f000 fb8c 	bl	800b50a <USBH_ParseStringDesc>
  }

  return status;
 800adf2:	7dfb      	ldrb	r3, [r7, #23]
}
 800adf4:	4618      	mov	r0, r3
 800adf6:	3718      	adds	r7, #24
 800adf8:	46bd      	mov	sp, r7
 800adfa:	bd80      	pop	{r7, pc}

0800adfc <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b084      	sub	sp, #16
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	60f8      	str	r0, [r7, #12]
 800ae04:	607b      	str	r3, [r7, #4]
 800ae06:	460b      	mov	r3, r1
 800ae08:	72fb      	strb	r3, [r7, #11]
 800ae0a:	4613      	mov	r3, r2
 800ae0c:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	789b      	ldrb	r3, [r3, #2]
 800ae12:	2b01      	cmp	r3, #1
 800ae14:	d11c      	bne.n	800ae50 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800ae16:	7afb      	ldrb	r3, [r7, #11]
 800ae18:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ae1c:	b2da      	uxtb	r2, r3
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	2206      	movs	r2, #6
 800ae26:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	893a      	ldrh	r2, [r7, #8]
 800ae2c:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800ae2e:	893b      	ldrh	r3, [r7, #8]
 800ae30:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ae34:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ae38:	d104      	bne.n	800ae44 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	f240 4209 	movw	r2, #1033	@ 0x409
 800ae40:	829a      	strh	r2, [r3, #20]
 800ae42:	e002      	b.n	800ae4a <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	2200      	movs	r2, #0
 800ae48:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	8b3a      	ldrh	r2, [r7, #24]
 800ae4e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800ae50:	8b3b      	ldrh	r3, [r7, #24]
 800ae52:	461a      	mov	r2, r3
 800ae54:	6879      	ldr	r1, [r7, #4]
 800ae56:	68f8      	ldr	r0, [r7, #12]
 800ae58:	f000 fba4 	bl	800b5a4 <USBH_CtlReq>
 800ae5c:	4603      	mov	r3, r0
}
 800ae5e:	4618      	mov	r0, r3
 800ae60:	3710      	adds	r7, #16
 800ae62:	46bd      	mov	sp, r7
 800ae64:	bd80      	pop	{r7, pc}

0800ae66 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800ae66:	b580      	push	{r7, lr}
 800ae68:	b082      	sub	sp, #8
 800ae6a:	af00      	add	r7, sp, #0
 800ae6c:	6078      	str	r0, [r7, #4]
 800ae6e:	460b      	mov	r3, r1
 800ae70:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	789b      	ldrb	r3, [r3, #2]
 800ae76:	2b01      	cmp	r3, #1
 800ae78:	d10f      	bne.n	800ae9a <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2205      	movs	r2, #5
 800ae84:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800ae86:	78fb      	ldrb	r3, [r7, #3]
 800ae88:	b29a      	uxth	r2, r3
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2200      	movs	r2, #0
 800ae92:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2200      	movs	r2, #0
 800ae98:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	2100      	movs	r1, #0
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f000 fb80 	bl	800b5a4 <USBH_CtlReq>
 800aea4:	4603      	mov	r3, r0
}
 800aea6:	4618      	mov	r0, r3
 800aea8:	3708      	adds	r7, #8
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}

0800aeae <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800aeae:	b580      	push	{r7, lr}
 800aeb0:	b082      	sub	sp, #8
 800aeb2:	af00      	add	r7, sp, #0
 800aeb4:	6078      	str	r0, [r7, #4]
 800aeb6:	460b      	mov	r3, r1
 800aeb8:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	789b      	ldrb	r3, [r3, #2]
 800aebe:	2b01      	cmp	r3, #1
 800aec0:	d10e      	bne.n	800aee0 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2200      	movs	r2, #0
 800aec6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2209      	movs	r2, #9
 800aecc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	887a      	ldrh	r2, [r7, #2]
 800aed2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2200      	movs	r2, #0
 800aed8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	2200      	movs	r2, #0
 800aede:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800aee0:	2200      	movs	r2, #0
 800aee2:	2100      	movs	r1, #0
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	f000 fb5d 	bl	800b5a4 <USBH_CtlReq>
 800aeea:	4603      	mov	r3, r0
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	3708      	adds	r7, #8
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}

0800aef4 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b082      	sub	sp, #8
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
 800aefc:	460b      	mov	r3, r1
 800aefe:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	789b      	ldrb	r3, [r3, #2]
 800af04:	2b01      	cmp	r3, #1
 800af06:	d10f      	bne.n	800af28 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2200      	movs	r2, #0
 800af0c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	2203      	movs	r2, #3
 800af12:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800af14:	78fb      	ldrb	r3, [r7, #3]
 800af16:	b29a      	uxth	r2, r3
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2200      	movs	r2, #0
 800af20:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2200      	movs	r2, #0
 800af26:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800af28:	2200      	movs	r2, #0
 800af2a:	2100      	movs	r1, #0
 800af2c:	6878      	ldr	r0, [r7, #4]
 800af2e:	f000 fb39 	bl	800b5a4 <USBH_CtlReq>
 800af32:	4603      	mov	r3, r0
}
 800af34:	4618      	mov	r0, r3
 800af36:	3708      	adds	r7, #8
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}

0800af3c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b082      	sub	sp, #8
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
 800af44:	460b      	mov	r3, r1
 800af46:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	789b      	ldrb	r3, [r3, #2]
 800af4c:	2b01      	cmp	r3, #1
 800af4e:	d10f      	bne.n	800af70 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2202      	movs	r2, #2
 800af54:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	2201      	movs	r2, #1
 800af5a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2200      	movs	r2, #0
 800af60:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800af62:	78fb      	ldrb	r3, [r7, #3]
 800af64:	b29a      	uxth	r2, r3
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2200      	movs	r2, #0
 800af6e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800af70:	2200      	movs	r2, #0
 800af72:	2100      	movs	r1, #0
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f000 fb15 	bl	800b5a4 <USBH_CtlReq>
 800af7a:	4603      	mov	r3, r0
}
 800af7c:	4618      	mov	r0, r3
 800af7e:	3708      	adds	r7, #8
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}

0800af84 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800af84:	b480      	push	{r7}
 800af86:	b087      	sub	sp, #28
 800af88:	af00      	add	r7, sp, #0
 800af8a:	60f8      	str	r0, [r7, #12]
 800af8c:	60b9      	str	r1, [r7, #8]
 800af8e:	4613      	mov	r3, r2
 800af90:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800af98:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800af9a:	2300      	movs	r3, #0
 800af9c:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800af9e:	68bb      	ldr	r3, [r7, #8]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d101      	bne.n	800afa8 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800afa4:	2302      	movs	r3, #2
 800afa6:	e094      	b.n	800b0d2 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800afa8:	68bb      	ldr	r3, [r7, #8]
 800afaa:	781a      	ldrb	r2, [r3, #0]
 800afac:	693b      	ldr	r3, [r7, #16]
 800afae:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	785a      	ldrb	r2, [r3, #1]
 800afb4:	693b      	ldr	r3, [r7, #16]
 800afb6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800afb8:	68bb      	ldr	r3, [r7, #8]
 800afba:	3302      	adds	r3, #2
 800afbc:	781b      	ldrb	r3, [r3, #0]
 800afbe:	461a      	mov	r2, r3
 800afc0:	68bb      	ldr	r3, [r7, #8]
 800afc2:	3303      	adds	r3, #3
 800afc4:	781b      	ldrb	r3, [r3, #0]
 800afc6:	021b      	lsls	r3, r3, #8
 800afc8:	b29b      	uxth	r3, r3
 800afca:	4313      	orrs	r3, r2
 800afcc:	b29a      	uxth	r2, r3
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	791a      	ldrb	r2, [r3, #4]
 800afd6:	693b      	ldr	r3, [r7, #16]
 800afd8:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800afda:	68bb      	ldr	r3, [r7, #8]
 800afdc:	795a      	ldrb	r2, [r3, #5]
 800afde:	693b      	ldr	r3, [r7, #16]
 800afe0:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	799a      	ldrb	r2, [r3, #6]
 800afe6:	693b      	ldr	r3, [r7, #16]
 800afe8:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800afea:	68bb      	ldr	r3, [r7, #8]
 800afec:	79da      	ldrb	r2, [r3, #7]
 800afee:	693b      	ldr	r3, [r7, #16]
 800aff0:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d004      	beq.n	800b006 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800b002:	2b01      	cmp	r3, #1
 800b004:	d11b      	bne.n	800b03e <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800b006:	693b      	ldr	r3, [r7, #16]
 800b008:	79db      	ldrb	r3, [r3, #7]
 800b00a:	2b20      	cmp	r3, #32
 800b00c:	dc0f      	bgt.n	800b02e <USBH_ParseDevDesc+0xaa>
 800b00e:	2b08      	cmp	r3, #8
 800b010:	db0f      	blt.n	800b032 <USBH_ParseDevDesc+0xae>
 800b012:	3b08      	subs	r3, #8
 800b014:	4a32      	ldr	r2, [pc, #200]	@ (800b0e0 <USBH_ParseDevDesc+0x15c>)
 800b016:	fa22 f303 	lsr.w	r3, r2, r3
 800b01a:	f003 0301 	and.w	r3, r3, #1
 800b01e:	2b00      	cmp	r3, #0
 800b020:	bf14      	ite	ne
 800b022:	2301      	movne	r3, #1
 800b024:	2300      	moveq	r3, #0
 800b026:	b2db      	uxtb	r3, r3
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d106      	bne.n	800b03a <USBH_ParseDevDesc+0xb6>
 800b02c:	e001      	b.n	800b032 <USBH_ParseDevDesc+0xae>
 800b02e:	2b40      	cmp	r3, #64	@ 0x40
 800b030:	d003      	beq.n	800b03a <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800b032:	693b      	ldr	r3, [r7, #16]
 800b034:	2208      	movs	r2, #8
 800b036:	71da      	strb	r2, [r3, #7]
        break;
 800b038:	e000      	b.n	800b03c <USBH_ParseDevDesc+0xb8>
        break;
 800b03a:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800b03c:	e00e      	b.n	800b05c <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b044:	2b02      	cmp	r3, #2
 800b046:	d107      	bne.n	800b058 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800b048:	693b      	ldr	r3, [r7, #16]
 800b04a:	79db      	ldrb	r3, [r3, #7]
 800b04c:	2b08      	cmp	r3, #8
 800b04e:	d005      	beq.n	800b05c <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800b050:	693b      	ldr	r3, [r7, #16]
 800b052:	2208      	movs	r2, #8
 800b054:	71da      	strb	r2, [r3, #7]
 800b056:	e001      	b.n	800b05c <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800b058:	2303      	movs	r3, #3
 800b05a:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800b05c:	88fb      	ldrh	r3, [r7, #6]
 800b05e:	2b08      	cmp	r3, #8
 800b060:	d936      	bls.n	800b0d0 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	3308      	adds	r3, #8
 800b066:	781b      	ldrb	r3, [r3, #0]
 800b068:	461a      	mov	r2, r3
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	3309      	adds	r3, #9
 800b06e:	781b      	ldrb	r3, [r3, #0]
 800b070:	021b      	lsls	r3, r3, #8
 800b072:	b29b      	uxth	r3, r3
 800b074:	4313      	orrs	r3, r2
 800b076:	b29a      	uxth	r2, r3
 800b078:	693b      	ldr	r3, [r7, #16]
 800b07a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800b07c:	68bb      	ldr	r3, [r7, #8]
 800b07e:	330a      	adds	r3, #10
 800b080:	781b      	ldrb	r3, [r3, #0]
 800b082:	461a      	mov	r2, r3
 800b084:	68bb      	ldr	r3, [r7, #8]
 800b086:	330b      	adds	r3, #11
 800b088:	781b      	ldrb	r3, [r3, #0]
 800b08a:	021b      	lsls	r3, r3, #8
 800b08c:	b29b      	uxth	r3, r3
 800b08e:	4313      	orrs	r3, r2
 800b090:	b29a      	uxth	r2, r3
 800b092:	693b      	ldr	r3, [r7, #16]
 800b094:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800b096:	68bb      	ldr	r3, [r7, #8]
 800b098:	330c      	adds	r3, #12
 800b09a:	781b      	ldrb	r3, [r3, #0]
 800b09c:	461a      	mov	r2, r3
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	330d      	adds	r3, #13
 800b0a2:	781b      	ldrb	r3, [r3, #0]
 800b0a4:	021b      	lsls	r3, r3, #8
 800b0a6:	b29b      	uxth	r3, r3
 800b0a8:	4313      	orrs	r3, r2
 800b0aa:	b29a      	uxth	r2, r3
 800b0ac:	693b      	ldr	r3, [r7, #16]
 800b0ae:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	7b9a      	ldrb	r2, [r3, #14]
 800b0b4:	693b      	ldr	r3, [r7, #16]
 800b0b6:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	7bda      	ldrb	r2, [r3, #15]
 800b0bc:	693b      	ldr	r3, [r7, #16]
 800b0be:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	7c1a      	ldrb	r2, [r3, #16]
 800b0c4:	693b      	ldr	r3, [r7, #16]
 800b0c6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	7c5a      	ldrb	r2, [r3, #17]
 800b0cc:	693b      	ldr	r3, [r7, #16]
 800b0ce:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800b0d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	371c      	adds	r7, #28
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0dc:	4770      	bx	lr
 800b0de:	bf00      	nop
 800b0e0:	01000101 	.word	0x01000101

0800b0e4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b08c      	sub	sp, #48	@ 0x30
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	60f8      	str	r0, [r7, #12]
 800b0ec:	60b9      	str	r1, [r7, #8]
 800b0ee:	4613      	mov	r3, r2
 800b0f0:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800b0f8:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b100:	2300      	movs	r3, #0
 800b102:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800b106:	2300      	movs	r3, #0
 800b108:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800b10c:	68bb      	ldr	r3, [r7, #8]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d101      	bne.n	800b116 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800b112:	2302      	movs	r3, #2
 800b114:	e0de      	b.n	800b2d4 <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b116:	68bb      	ldr	r3, [r7, #8]
 800b118:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800b11a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b11c:	781b      	ldrb	r3, [r3, #0]
 800b11e:	2b09      	cmp	r3, #9
 800b120:	d002      	beq.n	800b128 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800b122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b124:	2209      	movs	r2, #9
 800b126:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800b128:	68bb      	ldr	r3, [r7, #8]
 800b12a:	781a      	ldrb	r2, [r3, #0]
 800b12c:	6a3b      	ldr	r3, [r7, #32]
 800b12e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800b130:	68bb      	ldr	r3, [r7, #8]
 800b132:	785a      	ldrb	r2, [r3, #1]
 800b134:	6a3b      	ldr	r3, [r7, #32]
 800b136:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	3302      	adds	r3, #2
 800b13c:	781b      	ldrb	r3, [r3, #0]
 800b13e:	461a      	mov	r2, r3
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	3303      	adds	r3, #3
 800b144:	781b      	ldrb	r3, [r3, #0]
 800b146:	021b      	lsls	r3, r3, #8
 800b148:	b29b      	uxth	r3, r3
 800b14a:	4313      	orrs	r3, r2
 800b14c:	b29b      	uxth	r3, r3
 800b14e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b152:	bf28      	it	cs
 800b154:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800b158:	b29a      	uxth	r2, r3
 800b15a:	6a3b      	ldr	r3, [r7, #32]
 800b15c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800b15e:	68bb      	ldr	r3, [r7, #8]
 800b160:	791a      	ldrb	r2, [r3, #4]
 800b162:	6a3b      	ldr	r3, [r7, #32]
 800b164:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	795a      	ldrb	r2, [r3, #5]
 800b16a:	6a3b      	ldr	r3, [r7, #32]
 800b16c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800b16e:	68bb      	ldr	r3, [r7, #8]
 800b170:	799a      	ldrb	r2, [r3, #6]
 800b172:	6a3b      	ldr	r3, [r7, #32]
 800b174:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	79da      	ldrb	r2, [r3, #7]
 800b17a:	6a3b      	ldr	r3, [r7, #32]
 800b17c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800b17e:	68bb      	ldr	r3, [r7, #8]
 800b180:	7a1a      	ldrb	r2, [r3, #8]
 800b182:	6a3b      	ldr	r3, [r7, #32]
 800b184:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b186:	88fb      	ldrh	r3, [r7, #6]
 800b188:	2b09      	cmp	r3, #9
 800b18a:	f240 80a1 	bls.w	800b2d0 <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 800b18e:	2309      	movs	r3, #9
 800b190:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b192:	2300      	movs	r3, #0
 800b194:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b196:	e085      	b.n	800b2a4 <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b198:	f107 0316 	add.w	r3, r7, #22
 800b19c:	4619      	mov	r1, r3
 800b19e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b1a0:	f000 f9e6 	bl	800b570 <USBH_GetNextDesc>
 800b1a4:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800b1a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1a8:	785b      	ldrb	r3, [r3, #1]
 800b1aa:	2b04      	cmp	r3, #4
 800b1ac:	d17a      	bne.n	800b2a4 <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800b1ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1b0:	781b      	ldrb	r3, [r3, #0]
 800b1b2:	2b09      	cmp	r3, #9
 800b1b4:	d002      	beq.n	800b1bc <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800b1b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1b8:	2209      	movs	r2, #9
 800b1ba:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800b1bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b1c0:	221a      	movs	r2, #26
 800b1c2:	fb02 f303 	mul.w	r3, r2, r3
 800b1c6:	3308      	adds	r3, #8
 800b1c8:	6a3a      	ldr	r2, [r7, #32]
 800b1ca:	4413      	add	r3, r2
 800b1cc:	3302      	adds	r3, #2
 800b1ce:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b1d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b1d2:	69f8      	ldr	r0, [r7, #28]
 800b1d4:	f000 f882 	bl	800b2dc <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b1d8:	2300      	movs	r3, #0
 800b1da:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800b1de:	2300      	movs	r3, #0
 800b1e0:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b1e2:	e043      	b.n	800b26c <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b1e4:	f107 0316 	add.w	r3, r7, #22
 800b1e8:	4619      	mov	r1, r3
 800b1ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b1ec:	f000 f9c0 	bl	800b570 <USBH_GetNextDesc>
 800b1f0:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b1f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1f4:	785b      	ldrb	r3, [r3, #1]
 800b1f6:	2b05      	cmp	r3, #5
 800b1f8:	d138      	bne.n	800b26c <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800b1fa:	69fb      	ldr	r3, [r7, #28]
 800b1fc:	795b      	ldrb	r3, [r3, #5]
 800b1fe:	2b01      	cmp	r3, #1
 800b200:	d113      	bne.n	800b22a <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800b202:	69fb      	ldr	r3, [r7, #28]
 800b204:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800b206:	2b02      	cmp	r3, #2
 800b208:	d003      	beq.n	800b212 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800b20a:	69fb      	ldr	r3, [r7, #28]
 800b20c:	799b      	ldrb	r3, [r3, #6]
 800b20e:	2b03      	cmp	r3, #3
 800b210:	d10b      	bne.n	800b22a <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b212:	69fb      	ldr	r3, [r7, #28]
 800b214:	79db      	ldrb	r3, [r3, #7]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d10b      	bne.n	800b232 <USBH_ParseCfgDesc+0x14e>
 800b21a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b21c:	781b      	ldrb	r3, [r3, #0]
 800b21e:	2b09      	cmp	r3, #9
 800b220:	d007      	beq.n	800b232 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800b222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b224:	2209      	movs	r2, #9
 800b226:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b228:	e003      	b.n	800b232 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800b22a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b22c:	2207      	movs	r2, #7
 800b22e:	701a      	strb	r2, [r3, #0]
 800b230:	e000      	b.n	800b234 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b232:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b234:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b238:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b23c:	3201      	adds	r2, #1
 800b23e:	00d2      	lsls	r2, r2, #3
 800b240:	211a      	movs	r1, #26
 800b242:	fb01 f303 	mul.w	r3, r1, r3
 800b246:	4413      	add	r3, r2
 800b248:	3308      	adds	r3, #8
 800b24a:	6a3a      	ldr	r2, [r7, #32]
 800b24c:	4413      	add	r3, r2
 800b24e:	3304      	adds	r3, #4
 800b250:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800b252:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b254:	69b9      	ldr	r1, [r7, #24]
 800b256:	68f8      	ldr	r0, [r7, #12]
 800b258:	f000 f86f 	bl	800b33a <USBH_ParseEPDesc>
 800b25c:	4603      	mov	r3, r0
 800b25e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800b262:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b266:	3301      	adds	r3, #1
 800b268:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b26c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b270:	2b01      	cmp	r3, #1
 800b272:	d80a      	bhi.n	800b28a <USBH_ParseCfgDesc+0x1a6>
 800b274:	69fb      	ldr	r3, [r7, #28]
 800b276:	791b      	ldrb	r3, [r3, #4]
 800b278:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b27c:	429a      	cmp	r2, r3
 800b27e:	d204      	bcs.n	800b28a <USBH_ParseCfgDesc+0x1a6>
 800b280:	6a3b      	ldr	r3, [r7, #32]
 800b282:	885a      	ldrh	r2, [r3, #2]
 800b284:	8afb      	ldrh	r3, [r7, #22]
 800b286:	429a      	cmp	r2, r3
 800b288:	d8ac      	bhi.n	800b1e4 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800b28a:	69fb      	ldr	r3, [r7, #28]
 800b28c:	791b      	ldrb	r3, [r3, #4]
 800b28e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b292:	429a      	cmp	r2, r3
 800b294:	d201      	bcs.n	800b29a <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 800b296:	2303      	movs	r3, #3
 800b298:	e01c      	b.n	800b2d4 <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 800b29a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b29e:	3301      	adds	r3, #1
 800b2a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b2a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b2a8:	2b01      	cmp	r3, #1
 800b2aa:	d805      	bhi.n	800b2b8 <USBH_ParseCfgDesc+0x1d4>
 800b2ac:	6a3b      	ldr	r3, [r7, #32]
 800b2ae:	885a      	ldrh	r2, [r3, #2]
 800b2b0:	8afb      	ldrh	r3, [r7, #22]
 800b2b2:	429a      	cmp	r2, r3
 800b2b4:	f63f af70 	bhi.w	800b198 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800b2b8:	6a3b      	ldr	r3, [r7, #32]
 800b2ba:	791b      	ldrb	r3, [r3, #4]
 800b2bc:	2b02      	cmp	r3, #2
 800b2be:	bf28      	it	cs
 800b2c0:	2302      	movcs	r3, #2
 800b2c2:	b2db      	uxtb	r3, r3
 800b2c4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b2c8:	429a      	cmp	r2, r3
 800b2ca:	d201      	bcs.n	800b2d0 <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 800b2cc:	2303      	movs	r3, #3
 800b2ce:	e001      	b.n	800b2d4 <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 800b2d0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	3730      	adds	r7, #48	@ 0x30
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	bd80      	pop	{r7, pc}

0800b2dc <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800b2dc:	b480      	push	{r7}
 800b2de:	b083      	sub	sp, #12
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
 800b2e4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	781a      	ldrb	r2, [r3, #0]
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	785a      	ldrb	r2, [r3, #1]
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	789a      	ldrb	r2, [r3, #2]
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	78da      	ldrb	r2, [r3, #3]
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	791a      	ldrb	r2, [r3, #4]
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	795a      	ldrb	r2, [r3, #5]
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	799a      	ldrb	r2, [r3, #6]
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	79da      	ldrb	r2, [r3, #7]
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	7a1a      	ldrb	r2, [r3, #8]
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	721a      	strb	r2, [r3, #8]
}
 800b32e:	bf00      	nop
 800b330:	370c      	adds	r7, #12
 800b332:	46bd      	mov	sp, r7
 800b334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b338:	4770      	bx	lr

0800b33a <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800b33a:	b480      	push	{r7}
 800b33c:	b087      	sub	sp, #28
 800b33e:	af00      	add	r7, sp, #0
 800b340:	60f8      	str	r0, [r7, #12]
 800b342:	60b9      	str	r1, [r7, #8]
 800b344:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800b346:	2300      	movs	r3, #0
 800b348:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	781a      	ldrb	r2, [r3, #0]
 800b34e:	68bb      	ldr	r3, [r7, #8]
 800b350:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	785a      	ldrb	r2, [r3, #1]
 800b356:	68bb      	ldr	r3, [r7, #8]
 800b358:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	789a      	ldrb	r2, [r3, #2]
 800b35e:	68bb      	ldr	r3, [r7, #8]
 800b360:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	78da      	ldrb	r2, [r3, #3]
 800b366:	68bb      	ldr	r3, [r7, #8]
 800b368:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	3304      	adds	r3, #4
 800b36e:	781b      	ldrb	r3, [r3, #0]
 800b370:	461a      	mov	r2, r3
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	3305      	adds	r3, #5
 800b376:	781b      	ldrb	r3, [r3, #0]
 800b378:	021b      	lsls	r3, r3, #8
 800b37a:	b29b      	uxth	r3, r3
 800b37c:	4313      	orrs	r3, r2
 800b37e:	b29a      	uxth	r2, r3
 800b380:	68bb      	ldr	r3, [r7, #8]
 800b382:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	799a      	ldrb	r2, [r3, #6]
 800b388:	68bb      	ldr	r3, [r7, #8]
 800b38a:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800b38c:	68bb      	ldr	r3, [r7, #8]
 800b38e:	889b      	ldrh	r3, [r3, #4]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d009      	beq.n	800b3a8 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800b394:	68bb      	ldr	r3, [r7, #8]
 800b396:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800b398:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b39c:	d804      	bhi.n	800b3a8 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800b39e:	68bb      	ldr	r3, [r7, #8]
 800b3a0:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800b3a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b3a6:	d901      	bls.n	800b3ac <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800b3a8:	2303      	movs	r3, #3
 800b3aa:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d136      	bne.n	800b424 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800b3b6:	68bb      	ldr	r3, [r7, #8]
 800b3b8:	78db      	ldrb	r3, [r3, #3]
 800b3ba:	f003 0303 	and.w	r3, r3, #3
 800b3be:	2b02      	cmp	r3, #2
 800b3c0:	d108      	bne.n	800b3d4 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800b3c2:	68bb      	ldr	r3, [r7, #8]
 800b3c4:	889b      	ldrh	r3, [r3, #4]
 800b3c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b3ca:	f240 8097 	bls.w	800b4fc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b3ce:	2303      	movs	r3, #3
 800b3d0:	75fb      	strb	r3, [r7, #23]
 800b3d2:	e093      	b.n	800b4fc <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800b3d4:	68bb      	ldr	r3, [r7, #8]
 800b3d6:	78db      	ldrb	r3, [r3, #3]
 800b3d8:	f003 0303 	and.w	r3, r3, #3
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d107      	bne.n	800b3f0 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	889b      	ldrh	r3, [r3, #4]
 800b3e4:	2b40      	cmp	r3, #64	@ 0x40
 800b3e6:	f240 8089 	bls.w	800b4fc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b3ea:	2303      	movs	r3, #3
 800b3ec:	75fb      	strb	r3, [r7, #23]
 800b3ee:	e085      	b.n	800b4fc <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	78db      	ldrb	r3, [r3, #3]
 800b3f4:	f003 0303 	and.w	r3, r3, #3
 800b3f8:	2b01      	cmp	r3, #1
 800b3fa:	d005      	beq.n	800b408 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800b3fc:	68bb      	ldr	r3, [r7, #8]
 800b3fe:	78db      	ldrb	r3, [r3, #3]
 800b400:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b404:	2b03      	cmp	r3, #3
 800b406:	d10a      	bne.n	800b41e <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b408:	68bb      	ldr	r3, [r7, #8]
 800b40a:	799b      	ldrb	r3, [r3, #6]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d003      	beq.n	800b418 <USBH_ParseEPDesc+0xde>
 800b410:	68bb      	ldr	r3, [r7, #8]
 800b412:	799b      	ldrb	r3, [r3, #6]
 800b414:	2b10      	cmp	r3, #16
 800b416:	d970      	bls.n	800b4fa <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800b418:	2303      	movs	r3, #3
 800b41a:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b41c:	e06d      	b.n	800b4fa <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800b41e:	2303      	movs	r3, #3
 800b420:	75fb      	strb	r3, [r7, #23]
 800b422:	e06b      	b.n	800b4fc <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b42a:	2b01      	cmp	r3, #1
 800b42c:	d13c      	bne.n	800b4a8 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800b42e:	68bb      	ldr	r3, [r7, #8]
 800b430:	78db      	ldrb	r3, [r3, #3]
 800b432:	f003 0303 	and.w	r3, r3, #3
 800b436:	2b02      	cmp	r3, #2
 800b438:	d005      	beq.n	800b446 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800b43a:	68bb      	ldr	r3, [r7, #8]
 800b43c:	78db      	ldrb	r3, [r3, #3]
 800b43e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800b442:	2b00      	cmp	r3, #0
 800b444:	d106      	bne.n	800b454 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800b446:	68bb      	ldr	r3, [r7, #8]
 800b448:	889b      	ldrh	r3, [r3, #4]
 800b44a:	2b40      	cmp	r3, #64	@ 0x40
 800b44c:	d956      	bls.n	800b4fc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b44e:	2303      	movs	r3, #3
 800b450:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800b452:	e053      	b.n	800b4fc <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800b454:	68bb      	ldr	r3, [r7, #8]
 800b456:	78db      	ldrb	r3, [r3, #3]
 800b458:	f003 0303 	and.w	r3, r3, #3
 800b45c:	2b01      	cmp	r3, #1
 800b45e:	d10e      	bne.n	800b47e <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	799b      	ldrb	r3, [r3, #6]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d007      	beq.n	800b478 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800b46c:	2b10      	cmp	r3, #16
 800b46e:	d803      	bhi.n	800b478 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800b474:	2b40      	cmp	r3, #64	@ 0x40
 800b476:	d941      	bls.n	800b4fc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b478:	2303      	movs	r3, #3
 800b47a:	75fb      	strb	r3, [r7, #23]
 800b47c:	e03e      	b.n	800b4fc <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800b47e:	68bb      	ldr	r3, [r7, #8]
 800b480:	78db      	ldrb	r3, [r3, #3]
 800b482:	f003 0303 	and.w	r3, r3, #3
 800b486:	2b03      	cmp	r3, #3
 800b488:	d10b      	bne.n	800b4a2 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800b48a:	68bb      	ldr	r3, [r7, #8]
 800b48c:	799b      	ldrb	r3, [r3, #6]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d004      	beq.n	800b49c <USBH_ParseEPDesc+0x162>
 800b492:	68bb      	ldr	r3, [r7, #8]
 800b494:	889b      	ldrh	r3, [r3, #4]
 800b496:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b49a:	d32f      	bcc.n	800b4fc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b49c:	2303      	movs	r3, #3
 800b49e:	75fb      	strb	r3, [r7, #23]
 800b4a0:	e02c      	b.n	800b4fc <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800b4a2:	2303      	movs	r3, #3
 800b4a4:	75fb      	strb	r3, [r7, #23]
 800b4a6:	e029      	b.n	800b4fc <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b4ae:	2b02      	cmp	r3, #2
 800b4b0:	d120      	bne.n	800b4f4 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800b4b2:	68bb      	ldr	r3, [r7, #8]
 800b4b4:	78db      	ldrb	r3, [r3, #3]
 800b4b6:	f003 0303 	and.w	r3, r3, #3
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d106      	bne.n	800b4cc <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800b4be:	68bb      	ldr	r3, [r7, #8]
 800b4c0:	889b      	ldrh	r3, [r3, #4]
 800b4c2:	2b08      	cmp	r3, #8
 800b4c4:	d01a      	beq.n	800b4fc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b4c6:	2303      	movs	r3, #3
 800b4c8:	75fb      	strb	r3, [r7, #23]
 800b4ca:	e017      	b.n	800b4fc <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800b4cc:	68bb      	ldr	r3, [r7, #8]
 800b4ce:	78db      	ldrb	r3, [r3, #3]
 800b4d0:	f003 0303 	and.w	r3, r3, #3
 800b4d4:	2b03      	cmp	r3, #3
 800b4d6:	d10a      	bne.n	800b4ee <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	799b      	ldrb	r3, [r3, #6]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d003      	beq.n	800b4e8 <USBH_ParseEPDesc+0x1ae>
 800b4e0:	68bb      	ldr	r3, [r7, #8]
 800b4e2:	889b      	ldrh	r3, [r3, #4]
 800b4e4:	2b08      	cmp	r3, #8
 800b4e6:	d909      	bls.n	800b4fc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b4e8:	2303      	movs	r3, #3
 800b4ea:	75fb      	strb	r3, [r7, #23]
 800b4ec:	e006      	b.n	800b4fc <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800b4ee:	2303      	movs	r3, #3
 800b4f0:	75fb      	strb	r3, [r7, #23]
 800b4f2:	e003      	b.n	800b4fc <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800b4f4:	2303      	movs	r3, #3
 800b4f6:	75fb      	strb	r3, [r7, #23]
 800b4f8:	e000      	b.n	800b4fc <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b4fa:	bf00      	nop
  }

  return status;
 800b4fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4fe:	4618      	mov	r0, r3
 800b500:	371c      	adds	r7, #28
 800b502:	46bd      	mov	sp, r7
 800b504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b508:	4770      	bx	lr

0800b50a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b50a:	b480      	push	{r7}
 800b50c:	b087      	sub	sp, #28
 800b50e:	af00      	add	r7, sp, #0
 800b510:	60f8      	str	r0, [r7, #12]
 800b512:	60b9      	str	r1, [r7, #8]
 800b514:	4613      	mov	r3, r2
 800b516:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	3301      	adds	r3, #1
 800b51c:	781b      	ldrb	r3, [r3, #0]
 800b51e:	2b03      	cmp	r3, #3
 800b520:	d120      	bne.n	800b564 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	781b      	ldrb	r3, [r3, #0]
 800b526:	1e9a      	subs	r2, r3, #2
 800b528:	88fb      	ldrh	r3, [r7, #6]
 800b52a:	4293      	cmp	r3, r2
 800b52c:	bf28      	it	cs
 800b52e:	4613      	movcs	r3, r2
 800b530:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	3302      	adds	r3, #2
 800b536:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b538:	2300      	movs	r3, #0
 800b53a:	82fb      	strh	r3, [r7, #22]
 800b53c:	e00b      	b.n	800b556 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b53e:	8afb      	ldrh	r3, [r7, #22]
 800b540:	68fa      	ldr	r2, [r7, #12]
 800b542:	4413      	add	r3, r2
 800b544:	781a      	ldrb	r2, [r3, #0]
 800b546:	68bb      	ldr	r3, [r7, #8]
 800b548:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b54a:	68bb      	ldr	r3, [r7, #8]
 800b54c:	3301      	adds	r3, #1
 800b54e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b550:	8afb      	ldrh	r3, [r7, #22]
 800b552:	3302      	adds	r3, #2
 800b554:	82fb      	strh	r3, [r7, #22]
 800b556:	8afa      	ldrh	r2, [r7, #22]
 800b558:	8abb      	ldrh	r3, [r7, #20]
 800b55a:	429a      	cmp	r2, r3
 800b55c:	d3ef      	bcc.n	800b53e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b55e:	68bb      	ldr	r3, [r7, #8]
 800b560:	2200      	movs	r2, #0
 800b562:	701a      	strb	r2, [r3, #0]
  }
}
 800b564:	bf00      	nop
 800b566:	371c      	adds	r7, #28
 800b568:	46bd      	mov	sp, r7
 800b56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56e:	4770      	bx	lr

0800b570 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b570:	b480      	push	{r7}
 800b572:	b085      	sub	sp, #20
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
 800b578:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	881b      	ldrh	r3, [r3, #0]
 800b57e:	687a      	ldr	r2, [r7, #4]
 800b580:	7812      	ldrb	r2, [r2, #0]
 800b582:	4413      	add	r3, r2
 800b584:	b29a      	uxth	r2, r3
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	781b      	ldrb	r3, [r3, #0]
 800b58e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	4413      	add	r3, r2
 800b594:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b596:	68fb      	ldr	r3, [r7, #12]
}
 800b598:	4618      	mov	r0, r3
 800b59a:	3714      	adds	r7, #20
 800b59c:	46bd      	mov	sp, r7
 800b59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a2:	4770      	bx	lr

0800b5a4 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b086      	sub	sp, #24
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	60f8      	str	r0, [r7, #12]
 800b5ac:	60b9      	str	r1, [r7, #8]
 800b5ae:	4613      	mov	r3, r2
 800b5b0:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b5b2:	2301      	movs	r3, #1
 800b5b4:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	789b      	ldrb	r3, [r3, #2]
 800b5ba:	2b01      	cmp	r3, #1
 800b5bc:	d002      	beq.n	800b5c4 <USBH_CtlReq+0x20>
 800b5be:	2b02      	cmp	r3, #2
 800b5c0:	d00f      	beq.n	800b5e2 <USBH_CtlReq+0x3e>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 800b5c2:	e027      	b.n	800b614 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	68ba      	ldr	r2, [r7, #8]
 800b5c8:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	88fa      	ldrh	r2, [r7, #6]
 800b5ce:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	2201      	movs	r2, #1
 800b5d4:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	2202      	movs	r2, #2
 800b5da:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b5dc:	2301      	movs	r3, #1
 800b5de:	75fb      	strb	r3, [r7, #23]
      break;
 800b5e0:	e018      	b.n	800b614 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800b5e2:	68f8      	ldr	r0, [r7, #12]
 800b5e4:	f000 f81c 	bl	800b620 <USBH_HandleControl>
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b5ec:	7dfb      	ldrb	r3, [r7, #23]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d002      	beq.n	800b5f8 <USBH_CtlReq+0x54>
 800b5f2:	7dfb      	ldrb	r3, [r7, #23]
 800b5f4:	2b03      	cmp	r3, #3
 800b5f6:	d106      	bne.n	800b606 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	2201      	movs	r2, #1
 800b5fc:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	2200      	movs	r2, #0
 800b602:	761a      	strb	r2, [r3, #24]
      break;
 800b604:	e005      	b.n	800b612 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800b606:	7dfb      	ldrb	r3, [r7, #23]
 800b608:	2b02      	cmp	r3, #2
 800b60a:	d102      	bne.n	800b612 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	2201      	movs	r2, #1
 800b610:	709a      	strb	r2, [r3, #2]
      break;
 800b612:	bf00      	nop
  }
  return status;
 800b614:	7dfb      	ldrb	r3, [r7, #23]
}
 800b616:	4618      	mov	r0, r3
 800b618:	3718      	adds	r7, #24
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bd80      	pop	{r7, pc}
	...

0800b620 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b086      	sub	sp, #24
 800b624:	af02      	add	r7, sp, #8
 800b626:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b628:	2301      	movs	r3, #1
 800b62a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b62c:	2300      	movs	r3, #0
 800b62e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	7e1b      	ldrb	r3, [r3, #24]
 800b634:	3b01      	subs	r3, #1
 800b636:	2b0a      	cmp	r3, #10
 800b638:	f200 8157 	bhi.w	800b8ea <USBH_HandleControl+0x2ca>
 800b63c:	a201      	add	r2, pc, #4	@ (adr r2, 800b644 <USBH_HandleControl+0x24>)
 800b63e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b642:	bf00      	nop
 800b644:	0800b671 	.word	0x0800b671
 800b648:	0800b68b 	.word	0x0800b68b
 800b64c:	0800b6f5 	.word	0x0800b6f5
 800b650:	0800b71b 	.word	0x0800b71b
 800b654:	0800b755 	.word	0x0800b755
 800b658:	0800b77f 	.word	0x0800b77f
 800b65c:	0800b7d1 	.word	0x0800b7d1
 800b660:	0800b7f3 	.word	0x0800b7f3
 800b664:	0800b82f 	.word	0x0800b82f
 800b668:	0800b855 	.word	0x0800b855
 800b66c:	0800b893 	.word	0x0800b893
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	f103 0110 	add.w	r1, r3, #16
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	795b      	ldrb	r3, [r3, #5]
 800b67a:	461a      	mov	r2, r3
 800b67c:	6878      	ldr	r0, [r7, #4]
 800b67e:	f000 f945 	bl	800b90c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	2202      	movs	r2, #2
 800b686:	761a      	strb	r2, [r3, #24]
      break;
 800b688:	e13a      	b.n	800b900 <USBH_HandleControl+0x2e0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	795b      	ldrb	r3, [r3, #5]
 800b68e:	4619      	mov	r1, r3
 800b690:	6878      	ldr	r0, [r7, #4]
 800b692:	f000 fcc7 	bl	800c024 <USBH_LL_GetURBState>
 800b696:	4603      	mov	r3, r0
 800b698:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b69a:	7bbb      	ldrb	r3, [r7, #14]
 800b69c:	2b01      	cmp	r3, #1
 800b69e:	d11e      	bne.n	800b6de <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	7c1b      	ldrb	r3, [r3, #16]
 800b6a4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b6a8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	8adb      	ldrh	r3, [r3, #22]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d00a      	beq.n	800b6c8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b6b2:	7b7b      	ldrb	r3, [r7, #13]
 800b6b4:	2b80      	cmp	r3, #128	@ 0x80
 800b6b6:	d103      	bne.n	800b6c0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2203      	movs	r2, #3
 800b6bc:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800b6be:	e116      	b.n	800b8ee <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_DATA_OUT;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2205      	movs	r2, #5
 800b6c4:	761a      	strb	r2, [r3, #24]
      break;
 800b6c6:	e112      	b.n	800b8ee <USBH_HandleControl+0x2ce>
          if (direction == USB_D2H)
 800b6c8:	7b7b      	ldrb	r3, [r7, #13]
 800b6ca:	2b80      	cmp	r3, #128	@ 0x80
 800b6cc:	d103      	bne.n	800b6d6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	2209      	movs	r2, #9
 800b6d2:	761a      	strb	r2, [r3, #24]
      break;
 800b6d4:	e10b      	b.n	800b8ee <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_STATUS_IN;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	2207      	movs	r2, #7
 800b6da:	761a      	strb	r2, [r3, #24]
      break;
 800b6dc:	e107      	b.n	800b8ee <USBH_HandleControl+0x2ce>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b6de:	7bbb      	ldrb	r3, [r7, #14]
 800b6e0:	2b04      	cmp	r3, #4
 800b6e2:	d003      	beq.n	800b6ec <USBH_HandleControl+0xcc>
 800b6e4:	7bbb      	ldrb	r3, [r7, #14]
 800b6e6:	2b02      	cmp	r3, #2
 800b6e8:	f040 8101 	bne.w	800b8ee <USBH_HandleControl+0x2ce>
          phost->Control.state = CTRL_ERROR;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	220b      	movs	r2, #11
 800b6f0:	761a      	strb	r2, [r3, #24]
      break;
 800b6f2:	e0fc      	b.n	800b8ee <USBH_HandleControl+0x2ce>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b6fa:	b29a      	uxth	r2, r3
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	6899      	ldr	r1, [r3, #8]
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	899a      	ldrh	r2, [r3, #12]
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	791b      	ldrb	r3, [r3, #4]
 800b70c:	6878      	ldr	r0, [r7, #4]
 800b70e:	f000 f93c 	bl	800b98a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	2204      	movs	r2, #4
 800b716:	761a      	strb	r2, [r3, #24]
      break;
 800b718:	e0f2      	b.n	800b900 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	791b      	ldrb	r3, [r3, #4]
 800b71e:	4619      	mov	r1, r3
 800b720:	6878      	ldr	r0, [r7, #4]
 800b722:	f000 fc7f 	bl	800c024 <USBH_LL_GetURBState>
 800b726:	4603      	mov	r3, r0
 800b728:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b72a:	7bbb      	ldrb	r3, [r7, #14]
 800b72c:	2b01      	cmp	r3, #1
 800b72e:	d103      	bne.n	800b738 <USBH_HandleControl+0x118>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	2209      	movs	r2, #9
 800b734:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800b736:	e0dc      	b.n	800b8f2 <USBH_HandleControl+0x2d2>
      else if (URB_Status == USBH_URB_STALL)
 800b738:	7bbb      	ldrb	r3, [r7, #14]
 800b73a:	2b05      	cmp	r3, #5
 800b73c:	d102      	bne.n	800b744 <USBH_HandleControl+0x124>
        status = USBH_NOT_SUPPORTED;
 800b73e:	2303      	movs	r3, #3
 800b740:	73fb      	strb	r3, [r7, #15]
      break;
 800b742:	e0d6      	b.n	800b8f2 <USBH_HandleControl+0x2d2>
        if (URB_Status == USBH_URB_ERROR)
 800b744:	7bbb      	ldrb	r3, [r7, #14]
 800b746:	2b04      	cmp	r3, #4
 800b748:	f040 80d3 	bne.w	800b8f2 <USBH_HandleControl+0x2d2>
          phost->Control.state = CTRL_ERROR;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	220b      	movs	r2, #11
 800b750:	761a      	strb	r2, [r3, #24]
      break;
 800b752:	e0ce      	b.n	800b8f2 <USBH_HandleControl+0x2d2>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	6899      	ldr	r1, [r3, #8]
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	899a      	ldrh	r2, [r3, #12]
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	795b      	ldrb	r3, [r3, #5]
 800b760:	2001      	movs	r0, #1
 800b762:	9000      	str	r0, [sp, #0]
 800b764:	6878      	ldr	r0, [r7, #4]
 800b766:	f000 f8eb 	bl	800b940 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b770:	b29a      	uxth	r2, r3
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2206      	movs	r2, #6
 800b77a:	761a      	strb	r2, [r3, #24]
      break;
 800b77c:	e0c0      	b.n	800b900 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	795b      	ldrb	r3, [r3, #5]
 800b782:	4619      	mov	r1, r3
 800b784:	6878      	ldr	r0, [r7, #4]
 800b786:	f000 fc4d 	bl	800c024 <USBH_LL_GetURBState>
 800b78a:	4603      	mov	r3, r0
 800b78c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b78e:	7bbb      	ldrb	r3, [r7, #14]
 800b790:	2b01      	cmp	r3, #1
 800b792:	d103      	bne.n	800b79c <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2207      	movs	r2, #7
 800b798:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800b79a:	e0ac      	b.n	800b8f6 <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_STALL)
 800b79c:	7bbb      	ldrb	r3, [r7, #14]
 800b79e:	2b05      	cmp	r3, #5
 800b7a0:	d105      	bne.n	800b7ae <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	220c      	movs	r2, #12
 800b7a6:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b7a8:	2303      	movs	r3, #3
 800b7aa:	73fb      	strb	r3, [r7, #15]
      break;
 800b7ac:	e0a3      	b.n	800b8f6 <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b7ae:	7bbb      	ldrb	r3, [r7, #14]
 800b7b0:	2b02      	cmp	r3, #2
 800b7b2:	d103      	bne.n	800b7bc <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2205      	movs	r2, #5
 800b7b8:	761a      	strb	r2, [r3, #24]
      break;
 800b7ba:	e09c      	b.n	800b8f6 <USBH_HandleControl+0x2d6>
        if (URB_Status == USBH_URB_ERROR)
 800b7bc:	7bbb      	ldrb	r3, [r7, #14]
 800b7be:	2b04      	cmp	r3, #4
 800b7c0:	f040 8099 	bne.w	800b8f6 <USBH_HandleControl+0x2d6>
          phost->Control.state = CTRL_ERROR;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	220b      	movs	r2, #11
 800b7c8:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b7ca:	2302      	movs	r3, #2
 800b7cc:	73fb      	strb	r3, [r7, #15]
      break;
 800b7ce:	e092      	b.n	800b8f6 <USBH_HandleControl+0x2d6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	791b      	ldrb	r3, [r3, #4]
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	2100      	movs	r1, #0
 800b7d8:	6878      	ldr	r0, [r7, #4]
 800b7da:	f000 f8d6 	bl	800b98a <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b7e4:	b29a      	uxth	r2, r3
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	2208      	movs	r2, #8
 800b7ee:	761a      	strb	r2, [r3, #24]

      break;
 800b7f0:	e086      	b.n	800b900 <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	791b      	ldrb	r3, [r3, #4]
 800b7f6:	4619      	mov	r1, r3
 800b7f8:	6878      	ldr	r0, [r7, #4]
 800b7fa:	f000 fc13 	bl	800c024 <USBH_LL_GetURBState>
 800b7fe:	4603      	mov	r3, r0
 800b800:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b802:	7bbb      	ldrb	r3, [r7, #14]
 800b804:	2b01      	cmp	r3, #1
 800b806:	d105      	bne.n	800b814 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	220d      	movs	r2, #13
 800b80c:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b80e:	2300      	movs	r3, #0
 800b810:	73fb      	strb	r3, [r7, #15]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800b812:	e072      	b.n	800b8fa <USBH_HandleControl+0x2da>
      else if (URB_Status == USBH_URB_ERROR)
 800b814:	7bbb      	ldrb	r3, [r7, #14]
 800b816:	2b04      	cmp	r3, #4
 800b818:	d103      	bne.n	800b822 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	220b      	movs	r2, #11
 800b81e:	761a      	strb	r2, [r3, #24]
      break;
 800b820:	e06b      	b.n	800b8fa <USBH_HandleControl+0x2da>
        if (URB_Status == USBH_URB_STALL)
 800b822:	7bbb      	ldrb	r3, [r7, #14]
 800b824:	2b05      	cmp	r3, #5
 800b826:	d168      	bne.n	800b8fa <USBH_HandleControl+0x2da>
          status = USBH_NOT_SUPPORTED;
 800b828:	2303      	movs	r3, #3
 800b82a:	73fb      	strb	r3, [r7, #15]
      break;
 800b82c:	e065      	b.n	800b8fa <USBH_HandleControl+0x2da>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	795b      	ldrb	r3, [r3, #5]
 800b832:	2201      	movs	r2, #1
 800b834:	9200      	str	r2, [sp, #0]
 800b836:	2200      	movs	r2, #0
 800b838:	2100      	movs	r1, #0
 800b83a:	6878      	ldr	r0, [r7, #4]
 800b83c:	f000 f880 	bl	800b940 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b846:	b29a      	uxth	r2, r3
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	220a      	movs	r2, #10
 800b850:	761a      	strb	r2, [r3, #24]
      break;
 800b852:	e055      	b.n	800b900 <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	795b      	ldrb	r3, [r3, #5]
 800b858:	4619      	mov	r1, r3
 800b85a:	6878      	ldr	r0, [r7, #4]
 800b85c:	f000 fbe2 	bl	800c024 <USBH_LL_GetURBState>
 800b860:	4603      	mov	r3, r0
 800b862:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b864:	7bbb      	ldrb	r3, [r7, #14]
 800b866:	2b01      	cmp	r3, #1
 800b868:	d105      	bne.n	800b876 <USBH_HandleControl+0x256>
      {
        status = USBH_OK;
 800b86a:	2300      	movs	r3, #0
 800b86c:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	220d      	movs	r2, #13
 800b872:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800b874:	e043      	b.n	800b8fe <USBH_HandleControl+0x2de>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b876:	7bbb      	ldrb	r3, [r7, #14]
 800b878:	2b02      	cmp	r3, #2
 800b87a:	d103      	bne.n	800b884 <USBH_HandleControl+0x264>
        phost->Control.state = CTRL_STATUS_OUT;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2209      	movs	r2, #9
 800b880:	761a      	strb	r2, [r3, #24]
      break;
 800b882:	e03c      	b.n	800b8fe <USBH_HandleControl+0x2de>
        if (URB_Status == USBH_URB_ERROR)
 800b884:	7bbb      	ldrb	r3, [r7, #14]
 800b886:	2b04      	cmp	r3, #4
 800b888:	d139      	bne.n	800b8fe <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	220b      	movs	r2, #11
 800b88e:	761a      	strb	r2, [r3, #24]
      break;
 800b890:	e035      	b.n	800b8fe <USBH_HandleControl+0x2de>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	7e5b      	ldrb	r3, [r3, #25]
 800b896:	3301      	adds	r3, #1
 800b898:	b2da      	uxtb	r2, r3
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	765a      	strb	r2, [r3, #25]
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	7e5b      	ldrb	r3, [r3, #25]
 800b8a2:	2b02      	cmp	r3, #2
 800b8a4:	d806      	bhi.n	800b8b4 <USBH_HandleControl+0x294>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	2201      	movs	r2, #1
 800b8aa:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2201      	movs	r2, #1
 800b8b0:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b8b2:	e025      	b.n	800b900 <USBH_HandleControl+0x2e0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b8ba:	2106      	movs	r1, #6
 800b8bc:	6878      	ldr	r0, [r7, #4]
 800b8be:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	795b      	ldrb	r3, [r3, #5]
 800b8ca:	4619      	mov	r1, r3
 800b8cc:	6878      	ldr	r0, [r7, #4]
 800b8ce:	f000 f90d 	bl	800baec <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	791b      	ldrb	r3, [r3, #4]
 800b8d6:	4619      	mov	r1, r3
 800b8d8:	6878      	ldr	r0, [r7, #4]
 800b8da:	f000 f907 	bl	800baec <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b8e4:	2302      	movs	r3, #2
 800b8e6:	73fb      	strb	r3, [r7, #15]
      break;
 800b8e8:	e00a      	b.n	800b900 <USBH_HandleControl+0x2e0>

    default:
      break;
 800b8ea:	bf00      	nop
 800b8ec:	e008      	b.n	800b900 <USBH_HandleControl+0x2e0>
      break;
 800b8ee:	bf00      	nop
 800b8f0:	e006      	b.n	800b900 <USBH_HandleControl+0x2e0>
      break;
 800b8f2:	bf00      	nop
 800b8f4:	e004      	b.n	800b900 <USBH_HandleControl+0x2e0>
      break;
 800b8f6:	bf00      	nop
 800b8f8:	e002      	b.n	800b900 <USBH_HandleControl+0x2e0>
      break;
 800b8fa:	bf00      	nop
 800b8fc:	e000      	b.n	800b900 <USBH_HandleControl+0x2e0>
      break;
 800b8fe:	bf00      	nop
  }

  return status;
 800b900:	7bfb      	ldrb	r3, [r7, #15]
}
 800b902:	4618      	mov	r0, r3
 800b904:	3710      	adds	r7, #16
 800b906:	46bd      	mov	sp, r7
 800b908:	bd80      	pop	{r7, pc}
 800b90a:	bf00      	nop

0800b90c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b088      	sub	sp, #32
 800b910:	af04      	add	r7, sp, #16
 800b912:	60f8      	str	r0, [r7, #12]
 800b914:	60b9      	str	r1, [r7, #8]
 800b916:	4613      	mov	r3, r2
 800b918:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b91a:	79f9      	ldrb	r1, [r7, #7]
 800b91c:	2300      	movs	r3, #0
 800b91e:	9303      	str	r3, [sp, #12]
 800b920:	2308      	movs	r3, #8
 800b922:	9302      	str	r3, [sp, #8]
 800b924:	68bb      	ldr	r3, [r7, #8]
 800b926:	9301      	str	r3, [sp, #4]
 800b928:	2300      	movs	r3, #0
 800b92a:	9300      	str	r3, [sp, #0]
 800b92c:	2300      	movs	r3, #0
 800b92e:	2200      	movs	r2, #0
 800b930:	68f8      	ldr	r0, [r7, #12]
 800b932:	f000 fb46 	bl	800bfc2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800b936:	2300      	movs	r3, #0
}
 800b938:	4618      	mov	r0, r3
 800b93a:	3710      	adds	r7, #16
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd80      	pop	{r7, pc}

0800b940 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b088      	sub	sp, #32
 800b944:	af04      	add	r7, sp, #16
 800b946:	60f8      	str	r0, [r7, #12]
 800b948:	60b9      	str	r1, [r7, #8]
 800b94a:	4611      	mov	r1, r2
 800b94c:	461a      	mov	r2, r3
 800b94e:	460b      	mov	r3, r1
 800b950:	80fb      	strh	r3, [r7, #6]
 800b952:	4613      	mov	r3, r2
 800b954:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d001      	beq.n	800b964 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b960:	2300      	movs	r3, #0
 800b962:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b964:	7979      	ldrb	r1, [r7, #5]
 800b966:	7e3b      	ldrb	r3, [r7, #24]
 800b968:	9303      	str	r3, [sp, #12]
 800b96a:	88fb      	ldrh	r3, [r7, #6]
 800b96c:	9302      	str	r3, [sp, #8]
 800b96e:	68bb      	ldr	r3, [r7, #8]
 800b970:	9301      	str	r3, [sp, #4]
 800b972:	2301      	movs	r3, #1
 800b974:	9300      	str	r3, [sp, #0]
 800b976:	2300      	movs	r3, #0
 800b978:	2200      	movs	r2, #0
 800b97a:	68f8      	ldr	r0, [r7, #12]
 800b97c:	f000 fb21 	bl	800bfc2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b980:	2300      	movs	r3, #0
}
 800b982:	4618      	mov	r0, r3
 800b984:	3710      	adds	r7, #16
 800b986:	46bd      	mov	sp, r7
 800b988:	bd80      	pop	{r7, pc}

0800b98a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b98a:	b580      	push	{r7, lr}
 800b98c:	b088      	sub	sp, #32
 800b98e:	af04      	add	r7, sp, #16
 800b990:	60f8      	str	r0, [r7, #12]
 800b992:	60b9      	str	r1, [r7, #8]
 800b994:	4611      	mov	r1, r2
 800b996:	461a      	mov	r2, r3
 800b998:	460b      	mov	r3, r1
 800b99a:	80fb      	strh	r3, [r7, #6]
 800b99c:	4613      	mov	r3, r2
 800b99e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b9a0:	7979      	ldrb	r1, [r7, #5]
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	9303      	str	r3, [sp, #12]
 800b9a6:	88fb      	ldrh	r3, [r7, #6]
 800b9a8:	9302      	str	r3, [sp, #8]
 800b9aa:	68bb      	ldr	r3, [r7, #8]
 800b9ac:	9301      	str	r3, [sp, #4]
 800b9ae:	2301      	movs	r3, #1
 800b9b0:	9300      	str	r3, [sp, #0]
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	2201      	movs	r2, #1
 800b9b6:	68f8      	ldr	r0, [r7, #12]
 800b9b8:	f000 fb03 	bl	800bfc2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b9bc:	2300      	movs	r3, #0

}
 800b9be:	4618      	mov	r0, r3
 800b9c0:	3710      	adds	r7, #16
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	bd80      	pop	{r7, pc}

0800b9c6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b9c6:	b580      	push	{r7, lr}
 800b9c8:	b088      	sub	sp, #32
 800b9ca:	af04      	add	r7, sp, #16
 800b9cc:	60f8      	str	r0, [r7, #12]
 800b9ce:	60b9      	str	r1, [r7, #8]
 800b9d0:	4611      	mov	r1, r2
 800b9d2:	461a      	mov	r2, r3
 800b9d4:	460b      	mov	r3, r1
 800b9d6:	80fb      	strh	r3, [r7, #6]
 800b9d8:	4613      	mov	r3, r2
 800b9da:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d001      	beq.n	800b9ea <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b9ea:	7979      	ldrb	r1, [r7, #5]
 800b9ec:	7e3b      	ldrb	r3, [r7, #24]
 800b9ee:	9303      	str	r3, [sp, #12]
 800b9f0:	88fb      	ldrh	r3, [r7, #6]
 800b9f2:	9302      	str	r3, [sp, #8]
 800b9f4:	68bb      	ldr	r3, [r7, #8]
 800b9f6:	9301      	str	r3, [sp, #4]
 800b9f8:	2301      	movs	r3, #1
 800b9fa:	9300      	str	r3, [sp, #0]
 800b9fc:	2302      	movs	r3, #2
 800b9fe:	2200      	movs	r2, #0
 800ba00:	68f8      	ldr	r0, [r7, #12]
 800ba02:	f000 fade 	bl	800bfc2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800ba06:	2300      	movs	r3, #0
}
 800ba08:	4618      	mov	r0, r3
 800ba0a:	3710      	adds	r7, #16
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bd80      	pop	{r7, pc}

0800ba10 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b088      	sub	sp, #32
 800ba14:	af04      	add	r7, sp, #16
 800ba16:	60f8      	str	r0, [r7, #12]
 800ba18:	60b9      	str	r1, [r7, #8]
 800ba1a:	4611      	mov	r1, r2
 800ba1c:	461a      	mov	r2, r3
 800ba1e:	460b      	mov	r3, r1
 800ba20:	80fb      	strh	r3, [r7, #6]
 800ba22:	4613      	mov	r3, r2
 800ba24:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ba26:	7979      	ldrb	r1, [r7, #5]
 800ba28:	2300      	movs	r3, #0
 800ba2a:	9303      	str	r3, [sp, #12]
 800ba2c:	88fb      	ldrh	r3, [r7, #6]
 800ba2e:	9302      	str	r3, [sp, #8]
 800ba30:	68bb      	ldr	r3, [r7, #8]
 800ba32:	9301      	str	r3, [sp, #4]
 800ba34:	2301      	movs	r3, #1
 800ba36:	9300      	str	r3, [sp, #0]
 800ba38:	2302      	movs	r3, #2
 800ba3a:	2201      	movs	r2, #1
 800ba3c:	68f8      	ldr	r0, [r7, #12]
 800ba3e:	f000 fac0 	bl	800bfc2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800ba42:	2300      	movs	r3, #0
}
 800ba44:	4618      	mov	r0, r3
 800ba46:	3710      	adds	r7, #16
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	bd80      	pop	{r7, pc}

0800ba4c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b086      	sub	sp, #24
 800ba50:	af04      	add	r7, sp, #16
 800ba52:	6078      	str	r0, [r7, #4]
 800ba54:	4608      	mov	r0, r1
 800ba56:	4611      	mov	r1, r2
 800ba58:	461a      	mov	r2, r3
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	70fb      	strb	r3, [r7, #3]
 800ba5e:	460b      	mov	r3, r1
 800ba60:	70bb      	strb	r3, [r7, #2]
 800ba62:	4613      	mov	r3, r2
 800ba64:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800ba66:	7878      	ldrb	r0, [r7, #1]
 800ba68:	78ba      	ldrb	r2, [r7, #2]
 800ba6a:	78f9      	ldrb	r1, [r7, #3]
 800ba6c:	8b3b      	ldrh	r3, [r7, #24]
 800ba6e:	9302      	str	r3, [sp, #8]
 800ba70:	7d3b      	ldrb	r3, [r7, #20]
 800ba72:	9301      	str	r3, [sp, #4]
 800ba74:	7c3b      	ldrb	r3, [r7, #16]
 800ba76:	9300      	str	r3, [sp, #0]
 800ba78:	4603      	mov	r3, r0
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	f000 fa53 	bl	800bf26 <USBH_LL_OpenPipe>

  return USBH_OK;
 800ba80:	2300      	movs	r3, #0
}
 800ba82:	4618      	mov	r0, r3
 800ba84:	3708      	adds	r7, #8
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd80      	pop	{r7, pc}

0800ba8a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800ba8a:	b580      	push	{r7, lr}
 800ba8c:	b082      	sub	sp, #8
 800ba8e:	af00      	add	r7, sp, #0
 800ba90:	6078      	str	r0, [r7, #4]
 800ba92:	460b      	mov	r3, r1
 800ba94:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800ba96:	78fb      	ldrb	r3, [r7, #3]
 800ba98:	4619      	mov	r1, r3
 800ba9a:	6878      	ldr	r0, [r7, #4]
 800ba9c:	f000 fa72 	bl	800bf84 <USBH_LL_ClosePipe>

  return USBH_OK;
 800baa0:	2300      	movs	r3, #0
}
 800baa2:	4618      	mov	r0, r3
 800baa4:	3708      	adds	r7, #8
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bd80      	pop	{r7, pc}

0800baaa <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800baaa:	b580      	push	{r7, lr}
 800baac:	b084      	sub	sp, #16
 800baae:	af00      	add	r7, sp, #0
 800bab0:	6078      	str	r0, [r7, #4]
 800bab2:	460b      	mov	r3, r1
 800bab4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f000 f836 	bl	800bb28 <USBH_GetFreePipe>
 800babc:	4603      	mov	r3, r0
 800babe:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800bac0:	89fb      	ldrh	r3, [r7, #14]
 800bac2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bac6:	4293      	cmp	r3, r2
 800bac8:	d00a      	beq.n	800bae0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800baca:	78fa      	ldrb	r2, [r7, #3]
 800bacc:	89fb      	ldrh	r3, [r7, #14]
 800bace:	f003 030f 	and.w	r3, r3, #15
 800bad2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800bad6:	6879      	ldr	r1, [r7, #4]
 800bad8:	33e0      	adds	r3, #224	@ 0xe0
 800bada:	009b      	lsls	r3, r3, #2
 800badc:	440b      	add	r3, r1
 800bade:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800bae0:	89fb      	ldrh	r3, [r7, #14]
 800bae2:	b2db      	uxtb	r3, r3
}
 800bae4:	4618      	mov	r0, r3
 800bae6:	3710      	adds	r7, #16
 800bae8:	46bd      	mov	sp, r7
 800baea:	bd80      	pop	{r7, pc}

0800baec <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800baec:	b480      	push	{r7}
 800baee:	b083      	sub	sp, #12
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
 800baf4:	460b      	mov	r3, r1
 800baf6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800baf8:	78fb      	ldrb	r3, [r7, #3]
 800bafa:	2b0f      	cmp	r3, #15
 800bafc:	d80d      	bhi.n	800bb1a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800bafe:	78fb      	ldrb	r3, [r7, #3]
 800bb00:	687a      	ldr	r2, [r7, #4]
 800bb02:	33e0      	adds	r3, #224	@ 0xe0
 800bb04:	009b      	lsls	r3, r3, #2
 800bb06:	4413      	add	r3, r2
 800bb08:	685a      	ldr	r2, [r3, #4]
 800bb0a:	78fb      	ldrb	r3, [r7, #3]
 800bb0c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800bb10:	6879      	ldr	r1, [r7, #4]
 800bb12:	33e0      	adds	r3, #224	@ 0xe0
 800bb14:	009b      	lsls	r3, r3, #2
 800bb16:	440b      	add	r3, r1
 800bb18:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800bb1a:	2300      	movs	r3, #0
}
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	370c      	adds	r7, #12
 800bb20:	46bd      	mov	sp, r7
 800bb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb26:	4770      	bx	lr

0800bb28 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800bb28:	b480      	push	{r7}
 800bb2a:	b085      	sub	sp, #20
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800bb30:	2300      	movs	r3, #0
 800bb32:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800bb34:	2300      	movs	r3, #0
 800bb36:	73fb      	strb	r3, [r7, #15]
 800bb38:	e00f      	b.n	800bb5a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800bb3a:	7bfb      	ldrb	r3, [r7, #15]
 800bb3c:	687a      	ldr	r2, [r7, #4]
 800bb3e:	33e0      	adds	r3, #224	@ 0xe0
 800bb40:	009b      	lsls	r3, r3, #2
 800bb42:	4413      	add	r3, r2
 800bb44:	685b      	ldr	r3, [r3, #4]
 800bb46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d102      	bne.n	800bb54 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800bb4e:	7bfb      	ldrb	r3, [r7, #15]
 800bb50:	b29b      	uxth	r3, r3
 800bb52:	e007      	b.n	800bb64 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800bb54:	7bfb      	ldrb	r3, [r7, #15]
 800bb56:	3301      	adds	r3, #1
 800bb58:	73fb      	strb	r3, [r7, #15]
 800bb5a:	7bfb      	ldrb	r3, [r7, #15]
 800bb5c:	2b0f      	cmp	r3, #15
 800bb5e:	d9ec      	bls.n	800bb3a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800bb60:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800bb64:	4618      	mov	r0, r3
 800bb66:	3714      	adds	r7, #20
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6e:	4770      	bx	lr

0800bb70 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800bb74:	2201      	movs	r2, #1
 800bb76:	490e      	ldr	r1, [pc, #56]	@ (800bbb0 <MX_USB_HOST_Init+0x40>)
 800bb78:	480e      	ldr	r0, [pc, #56]	@ (800bbb4 <MX_USB_HOST_Init+0x44>)
 800bb7a:	f7fe fb0f 	bl	800a19c <USBH_Init>
 800bb7e:	4603      	mov	r3, r0
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d001      	beq.n	800bb88 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800bb84:	f7f5 fce2 	bl	800154c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800bb88:	490b      	ldr	r1, [pc, #44]	@ (800bbb8 <MX_USB_HOST_Init+0x48>)
 800bb8a:	480a      	ldr	r0, [pc, #40]	@ (800bbb4 <MX_USB_HOST_Init+0x44>)
 800bb8c:	f7fe fbb1 	bl	800a2f2 <USBH_RegisterClass>
 800bb90:	4603      	mov	r3, r0
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d001      	beq.n	800bb9a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800bb96:	f7f5 fcd9 	bl	800154c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800bb9a:	4806      	ldr	r0, [pc, #24]	@ (800bbb4 <MX_USB_HOST_Init+0x44>)
 800bb9c:	f7fe fc35 	bl	800a40a <USBH_Start>
 800bba0:	4603      	mov	r3, r0
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d001      	beq.n	800bbaa <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800bba6:	f7f5 fcd1 	bl	800154c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800bbaa:	bf00      	nop
 800bbac:	bd80      	pop	{r7, pc}
 800bbae:	bf00      	nop
 800bbb0:	0800bbd1 	.word	0x0800bbd1
 800bbb4:	20008488 	.word	0x20008488
 800bbb8:	20000024 	.word	0x20000024

0800bbbc <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800bbc0:	4802      	ldr	r0, [pc, #8]	@ (800bbcc <MX_USB_HOST_Process+0x10>)
 800bbc2:	f7fe fc33 	bl	800a42c <USBH_Process>
}
 800bbc6:	bf00      	nop
 800bbc8:	bd80      	pop	{r7, pc}
 800bbca:	bf00      	nop
 800bbcc:	20008488 	.word	0x20008488

0800bbd0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800bbd0:	b480      	push	{r7}
 800bbd2:	b083      	sub	sp, #12
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
 800bbd8:	460b      	mov	r3, r1
 800bbda:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800bbdc:	78fb      	ldrb	r3, [r7, #3]
 800bbde:	3b01      	subs	r3, #1
 800bbe0:	2b04      	cmp	r3, #4
 800bbe2:	d819      	bhi.n	800bc18 <USBH_UserProcess+0x48>
 800bbe4:	a201      	add	r2, pc, #4	@ (adr r2, 800bbec <USBH_UserProcess+0x1c>)
 800bbe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbea:	bf00      	nop
 800bbec:	0800bc19 	.word	0x0800bc19
 800bbf0:	0800bc09 	.word	0x0800bc09
 800bbf4:	0800bc19 	.word	0x0800bc19
 800bbf8:	0800bc11 	.word	0x0800bc11
 800bbfc:	0800bc01 	.word	0x0800bc01
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800bc00:	4b09      	ldr	r3, [pc, #36]	@ (800bc28 <USBH_UserProcess+0x58>)
 800bc02:	2203      	movs	r2, #3
 800bc04:	701a      	strb	r2, [r3, #0]
  break;
 800bc06:	e008      	b.n	800bc1a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800bc08:	4b07      	ldr	r3, [pc, #28]	@ (800bc28 <USBH_UserProcess+0x58>)
 800bc0a:	2202      	movs	r2, #2
 800bc0c:	701a      	strb	r2, [r3, #0]
  break;
 800bc0e:	e004      	b.n	800bc1a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800bc10:	4b05      	ldr	r3, [pc, #20]	@ (800bc28 <USBH_UserProcess+0x58>)
 800bc12:	2201      	movs	r2, #1
 800bc14:	701a      	strb	r2, [r3, #0]
  break;
 800bc16:	e000      	b.n	800bc1a <USBH_UserProcess+0x4a>

  default:
  break;
 800bc18:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800bc1a:	bf00      	nop
 800bc1c:	370c      	adds	r7, #12
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc24:	4770      	bx	lr
 800bc26:	bf00      	nop
 800bc28:	20008860 	.word	0x20008860

0800bc2c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b08a      	sub	sp, #40	@ 0x28
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bc34:	f107 0314 	add.w	r3, r7, #20
 800bc38:	2200      	movs	r2, #0
 800bc3a:	601a      	str	r2, [r3, #0]
 800bc3c:	605a      	str	r2, [r3, #4]
 800bc3e:	609a      	str	r2, [r3, #8]
 800bc40:	60da      	str	r2, [r3, #12]
 800bc42:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bc4c:	d147      	bne.n	800bcde <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bc4e:	2300      	movs	r3, #0
 800bc50:	613b      	str	r3, [r7, #16]
 800bc52:	4b25      	ldr	r3, [pc, #148]	@ (800bce8 <HAL_HCD_MspInit+0xbc>)
 800bc54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc56:	4a24      	ldr	r2, [pc, #144]	@ (800bce8 <HAL_HCD_MspInit+0xbc>)
 800bc58:	f043 0301 	orr.w	r3, r3, #1
 800bc5c:	6313      	str	r3, [r2, #48]	@ 0x30
 800bc5e:	4b22      	ldr	r3, [pc, #136]	@ (800bce8 <HAL_HCD_MspInit+0xbc>)
 800bc60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc62:	f003 0301 	and.w	r3, r3, #1
 800bc66:	613b      	str	r3, [r7, #16]
 800bc68:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800bc6a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bc6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bc70:	2300      	movs	r3, #0
 800bc72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc74:	2300      	movs	r3, #0
 800bc76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800bc78:	f107 0314 	add.w	r3, r7, #20
 800bc7c:	4619      	mov	r1, r3
 800bc7e:	481b      	ldr	r0, [pc, #108]	@ (800bcec <HAL_HCD_MspInit+0xc0>)
 800bc80:	f7f7 fdd4 	bl	800382c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800bc84:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800bc88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bc8a:	2302      	movs	r3, #2
 800bc8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc8e:	2300      	movs	r3, #0
 800bc90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bc92:	2303      	movs	r3, #3
 800bc94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bc96:	230a      	movs	r3, #10
 800bc98:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bc9a:	f107 0314 	add.w	r3, r7, #20
 800bc9e:	4619      	mov	r1, r3
 800bca0:	4812      	ldr	r0, [pc, #72]	@ (800bcec <HAL_HCD_MspInit+0xc0>)
 800bca2:	f7f7 fdc3 	bl	800382c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bca6:	4b10      	ldr	r3, [pc, #64]	@ (800bce8 <HAL_HCD_MspInit+0xbc>)
 800bca8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bcaa:	4a0f      	ldr	r2, [pc, #60]	@ (800bce8 <HAL_HCD_MspInit+0xbc>)
 800bcac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bcb0:	6353      	str	r3, [r2, #52]	@ 0x34
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	60fb      	str	r3, [r7, #12]
 800bcb6:	4b0c      	ldr	r3, [pc, #48]	@ (800bce8 <HAL_HCD_MspInit+0xbc>)
 800bcb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bcba:	4a0b      	ldr	r2, [pc, #44]	@ (800bce8 <HAL_HCD_MspInit+0xbc>)
 800bcbc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800bcc0:	6453      	str	r3, [r2, #68]	@ 0x44
 800bcc2:	4b09      	ldr	r3, [pc, #36]	@ (800bce8 <HAL_HCD_MspInit+0xbc>)
 800bcc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bcc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bcca:	60fb      	str	r3, [r7, #12]
 800bccc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800bcce:	2200      	movs	r2, #0
 800bcd0:	2100      	movs	r1, #0
 800bcd2:	2043      	movs	r0, #67	@ 0x43
 800bcd4:	f7f7 fa2f 	bl	8003136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bcd8:	2043      	movs	r0, #67	@ 0x43
 800bcda:	f7f7 fa48 	bl	800316e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bcde:	bf00      	nop
 800bce0:	3728      	adds	r7, #40	@ 0x28
 800bce2:	46bd      	mov	sp, r7
 800bce4:	bd80      	pop	{r7, pc}
 800bce6:	bf00      	nop
 800bce8:	40023800 	.word	0x40023800
 800bcec:	40020000 	.word	0x40020000

0800bcf0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b082      	sub	sp, #8
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800bcfe:	4618      	mov	r0, r3
 800bd00:	f7fe ff6d 	bl	800abde <USBH_LL_IncTimer>
}
 800bd04:	bf00      	nop
 800bd06:	3708      	adds	r7, #8
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	bd80      	pop	{r7, pc}

0800bd0c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b082      	sub	sp, #8
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	f7fe ffa9 	bl	800ac72 <USBH_LL_Connect>
}
 800bd20:	bf00      	nop
 800bd22:	3708      	adds	r7, #8
 800bd24:	46bd      	mov	sp, r7
 800bd26:	bd80      	pop	{r7, pc}

0800bd28 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b082      	sub	sp, #8
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800bd36:	4618      	mov	r0, r3
 800bd38:	f7fe ffb2 	bl	800aca0 <USBH_LL_Disconnect>
}
 800bd3c:	bf00      	nop
 800bd3e:	3708      	adds	r7, #8
 800bd40:	46bd      	mov	sp, r7
 800bd42:	bd80      	pop	{r7, pc}

0800bd44 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800bd44:	b480      	push	{r7}
 800bd46:	b083      	sub	sp, #12
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
 800bd4c:	460b      	mov	r3, r1
 800bd4e:	70fb      	strb	r3, [r7, #3]
 800bd50:	4613      	mov	r3, r2
 800bd52:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800bd54:	bf00      	nop
 800bd56:	370c      	adds	r7, #12
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5e:	4770      	bx	lr

0800bd60 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b082      	sub	sp, #8
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800bd6e:	4618      	mov	r0, r3
 800bd70:	f7fe ff5f 	bl	800ac32 <USBH_LL_PortEnabled>
}
 800bd74:	bf00      	nop
 800bd76:	3708      	adds	r7, #8
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	bd80      	pop	{r7, pc}

0800bd7c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b082      	sub	sp, #8
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	f7fe ff5f 	bl	800ac4e <USBH_LL_PortDisabled>
}
 800bd90:	bf00      	nop
 800bd92:	3708      	adds	r7, #8
 800bd94:	46bd      	mov	sp, r7
 800bd96:	bd80      	pop	{r7, pc}

0800bd98 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b082      	sub	sp, #8
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800bda6:	2b01      	cmp	r3, #1
 800bda8:	d12a      	bne.n	800be00 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800bdaa:	4a18      	ldr	r2, [pc, #96]	@ (800be0c <USBH_LL_Init+0x74>)
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	4a15      	ldr	r2, [pc, #84]	@ (800be0c <USBH_LL_Init+0x74>)
 800bdb6:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bdba:	4b14      	ldr	r3, [pc, #80]	@ (800be0c <USBH_LL_Init+0x74>)
 800bdbc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800bdc0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800bdc2:	4b12      	ldr	r3, [pc, #72]	@ (800be0c <USBH_LL_Init+0x74>)
 800bdc4:	2208      	movs	r2, #8
 800bdc6:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800bdc8:	4b10      	ldr	r3, [pc, #64]	@ (800be0c <USBH_LL_Init+0x74>)
 800bdca:	2201      	movs	r2, #1
 800bdcc:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bdce:	4b0f      	ldr	r3, [pc, #60]	@ (800be0c <USBH_LL_Init+0x74>)
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800bdd4:	4b0d      	ldr	r3, [pc, #52]	@ (800be0c <USBH_LL_Init+0x74>)
 800bdd6:	2202      	movs	r2, #2
 800bdd8:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bdda:	4b0c      	ldr	r3, [pc, #48]	@ (800be0c <USBH_LL_Init+0x74>)
 800bddc:	2200      	movs	r2, #0
 800bdde:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800bde0:	480a      	ldr	r0, [pc, #40]	@ (800be0c <USBH_LL_Init+0x74>)
 800bde2:	f7f7 fef1 	bl	8003bc8 <HAL_HCD_Init>
 800bde6:	4603      	mov	r3, r0
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d001      	beq.n	800bdf0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800bdec:	f7f5 fbae 	bl	800154c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800bdf0:	4806      	ldr	r0, [pc, #24]	@ (800be0c <USBH_LL_Init+0x74>)
 800bdf2:	f7f8 fb51 	bl	8004498 <HAL_HCD_GetCurrentFrame>
 800bdf6:	4603      	mov	r3, r0
 800bdf8:	4619      	mov	r1, r3
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	f7fe fee0 	bl	800abc0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800be00:	2300      	movs	r3, #0
}
 800be02:	4618      	mov	r0, r3
 800be04:	3708      	adds	r7, #8
 800be06:	46bd      	mov	sp, r7
 800be08:	bd80      	pop	{r7, pc}
 800be0a:	bf00      	nop
 800be0c:	20008864 	.word	0x20008864

0800be10 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b084      	sub	sp, #16
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be18:	2300      	movs	r3, #0
 800be1a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800be1c:	2300      	movs	r3, #0
 800be1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800be26:	4618      	mov	r0, r3
 800be28:	f7f8 fabe 	bl	80043a8 <HAL_HCD_Start>
 800be2c:	4603      	mov	r3, r0
 800be2e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800be30:	7bfb      	ldrb	r3, [r7, #15]
 800be32:	4618      	mov	r0, r3
 800be34:	f000 f95e 	bl	800c0f4 <USBH_Get_USB_Status>
 800be38:	4603      	mov	r3, r0
 800be3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be3c:	7bbb      	ldrb	r3, [r7, #14]
}
 800be3e:	4618      	mov	r0, r3
 800be40:	3710      	adds	r7, #16
 800be42:	46bd      	mov	sp, r7
 800be44:	bd80      	pop	{r7, pc}

0800be46 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800be46:	b580      	push	{r7, lr}
 800be48:	b084      	sub	sp, #16
 800be4a:	af00      	add	r7, sp, #0
 800be4c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be4e:	2300      	movs	r3, #0
 800be50:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800be52:	2300      	movs	r3, #0
 800be54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800be5c:	4618      	mov	r0, r3
 800be5e:	f7f8 fac6 	bl	80043ee <HAL_HCD_Stop>
 800be62:	4603      	mov	r3, r0
 800be64:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800be66:	7bfb      	ldrb	r3, [r7, #15]
 800be68:	4618      	mov	r0, r3
 800be6a:	f000 f943 	bl	800c0f4 <USBH_Get_USB_Status>
 800be6e:	4603      	mov	r3, r0
 800be70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be72:	7bbb      	ldrb	r3, [r7, #14]
}
 800be74:	4618      	mov	r0, r3
 800be76:	3710      	adds	r7, #16
 800be78:	46bd      	mov	sp, r7
 800be7a:	bd80      	pop	{r7, pc}

0800be7c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b084      	sub	sp, #16
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800be84:	2301      	movs	r3, #1
 800be86:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800be8e:	4618      	mov	r0, r3
 800be90:	f7f8 fb10 	bl	80044b4 <HAL_HCD_GetCurrentSpeed>
 800be94:	4603      	mov	r3, r0
 800be96:	2b02      	cmp	r3, #2
 800be98:	d00c      	beq.n	800beb4 <USBH_LL_GetSpeed+0x38>
 800be9a:	2b02      	cmp	r3, #2
 800be9c:	d80d      	bhi.n	800beba <USBH_LL_GetSpeed+0x3e>
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d002      	beq.n	800bea8 <USBH_LL_GetSpeed+0x2c>
 800bea2:	2b01      	cmp	r3, #1
 800bea4:	d003      	beq.n	800beae <USBH_LL_GetSpeed+0x32>
 800bea6:	e008      	b.n	800beba <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800bea8:	2300      	movs	r3, #0
 800beaa:	73fb      	strb	r3, [r7, #15]
    break;
 800beac:	e008      	b.n	800bec0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800beae:	2301      	movs	r3, #1
 800beb0:	73fb      	strb	r3, [r7, #15]
    break;
 800beb2:	e005      	b.n	800bec0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800beb4:	2302      	movs	r3, #2
 800beb6:	73fb      	strb	r3, [r7, #15]
    break;
 800beb8:	e002      	b.n	800bec0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800beba:	2301      	movs	r3, #1
 800bebc:	73fb      	strb	r3, [r7, #15]
    break;
 800bebe:	bf00      	nop
  }
  return  speed;
 800bec0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bec2:	4618      	mov	r0, r3
 800bec4:	3710      	adds	r7, #16
 800bec6:	46bd      	mov	sp, r7
 800bec8:	bd80      	pop	{r7, pc}

0800beca <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800beca:	b580      	push	{r7, lr}
 800becc:	b084      	sub	sp, #16
 800bece:	af00      	add	r7, sp, #0
 800bed0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bed2:	2300      	movs	r3, #0
 800bed4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bed6:	2300      	movs	r3, #0
 800bed8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800bee0:	4618      	mov	r0, r3
 800bee2:	f7f8 faa1 	bl	8004428 <HAL_HCD_ResetPort>
 800bee6:	4603      	mov	r3, r0
 800bee8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800beea:	7bfb      	ldrb	r3, [r7, #15]
 800beec:	4618      	mov	r0, r3
 800beee:	f000 f901 	bl	800c0f4 <USBH_Get_USB_Status>
 800bef2:	4603      	mov	r3, r0
 800bef4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bef6:	7bbb      	ldrb	r3, [r7, #14]
}
 800bef8:	4618      	mov	r0, r3
 800befa:	3710      	adds	r7, #16
 800befc:	46bd      	mov	sp, r7
 800befe:	bd80      	pop	{r7, pc}

0800bf00 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b082      	sub	sp, #8
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
 800bf08:	460b      	mov	r3, r1
 800bf0a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800bf12:	78fa      	ldrb	r2, [r7, #3]
 800bf14:	4611      	mov	r1, r2
 800bf16:	4618      	mov	r0, r3
 800bf18:	f7f8 faa9 	bl	800446e <HAL_HCD_HC_GetXferCount>
 800bf1c:	4603      	mov	r3, r0
}
 800bf1e:	4618      	mov	r0, r3
 800bf20:	3708      	adds	r7, #8
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bd80      	pop	{r7, pc}

0800bf26 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bf26:	b590      	push	{r4, r7, lr}
 800bf28:	b089      	sub	sp, #36	@ 0x24
 800bf2a:	af04      	add	r7, sp, #16
 800bf2c:	6078      	str	r0, [r7, #4]
 800bf2e:	4608      	mov	r0, r1
 800bf30:	4611      	mov	r1, r2
 800bf32:	461a      	mov	r2, r3
 800bf34:	4603      	mov	r3, r0
 800bf36:	70fb      	strb	r3, [r7, #3]
 800bf38:	460b      	mov	r3, r1
 800bf3a:	70bb      	strb	r3, [r7, #2]
 800bf3c:	4613      	mov	r3, r2
 800bf3e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf40:	2300      	movs	r3, #0
 800bf42:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bf44:	2300      	movs	r3, #0
 800bf46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800bf4e:	787c      	ldrb	r4, [r7, #1]
 800bf50:	78ba      	ldrb	r2, [r7, #2]
 800bf52:	78f9      	ldrb	r1, [r7, #3]
 800bf54:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800bf56:	9302      	str	r3, [sp, #8]
 800bf58:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800bf5c:	9301      	str	r3, [sp, #4]
 800bf5e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bf62:	9300      	str	r3, [sp, #0]
 800bf64:	4623      	mov	r3, r4
 800bf66:	f7f7 fe96 	bl	8003c96 <HAL_HCD_HC_Init>
 800bf6a:	4603      	mov	r3, r0
 800bf6c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800bf6e:	7bfb      	ldrb	r3, [r7, #15]
 800bf70:	4618      	mov	r0, r3
 800bf72:	f000 f8bf 	bl	800c0f4 <USBH_Get_USB_Status>
 800bf76:	4603      	mov	r3, r0
 800bf78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf7a:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	3714      	adds	r7, #20
 800bf80:	46bd      	mov	sp, r7
 800bf82:	bd90      	pop	{r4, r7, pc}

0800bf84 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b084      	sub	sp, #16
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
 800bf8c:	460b      	mov	r3, r1
 800bf8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf90:	2300      	movs	r3, #0
 800bf92:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bf94:	2300      	movs	r3, #0
 800bf96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800bf9e:	78fa      	ldrb	r2, [r7, #3]
 800bfa0:	4611      	mov	r1, r2
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	f7f7 ff2f 	bl	8003e06 <HAL_HCD_HC_Halt>
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bfac:	7bfb      	ldrb	r3, [r7, #15]
 800bfae:	4618      	mov	r0, r3
 800bfb0:	f000 f8a0 	bl	800c0f4 <USBH_Get_USB_Status>
 800bfb4:	4603      	mov	r3, r0
 800bfb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bfb8:	7bbb      	ldrb	r3, [r7, #14]
}
 800bfba:	4618      	mov	r0, r3
 800bfbc:	3710      	adds	r7, #16
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	bd80      	pop	{r7, pc}

0800bfc2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800bfc2:	b590      	push	{r4, r7, lr}
 800bfc4:	b089      	sub	sp, #36	@ 0x24
 800bfc6:	af04      	add	r7, sp, #16
 800bfc8:	6078      	str	r0, [r7, #4]
 800bfca:	4608      	mov	r0, r1
 800bfcc:	4611      	mov	r1, r2
 800bfce:	461a      	mov	r2, r3
 800bfd0:	4603      	mov	r3, r0
 800bfd2:	70fb      	strb	r3, [r7, #3]
 800bfd4:	460b      	mov	r3, r1
 800bfd6:	70bb      	strb	r3, [r7, #2]
 800bfd8:	4613      	mov	r3, r2
 800bfda:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bfdc:	2300      	movs	r3, #0
 800bfde:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800bfea:	787c      	ldrb	r4, [r7, #1]
 800bfec:	78ba      	ldrb	r2, [r7, #2]
 800bfee:	78f9      	ldrb	r1, [r7, #3]
 800bff0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800bff4:	9303      	str	r3, [sp, #12]
 800bff6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800bff8:	9302      	str	r3, [sp, #8]
 800bffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bffc:	9301      	str	r3, [sp, #4]
 800bffe:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c002:	9300      	str	r3, [sp, #0]
 800c004:	4623      	mov	r3, r4
 800c006:	f7f7 ff21 	bl	8003e4c <HAL_HCD_HC_SubmitRequest>
 800c00a:	4603      	mov	r3, r0
 800c00c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800c00e:	7bfb      	ldrb	r3, [r7, #15]
 800c010:	4618      	mov	r0, r3
 800c012:	f000 f86f 	bl	800c0f4 <USBH_Get_USB_Status>
 800c016:	4603      	mov	r3, r0
 800c018:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c01a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c01c:	4618      	mov	r0, r3
 800c01e:	3714      	adds	r7, #20
 800c020:	46bd      	mov	sp, r7
 800c022:	bd90      	pop	{r4, r7, pc}

0800c024 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b082      	sub	sp, #8
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
 800c02c:	460b      	mov	r3, r1
 800c02e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c036:	78fa      	ldrb	r2, [r7, #3]
 800c038:	4611      	mov	r1, r2
 800c03a:	4618      	mov	r0, r3
 800c03c:	f7f8 fa02 	bl	8004444 <HAL_HCD_HC_GetURBState>
 800c040:	4603      	mov	r3, r0
}
 800c042:	4618      	mov	r0, r3
 800c044:	3708      	adds	r7, #8
 800c046:	46bd      	mov	sp, r7
 800c048:	bd80      	pop	{r7, pc}

0800c04a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800c04a:	b580      	push	{r7, lr}
 800c04c:	b082      	sub	sp, #8
 800c04e:	af00      	add	r7, sp, #0
 800c050:	6078      	str	r0, [r7, #4]
 800c052:	460b      	mov	r3, r1
 800c054:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800c05c:	2b01      	cmp	r3, #1
 800c05e:	d103      	bne.n	800c068 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800c060:	78fb      	ldrb	r3, [r7, #3]
 800c062:	4618      	mov	r0, r3
 800c064:	f000 f872 	bl	800c14c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800c068:	20c8      	movs	r0, #200	@ 0xc8
 800c06a:	f7f6 ff23 	bl	8002eb4 <HAL_Delay>
  return USBH_OK;
 800c06e:	2300      	movs	r3, #0
}
 800c070:	4618      	mov	r0, r3
 800c072:	3708      	adds	r7, #8
 800c074:	46bd      	mov	sp, r7
 800c076:	bd80      	pop	{r7, pc}

0800c078 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800c078:	b480      	push	{r7}
 800c07a:	b085      	sub	sp, #20
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
 800c080:	460b      	mov	r3, r1
 800c082:	70fb      	strb	r3, [r7, #3]
 800c084:	4613      	mov	r3, r2
 800c086:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c08e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800c090:	78fa      	ldrb	r2, [r7, #3]
 800c092:	68f9      	ldr	r1, [r7, #12]
 800c094:	4613      	mov	r3, r2
 800c096:	011b      	lsls	r3, r3, #4
 800c098:	1a9b      	subs	r3, r3, r2
 800c09a:	009b      	lsls	r3, r3, #2
 800c09c:	440b      	add	r3, r1
 800c09e:	3317      	adds	r3, #23
 800c0a0:	781b      	ldrb	r3, [r3, #0]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d00a      	beq.n	800c0bc <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800c0a6:	78fa      	ldrb	r2, [r7, #3]
 800c0a8:	68f9      	ldr	r1, [r7, #12]
 800c0aa:	4613      	mov	r3, r2
 800c0ac:	011b      	lsls	r3, r3, #4
 800c0ae:	1a9b      	subs	r3, r3, r2
 800c0b0:	009b      	lsls	r3, r3, #2
 800c0b2:	440b      	add	r3, r1
 800c0b4:	333c      	adds	r3, #60	@ 0x3c
 800c0b6:	78ba      	ldrb	r2, [r7, #2]
 800c0b8:	701a      	strb	r2, [r3, #0]
 800c0ba:	e009      	b.n	800c0d0 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800c0bc:	78fa      	ldrb	r2, [r7, #3]
 800c0be:	68f9      	ldr	r1, [r7, #12]
 800c0c0:	4613      	mov	r3, r2
 800c0c2:	011b      	lsls	r3, r3, #4
 800c0c4:	1a9b      	subs	r3, r3, r2
 800c0c6:	009b      	lsls	r3, r3, #2
 800c0c8:	440b      	add	r3, r1
 800c0ca:	333d      	adds	r3, #61	@ 0x3d
 800c0cc:	78ba      	ldrb	r2, [r7, #2]
 800c0ce:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800c0d0:	2300      	movs	r3, #0
}
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	3714      	adds	r7, #20
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0dc:	4770      	bx	lr

0800c0de <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800c0de:	b580      	push	{r7, lr}
 800c0e0:	b082      	sub	sp, #8
 800c0e2:	af00      	add	r7, sp, #0
 800c0e4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800c0e6:	6878      	ldr	r0, [r7, #4]
 800c0e8:	f7f6 fee4 	bl	8002eb4 <HAL_Delay>
}
 800c0ec:	bf00      	nop
 800c0ee:	3708      	adds	r7, #8
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}

0800c0f4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c0f4:	b480      	push	{r7}
 800c0f6:	b085      	sub	sp, #20
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c0fe:	2300      	movs	r3, #0
 800c100:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c102:	79fb      	ldrb	r3, [r7, #7]
 800c104:	2b03      	cmp	r3, #3
 800c106:	d817      	bhi.n	800c138 <USBH_Get_USB_Status+0x44>
 800c108:	a201      	add	r2, pc, #4	@ (adr r2, 800c110 <USBH_Get_USB_Status+0x1c>)
 800c10a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c10e:	bf00      	nop
 800c110:	0800c121 	.word	0x0800c121
 800c114:	0800c127 	.word	0x0800c127
 800c118:	0800c12d 	.word	0x0800c12d
 800c11c:	0800c133 	.word	0x0800c133
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c120:	2300      	movs	r3, #0
 800c122:	73fb      	strb	r3, [r7, #15]
    break;
 800c124:	e00b      	b.n	800c13e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c126:	2302      	movs	r3, #2
 800c128:	73fb      	strb	r3, [r7, #15]
    break;
 800c12a:	e008      	b.n	800c13e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c12c:	2301      	movs	r3, #1
 800c12e:	73fb      	strb	r3, [r7, #15]
    break;
 800c130:	e005      	b.n	800c13e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c132:	2302      	movs	r3, #2
 800c134:	73fb      	strb	r3, [r7, #15]
    break;
 800c136:	e002      	b.n	800c13e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c138:	2302      	movs	r3, #2
 800c13a:	73fb      	strb	r3, [r7, #15]
    break;
 800c13c:	bf00      	nop
  }
  return usb_status;
 800c13e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c140:	4618      	mov	r0, r3
 800c142:	3714      	adds	r7, #20
 800c144:	46bd      	mov	sp, r7
 800c146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14a:	4770      	bx	lr

0800c14c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b084      	sub	sp, #16
 800c150:	af00      	add	r7, sp, #0
 800c152:	4603      	mov	r3, r0
 800c154:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800c156:	79fb      	ldrb	r3, [r7, #7]
 800c158:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800c15a:	79fb      	ldrb	r3, [r7, #7]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d102      	bne.n	800c166 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800c160:	2300      	movs	r3, #0
 800c162:	73fb      	strb	r3, [r7, #15]
 800c164:	e001      	b.n	800c16a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800c166:	2301      	movs	r3, #1
 800c168:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800c16a:	7bfb      	ldrb	r3, [r7, #15]
 800c16c:	461a      	mov	r2, r3
 800c16e:	2101      	movs	r1, #1
 800c170:	4803      	ldr	r0, [pc, #12]	@ (800c180 <MX_DriverVbusFS+0x34>)
 800c172:	f7f7 fcf7 	bl	8003b64 <HAL_GPIO_WritePin>
}
 800c176:	bf00      	nop
 800c178:	3710      	adds	r7, #16
 800c17a:	46bd      	mov	sp, r7
 800c17c:	bd80      	pop	{r7, pc}
 800c17e:	bf00      	nop
 800c180:	40020800 	.word	0x40020800

0800c184 <malloc>:
 800c184:	4b02      	ldr	r3, [pc, #8]	@ (800c190 <malloc+0xc>)
 800c186:	4601      	mov	r1, r0
 800c188:	6818      	ldr	r0, [r3, #0]
 800c18a:	f000 b82d 	b.w	800c1e8 <_malloc_r>
 800c18e:	bf00      	nop
 800c190:	20000050 	.word	0x20000050

0800c194 <free>:
 800c194:	4b02      	ldr	r3, [pc, #8]	@ (800c1a0 <free+0xc>)
 800c196:	4601      	mov	r1, r0
 800c198:	6818      	ldr	r0, [r3, #0]
 800c19a:	f001 bd15 	b.w	800dbc8 <_free_r>
 800c19e:	bf00      	nop
 800c1a0:	20000050 	.word	0x20000050

0800c1a4 <sbrk_aligned>:
 800c1a4:	b570      	push	{r4, r5, r6, lr}
 800c1a6:	4e0f      	ldr	r6, [pc, #60]	@ (800c1e4 <sbrk_aligned+0x40>)
 800c1a8:	460c      	mov	r4, r1
 800c1aa:	6831      	ldr	r1, [r6, #0]
 800c1ac:	4605      	mov	r5, r0
 800c1ae:	b911      	cbnz	r1, 800c1b6 <sbrk_aligned+0x12>
 800c1b0:	f000 fe42 	bl	800ce38 <_sbrk_r>
 800c1b4:	6030      	str	r0, [r6, #0]
 800c1b6:	4621      	mov	r1, r4
 800c1b8:	4628      	mov	r0, r5
 800c1ba:	f000 fe3d 	bl	800ce38 <_sbrk_r>
 800c1be:	1c43      	adds	r3, r0, #1
 800c1c0:	d103      	bne.n	800c1ca <sbrk_aligned+0x26>
 800c1c2:	f04f 34ff 	mov.w	r4, #4294967295
 800c1c6:	4620      	mov	r0, r4
 800c1c8:	bd70      	pop	{r4, r5, r6, pc}
 800c1ca:	1cc4      	adds	r4, r0, #3
 800c1cc:	f024 0403 	bic.w	r4, r4, #3
 800c1d0:	42a0      	cmp	r0, r4
 800c1d2:	d0f8      	beq.n	800c1c6 <sbrk_aligned+0x22>
 800c1d4:	1a21      	subs	r1, r4, r0
 800c1d6:	4628      	mov	r0, r5
 800c1d8:	f000 fe2e 	bl	800ce38 <_sbrk_r>
 800c1dc:	3001      	adds	r0, #1
 800c1de:	d1f2      	bne.n	800c1c6 <sbrk_aligned+0x22>
 800c1e0:	e7ef      	b.n	800c1c2 <sbrk_aligned+0x1e>
 800c1e2:	bf00      	nop
 800c1e4:	20008c44 	.word	0x20008c44

0800c1e8 <_malloc_r>:
 800c1e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1ec:	1ccd      	adds	r5, r1, #3
 800c1ee:	f025 0503 	bic.w	r5, r5, #3
 800c1f2:	3508      	adds	r5, #8
 800c1f4:	2d0c      	cmp	r5, #12
 800c1f6:	bf38      	it	cc
 800c1f8:	250c      	movcc	r5, #12
 800c1fa:	2d00      	cmp	r5, #0
 800c1fc:	4606      	mov	r6, r0
 800c1fe:	db01      	blt.n	800c204 <_malloc_r+0x1c>
 800c200:	42a9      	cmp	r1, r5
 800c202:	d904      	bls.n	800c20e <_malloc_r+0x26>
 800c204:	230c      	movs	r3, #12
 800c206:	6033      	str	r3, [r6, #0]
 800c208:	2000      	movs	r0, #0
 800c20a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c20e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c2e4 <_malloc_r+0xfc>
 800c212:	f000 f869 	bl	800c2e8 <__malloc_lock>
 800c216:	f8d8 3000 	ldr.w	r3, [r8]
 800c21a:	461c      	mov	r4, r3
 800c21c:	bb44      	cbnz	r4, 800c270 <_malloc_r+0x88>
 800c21e:	4629      	mov	r1, r5
 800c220:	4630      	mov	r0, r6
 800c222:	f7ff ffbf 	bl	800c1a4 <sbrk_aligned>
 800c226:	1c43      	adds	r3, r0, #1
 800c228:	4604      	mov	r4, r0
 800c22a:	d158      	bne.n	800c2de <_malloc_r+0xf6>
 800c22c:	f8d8 4000 	ldr.w	r4, [r8]
 800c230:	4627      	mov	r7, r4
 800c232:	2f00      	cmp	r7, #0
 800c234:	d143      	bne.n	800c2be <_malloc_r+0xd6>
 800c236:	2c00      	cmp	r4, #0
 800c238:	d04b      	beq.n	800c2d2 <_malloc_r+0xea>
 800c23a:	6823      	ldr	r3, [r4, #0]
 800c23c:	4639      	mov	r1, r7
 800c23e:	4630      	mov	r0, r6
 800c240:	eb04 0903 	add.w	r9, r4, r3
 800c244:	f000 fdf8 	bl	800ce38 <_sbrk_r>
 800c248:	4581      	cmp	r9, r0
 800c24a:	d142      	bne.n	800c2d2 <_malloc_r+0xea>
 800c24c:	6821      	ldr	r1, [r4, #0]
 800c24e:	1a6d      	subs	r5, r5, r1
 800c250:	4629      	mov	r1, r5
 800c252:	4630      	mov	r0, r6
 800c254:	f7ff ffa6 	bl	800c1a4 <sbrk_aligned>
 800c258:	3001      	adds	r0, #1
 800c25a:	d03a      	beq.n	800c2d2 <_malloc_r+0xea>
 800c25c:	6823      	ldr	r3, [r4, #0]
 800c25e:	442b      	add	r3, r5
 800c260:	6023      	str	r3, [r4, #0]
 800c262:	f8d8 3000 	ldr.w	r3, [r8]
 800c266:	685a      	ldr	r2, [r3, #4]
 800c268:	bb62      	cbnz	r2, 800c2c4 <_malloc_r+0xdc>
 800c26a:	f8c8 7000 	str.w	r7, [r8]
 800c26e:	e00f      	b.n	800c290 <_malloc_r+0xa8>
 800c270:	6822      	ldr	r2, [r4, #0]
 800c272:	1b52      	subs	r2, r2, r5
 800c274:	d420      	bmi.n	800c2b8 <_malloc_r+0xd0>
 800c276:	2a0b      	cmp	r2, #11
 800c278:	d917      	bls.n	800c2aa <_malloc_r+0xc2>
 800c27a:	1961      	adds	r1, r4, r5
 800c27c:	42a3      	cmp	r3, r4
 800c27e:	6025      	str	r5, [r4, #0]
 800c280:	bf18      	it	ne
 800c282:	6059      	strne	r1, [r3, #4]
 800c284:	6863      	ldr	r3, [r4, #4]
 800c286:	bf08      	it	eq
 800c288:	f8c8 1000 	streq.w	r1, [r8]
 800c28c:	5162      	str	r2, [r4, r5]
 800c28e:	604b      	str	r3, [r1, #4]
 800c290:	4630      	mov	r0, r6
 800c292:	f000 f82f 	bl	800c2f4 <__malloc_unlock>
 800c296:	f104 000b 	add.w	r0, r4, #11
 800c29a:	1d23      	adds	r3, r4, #4
 800c29c:	f020 0007 	bic.w	r0, r0, #7
 800c2a0:	1ac2      	subs	r2, r0, r3
 800c2a2:	bf1c      	itt	ne
 800c2a4:	1a1b      	subne	r3, r3, r0
 800c2a6:	50a3      	strne	r3, [r4, r2]
 800c2a8:	e7af      	b.n	800c20a <_malloc_r+0x22>
 800c2aa:	6862      	ldr	r2, [r4, #4]
 800c2ac:	42a3      	cmp	r3, r4
 800c2ae:	bf0c      	ite	eq
 800c2b0:	f8c8 2000 	streq.w	r2, [r8]
 800c2b4:	605a      	strne	r2, [r3, #4]
 800c2b6:	e7eb      	b.n	800c290 <_malloc_r+0xa8>
 800c2b8:	4623      	mov	r3, r4
 800c2ba:	6864      	ldr	r4, [r4, #4]
 800c2bc:	e7ae      	b.n	800c21c <_malloc_r+0x34>
 800c2be:	463c      	mov	r4, r7
 800c2c0:	687f      	ldr	r7, [r7, #4]
 800c2c2:	e7b6      	b.n	800c232 <_malloc_r+0x4a>
 800c2c4:	461a      	mov	r2, r3
 800c2c6:	685b      	ldr	r3, [r3, #4]
 800c2c8:	42a3      	cmp	r3, r4
 800c2ca:	d1fb      	bne.n	800c2c4 <_malloc_r+0xdc>
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	6053      	str	r3, [r2, #4]
 800c2d0:	e7de      	b.n	800c290 <_malloc_r+0xa8>
 800c2d2:	230c      	movs	r3, #12
 800c2d4:	6033      	str	r3, [r6, #0]
 800c2d6:	4630      	mov	r0, r6
 800c2d8:	f000 f80c 	bl	800c2f4 <__malloc_unlock>
 800c2dc:	e794      	b.n	800c208 <_malloc_r+0x20>
 800c2de:	6005      	str	r5, [r0, #0]
 800c2e0:	e7d6      	b.n	800c290 <_malloc_r+0xa8>
 800c2e2:	bf00      	nop
 800c2e4:	20008c48 	.word	0x20008c48

0800c2e8 <__malloc_lock>:
 800c2e8:	4801      	ldr	r0, [pc, #4]	@ (800c2f0 <__malloc_lock+0x8>)
 800c2ea:	f000 bdf2 	b.w	800ced2 <__retarget_lock_acquire_recursive>
 800c2ee:	bf00      	nop
 800c2f0:	20008d8c 	.word	0x20008d8c

0800c2f4 <__malloc_unlock>:
 800c2f4:	4801      	ldr	r0, [pc, #4]	@ (800c2fc <__malloc_unlock+0x8>)
 800c2f6:	f000 bded 	b.w	800ced4 <__retarget_lock_release_recursive>
 800c2fa:	bf00      	nop
 800c2fc:	20008d8c 	.word	0x20008d8c

0800c300 <__cvt>:
 800c300:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c304:	ec57 6b10 	vmov	r6, r7, d0
 800c308:	2f00      	cmp	r7, #0
 800c30a:	460c      	mov	r4, r1
 800c30c:	4619      	mov	r1, r3
 800c30e:	463b      	mov	r3, r7
 800c310:	bfbb      	ittet	lt
 800c312:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c316:	461f      	movlt	r7, r3
 800c318:	2300      	movge	r3, #0
 800c31a:	232d      	movlt	r3, #45	@ 0x2d
 800c31c:	700b      	strb	r3, [r1, #0]
 800c31e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c320:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c324:	4691      	mov	r9, r2
 800c326:	f023 0820 	bic.w	r8, r3, #32
 800c32a:	bfbc      	itt	lt
 800c32c:	4632      	movlt	r2, r6
 800c32e:	4616      	movlt	r6, r2
 800c330:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c334:	d005      	beq.n	800c342 <__cvt+0x42>
 800c336:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c33a:	d100      	bne.n	800c33e <__cvt+0x3e>
 800c33c:	3401      	adds	r4, #1
 800c33e:	2102      	movs	r1, #2
 800c340:	e000      	b.n	800c344 <__cvt+0x44>
 800c342:	2103      	movs	r1, #3
 800c344:	ab03      	add	r3, sp, #12
 800c346:	9301      	str	r3, [sp, #4]
 800c348:	ab02      	add	r3, sp, #8
 800c34a:	9300      	str	r3, [sp, #0]
 800c34c:	ec47 6b10 	vmov	d0, r6, r7
 800c350:	4653      	mov	r3, sl
 800c352:	4622      	mov	r2, r4
 800c354:	f000 fe68 	bl	800d028 <_dtoa_r>
 800c358:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c35c:	4605      	mov	r5, r0
 800c35e:	d119      	bne.n	800c394 <__cvt+0x94>
 800c360:	f019 0f01 	tst.w	r9, #1
 800c364:	d00e      	beq.n	800c384 <__cvt+0x84>
 800c366:	eb00 0904 	add.w	r9, r0, r4
 800c36a:	2200      	movs	r2, #0
 800c36c:	2300      	movs	r3, #0
 800c36e:	4630      	mov	r0, r6
 800c370:	4639      	mov	r1, r7
 800c372:	f7f4 fbb1 	bl	8000ad8 <__aeabi_dcmpeq>
 800c376:	b108      	cbz	r0, 800c37c <__cvt+0x7c>
 800c378:	f8cd 900c 	str.w	r9, [sp, #12]
 800c37c:	2230      	movs	r2, #48	@ 0x30
 800c37e:	9b03      	ldr	r3, [sp, #12]
 800c380:	454b      	cmp	r3, r9
 800c382:	d31e      	bcc.n	800c3c2 <__cvt+0xc2>
 800c384:	9b03      	ldr	r3, [sp, #12]
 800c386:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c388:	1b5b      	subs	r3, r3, r5
 800c38a:	4628      	mov	r0, r5
 800c38c:	6013      	str	r3, [r2, #0]
 800c38e:	b004      	add	sp, #16
 800c390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c394:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c398:	eb00 0904 	add.w	r9, r0, r4
 800c39c:	d1e5      	bne.n	800c36a <__cvt+0x6a>
 800c39e:	7803      	ldrb	r3, [r0, #0]
 800c3a0:	2b30      	cmp	r3, #48	@ 0x30
 800c3a2:	d10a      	bne.n	800c3ba <__cvt+0xba>
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	4630      	mov	r0, r6
 800c3aa:	4639      	mov	r1, r7
 800c3ac:	f7f4 fb94 	bl	8000ad8 <__aeabi_dcmpeq>
 800c3b0:	b918      	cbnz	r0, 800c3ba <__cvt+0xba>
 800c3b2:	f1c4 0401 	rsb	r4, r4, #1
 800c3b6:	f8ca 4000 	str.w	r4, [sl]
 800c3ba:	f8da 3000 	ldr.w	r3, [sl]
 800c3be:	4499      	add	r9, r3
 800c3c0:	e7d3      	b.n	800c36a <__cvt+0x6a>
 800c3c2:	1c59      	adds	r1, r3, #1
 800c3c4:	9103      	str	r1, [sp, #12]
 800c3c6:	701a      	strb	r2, [r3, #0]
 800c3c8:	e7d9      	b.n	800c37e <__cvt+0x7e>

0800c3ca <__exponent>:
 800c3ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c3cc:	2900      	cmp	r1, #0
 800c3ce:	bfba      	itte	lt
 800c3d0:	4249      	neglt	r1, r1
 800c3d2:	232d      	movlt	r3, #45	@ 0x2d
 800c3d4:	232b      	movge	r3, #43	@ 0x2b
 800c3d6:	2909      	cmp	r1, #9
 800c3d8:	7002      	strb	r2, [r0, #0]
 800c3da:	7043      	strb	r3, [r0, #1]
 800c3dc:	dd29      	ble.n	800c432 <__exponent+0x68>
 800c3de:	f10d 0307 	add.w	r3, sp, #7
 800c3e2:	461d      	mov	r5, r3
 800c3e4:	270a      	movs	r7, #10
 800c3e6:	461a      	mov	r2, r3
 800c3e8:	fbb1 f6f7 	udiv	r6, r1, r7
 800c3ec:	fb07 1416 	mls	r4, r7, r6, r1
 800c3f0:	3430      	adds	r4, #48	@ 0x30
 800c3f2:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c3f6:	460c      	mov	r4, r1
 800c3f8:	2c63      	cmp	r4, #99	@ 0x63
 800c3fa:	f103 33ff 	add.w	r3, r3, #4294967295
 800c3fe:	4631      	mov	r1, r6
 800c400:	dcf1      	bgt.n	800c3e6 <__exponent+0x1c>
 800c402:	3130      	adds	r1, #48	@ 0x30
 800c404:	1e94      	subs	r4, r2, #2
 800c406:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c40a:	1c41      	adds	r1, r0, #1
 800c40c:	4623      	mov	r3, r4
 800c40e:	42ab      	cmp	r3, r5
 800c410:	d30a      	bcc.n	800c428 <__exponent+0x5e>
 800c412:	f10d 0309 	add.w	r3, sp, #9
 800c416:	1a9b      	subs	r3, r3, r2
 800c418:	42ac      	cmp	r4, r5
 800c41a:	bf88      	it	hi
 800c41c:	2300      	movhi	r3, #0
 800c41e:	3302      	adds	r3, #2
 800c420:	4403      	add	r3, r0
 800c422:	1a18      	subs	r0, r3, r0
 800c424:	b003      	add	sp, #12
 800c426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c428:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c42c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c430:	e7ed      	b.n	800c40e <__exponent+0x44>
 800c432:	2330      	movs	r3, #48	@ 0x30
 800c434:	3130      	adds	r1, #48	@ 0x30
 800c436:	7083      	strb	r3, [r0, #2]
 800c438:	70c1      	strb	r1, [r0, #3]
 800c43a:	1d03      	adds	r3, r0, #4
 800c43c:	e7f1      	b.n	800c422 <__exponent+0x58>
	...

0800c440 <_printf_float>:
 800c440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c444:	b08d      	sub	sp, #52	@ 0x34
 800c446:	460c      	mov	r4, r1
 800c448:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c44c:	4616      	mov	r6, r2
 800c44e:	461f      	mov	r7, r3
 800c450:	4605      	mov	r5, r0
 800c452:	f000 fcb9 	bl	800cdc8 <_localeconv_r>
 800c456:	6803      	ldr	r3, [r0, #0]
 800c458:	9304      	str	r3, [sp, #16]
 800c45a:	4618      	mov	r0, r3
 800c45c:	f7f3 ff10 	bl	8000280 <strlen>
 800c460:	2300      	movs	r3, #0
 800c462:	930a      	str	r3, [sp, #40]	@ 0x28
 800c464:	f8d8 3000 	ldr.w	r3, [r8]
 800c468:	9005      	str	r0, [sp, #20]
 800c46a:	3307      	adds	r3, #7
 800c46c:	f023 0307 	bic.w	r3, r3, #7
 800c470:	f103 0208 	add.w	r2, r3, #8
 800c474:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c478:	f8d4 b000 	ldr.w	fp, [r4]
 800c47c:	f8c8 2000 	str.w	r2, [r8]
 800c480:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c484:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c488:	9307      	str	r3, [sp, #28]
 800c48a:	f8cd 8018 	str.w	r8, [sp, #24]
 800c48e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c492:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c496:	4b9c      	ldr	r3, [pc, #624]	@ (800c708 <_printf_float+0x2c8>)
 800c498:	f04f 32ff 	mov.w	r2, #4294967295
 800c49c:	f7f4 fb4e 	bl	8000b3c <__aeabi_dcmpun>
 800c4a0:	bb70      	cbnz	r0, 800c500 <_printf_float+0xc0>
 800c4a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c4a6:	4b98      	ldr	r3, [pc, #608]	@ (800c708 <_printf_float+0x2c8>)
 800c4a8:	f04f 32ff 	mov.w	r2, #4294967295
 800c4ac:	f7f4 fb28 	bl	8000b00 <__aeabi_dcmple>
 800c4b0:	bb30      	cbnz	r0, 800c500 <_printf_float+0xc0>
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	4640      	mov	r0, r8
 800c4b8:	4649      	mov	r1, r9
 800c4ba:	f7f4 fb17 	bl	8000aec <__aeabi_dcmplt>
 800c4be:	b110      	cbz	r0, 800c4c6 <_printf_float+0x86>
 800c4c0:	232d      	movs	r3, #45	@ 0x2d
 800c4c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c4c6:	4a91      	ldr	r2, [pc, #580]	@ (800c70c <_printf_float+0x2cc>)
 800c4c8:	4b91      	ldr	r3, [pc, #580]	@ (800c710 <_printf_float+0x2d0>)
 800c4ca:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c4ce:	bf8c      	ite	hi
 800c4d0:	4690      	movhi	r8, r2
 800c4d2:	4698      	movls	r8, r3
 800c4d4:	2303      	movs	r3, #3
 800c4d6:	6123      	str	r3, [r4, #16]
 800c4d8:	f02b 0304 	bic.w	r3, fp, #4
 800c4dc:	6023      	str	r3, [r4, #0]
 800c4de:	f04f 0900 	mov.w	r9, #0
 800c4e2:	9700      	str	r7, [sp, #0]
 800c4e4:	4633      	mov	r3, r6
 800c4e6:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c4e8:	4621      	mov	r1, r4
 800c4ea:	4628      	mov	r0, r5
 800c4ec:	f000 f9d2 	bl	800c894 <_printf_common>
 800c4f0:	3001      	adds	r0, #1
 800c4f2:	f040 808d 	bne.w	800c610 <_printf_float+0x1d0>
 800c4f6:	f04f 30ff 	mov.w	r0, #4294967295
 800c4fa:	b00d      	add	sp, #52	@ 0x34
 800c4fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c500:	4642      	mov	r2, r8
 800c502:	464b      	mov	r3, r9
 800c504:	4640      	mov	r0, r8
 800c506:	4649      	mov	r1, r9
 800c508:	f7f4 fb18 	bl	8000b3c <__aeabi_dcmpun>
 800c50c:	b140      	cbz	r0, 800c520 <_printf_float+0xe0>
 800c50e:	464b      	mov	r3, r9
 800c510:	2b00      	cmp	r3, #0
 800c512:	bfbc      	itt	lt
 800c514:	232d      	movlt	r3, #45	@ 0x2d
 800c516:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c51a:	4a7e      	ldr	r2, [pc, #504]	@ (800c714 <_printf_float+0x2d4>)
 800c51c:	4b7e      	ldr	r3, [pc, #504]	@ (800c718 <_printf_float+0x2d8>)
 800c51e:	e7d4      	b.n	800c4ca <_printf_float+0x8a>
 800c520:	6863      	ldr	r3, [r4, #4]
 800c522:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c526:	9206      	str	r2, [sp, #24]
 800c528:	1c5a      	adds	r2, r3, #1
 800c52a:	d13b      	bne.n	800c5a4 <_printf_float+0x164>
 800c52c:	2306      	movs	r3, #6
 800c52e:	6063      	str	r3, [r4, #4]
 800c530:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c534:	2300      	movs	r3, #0
 800c536:	6022      	str	r2, [r4, #0]
 800c538:	9303      	str	r3, [sp, #12]
 800c53a:	ab0a      	add	r3, sp, #40	@ 0x28
 800c53c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c540:	ab09      	add	r3, sp, #36	@ 0x24
 800c542:	9300      	str	r3, [sp, #0]
 800c544:	6861      	ldr	r1, [r4, #4]
 800c546:	ec49 8b10 	vmov	d0, r8, r9
 800c54a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c54e:	4628      	mov	r0, r5
 800c550:	f7ff fed6 	bl	800c300 <__cvt>
 800c554:	9b06      	ldr	r3, [sp, #24]
 800c556:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c558:	2b47      	cmp	r3, #71	@ 0x47
 800c55a:	4680      	mov	r8, r0
 800c55c:	d129      	bne.n	800c5b2 <_printf_float+0x172>
 800c55e:	1cc8      	adds	r0, r1, #3
 800c560:	db02      	blt.n	800c568 <_printf_float+0x128>
 800c562:	6863      	ldr	r3, [r4, #4]
 800c564:	4299      	cmp	r1, r3
 800c566:	dd41      	ble.n	800c5ec <_printf_float+0x1ac>
 800c568:	f1aa 0a02 	sub.w	sl, sl, #2
 800c56c:	fa5f fa8a 	uxtb.w	sl, sl
 800c570:	3901      	subs	r1, #1
 800c572:	4652      	mov	r2, sl
 800c574:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c578:	9109      	str	r1, [sp, #36]	@ 0x24
 800c57a:	f7ff ff26 	bl	800c3ca <__exponent>
 800c57e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c580:	1813      	adds	r3, r2, r0
 800c582:	2a01      	cmp	r2, #1
 800c584:	4681      	mov	r9, r0
 800c586:	6123      	str	r3, [r4, #16]
 800c588:	dc02      	bgt.n	800c590 <_printf_float+0x150>
 800c58a:	6822      	ldr	r2, [r4, #0]
 800c58c:	07d2      	lsls	r2, r2, #31
 800c58e:	d501      	bpl.n	800c594 <_printf_float+0x154>
 800c590:	3301      	adds	r3, #1
 800c592:	6123      	str	r3, [r4, #16]
 800c594:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d0a2      	beq.n	800c4e2 <_printf_float+0xa2>
 800c59c:	232d      	movs	r3, #45	@ 0x2d
 800c59e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c5a2:	e79e      	b.n	800c4e2 <_printf_float+0xa2>
 800c5a4:	9a06      	ldr	r2, [sp, #24]
 800c5a6:	2a47      	cmp	r2, #71	@ 0x47
 800c5a8:	d1c2      	bne.n	800c530 <_printf_float+0xf0>
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d1c0      	bne.n	800c530 <_printf_float+0xf0>
 800c5ae:	2301      	movs	r3, #1
 800c5b0:	e7bd      	b.n	800c52e <_printf_float+0xee>
 800c5b2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c5b6:	d9db      	bls.n	800c570 <_printf_float+0x130>
 800c5b8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c5bc:	d118      	bne.n	800c5f0 <_printf_float+0x1b0>
 800c5be:	2900      	cmp	r1, #0
 800c5c0:	6863      	ldr	r3, [r4, #4]
 800c5c2:	dd0b      	ble.n	800c5dc <_printf_float+0x19c>
 800c5c4:	6121      	str	r1, [r4, #16]
 800c5c6:	b913      	cbnz	r3, 800c5ce <_printf_float+0x18e>
 800c5c8:	6822      	ldr	r2, [r4, #0]
 800c5ca:	07d0      	lsls	r0, r2, #31
 800c5cc:	d502      	bpl.n	800c5d4 <_printf_float+0x194>
 800c5ce:	3301      	adds	r3, #1
 800c5d0:	440b      	add	r3, r1
 800c5d2:	6123      	str	r3, [r4, #16]
 800c5d4:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c5d6:	f04f 0900 	mov.w	r9, #0
 800c5da:	e7db      	b.n	800c594 <_printf_float+0x154>
 800c5dc:	b913      	cbnz	r3, 800c5e4 <_printf_float+0x1a4>
 800c5de:	6822      	ldr	r2, [r4, #0]
 800c5e0:	07d2      	lsls	r2, r2, #31
 800c5e2:	d501      	bpl.n	800c5e8 <_printf_float+0x1a8>
 800c5e4:	3302      	adds	r3, #2
 800c5e6:	e7f4      	b.n	800c5d2 <_printf_float+0x192>
 800c5e8:	2301      	movs	r3, #1
 800c5ea:	e7f2      	b.n	800c5d2 <_printf_float+0x192>
 800c5ec:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c5f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c5f2:	4299      	cmp	r1, r3
 800c5f4:	db05      	blt.n	800c602 <_printf_float+0x1c2>
 800c5f6:	6823      	ldr	r3, [r4, #0]
 800c5f8:	6121      	str	r1, [r4, #16]
 800c5fa:	07d8      	lsls	r0, r3, #31
 800c5fc:	d5ea      	bpl.n	800c5d4 <_printf_float+0x194>
 800c5fe:	1c4b      	adds	r3, r1, #1
 800c600:	e7e7      	b.n	800c5d2 <_printf_float+0x192>
 800c602:	2900      	cmp	r1, #0
 800c604:	bfd4      	ite	le
 800c606:	f1c1 0202 	rsble	r2, r1, #2
 800c60a:	2201      	movgt	r2, #1
 800c60c:	4413      	add	r3, r2
 800c60e:	e7e0      	b.n	800c5d2 <_printf_float+0x192>
 800c610:	6823      	ldr	r3, [r4, #0]
 800c612:	055a      	lsls	r2, r3, #21
 800c614:	d407      	bmi.n	800c626 <_printf_float+0x1e6>
 800c616:	6923      	ldr	r3, [r4, #16]
 800c618:	4642      	mov	r2, r8
 800c61a:	4631      	mov	r1, r6
 800c61c:	4628      	mov	r0, r5
 800c61e:	47b8      	blx	r7
 800c620:	3001      	adds	r0, #1
 800c622:	d12b      	bne.n	800c67c <_printf_float+0x23c>
 800c624:	e767      	b.n	800c4f6 <_printf_float+0xb6>
 800c626:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c62a:	f240 80dd 	bls.w	800c7e8 <_printf_float+0x3a8>
 800c62e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c632:	2200      	movs	r2, #0
 800c634:	2300      	movs	r3, #0
 800c636:	f7f4 fa4f 	bl	8000ad8 <__aeabi_dcmpeq>
 800c63a:	2800      	cmp	r0, #0
 800c63c:	d033      	beq.n	800c6a6 <_printf_float+0x266>
 800c63e:	4a37      	ldr	r2, [pc, #220]	@ (800c71c <_printf_float+0x2dc>)
 800c640:	2301      	movs	r3, #1
 800c642:	4631      	mov	r1, r6
 800c644:	4628      	mov	r0, r5
 800c646:	47b8      	blx	r7
 800c648:	3001      	adds	r0, #1
 800c64a:	f43f af54 	beq.w	800c4f6 <_printf_float+0xb6>
 800c64e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c652:	4543      	cmp	r3, r8
 800c654:	db02      	blt.n	800c65c <_printf_float+0x21c>
 800c656:	6823      	ldr	r3, [r4, #0]
 800c658:	07d8      	lsls	r0, r3, #31
 800c65a:	d50f      	bpl.n	800c67c <_printf_float+0x23c>
 800c65c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c660:	4631      	mov	r1, r6
 800c662:	4628      	mov	r0, r5
 800c664:	47b8      	blx	r7
 800c666:	3001      	adds	r0, #1
 800c668:	f43f af45 	beq.w	800c4f6 <_printf_float+0xb6>
 800c66c:	f04f 0900 	mov.w	r9, #0
 800c670:	f108 38ff 	add.w	r8, r8, #4294967295
 800c674:	f104 0a1a 	add.w	sl, r4, #26
 800c678:	45c8      	cmp	r8, r9
 800c67a:	dc09      	bgt.n	800c690 <_printf_float+0x250>
 800c67c:	6823      	ldr	r3, [r4, #0]
 800c67e:	079b      	lsls	r3, r3, #30
 800c680:	f100 8103 	bmi.w	800c88a <_printf_float+0x44a>
 800c684:	68e0      	ldr	r0, [r4, #12]
 800c686:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c688:	4298      	cmp	r0, r3
 800c68a:	bfb8      	it	lt
 800c68c:	4618      	movlt	r0, r3
 800c68e:	e734      	b.n	800c4fa <_printf_float+0xba>
 800c690:	2301      	movs	r3, #1
 800c692:	4652      	mov	r2, sl
 800c694:	4631      	mov	r1, r6
 800c696:	4628      	mov	r0, r5
 800c698:	47b8      	blx	r7
 800c69a:	3001      	adds	r0, #1
 800c69c:	f43f af2b 	beq.w	800c4f6 <_printf_float+0xb6>
 800c6a0:	f109 0901 	add.w	r9, r9, #1
 800c6a4:	e7e8      	b.n	800c678 <_printf_float+0x238>
 800c6a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	dc39      	bgt.n	800c720 <_printf_float+0x2e0>
 800c6ac:	4a1b      	ldr	r2, [pc, #108]	@ (800c71c <_printf_float+0x2dc>)
 800c6ae:	2301      	movs	r3, #1
 800c6b0:	4631      	mov	r1, r6
 800c6b2:	4628      	mov	r0, r5
 800c6b4:	47b8      	blx	r7
 800c6b6:	3001      	adds	r0, #1
 800c6b8:	f43f af1d 	beq.w	800c4f6 <_printf_float+0xb6>
 800c6bc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c6c0:	ea59 0303 	orrs.w	r3, r9, r3
 800c6c4:	d102      	bne.n	800c6cc <_printf_float+0x28c>
 800c6c6:	6823      	ldr	r3, [r4, #0]
 800c6c8:	07d9      	lsls	r1, r3, #31
 800c6ca:	d5d7      	bpl.n	800c67c <_printf_float+0x23c>
 800c6cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c6d0:	4631      	mov	r1, r6
 800c6d2:	4628      	mov	r0, r5
 800c6d4:	47b8      	blx	r7
 800c6d6:	3001      	adds	r0, #1
 800c6d8:	f43f af0d 	beq.w	800c4f6 <_printf_float+0xb6>
 800c6dc:	f04f 0a00 	mov.w	sl, #0
 800c6e0:	f104 0b1a 	add.w	fp, r4, #26
 800c6e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6e6:	425b      	negs	r3, r3
 800c6e8:	4553      	cmp	r3, sl
 800c6ea:	dc01      	bgt.n	800c6f0 <_printf_float+0x2b0>
 800c6ec:	464b      	mov	r3, r9
 800c6ee:	e793      	b.n	800c618 <_printf_float+0x1d8>
 800c6f0:	2301      	movs	r3, #1
 800c6f2:	465a      	mov	r2, fp
 800c6f4:	4631      	mov	r1, r6
 800c6f6:	4628      	mov	r0, r5
 800c6f8:	47b8      	blx	r7
 800c6fa:	3001      	adds	r0, #1
 800c6fc:	f43f aefb 	beq.w	800c4f6 <_printf_float+0xb6>
 800c700:	f10a 0a01 	add.w	sl, sl, #1
 800c704:	e7ee      	b.n	800c6e4 <_printf_float+0x2a4>
 800c706:	bf00      	nop
 800c708:	7fefffff 	.word	0x7fefffff
 800c70c:	0800f0c8 	.word	0x0800f0c8
 800c710:	0800f0c4 	.word	0x0800f0c4
 800c714:	0800f0d0 	.word	0x0800f0d0
 800c718:	0800f0cc 	.word	0x0800f0cc
 800c71c:	0800f0d4 	.word	0x0800f0d4
 800c720:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c722:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c726:	4553      	cmp	r3, sl
 800c728:	bfa8      	it	ge
 800c72a:	4653      	movge	r3, sl
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	4699      	mov	r9, r3
 800c730:	dc36      	bgt.n	800c7a0 <_printf_float+0x360>
 800c732:	f04f 0b00 	mov.w	fp, #0
 800c736:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c73a:	f104 021a 	add.w	r2, r4, #26
 800c73e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c740:	9306      	str	r3, [sp, #24]
 800c742:	eba3 0309 	sub.w	r3, r3, r9
 800c746:	455b      	cmp	r3, fp
 800c748:	dc31      	bgt.n	800c7ae <_printf_float+0x36e>
 800c74a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c74c:	459a      	cmp	sl, r3
 800c74e:	dc3a      	bgt.n	800c7c6 <_printf_float+0x386>
 800c750:	6823      	ldr	r3, [r4, #0]
 800c752:	07da      	lsls	r2, r3, #31
 800c754:	d437      	bmi.n	800c7c6 <_printf_float+0x386>
 800c756:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c758:	ebaa 0903 	sub.w	r9, sl, r3
 800c75c:	9b06      	ldr	r3, [sp, #24]
 800c75e:	ebaa 0303 	sub.w	r3, sl, r3
 800c762:	4599      	cmp	r9, r3
 800c764:	bfa8      	it	ge
 800c766:	4699      	movge	r9, r3
 800c768:	f1b9 0f00 	cmp.w	r9, #0
 800c76c:	dc33      	bgt.n	800c7d6 <_printf_float+0x396>
 800c76e:	f04f 0800 	mov.w	r8, #0
 800c772:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c776:	f104 0b1a 	add.w	fp, r4, #26
 800c77a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c77c:	ebaa 0303 	sub.w	r3, sl, r3
 800c780:	eba3 0309 	sub.w	r3, r3, r9
 800c784:	4543      	cmp	r3, r8
 800c786:	f77f af79 	ble.w	800c67c <_printf_float+0x23c>
 800c78a:	2301      	movs	r3, #1
 800c78c:	465a      	mov	r2, fp
 800c78e:	4631      	mov	r1, r6
 800c790:	4628      	mov	r0, r5
 800c792:	47b8      	blx	r7
 800c794:	3001      	adds	r0, #1
 800c796:	f43f aeae 	beq.w	800c4f6 <_printf_float+0xb6>
 800c79a:	f108 0801 	add.w	r8, r8, #1
 800c79e:	e7ec      	b.n	800c77a <_printf_float+0x33a>
 800c7a0:	4642      	mov	r2, r8
 800c7a2:	4631      	mov	r1, r6
 800c7a4:	4628      	mov	r0, r5
 800c7a6:	47b8      	blx	r7
 800c7a8:	3001      	adds	r0, #1
 800c7aa:	d1c2      	bne.n	800c732 <_printf_float+0x2f2>
 800c7ac:	e6a3      	b.n	800c4f6 <_printf_float+0xb6>
 800c7ae:	2301      	movs	r3, #1
 800c7b0:	4631      	mov	r1, r6
 800c7b2:	4628      	mov	r0, r5
 800c7b4:	9206      	str	r2, [sp, #24]
 800c7b6:	47b8      	blx	r7
 800c7b8:	3001      	adds	r0, #1
 800c7ba:	f43f ae9c 	beq.w	800c4f6 <_printf_float+0xb6>
 800c7be:	9a06      	ldr	r2, [sp, #24]
 800c7c0:	f10b 0b01 	add.w	fp, fp, #1
 800c7c4:	e7bb      	b.n	800c73e <_printf_float+0x2fe>
 800c7c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c7ca:	4631      	mov	r1, r6
 800c7cc:	4628      	mov	r0, r5
 800c7ce:	47b8      	blx	r7
 800c7d0:	3001      	adds	r0, #1
 800c7d2:	d1c0      	bne.n	800c756 <_printf_float+0x316>
 800c7d4:	e68f      	b.n	800c4f6 <_printf_float+0xb6>
 800c7d6:	9a06      	ldr	r2, [sp, #24]
 800c7d8:	464b      	mov	r3, r9
 800c7da:	4442      	add	r2, r8
 800c7dc:	4631      	mov	r1, r6
 800c7de:	4628      	mov	r0, r5
 800c7e0:	47b8      	blx	r7
 800c7e2:	3001      	adds	r0, #1
 800c7e4:	d1c3      	bne.n	800c76e <_printf_float+0x32e>
 800c7e6:	e686      	b.n	800c4f6 <_printf_float+0xb6>
 800c7e8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c7ec:	f1ba 0f01 	cmp.w	sl, #1
 800c7f0:	dc01      	bgt.n	800c7f6 <_printf_float+0x3b6>
 800c7f2:	07db      	lsls	r3, r3, #31
 800c7f4:	d536      	bpl.n	800c864 <_printf_float+0x424>
 800c7f6:	2301      	movs	r3, #1
 800c7f8:	4642      	mov	r2, r8
 800c7fa:	4631      	mov	r1, r6
 800c7fc:	4628      	mov	r0, r5
 800c7fe:	47b8      	blx	r7
 800c800:	3001      	adds	r0, #1
 800c802:	f43f ae78 	beq.w	800c4f6 <_printf_float+0xb6>
 800c806:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c80a:	4631      	mov	r1, r6
 800c80c:	4628      	mov	r0, r5
 800c80e:	47b8      	blx	r7
 800c810:	3001      	adds	r0, #1
 800c812:	f43f ae70 	beq.w	800c4f6 <_printf_float+0xb6>
 800c816:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c81a:	2200      	movs	r2, #0
 800c81c:	2300      	movs	r3, #0
 800c81e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c822:	f7f4 f959 	bl	8000ad8 <__aeabi_dcmpeq>
 800c826:	b9c0      	cbnz	r0, 800c85a <_printf_float+0x41a>
 800c828:	4653      	mov	r3, sl
 800c82a:	f108 0201 	add.w	r2, r8, #1
 800c82e:	4631      	mov	r1, r6
 800c830:	4628      	mov	r0, r5
 800c832:	47b8      	blx	r7
 800c834:	3001      	adds	r0, #1
 800c836:	d10c      	bne.n	800c852 <_printf_float+0x412>
 800c838:	e65d      	b.n	800c4f6 <_printf_float+0xb6>
 800c83a:	2301      	movs	r3, #1
 800c83c:	465a      	mov	r2, fp
 800c83e:	4631      	mov	r1, r6
 800c840:	4628      	mov	r0, r5
 800c842:	47b8      	blx	r7
 800c844:	3001      	adds	r0, #1
 800c846:	f43f ae56 	beq.w	800c4f6 <_printf_float+0xb6>
 800c84a:	f108 0801 	add.w	r8, r8, #1
 800c84e:	45d0      	cmp	r8, sl
 800c850:	dbf3      	blt.n	800c83a <_printf_float+0x3fa>
 800c852:	464b      	mov	r3, r9
 800c854:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c858:	e6df      	b.n	800c61a <_printf_float+0x1da>
 800c85a:	f04f 0800 	mov.w	r8, #0
 800c85e:	f104 0b1a 	add.w	fp, r4, #26
 800c862:	e7f4      	b.n	800c84e <_printf_float+0x40e>
 800c864:	2301      	movs	r3, #1
 800c866:	4642      	mov	r2, r8
 800c868:	e7e1      	b.n	800c82e <_printf_float+0x3ee>
 800c86a:	2301      	movs	r3, #1
 800c86c:	464a      	mov	r2, r9
 800c86e:	4631      	mov	r1, r6
 800c870:	4628      	mov	r0, r5
 800c872:	47b8      	blx	r7
 800c874:	3001      	adds	r0, #1
 800c876:	f43f ae3e 	beq.w	800c4f6 <_printf_float+0xb6>
 800c87a:	f108 0801 	add.w	r8, r8, #1
 800c87e:	68e3      	ldr	r3, [r4, #12]
 800c880:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c882:	1a5b      	subs	r3, r3, r1
 800c884:	4543      	cmp	r3, r8
 800c886:	dcf0      	bgt.n	800c86a <_printf_float+0x42a>
 800c888:	e6fc      	b.n	800c684 <_printf_float+0x244>
 800c88a:	f04f 0800 	mov.w	r8, #0
 800c88e:	f104 0919 	add.w	r9, r4, #25
 800c892:	e7f4      	b.n	800c87e <_printf_float+0x43e>

0800c894 <_printf_common>:
 800c894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c898:	4616      	mov	r6, r2
 800c89a:	4698      	mov	r8, r3
 800c89c:	688a      	ldr	r2, [r1, #8]
 800c89e:	690b      	ldr	r3, [r1, #16]
 800c8a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c8a4:	4293      	cmp	r3, r2
 800c8a6:	bfb8      	it	lt
 800c8a8:	4613      	movlt	r3, r2
 800c8aa:	6033      	str	r3, [r6, #0]
 800c8ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c8b0:	4607      	mov	r7, r0
 800c8b2:	460c      	mov	r4, r1
 800c8b4:	b10a      	cbz	r2, 800c8ba <_printf_common+0x26>
 800c8b6:	3301      	adds	r3, #1
 800c8b8:	6033      	str	r3, [r6, #0]
 800c8ba:	6823      	ldr	r3, [r4, #0]
 800c8bc:	0699      	lsls	r1, r3, #26
 800c8be:	bf42      	ittt	mi
 800c8c0:	6833      	ldrmi	r3, [r6, #0]
 800c8c2:	3302      	addmi	r3, #2
 800c8c4:	6033      	strmi	r3, [r6, #0]
 800c8c6:	6825      	ldr	r5, [r4, #0]
 800c8c8:	f015 0506 	ands.w	r5, r5, #6
 800c8cc:	d106      	bne.n	800c8dc <_printf_common+0x48>
 800c8ce:	f104 0a19 	add.w	sl, r4, #25
 800c8d2:	68e3      	ldr	r3, [r4, #12]
 800c8d4:	6832      	ldr	r2, [r6, #0]
 800c8d6:	1a9b      	subs	r3, r3, r2
 800c8d8:	42ab      	cmp	r3, r5
 800c8da:	dc26      	bgt.n	800c92a <_printf_common+0x96>
 800c8dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c8e0:	6822      	ldr	r2, [r4, #0]
 800c8e2:	3b00      	subs	r3, #0
 800c8e4:	bf18      	it	ne
 800c8e6:	2301      	movne	r3, #1
 800c8e8:	0692      	lsls	r2, r2, #26
 800c8ea:	d42b      	bmi.n	800c944 <_printf_common+0xb0>
 800c8ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c8f0:	4641      	mov	r1, r8
 800c8f2:	4638      	mov	r0, r7
 800c8f4:	47c8      	blx	r9
 800c8f6:	3001      	adds	r0, #1
 800c8f8:	d01e      	beq.n	800c938 <_printf_common+0xa4>
 800c8fa:	6823      	ldr	r3, [r4, #0]
 800c8fc:	6922      	ldr	r2, [r4, #16]
 800c8fe:	f003 0306 	and.w	r3, r3, #6
 800c902:	2b04      	cmp	r3, #4
 800c904:	bf02      	ittt	eq
 800c906:	68e5      	ldreq	r5, [r4, #12]
 800c908:	6833      	ldreq	r3, [r6, #0]
 800c90a:	1aed      	subeq	r5, r5, r3
 800c90c:	68a3      	ldr	r3, [r4, #8]
 800c90e:	bf0c      	ite	eq
 800c910:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c914:	2500      	movne	r5, #0
 800c916:	4293      	cmp	r3, r2
 800c918:	bfc4      	itt	gt
 800c91a:	1a9b      	subgt	r3, r3, r2
 800c91c:	18ed      	addgt	r5, r5, r3
 800c91e:	2600      	movs	r6, #0
 800c920:	341a      	adds	r4, #26
 800c922:	42b5      	cmp	r5, r6
 800c924:	d11a      	bne.n	800c95c <_printf_common+0xc8>
 800c926:	2000      	movs	r0, #0
 800c928:	e008      	b.n	800c93c <_printf_common+0xa8>
 800c92a:	2301      	movs	r3, #1
 800c92c:	4652      	mov	r2, sl
 800c92e:	4641      	mov	r1, r8
 800c930:	4638      	mov	r0, r7
 800c932:	47c8      	blx	r9
 800c934:	3001      	adds	r0, #1
 800c936:	d103      	bne.n	800c940 <_printf_common+0xac>
 800c938:	f04f 30ff 	mov.w	r0, #4294967295
 800c93c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c940:	3501      	adds	r5, #1
 800c942:	e7c6      	b.n	800c8d2 <_printf_common+0x3e>
 800c944:	18e1      	adds	r1, r4, r3
 800c946:	1c5a      	adds	r2, r3, #1
 800c948:	2030      	movs	r0, #48	@ 0x30
 800c94a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c94e:	4422      	add	r2, r4
 800c950:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c954:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c958:	3302      	adds	r3, #2
 800c95a:	e7c7      	b.n	800c8ec <_printf_common+0x58>
 800c95c:	2301      	movs	r3, #1
 800c95e:	4622      	mov	r2, r4
 800c960:	4641      	mov	r1, r8
 800c962:	4638      	mov	r0, r7
 800c964:	47c8      	blx	r9
 800c966:	3001      	adds	r0, #1
 800c968:	d0e6      	beq.n	800c938 <_printf_common+0xa4>
 800c96a:	3601      	adds	r6, #1
 800c96c:	e7d9      	b.n	800c922 <_printf_common+0x8e>
	...

0800c970 <_printf_i>:
 800c970:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c974:	7e0f      	ldrb	r7, [r1, #24]
 800c976:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c978:	2f78      	cmp	r7, #120	@ 0x78
 800c97a:	4691      	mov	r9, r2
 800c97c:	4680      	mov	r8, r0
 800c97e:	460c      	mov	r4, r1
 800c980:	469a      	mov	sl, r3
 800c982:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c986:	d807      	bhi.n	800c998 <_printf_i+0x28>
 800c988:	2f62      	cmp	r7, #98	@ 0x62
 800c98a:	d80a      	bhi.n	800c9a2 <_printf_i+0x32>
 800c98c:	2f00      	cmp	r7, #0
 800c98e:	f000 80d1 	beq.w	800cb34 <_printf_i+0x1c4>
 800c992:	2f58      	cmp	r7, #88	@ 0x58
 800c994:	f000 80b8 	beq.w	800cb08 <_printf_i+0x198>
 800c998:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c99c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c9a0:	e03a      	b.n	800ca18 <_printf_i+0xa8>
 800c9a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c9a6:	2b15      	cmp	r3, #21
 800c9a8:	d8f6      	bhi.n	800c998 <_printf_i+0x28>
 800c9aa:	a101      	add	r1, pc, #4	@ (adr r1, 800c9b0 <_printf_i+0x40>)
 800c9ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c9b0:	0800ca09 	.word	0x0800ca09
 800c9b4:	0800ca1d 	.word	0x0800ca1d
 800c9b8:	0800c999 	.word	0x0800c999
 800c9bc:	0800c999 	.word	0x0800c999
 800c9c0:	0800c999 	.word	0x0800c999
 800c9c4:	0800c999 	.word	0x0800c999
 800c9c8:	0800ca1d 	.word	0x0800ca1d
 800c9cc:	0800c999 	.word	0x0800c999
 800c9d0:	0800c999 	.word	0x0800c999
 800c9d4:	0800c999 	.word	0x0800c999
 800c9d8:	0800c999 	.word	0x0800c999
 800c9dc:	0800cb1b 	.word	0x0800cb1b
 800c9e0:	0800ca47 	.word	0x0800ca47
 800c9e4:	0800cad5 	.word	0x0800cad5
 800c9e8:	0800c999 	.word	0x0800c999
 800c9ec:	0800c999 	.word	0x0800c999
 800c9f0:	0800cb3d 	.word	0x0800cb3d
 800c9f4:	0800c999 	.word	0x0800c999
 800c9f8:	0800ca47 	.word	0x0800ca47
 800c9fc:	0800c999 	.word	0x0800c999
 800ca00:	0800c999 	.word	0x0800c999
 800ca04:	0800cadd 	.word	0x0800cadd
 800ca08:	6833      	ldr	r3, [r6, #0]
 800ca0a:	1d1a      	adds	r2, r3, #4
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	6032      	str	r2, [r6, #0]
 800ca10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ca14:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ca18:	2301      	movs	r3, #1
 800ca1a:	e09c      	b.n	800cb56 <_printf_i+0x1e6>
 800ca1c:	6833      	ldr	r3, [r6, #0]
 800ca1e:	6820      	ldr	r0, [r4, #0]
 800ca20:	1d19      	adds	r1, r3, #4
 800ca22:	6031      	str	r1, [r6, #0]
 800ca24:	0606      	lsls	r6, r0, #24
 800ca26:	d501      	bpl.n	800ca2c <_printf_i+0xbc>
 800ca28:	681d      	ldr	r5, [r3, #0]
 800ca2a:	e003      	b.n	800ca34 <_printf_i+0xc4>
 800ca2c:	0645      	lsls	r5, r0, #25
 800ca2e:	d5fb      	bpl.n	800ca28 <_printf_i+0xb8>
 800ca30:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ca34:	2d00      	cmp	r5, #0
 800ca36:	da03      	bge.n	800ca40 <_printf_i+0xd0>
 800ca38:	232d      	movs	r3, #45	@ 0x2d
 800ca3a:	426d      	negs	r5, r5
 800ca3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ca40:	4858      	ldr	r0, [pc, #352]	@ (800cba4 <_printf_i+0x234>)
 800ca42:	230a      	movs	r3, #10
 800ca44:	e011      	b.n	800ca6a <_printf_i+0xfa>
 800ca46:	6821      	ldr	r1, [r4, #0]
 800ca48:	6833      	ldr	r3, [r6, #0]
 800ca4a:	0608      	lsls	r0, r1, #24
 800ca4c:	f853 5b04 	ldr.w	r5, [r3], #4
 800ca50:	d402      	bmi.n	800ca58 <_printf_i+0xe8>
 800ca52:	0649      	lsls	r1, r1, #25
 800ca54:	bf48      	it	mi
 800ca56:	b2ad      	uxthmi	r5, r5
 800ca58:	2f6f      	cmp	r7, #111	@ 0x6f
 800ca5a:	4852      	ldr	r0, [pc, #328]	@ (800cba4 <_printf_i+0x234>)
 800ca5c:	6033      	str	r3, [r6, #0]
 800ca5e:	bf14      	ite	ne
 800ca60:	230a      	movne	r3, #10
 800ca62:	2308      	moveq	r3, #8
 800ca64:	2100      	movs	r1, #0
 800ca66:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ca6a:	6866      	ldr	r6, [r4, #4]
 800ca6c:	60a6      	str	r6, [r4, #8]
 800ca6e:	2e00      	cmp	r6, #0
 800ca70:	db05      	blt.n	800ca7e <_printf_i+0x10e>
 800ca72:	6821      	ldr	r1, [r4, #0]
 800ca74:	432e      	orrs	r6, r5
 800ca76:	f021 0104 	bic.w	r1, r1, #4
 800ca7a:	6021      	str	r1, [r4, #0]
 800ca7c:	d04b      	beq.n	800cb16 <_printf_i+0x1a6>
 800ca7e:	4616      	mov	r6, r2
 800ca80:	fbb5 f1f3 	udiv	r1, r5, r3
 800ca84:	fb03 5711 	mls	r7, r3, r1, r5
 800ca88:	5dc7      	ldrb	r7, [r0, r7]
 800ca8a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ca8e:	462f      	mov	r7, r5
 800ca90:	42bb      	cmp	r3, r7
 800ca92:	460d      	mov	r5, r1
 800ca94:	d9f4      	bls.n	800ca80 <_printf_i+0x110>
 800ca96:	2b08      	cmp	r3, #8
 800ca98:	d10b      	bne.n	800cab2 <_printf_i+0x142>
 800ca9a:	6823      	ldr	r3, [r4, #0]
 800ca9c:	07df      	lsls	r7, r3, #31
 800ca9e:	d508      	bpl.n	800cab2 <_printf_i+0x142>
 800caa0:	6923      	ldr	r3, [r4, #16]
 800caa2:	6861      	ldr	r1, [r4, #4]
 800caa4:	4299      	cmp	r1, r3
 800caa6:	bfde      	ittt	le
 800caa8:	2330      	movle	r3, #48	@ 0x30
 800caaa:	f806 3c01 	strble.w	r3, [r6, #-1]
 800caae:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cab2:	1b92      	subs	r2, r2, r6
 800cab4:	6122      	str	r2, [r4, #16]
 800cab6:	f8cd a000 	str.w	sl, [sp]
 800caba:	464b      	mov	r3, r9
 800cabc:	aa03      	add	r2, sp, #12
 800cabe:	4621      	mov	r1, r4
 800cac0:	4640      	mov	r0, r8
 800cac2:	f7ff fee7 	bl	800c894 <_printf_common>
 800cac6:	3001      	adds	r0, #1
 800cac8:	d14a      	bne.n	800cb60 <_printf_i+0x1f0>
 800caca:	f04f 30ff 	mov.w	r0, #4294967295
 800cace:	b004      	add	sp, #16
 800cad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cad4:	6823      	ldr	r3, [r4, #0]
 800cad6:	f043 0320 	orr.w	r3, r3, #32
 800cada:	6023      	str	r3, [r4, #0]
 800cadc:	4832      	ldr	r0, [pc, #200]	@ (800cba8 <_printf_i+0x238>)
 800cade:	2778      	movs	r7, #120	@ 0x78
 800cae0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cae4:	6823      	ldr	r3, [r4, #0]
 800cae6:	6831      	ldr	r1, [r6, #0]
 800cae8:	061f      	lsls	r7, r3, #24
 800caea:	f851 5b04 	ldr.w	r5, [r1], #4
 800caee:	d402      	bmi.n	800caf6 <_printf_i+0x186>
 800caf0:	065f      	lsls	r7, r3, #25
 800caf2:	bf48      	it	mi
 800caf4:	b2ad      	uxthmi	r5, r5
 800caf6:	6031      	str	r1, [r6, #0]
 800caf8:	07d9      	lsls	r1, r3, #31
 800cafa:	bf44      	itt	mi
 800cafc:	f043 0320 	orrmi.w	r3, r3, #32
 800cb00:	6023      	strmi	r3, [r4, #0]
 800cb02:	b11d      	cbz	r5, 800cb0c <_printf_i+0x19c>
 800cb04:	2310      	movs	r3, #16
 800cb06:	e7ad      	b.n	800ca64 <_printf_i+0xf4>
 800cb08:	4826      	ldr	r0, [pc, #152]	@ (800cba4 <_printf_i+0x234>)
 800cb0a:	e7e9      	b.n	800cae0 <_printf_i+0x170>
 800cb0c:	6823      	ldr	r3, [r4, #0]
 800cb0e:	f023 0320 	bic.w	r3, r3, #32
 800cb12:	6023      	str	r3, [r4, #0]
 800cb14:	e7f6      	b.n	800cb04 <_printf_i+0x194>
 800cb16:	4616      	mov	r6, r2
 800cb18:	e7bd      	b.n	800ca96 <_printf_i+0x126>
 800cb1a:	6833      	ldr	r3, [r6, #0]
 800cb1c:	6825      	ldr	r5, [r4, #0]
 800cb1e:	6961      	ldr	r1, [r4, #20]
 800cb20:	1d18      	adds	r0, r3, #4
 800cb22:	6030      	str	r0, [r6, #0]
 800cb24:	062e      	lsls	r6, r5, #24
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	d501      	bpl.n	800cb2e <_printf_i+0x1be>
 800cb2a:	6019      	str	r1, [r3, #0]
 800cb2c:	e002      	b.n	800cb34 <_printf_i+0x1c4>
 800cb2e:	0668      	lsls	r0, r5, #25
 800cb30:	d5fb      	bpl.n	800cb2a <_printf_i+0x1ba>
 800cb32:	8019      	strh	r1, [r3, #0]
 800cb34:	2300      	movs	r3, #0
 800cb36:	6123      	str	r3, [r4, #16]
 800cb38:	4616      	mov	r6, r2
 800cb3a:	e7bc      	b.n	800cab6 <_printf_i+0x146>
 800cb3c:	6833      	ldr	r3, [r6, #0]
 800cb3e:	1d1a      	adds	r2, r3, #4
 800cb40:	6032      	str	r2, [r6, #0]
 800cb42:	681e      	ldr	r6, [r3, #0]
 800cb44:	6862      	ldr	r2, [r4, #4]
 800cb46:	2100      	movs	r1, #0
 800cb48:	4630      	mov	r0, r6
 800cb4a:	f7f3 fb49 	bl	80001e0 <memchr>
 800cb4e:	b108      	cbz	r0, 800cb54 <_printf_i+0x1e4>
 800cb50:	1b80      	subs	r0, r0, r6
 800cb52:	6060      	str	r0, [r4, #4]
 800cb54:	6863      	ldr	r3, [r4, #4]
 800cb56:	6123      	str	r3, [r4, #16]
 800cb58:	2300      	movs	r3, #0
 800cb5a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cb5e:	e7aa      	b.n	800cab6 <_printf_i+0x146>
 800cb60:	6923      	ldr	r3, [r4, #16]
 800cb62:	4632      	mov	r2, r6
 800cb64:	4649      	mov	r1, r9
 800cb66:	4640      	mov	r0, r8
 800cb68:	47d0      	blx	sl
 800cb6a:	3001      	adds	r0, #1
 800cb6c:	d0ad      	beq.n	800caca <_printf_i+0x15a>
 800cb6e:	6823      	ldr	r3, [r4, #0]
 800cb70:	079b      	lsls	r3, r3, #30
 800cb72:	d413      	bmi.n	800cb9c <_printf_i+0x22c>
 800cb74:	68e0      	ldr	r0, [r4, #12]
 800cb76:	9b03      	ldr	r3, [sp, #12]
 800cb78:	4298      	cmp	r0, r3
 800cb7a:	bfb8      	it	lt
 800cb7c:	4618      	movlt	r0, r3
 800cb7e:	e7a6      	b.n	800cace <_printf_i+0x15e>
 800cb80:	2301      	movs	r3, #1
 800cb82:	4632      	mov	r2, r6
 800cb84:	4649      	mov	r1, r9
 800cb86:	4640      	mov	r0, r8
 800cb88:	47d0      	blx	sl
 800cb8a:	3001      	adds	r0, #1
 800cb8c:	d09d      	beq.n	800caca <_printf_i+0x15a>
 800cb8e:	3501      	adds	r5, #1
 800cb90:	68e3      	ldr	r3, [r4, #12]
 800cb92:	9903      	ldr	r1, [sp, #12]
 800cb94:	1a5b      	subs	r3, r3, r1
 800cb96:	42ab      	cmp	r3, r5
 800cb98:	dcf2      	bgt.n	800cb80 <_printf_i+0x210>
 800cb9a:	e7eb      	b.n	800cb74 <_printf_i+0x204>
 800cb9c:	2500      	movs	r5, #0
 800cb9e:	f104 0619 	add.w	r6, r4, #25
 800cba2:	e7f5      	b.n	800cb90 <_printf_i+0x220>
 800cba4:	0800f0d6 	.word	0x0800f0d6
 800cba8:	0800f0e7 	.word	0x0800f0e7

0800cbac <std>:
 800cbac:	2300      	movs	r3, #0
 800cbae:	b510      	push	{r4, lr}
 800cbb0:	4604      	mov	r4, r0
 800cbb2:	e9c0 3300 	strd	r3, r3, [r0]
 800cbb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cbba:	6083      	str	r3, [r0, #8]
 800cbbc:	8181      	strh	r1, [r0, #12]
 800cbbe:	6643      	str	r3, [r0, #100]	@ 0x64
 800cbc0:	81c2      	strh	r2, [r0, #14]
 800cbc2:	6183      	str	r3, [r0, #24]
 800cbc4:	4619      	mov	r1, r3
 800cbc6:	2208      	movs	r2, #8
 800cbc8:	305c      	adds	r0, #92	@ 0x5c
 800cbca:	f000 f8f4 	bl	800cdb6 <memset>
 800cbce:	4b0d      	ldr	r3, [pc, #52]	@ (800cc04 <std+0x58>)
 800cbd0:	6263      	str	r3, [r4, #36]	@ 0x24
 800cbd2:	4b0d      	ldr	r3, [pc, #52]	@ (800cc08 <std+0x5c>)
 800cbd4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cbd6:	4b0d      	ldr	r3, [pc, #52]	@ (800cc0c <std+0x60>)
 800cbd8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cbda:	4b0d      	ldr	r3, [pc, #52]	@ (800cc10 <std+0x64>)
 800cbdc:	6323      	str	r3, [r4, #48]	@ 0x30
 800cbde:	4b0d      	ldr	r3, [pc, #52]	@ (800cc14 <std+0x68>)
 800cbe0:	6224      	str	r4, [r4, #32]
 800cbe2:	429c      	cmp	r4, r3
 800cbe4:	d006      	beq.n	800cbf4 <std+0x48>
 800cbe6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cbea:	4294      	cmp	r4, r2
 800cbec:	d002      	beq.n	800cbf4 <std+0x48>
 800cbee:	33d0      	adds	r3, #208	@ 0xd0
 800cbf0:	429c      	cmp	r4, r3
 800cbf2:	d105      	bne.n	800cc00 <std+0x54>
 800cbf4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cbf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cbfc:	f000 b968 	b.w	800ced0 <__retarget_lock_init_recursive>
 800cc00:	bd10      	pop	{r4, pc}
 800cc02:	bf00      	nop
 800cc04:	0800cd31 	.word	0x0800cd31
 800cc08:	0800cd53 	.word	0x0800cd53
 800cc0c:	0800cd8b 	.word	0x0800cd8b
 800cc10:	0800cdaf 	.word	0x0800cdaf
 800cc14:	20008c4c 	.word	0x20008c4c

0800cc18 <stdio_exit_handler>:
 800cc18:	4a02      	ldr	r2, [pc, #8]	@ (800cc24 <stdio_exit_handler+0xc>)
 800cc1a:	4903      	ldr	r1, [pc, #12]	@ (800cc28 <stdio_exit_handler+0x10>)
 800cc1c:	4803      	ldr	r0, [pc, #12]	@ (800cc2c <stdio_exit_handler+0x14>)
 800cc1e:	f000 b869 	b.w	800ccf4 <_fwalk_sglue>
 800cc22:	bf00      	nop
 800cc24:	20000044 	.word	0x20000044
 800cc28:	0800e459 	.word	0x0800e459
 800cc2c:	20000054 	.word	0x20000054

0800cc30 <cleanup_stdio>:
 800cc30:	6841      	ldr	r1, [r0, #4]
 800cc32:	4b0c      	ldr	r3, [pc, #48]	@ (800cc64 <cleanup_stdio+0x34>)
 800cc34:	4299      	cmp	r1, r3
 800cc36:	b510      	push	{r4, lr}
 800cc38:	4604      	mov	r4, r0
 800cc3a:	d001      	beq.n	800cc40 <cleanup_stdio+0x10>
 800cc3c:	f001 fc0c 	bl	800e458 <_fflush_r>
 800cc40:	68a1      	ldr	r1, [r4, #8]
 800cc42:	4b09      	ldr	r3, [pc, #36]	@ (800cc68 <cleanup_stdio+0x38>)
 800cc44:	4299      	cmp	r1, r3
 800cc46:	d002      	beq.n	800cc4e <cleanup_stdio+0x1e>
 800cc48:	4620      	mov	r0, r4
 800cc4a:	f001 fc05 	bl	800e458 <_fflush_r>
 800cc4e:	68e1      	ldr	r1, [r4, #12]
 800cc50:	4b06      	ldr	r3, [pc, #24]	@ (800cc6c <cleanup_stdio+0x3c>)
 800cc52:	4299      	cmp	r1, r3
 800cc54:	d004      	beq.n	800cc60 <cleanup_stdio+0x30>
 800cc56:	4620      	mov	r0, r4
 800cc58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc5c:	f001 bbfc 	b.w	800e458 <_fflush_r>
 800cc60:	bd10      	pop	{r4, pc}
 800cc62:	bf00      	nop
 800cc64:	20008c4c 	.word	0x20008c4c
 800cc68:	20008cb4 	.word	0x20008cb4
 800cc6c:	20008d1c 	.word	0x20008d1c

0800cc70 <global_stdio_init.part.0>:
 800cc70:	b510      	push	{r4, lr}
 800cc72:	4b0b      	ldr	r3, [pc, #44]	@ (800cca0 <global_stdio_init.part.0+0x30>)
 800cc74:	4c0b      	ldr	r4, [pc, #44]	@ (800cca4 <global_stdio_init.part.0+0x34>)
 800cc76:	4a0c      	ldr	r2, [pc, #48]	@ (800cca8 <global_stdio_init.part.0+0x38>)
 800cc78:	601a      	str	r2, [r3, #0]
 800cc7a:	4620      	mov	r0, r4
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	2104      	movs	r1, #4
 800cc80:	f7ff ff94 	bl	800cbac <std>
 800cc84:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cc88:	2201      	movs	r2, #1
 800cc8a:	2109      	movs	r1, #9
 800cc8c:	f7ff ff8e 	bl	800cbac <std>
 800cc90:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cc94:	2202      	movs	r2, #2
 800cc96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc9a:	2112      	movs	r1, #18
 800cc9c:	f7ff bf86 	b.w	800cbac <std>
 800cca0:	20008d84 	.word	0x20008d84
 800cca4:	20008c4c 	.word	0x20008c4c
 800cca8:	0800cc19 	.word	0x0800cc19

0800ccac <__sfp_lock_acquire>:
 800ccac:	4801      	ldr	r0, [pc, #4]	@ (800ccb4 <__sfp_lock_acquire+0x8>)
 800ccae:	f000 b910 	b.w	800ced2 <__retarget_lock_acquire_recursive>
 800ccb2:	bf00      	nop
 800ccb4:	20008d8d 	.word	0x20008d8d

0800ccb8 <__sfp_lock_release>:
 800ccb8:	4801      	ldr	r0, [pc, #4]	@ (800ccc0 <__sfp_lock_release+0x8>)
 800ccba:	f000 b90b 	b.w	800ced4 <__retarget_lock_release_recursive>
 800ccbe:	bf00      	nop
 800ccc0:	20008d8d 	.word	0x20008d8d

0800ccc4 <__sinit>:
 800ccc4:	b510      	push	{r4, lr}
 800ccc6:	4604      	mov	r4, r0
 800ccc8:	f7ff fff0 	bl	800ccac <__sfp_lock_acquire>
 800cccc:	6a23      	ldr	r3, [r4, #32]
 800ccce:	b11b      	cbz	r3, 800ccd8 <__sinit+0x14>
 800ccd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ccd4:	f7ff bff0 	b.w	800ccb8 <__sfp_lock_release>
 800ccd8:	4b04      	ldr	r3, [pc, #16]	@ (800ccec <__sinit+0x28>)
 800ccda:	6223      	str	r3, [r4, #32]
 800ccdc:	4b04      	ldr	r3, [pc, #16]	@ (800ccf0 <__sinit+0x2c>)
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d1f5      	bne.n	800ccd0 <__sinit+0xc>
 800cce4:	f7ff ffc4 	bl	800cc70 <global_stdio_init.part.0>
 800cce8:	e7f2      	b.n	800ccd0 <__sinit+0xc>
 800ccea:	bf00      	nop
 800ccec:	0800cc31 	.word	0x0800cc31
 800ccf0:	20008d84 	.word	0x20008d84

0800ccf4 <_fwalk_sglue>:
 800ccf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ccf8:	4607      	mov	r7, r0
 800ccfa:	4688      	mov	r8, r1
 800ccfc:	4614      	mov	r4, r2
 800ccfe:	2600      	movs	r6, #0
 800cd00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cd04:	f1b9 0901 	subs.w	r9, r9, #1
 800cd08:	d505      	bpl.n	800cd16 <_fwalk_sglue+0x22>
 800cd0a:	6824      	ldr	r4, [r4, #0]
 800cd0c:	2c00      	cmp	r4, #0
 800cd0e:	d1f7      	bne.n	800cd00 <_fwalk_sglue+0xc>
 800cd10:	4630      	mov	r0, r6
 800cd12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd16:	89ab      	ldrh	r3, [r5, #12]
 800cd18:	2b01      	cmp	r3, #1
 800cd1a:	d907      	bls.n	800cd2c <_fwalk_sglue+0x38>
 800cd1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cd20:	3301      	adds	r3, #1
 800cd22:	d003      	beq.n	800cd2c <_fwalk_sglue+0x38>
 800cd24:	4629      	mov	r1, r5
 800cd26:	4638      	mov	r0, r7
 800cd28:	47c0      	blx	r8
 800cd2a:	4306      	orrs	r6, r0
 800cd2c:	3568      	adds	r5, #104	@ 0x68
 800cd2e:	e7e9      	b.n	800cd04 <_fwalk_sglue+0x10>

0800cd30 <__sread>:
 800cd30:	b510      	push	{r4, lr}
 800cd32:	460c      	mov	r4, r1
 800cd34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd38:	f000 f86c 	bl	800ce14 <_read_r>
 800cd3c:	2800      	cmp	r0, #0
 800cd3e:	bfab      	itete	ge
 800cd40:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800cd42:	89a3      	ldrhlt	r3, [r4, #12]
 800cd44:	181b      	addge	r3, r3, r0
 800cd46:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800cd4a:	bfac      	ite	ge
 800cd4c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800cd4e:	81a3      	strhlt	r3, [r4, #12]
 800cd50:	bd10      	pop	{r4, pc}

0800cd52 <__swrite>:
 800cd52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd56:	461f      	mov	r7, r3
 800cd58:	898b      	ldrh	r3, [r1, #12]
 800cd5a:	05db      	lsls	r3, r3, #23
 800cd5c:	4605      	mov	r5, r0
 800cd5e:	460c      	mov	r4, r1
 800cd60:	4616      	mov	r6, r2
 800cd62:	d505      	bpl.n	800cd70 <__swrite+0x1e>
 800cd64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd68:	2302      	movs	r3, #2
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	f000 f840 	bl	800cdf0 <_lseek_r>
 800cd70:	89a3      	ldrh	r3, [r4, #12]
 800cd72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd76:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cd7a:	81a3      	strh	r3, [r4, #12]
 800cd7c:	4632      	mov	r2, r6
 800cd7e:	463b      	mov	r3, r7
 800cd80:	4628      	mov	r0, r5
 800cd82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd86:	f000 b867 	b.w	800ce58 <_write_r>

0800cd8a <__sseek>:
 800cd8a:	b510      	push	{r4, lr}
 800cd8c:	460c      	mov	r4, r1
 800cd8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd92:	f000 f82d 	bl	800cdf0 <_lseek_r>
 800cd96:	1c43      	adds	r3, r0, #1
 800cd98:	89a3      	ldrh	r3, [r4, #12]
 800cd9a:	bf15      	itete	ne
 800cd9c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cd9e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cda2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cda6:	81a3      	strheq	r3, [r4, #12]
 800cda8:	bf18      	it	ne
 800cdaa:	81a3      	strhne	r3, [r4, #12]
 800cdac:	bd10      	pop	{r4, pc}

0800cdae <__sclose>:
 800cdae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdb2:	f000 b80d 	b.w	800cdd0 <_close_r>

0800cdb6 <memset>:
 800cdb6:	4402      	add	r2, r0
 800cdb8:	4603      	mov	r3, r0
 800cdba:	4293      	cmp	r3, r2
 800cdbc:	d100      	bne.n	800cdc0 <memset+0xa>
 800cdbe:	4770      	bx	lr
 800cdc0:	f803 1b01 	strb.w	r1, [r3], #1
 800cdc4:	e7f9      	b.n	800cdba <memset+0x4>
	...

0800cdc8 <_localeconv_r>:
 800cdc8:	4800      	ldr	r0, [pc, #0]	@ (800cdcc <_localeconv_r+0x4>)
 800cdca:	4770      	bx	lr
 800cdcc:	20000190 	.word	0x20000190

0800cdd0 <_close_r>:
 800cdd0:	b538      	push	{r3, r4, r5, lr}
 800cdd2:	4d06      	ldr	r5, [pc, #24]	@ (800cdec <_close_r+0x1c>)
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	4604      	mov	r4, r0
 800cdd8:	4608      	mov	r0, r1
 800cdda:	602b      	str	r3, [r5, #0]
 800cddc:	f7f4 fea8 	bl	8001b30 <_close>
 800cde0:	1c43      	adds	r3, r0, #1
 800cde2:	d102      	bne.n	800cdea <_close_r+0x1a>
 800cde4:	682b      	ldr	r3, [r5, #0]
 800cde6:	b103      	cbz	r3, 800cdea <_close_r+0x1a>
 800cde8:	6023      	str	r3, [r4, #0]
 800cdea:	bd38      	pop	{r3, r4, r5, pc}
 800cdec:	20008d88 	.word	0x20008d88

0800cdf0 <_lseek_r>:
 800cdf0:	b538      	push	{r3, r4, r5, lr}
 800cdf2:	4d07      	ldr	r5, [pc, #28]	@ (800ce10 <_lseek_r+0x20>)
 800cdf4:	4604      	mov	r4, r0
 800cdf6:	4608      	mov	r0, r1
 800cdf8:	4611      	mov	r1, r2
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	602a      	str	r2, [r5, #0]
 800cdfe:	461a      	mov	r2, r3
 800ce00:	f7f4 febd 	bl	8001b7e <_lseek>
 800ce04:	1c43      	adds	r3, r0, #1
 800ce06:	d102      	bne.n	800ce0e <_lseek_r+0x1e>
 800ce08:	682b      	ldr	r3, [r5, #0]
 800ce0a:	b103      	cbz	r3, 800ce0e <_lseek_r+0x1e>
 800ce0c:	6023      	str	r3, [r4, #0]
 800ce0e:	bd38      	pop	{r3, r4, r5, pc}
 800ce10:	20008d88 	.word	0x20008d88

0800ce14 <_read_r>:
 800ce14:	b538      	push	{r3, r4, r5, lr}
 800ce16:	4d07      	ldr	r5, [pc, #28]	@ (800ce34 <_read_r+0x20>)
 800ce18:	4604      	mov	r4, r0
 800ce1a:	4608      	mov	r0, r1
 800ce1c:	4611      	mov	r1, r2
 800ce1e:	2200      	movs	r2, #0
 800ce20:	602a      	str	r2, [r5, #0]
 800ce22:	461a      	mov	r2, r3
 800ce24:	f7f4 fe4b 	bl	8001abe <_read>
 800ce28:	1c43      	adds	r3, r0, #1
 800ce2a:	d102      	bne.n	800ce32 <_read_r+0x1e>
 800ce2c:	682b      	ldr	r3, [r5, #0]
 800ce2e:	b103      	cbz	r3, 800ce32 <_read_r+0x1e>
 800ce30:	6023      	str	r3, [r4, #0]
 800ce32:	bd38      	pop	{r3, r4, r5, pc}
 800ce34:	20008d88 	.word	0x20008d88

0800ce38 <_sbrk_r>:
 800ce38:	b538      	push	{r3, r4, r5, lr}
 800ce3a:	4d06      	ldr	r5, [pc, #24]	@ (800ce54 <_sbrk_r+0x1c>)
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	4604      	mov	r4, r0
 800ce40:	4608      	mov	r0, r1
 800ce42:	602b      	str	r3, [r5, #0]
 800ce44:	f7f4 fea8 	bl	8001b98 <_sbrk>
 800ce48:	1c43      	adds	r3, r0, #1
 800ce4a:	d102      	bne.n	800ce52 <_sbrk_r+0x1a>
 800ce4c:	682b      	ldr	r3, [r5, #0]
 800ce4e:	b103      	cbz	r3, 800ce52 <_sbrk_r+0x1a>
 800ce50:	6023      	str	r3, [r4, #0]
 800ce52:	bd38      	pop	{r3, r4, r5, pc}
 800ce54:	20008d88 	.word	0x20008d88

0800ce58 <_write_r>:
 800ce58:	b538      	push	{r3, r4, r5, lr}
 800ce5a:	4d07      	ldr	r5, [pc, #28]	@ (800ce78 <_write_r+0x20>)
 800ce5c:	4604      	mov	r4, r0
 800ce5e:	4608      	mov	r0, r1
 800ce60:	4611      	mov	r1, r2
 800ce62:	2200      	movs	r2, #0
 800ce64:	602a      	str	r2, [r5, #0]
 800ce66:	461a      	mov	r2, r3
 800ce68:	f7f4 fe46 	bl	8001af8 <_write>
 800ce6c:	1c43      	adds	r3, r0, #1
 800ce6e:	d102      	bne.n	800ce76 <_write_r+0x1e>
 800ce70:	682b      	ldr	r3, [r5, #0]
 800ce72:	b103      	cbz	r3, 800ce76 <_write_r+0x1e>
 800ce74:	6023      	str	r3, [r4, #0]
 800ce76:	bd38      	pop	{r3, r4, r5, pc}
 800ce78:	20008d88 	.word	0x20008d88

0800ce7c <__errno>:
 800ce7c:	4b01      	ldr	r3, [pc, #4]	@ (800ce84 <__errno+0x8>)
 800ce7e:	6818      	ldr	r0, [r3, #0]
 800ce80:	4770      	bx	lr
 800ce82:	bf00      	nop
 800ce84:	20000050 	.word	0x20000050

0800ce88 <__libc_init_array>:
 800ce88:	b570      	push	{r4, r5, r6, lr}
 800ce8a:	4d0d      	ldr	r5, [pc, #52]	@ (800cec0 <__libc_init_array+0x38>)
 800ce8c:	4c0d      	ldr	r4, [pc, #52]	@ (800cec4 <__libc_init_array+0x3c>)
 800ce8e:	1b64      	subs	r4, r4, r5
 800ce90:	10a4      	asrs	r4, r4, #2
 800ce92:	2600      	movs	r6, #0
 800ce94:	42a6      	cmp	r6, r4
 800ce96:	d109      	bne.n	800ceac <__libc_init_array+0x24>
 800ce98:	4d0b      	ldr	r5, [pc, #44]	@ (800cec8 <__libc_init_array+0x40>)
 800ce9a:	4c0c      	ldr	r4, [pc, #48]	@ (800cecc <__libc_init_array+0x44>)
 800ce9c:	f001 fdfc 	bl	800ea98 <_init>
 800cea0:	1b64      	subs	r4, r4, r5
 800cea2:	10a4      	asrs	r4, r4, #2
 800cea4:	2600      	movs	r6, #0
 800cea6:	42a6      	cmp	r6, r4
 800cea8:	d105      	bne.n	800ceb6 <__libc_init_array+0x2e>
 800ceaa:	bd70      	pop	{r4, r5, r6, pc}
 800ceac:	f855 3b04 	ldr.w	r3, [r5], #4
 800ceb0:	4798      	blx	r3
 800ceb2:	3601      	adds	r6, #1
 800ceb4:	e7ee      	b.n	800ce94 <__libc_init_array+0xc>
 800ceb6:	f855 3b04 	ldr.w	r3, [r5], #4
 800ceba:	4798      	blx	r3
 800cebc:	3601      	adds	r6, #1
 800cebe:	e7f2      	b.n	800cea6 <__libc_init_array+0x1e>
 800cec0:	0800f444 	.word	0x0800f444
 800cec4:	0800f444 	.word	0x0800f444
 800cec8:	0800f444 	.word	0x0800f444
 800cecc:	0800f448 	.word	0x0800f448

0800ced0 <__retarget_lock_init_recursive>:
 800ced0:	4770      	bx	lr

0800ced2 <__retarget_lock_acquire_recursive>:
 800ced2:	4770      	bx	lr

0800ced4 <__retarget_lock_release_recursive>:
 800ced4:	4770      	bx	lr
	...

0800ced8 <__assert_func>:
 800ced8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ceda:	4614      	mov	r4, r2
 800cedc:	461a      	mov	r2, r3
 800cede:	4b09      	ldr	r3, [pc, #36]	@ (800cf04 <__assert_func+0x2c>)
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	4605      	mov	r5, r0
 800cee4:	68d8      	ldr	r0, [r3, #12]
 800cee6:	b14c      	cbz	r4, 800cefc <__assert_func+0x24>
 800cee8:	4b07      	ldr	r3, [pc, #28]	@ (800cf08 <__assert_func+0x30>)
 800ceea:	9100      	str	r1, [sp, #0]
 800ceec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cef0:	4906      	ldr	r1, [pc, #24]	@ (800cf0c <__assert_func+0x34>)
 800cef2:	462b      	mov	r3, r5
 800cef4:	f001 fad8 	bl	800e4a8 <fiprintf>
 800cef8:	f001 faf6 	bl	800e4e8 <abort>
 800cefc:	4b04      	ldr	r3, [pc, #16]	@ (800cf10 <__assert_func+0x38>)
 800cefe:	461c      	mov	r4, r3
 800cf00:	e7f3      	b.n	800ceea <__assert_func+0x12>
 800cf02:	bf00      	nop
 800cf04:	20000050 	.word	0x20000050
 800cf08:	0800f0f8 	.word	0x0800f0f8
 800cf0c:	0800f105 	.word	0x0800f105
 800cf10:	0800f133 	.word	0x0800f133

0800cf14 <quorem>:
 800cf14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf18:	6903      	ldr	r3, [r0, #16]
 800cf1a:	690c      	ldr	r4, [r1, #16]
 800cf1c:	42a3      	cmp	r3, r4
 800cf1e:	4607      	mov	r7, r0
 800cf20:	db7e      	blt.n	800d020 <quorem+0x10c>
 800cf22:	3c01      	subs	r4, #1
 800cf24:	f101 0814 	add.w	r8, r1, #20
 800cf28:	00a3      	lsls	r3, r4, #2
 800cf2a:	f100 0514 	add.w	r5, r0, #20
 800cf2e:	9300      	str	r3, [sp, #0]
 800cf30:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cf34:	9301      	str	r3, [sp, #4]
 800cf36:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cf3a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cf3e:	3301      	adds	r3, #1
 800cf40:	429a      	cmp	r2, r3
 800cf42:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cf46:	fbb2 f6f3 	udiv	r6, r2, r3
 800cf4a:	d32e      	bcc.n	800cfaa <quorem+0x96>
 800cf4c:	f04f 0a00 	mov.w	sl, #0
 800cf50:	46c4      	mov	ip, r8
 800cf52:	46ae      	mov	lr, r5
 800cf54:	46d3      	mov	fp, sl
 800cf56:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cf5a:	b298      	uxth	r0, r3
 800cf5c:	fb06 a000 	mla	r0, r6, r0, sl
 800cf60:	0c02      	lsrs	r2, r0, #16
 800cf62:	0c1b      	lsrs	r3, r3, #16
 800cf64:	fb06 2303 	mla	r3, r6, r3, r2
 800cf68:	f8de 2000 	ldr.w	r2, [lr]
 800cf6c:	b280      	uxth	r0, r0
 800cf6e:	b292      	uxth	r2, r2
 800cf70:	1a12      	subs	r2, r2, r0
 800cf72:	445a      	add	r2, fp
 800cf74:	f8de 0000 	ldr.w	r0, [lr]
 800cf78:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cf7c:	b29b      	uxth	r3, r3
 800cf7e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800cf82:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800cf86:	b292      	uxth	r2, r2
 800cf88:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800cf8c:	45e1      	cmp	r9, ip
 800cf8e:	f84e 2b04 	str.w	r2, [lr], #4
 800cf92:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800cf96:	d2de      	bcs.n	800cf56 <quorem+0x42>
 800cf98:	9b00      	ldr	r3, [sp, #0]
 800cf9a:	58eb      	ldr	r3, [r5, r3]
 800cf9c:	b92b      	cbnz	r3, 800cfaa <quorem+0x96>
 800cf9e:	9b01      	ldr	r3, [sp, #4]
 800cfa0:	3b04      	subs	r3, #4
 800cfa2:	429d      	cmp	r5, r3
 800cfa4:	461a      	mov	r2, r3
 800cfa6:	d32f      	bcc.n	800d008 <quorem+0xf4>
 800cfa8:	613c      	str	r4, [r7, #16]
 800cfaa:	4638      	mov	r0, r7
 800cfac:	f001 f8c8 	bl	800e140 <__mcmp>
 800cfb0:	2800      	cmp	r0, #0
 800cfb2:	db25      	blt.n	800d000 <quorem+0xec>
 800cfb4:	4629      	mov	r1, r5
 800cfb6:	2000      	movs	r0, #0
 800cfb8:	f858 2b04 	ldr.w	r2, [r8], #4
 800cfbc:	f8d1 c000 	ldr.w	ip, [r1]
 800cfc0:	fa1f fe82 	uxth.w	lr, r2
 800cfc4:	fa1f f38c 	uxth.w	r3, ip
 800cfc8:	eba3 030e 	sub.w	r3, r3, lr
 800cfcc:	4403      	add	r3, r0
 800cfce:	0c12      	lsrs	r2, r2, #16
 800cfd0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800cfd4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800cfd8:	b29b      	uxth	r3, r3
 800cfda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cfde:	45c1      	cmp	r9, r8
 800cfe0:	f841 3b04 	str.w	r3, [r1], #4
 800cfe4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800cfe8:	d2e6      	bcs.n	800cfb8 <quorem+0xa4>
 800cfea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cfee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cff2:	b922      	cbnz	r2, 800cffe <quorem+0xea>
 800cff4:	3b04      	subs	r3, #4
 800cff6:	429d      	cmp	r5, r3
 800cff8:	461a      	mov	r2, r3
 800cffa:	d30b      	bcc.n	800d014 <quorem+0x100>
 800cffc:	613c      	str	r4, [r7, #16]
 800cffe:	3601      	adds	r6, #1
 800d000:	4630      	mov	r0, r6
 800d002:	b003      	add	sp, #12
 800d004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d008:	6812      	ldr	r2, [r2, #0]
 800d00a:	3b04      	subs	r3, #4
 800d00c:	2a00      	cmp	r2, #0
 800d00e:	d1cb      	bne.n	800cfa8 <quorem+0x94>
 800d010:	3c01      	subs	r4, #1
 800d012:	e7c6      	b.n	800cfa2 <quorem+0x8e>
 800d014:	6812      	ldr	r2, [r2, #0]
 800d016:	3b04      	subs	r3, #4
 800d018:	2a00      	cmp	r2, #0
 800d01a:	d1ef      	bne.n	800cffc <quorem+0xe8>
 800d01c:	3c01      	subs	r4, #1
 800d01e:	e7ea      	b.n	800cff6 <quorem+0xe2>
 800d020:	2000      	movs	r0, #0
 800d022:	e7ee      	b.n	800d002 <quorem+0xee>
 800d024:	0000      	movs	r0, r0
	...

0800d028 <_dtoa_r>:
 800d028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d02c:	69c7      	ldr	r7, [r0, #28]
 800d02e:	b097      	sub	sp, #92	@ 0x5c
 800d030:	ed8d 0b04 	vstr	d0, [sp, #16]
 800d034:	ec55 4b10 	vmov	r4, r5, d0
 800d038:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800d03a:	9107      	str	r1, [sp, #28]
 800d03c:	4681      	mov	r9, r0
 800d03e:	920c      	str	r2, [sp, #48]	@ 0x30
 800d040:	9311      	str	r3, [sp, #68]	@ 0x44
 800d042:	b97f      	cbnz	r7, 800d064 <_dtoa_r+0x3c>
 800d044:	2010      	movs	r0, #16
 800d046:	f7ff f89d 	bl	800c184 <malloc>
 800d04a:	4602      	mov	r2, r0
 800d04c:	f8c9 001c 	str.w	r0, [r9, #28]
 800d050:	b920      	cbnz	r0, 800d05c <_dtoa_r+0x34>
 800d052:	4ba9      	ldr	r3, [pc, #676]	@ (800d2f8 <_dtoa_r+0x2d0>)
 800d054:	21ef      	movs	r1, #239	@ 0xef
 800d056:	48a9      	ldr	r0, [pc, #676]	@ (800d2fc <_dtoa_r+0x2d4>)
 800d058:	f7ff ff3e 	bl	800ced8 <__assert_func>
 800d05c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d060:	6007      	str	r7, [r0, #0]
 800d062:	60c7      	str	r7, [r0, #12]
 800d064:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d068:	6819      	ldr	r1, [r3, #0]
 800d06a:	b159      	cbz	r1, 800d084 <_dtoa_r+0x5c>
 800d06c:	685a      	ldr	r2, [r3, #4]
 800d06e:	604a      	str	r2, [r1, #4]
 800d070:	2301      	movs	r3, #1
 800d072:	4093      	lsls	r3, r2
 800d074:	608b      	str	r3, [r1, #8]
 800d076:	4648      	mov	r0, r9
 800d078:	f000 fe30 	bl	800dcdc <_Bfree>
 800d07c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d080:	2200      	movs	r2, #0
 800d082:	601a      	str	r2, [r3, #0]
 800d084:	1e2b      	subs	r3, r5, #0
 800d086:	bfb9      	ittee	lt
 800d088:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d08c:	9305      	strlt	r3, [sp, #20]
 800d08e:	2300      	movge	r3, #0
 800d090:	6033      	strge	r3, [r6, #0]
 800d092:	9f05      	ldr	r7, [sp, #20]
 800d094:	4b9a      	ldr	r3, [pc, #616]	@ (800d300 <_dtoa_r+0x2d8>)
 800d096:	bfbc      	itt	lt
 800d098:	2201      	movlt	r2, #1
 800d09a:	6032      	strlt	r2, [r6, #0]
 800d09c:	43bb      	bics	r3, r7
 800d09e:	d112      	bne.n	800d0c6 <_dtoa_r+0x9e>
 800d0a0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d0a2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d0a6:	6013      	str	r3, [r2, #0]
 800d0a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d0ac:	4323      	orrs	r3, r4
 800d0ae:	f000 855a 	beq.w	800db66 <_dtoa_r+0xb3e>
 800d0b2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d0b4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800d314 <_dtoa_r+0x2ec>
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	f000 855c 	beq.w	800db76 <_dtoa_r+0xb4e>
 800d0be:	f10a 0303 	add.w	r3, sl, #3
 800d0c2:	f000 bd56 	b.w	800db72 <_dtoa_r+0xb4a>
 800d0c6:	ed9d 7b04 	vldr	d7, [sp, #16]
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	ec51 0b17 	vmov	r0, r1, d7
 800d0d0:	2300      	movs	r3, #0
 800d0d2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800d0d6:	f7f3 fcff 	bl	8000ad8 <__aeabi_dcmpeq>
 800d0da:	4680      	mov	r8, r0
 800d0dc:	b158      	cbz	r0, 800d0f6 <_dtoa_r+0xce>
 800d0de:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d0e0:	2301      	movs	r3, #1
 800d0e2:	6013      	str	r3, [r2, #0]
 800d0e4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d0e6:	b113      	cbz	r3, 800d0ee <_dtoa_r+0xc6>
 800d0e8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800d0ea:	4b86      	ldr	r3, [pc, #536]	@ (800d304 <_dtoa_r+0x2dc>)
 800d0ec:	6013      	str	r3, [r2, #0]
 800d0ee:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800d318 <_dtoa_r+0x2f0>
 800d0f2:	f000 bd40 	b.w	800db76 <_dtoa_r+0xb4e>
 800d0f6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800d0fa:	aa14      	add	r2, sp, #80	@ 0x50
 800d0fc:	a915      	add	r1, sp, #84	@ 0x54
 800d0fe:	4648      	mov	r0, r9
 800d100:	f001 f8ce 	bl	800e2a0 <__d2b>
 800d104:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d108:	9002      	str	r0, [sp, #8]
 800d10a:	2e00      	cmp	r6, #0
 800d10c:	d078      	beq.n	800d200 <_dtoa_r+0x1d8>
 800d10e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d110:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800d114:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d118:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d11c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d120:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d124:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d128:	4619      	mov	r1, r3
 800d12a:	2200      	movs	r2, #0
 800d12c:	4b76      	ldr	r3, [pc, #472]	@ (800d308 <_dtoa_r+0x2e0>)
 800d12e:	f7f3 f8b3 	bl	8000298 <__aeabi_dsub>
 800d132:	a36b      	add	r3, pc, #428	@ (adr r3, 800d2e0 <_dtoa_r+0x2b8>)
 800d134:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d138:	f7f3 fa66 	bl	8000608 <__aeabi_dmul>
 800d13c:	a36a      	add	r3, pc, #424	@ (adr r3, 800d2e8 <_dtoa_r+0x2c0>)
 800d13e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d142:	f7f3 f8ab 	bl	800029c <__adddf3>
 800d146:	4604      	mov	r4, r0
 800d148:	4630      	mov	r0, r6
 800d14a:	460d      	mov	r5, r1
 800d14c:	f7f3 f9f2 	bl	8000534 <__aeabi_i2d>
 800d150:	a367      	add	r3, pc, #412	@ (adr r3, 800d2f0 <_dtoa_r+0x2c8>)
 800d152:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d156:	f7f3 fa57 	bl	8000608 <__aeabi_dmul>
 800d15a:	4602      	mov	r2, r0
 800d15c:	460b      	mov	r3, r1
 800d15e:	4620      	mov	r0, r4
 800d160:	4629      	mov	r1, r5
 800d162:	f7f3 f89b 	bl	800029c <__adddf3>
 800d166:	4604      	mov	r4, r0
 800d168:	460d      	mov	r5, r1
 800d16a:	f7f3 fcfd 	bl	8000b68 <__aeabi_d2iz>
 800d16e:	2200      	movs	r2, #0
 800d170:	4607      	mov	r7, r0
 800d172:	2300      	movs	r3, #0
 800d174:	4620      	mov	r0, r4
 800d176:	4629      	mov	r1, r5
 800d178:	f7f3 fcb8 	bl	8000aec <__aeabi_dcmplt>
 800d17c:	b140      	cbz	r0, 800d190 <_dtoa_r+0x168>
 800d17e:	4638      	mov	r0, r7
 800d180:	f7f3 f9d8 	bl	8000534 <__aeabi_i2d>
 800d184:	4622      	mov	r2, r4
 800d186:	462b      	mov	r3, r5
 800d188:	f7f3 fca6 	bl	8000ad8 <__aeabi_dcmpeq>
 800d18c:	b900      	cbnz	r0, 800d190 <_dtoa_r+0x168>
 800d18e:	3f01      	subs	r7, #1
 800d190:	2f16      	cmp	r7, #22
 800d192:	d852      	bhi.n	800d23a <_dtoa_r+0x212>
 800d194:	4b5d      	ldr	r3, [pc, #372]	@ (800d30c <_dtoa_r+0x2e4>)
 800d196:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d19a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d19e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d1a2:	f7f3 fca3 	bl	8000aec <__aeabi_dcmplt>
 800d1a6:	2800      	cmp	r0, #0
 800d1a8:	d049      	beq.n	800d23e <_dtoa_r+0x216>
 800d1aa:	3f01      	subs	r7, #1
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	9310      	str	r3, [sp, #64]	@ 0x40
 800d1b0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d1b2:	1b9b      	subs	r3, r3, r6
 800d1b4:	1e5a      	subs	r2, r3, #1
 800d1b6:	bf45      	ittet	mi
 800d1b8:	f1c3 0301 	rsbmi	r3, r3, #1
 800d1bc:	9300      	strmi	r3, [sp, #0]
 800d1be:	2300      	movpl	r3, #0
 800d1c0:	2300      	movmi	r3, #0
 800d1c2:	9206      	str	r2, [sp, #24]
 800d1c4:	bf54      	ite	pl
 800d1c6:	9300      	strpl	r3, [sp, #0]
 800d1c8:	9306      	strmi	r3, [sp, #24]
 800d1ca:	2f00      	cmp	r7, #0
 800d1cc:	db39      	blt.n	800d242 <_dtoa_r+0x21a>
 800d1ce:	9b06      	ldr	r3, [sp, #24]
 800d1d0:	970d      	str	r7, [sp, #52]	@ 0x34
 800d1d2:	443b      	add	r3, r7
 800d1d4:	9306      	str	r3, [sp, #24]
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	9308      	str	r3, [sp, #32]
 800d1da:	9b07      	ldr	r3, [sp, #28]
 800d1dc:	2b09      	cmp	r3, #9
 800d1de:	d863      	bhi.n	800d2a8 <_dtoa_r+0x280>
 800d1e0:	2b05      	cmp	r3, #5
 800d1e2:	bfc4      	itt	gt
 800d1e4:	3b04      	subgt	r3, #4
 800d1e6:	9307      	strgt	r3, [sp, #28]
 800d1e8:	9b07      	ldr	r3, [sp, #28]
 800d1ea:	f1a3 0302 	sub.w	r3, r3, #2
 800d1ee:	bfcc      	ite	gt
 800d1f0:	2400      	movgt	r4, #0
 800d1f2:	2401      	movle	r4, #1
 800d1f4:	2b03      	cmp	r3, #3
 800d1f6:	d863      	bhi.n	800d2c0 <_dtoa_r+0x298>
 800d1f8:	e8df f003 	tbb	[pc, r3]
 800d1fc:	2b375452 	.word	0x2b375452
 800d200:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800d204:	441e      	add	r6, r3
 800d206:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d20a:	2b20      	cmp	r3, #32
 800d20c:	bfc1      	itttt	gt
 800d20e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d212:	409f      	lslgt	r7, r3
 800d214:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d218:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d21c:	bfd6      	itet	le
 800d21e:	f1c3 0320 	rsble	r3, r3, #32
 800d222:	ea47 0003 	orrgt.w	r0, r7, r3
 800d226:	fa04 f003 	lslle.w	r0, r4, r3
 800d22a:	f7f3 f973 	bl	8000514 <__aeabi_ui2d>
 800d22e:	2201      	movs	r2, #1
 800d230:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d234:	3e01      	subs	r6, #1
 800d236:	9212      	str	r2, [sp, #72]	@ 0x48
 800d238:	e776      	b.n	800d128 <_dtoa_r+0x100>
 800d23a:	2301      	movs	r3, #1
 800d23c:	e7b7      	b.n	800d1ae <_dtoa_r+0x186>
 800d23e:	9010      	str	r0, [sp, #64]	@ 0x40
 800d240:	e7b6      	b.n	800d1b0 <_dtoa_r+0x188>
 800d242:	9b00      	ldr	r3, [sp, #0]
 800d244:	1bdb      	subs	r3, r3, r7
 800d246:	9300      	str	r3, [sp, #0]
 800d248:	427b      	negs	r3, r7
 800d24a:	9308      	str	r3, [sp, #32]
 800d24c:	2300      	movs	r3, #0
 800d24e:	930d      	str	r3, [sp, #52]	@ 0x34
 800d250:	e7c3      	b.n	800d1da <_dtoa_r+0x1b2>
 800d252:	2301      	movs	r3, #1
 800d254:	9309      	str	r3, [sp, #36]	@ 0x24
 800d256:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d258:	eb07 0b03 	add.w	fp, r7, r3
 800d25c:	f10b 0301 	add.w	r3, fp, #1
 800d260:	2b01      	cmp	r3, #1
 800d262:	9303      	str	r3, [sp, #12]
 800d264:	bfb8      	it	lt
 800d266:	2301      	movlt	r3, #1
 800d268:	e006      	b.n	800d278 <_dtoa_r+0x250>
 800d26a:	2301      	movs	r3, #1
 800d26c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d26e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d270:	2b00      	cmp	r3, #0
 800d272:	dd28      	ble.n	800d2c6 <_dtoa_r+0x29e>
 800d274:	469b      	mov	fp, r3
 800d276:	9303      	str	r3, [sp, #12]
 800d278:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800d27c:	2100      	movs	r1, #0
 800d27e:	2204      	movs	r2, #4
 800d280:	f102 0514 	add.w	r5, r2, #20
 800d284:	429d      	cmp	r5, r3
 800d286:	d926      	bls.n	800d2d6 <_dtoa_r+0x2ae>
 800d288:	6041      	str	r1, [r0, #4]
 800d28a:	4648      	mov	r0, r9
 800d28c:	f000 fce6 	bl	800dc5c <_Balloc>
 800d290:	4682      	mov	sl, r0
 800d292:	2800      	cmp	r0, #0
 800d294:	d142      	bne.n	800d31c <_dtoa_r+0x2f4>
 800d296:	4b1e      	ldr	r3, [pc, #120]	@ (800d310 <_dtoa_r+0x2e8>)
 800d298:	4602      	mov	r2, r0
 800d29a:	f240 11af 	movw	r1, #431	@ 0x1af
 800d29e:	e6da      	b.n	800d056 <_dtoa_r+0x2e>
 800d2a0:	2300      	movs	r3, #0
 800d2a2:	e7e3      	b.n	800d26c <_dtoa_r+0x244>
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	e7d5      	b.n	800d254 <_dtoa_r+0x22c>
 800d2a8:	2401      	movs	r4, #1
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	9307      	str	r3, [sp, #28]
 800d2ae:	9409      	str	r4, [sp, #36]	@ 0x24
 800d2b0:	f04f 3bff 	mov.w	fp, #4294967295
 800d2b4:	2200      	movs	r2, #0
 800d2b6:	f8cd b00c 	str.w	fp, [sp, #12]
 800d2ba:	2312      	movs	r3, #18
 800d2bc:	920c      	str	r2, [sp, #48]	@ 0x30
 800d2be:	e7db      	b.n	800d278 <_dtoa_r+0x250>
 800d2c0:	2301      	movs	r3, #1
 800d2c2:	9309      	str	r3, [sp, #36]	@ 0x24
 800d2c4:	e7f4      	b.n	800d2b0 <_dtoa_r+0x288>
 800d2c6:	f04f 0b01 	mov.w	fp, #1
 800d2ca:	f8cd b00c 	str.w	fp, [sp, #12]
 800d2ce:	465b      	mov	r3, fp
 800d2d0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800d2d4:	e7d0      	b.n	800d278 <_dtoa_r+0x250>
 800d2d6:	3101      	adds	r1, #1
 800d2d8:	0052      	lsls	r2, r2, #1
 800d2da:	e7d1      	b.n	800d280 <_dtoa_r+0x258>
 800d2dc:	f3af 8000 	nop.w
 800d2e0:	636f4361 	.word	0x636f4361
 800d2e4:	3fd287a7 	.word	0x3fd287a7
 800d2e8:	8b60c8b3 	.word	0x8b60c8b3
 800d2ec:	3fc68a28 	.word	0x3fc68a28
 800d2f0:	509f79fb 	.word	0x509f79fb
 800d2f4:	3fd34413 	.word	0x3fd34413
 800d2f8:	0800f141 	.word	0x0800f141
 800d2fc:	0800f158 	.word	0x0800f158
 800d300:	7ff00000 	.word	0x7ff00000
 800d304:	0800f0d5 	.word	0x0800f0d5
 800d308:	3ff80000 	.word	0x3ff80000
 800d30c:	0800f270 	.word	0x0800f270
 800d310:	0800f1b0 	.word	0x0800f1b0
 800d314:	0800f13d 	.word	0x0800f13d
 800d318:	0800f0d4 	.word	0x0800f0d4
 800d31c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d320:	6018      	str	r0, [r3, #0]
 800d322:	9b03      	ldr	r3, [sp, #12]
 800d324:	2b0e      	cmp	r3, #14
 800d326:	f200 80a1 	bhi.w	800d46c <_dtoa_r+0x444>
 800d32a:	2c00      	cmp	r4, #0
 800d32c:	f000 809e 	beq.w	800d46c <_dtoa_r+0x444>
 800d330:	2f00      	cmp	r7, #0
 800d332:	dd33      	ble.n	800d39c <_dtoa_r+0x374>
 800d334:	4b9c      	ldr	r3, [pc, #624]	@ (800d5a8 <_dtoa_r+0x580>)
 800d336:	f007 020f 	and.w	r2, r7, #15
 800d33a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d33e:	ed93 7b00 	vldr	d7, [r3]
 800d342:	05f8      	lsls	r0, r7, #23
 800d344:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800d348:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d34c:	d516      	bpl.n	800d37c <_dtoa_r+0x354>
 800d34e:	4b97      	ldr	r3, [pc, #604]	@ (800d5ac <_dtoa_r+0x584>)
 800d350:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d354:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d358:	f7f3 fa80 	bl	800085c <__aeabi_ddiv>
 800d35c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d360:	f004 040f 	and.w	r4, r4, #15
 800d364:	2603      	movs	r6, #3
 800d366:	4d91      	ldr	r5, [pc, #580]	@ (800d5ac <_dtoa_r+0x584>)
 800d368:	b954      	cbnz	r4, 800d380 <_dtoa_r+0x358>
 800d36a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d36e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d372:	f7f3 fa73 	bl	800085c <__aeabi_ddiv>
 800d376:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d37a:	e028      	b.n	800d3ce <_dtoa_r+0x3a6>
 800d37c:	2602      	movs	r6, #2
 800d37e:	e7f2      	b.n	800d366 <_dtoa_r+0x33e>
 800d380:	07e1      	lsls	r1, r4, #31
 800d382:	d508      	bpl.n	800d396 <_dtoa_r+0x36e>
 800d384:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d388:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d38c:	f7f3 f93c 	bl	8000608 <__aeabi_dmul>
 800d390:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d394:	3601      	adds	r6, #1
 800d396:	1064      	asrs	r4, r4, #1
 800d398:	3508      	adds	r5, #8
 800d39a:	e7e5      	b.n	800d368 <_dtoa_r+0x340>
 800d39c:	f000 80af 	beq.w	800d4fe <_dtoa_r+0x4d6>
 800d3a0:	427c      	negs	r4, r7
 800d3a2:	4b81      	ldr	r3, [pc, #516]	@ (800d5a8 <_dtoa_r+0x580>)
 800d3a4:	4d81      	ldr	r5, [pc, #516]	@ (800d5ac <_dtoa_r+0x584>)
 800d3a6:	f004 020f 	and.w	r2, r4, #15
 800d3aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3b2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d3b6:	f7f3 f927 	bl	8000608 <__aeabi_dmul>
 800d3ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d3be:	1124      	asrs	r4, r4, #4
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	2602      	movs	r6, #2
 800d3c4:	2c00      	cmp	r4, #0
 800d3c6:	f040 808f 	bne.w	800d4e8 <_dtoa_r+0x4c0>
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d1d3      	bne.n	800d376 <_dtoa_r+0x34e>
 800d3ce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d3d0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	f000 8094 	beq.w	800d502 <_dtoa_r+0x4da>
 800d3da:	4b75      	ldr	r3, [pc, #468]	@ (800d5b0 <_dtoa_r+0x588>)
 800d3dc:	2200      	movs	r2, #0
 800d3de:	4620      	mov	r0, r4
 800d3e0:	4629      	mov	r1, r5
 800d3e2:	f7f3 fb83 	bl	8000aec <__aeabi_dcmplt>
 800d3e6:	2800      	cmp	r0, #0
 800d3e8:	f000 808b 	beq.w	800d502 <_dtoa_r+0x4da>
 800d3ec:	9b03      	ldr	r3, [sp, #12]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	f000 8087 	beq.w	800d502 <_dtoa_r+0x4da>
 800d3f4:	f1bb 0f00 	cmp.w	fp, #0
 800d3f8:	dd34      	ble.n	800d464 <_dtoa_r+0x43c>
 800d3fa:	4620      	mov	r0, r4
 800d3fc:	4b6d      	ldr	r3, [pc, #436]	@ (800d5b4 <_dtoa_r+0x58c>)
 800d3fe:	2200      	movs	r2, #0
 800d400:	4629      	mov	r1, r5
 800d402:	f7f3 f901 	bl	8000608 <__aeabi_dmul>
 800d406:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d40a:	f107 38ff 	add.w	r8, r7, #4294967295
 800d40e:	3601      	adds	r6, #1
 800d410:	465c      	mov	r4, fp
 800d412:	4630      	mov	r0, r6
 800d414:	f7f3 f88e 	bl	8000534 <__aeabi_i2d>
 800d418:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d41c:	f7f3 f8f4 	bl	8000608 <__aeabi_dmul>
 800d420:	4b65      	ldr	r3, [pc, #404]	@ (800d5b8 <_dtoa_r+0x590>)
 800d422:	2200      	movs	r2, #0
 800d424:	f7f2 ff3a 	bl	800029c <__adddf3>
 800d428:	4605      	mov	r5, r0
 800d42a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d42e:	2c00      	cmp	r4, #0
 800d430:	d16a      	bne.n	800d508 <_dtoa_r+0x4e0>
 800d432:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d436:	4b61      	ldr	r3, [pc, #388]	@ (800d5bc <_dtoa_r+0x594>)
 800d438:	2200      	movs	r2, #0
 800d43a:	f7f2 ff2d 	bl	8000298 <__aeabi_dsub>
 800d43e:	4602      	mov	r2, r0
 800d440:	460b      	mov	r3, r1
 800d442:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d446:	462a      	mov	r2, r5
 800d448:	4633      	mov	r3, r6
 800d44a:	f7f3 fb6d 	bl	8000b28 <__aeabi_dcmpgt>
 800d44e:	2800      	cmp	r0, #0
 800d450:	f040 8298 	bne.w	800d984 <_dtoa_r+0x95c>
 800d454:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d458:	462a      	mov	r2, r5
 800d45a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d45e:	f7f3 fb45 	bl	8000aec <__aeabi_dcmplt>
 800d462:	bb38      	cbnz	r0, 800d4b4 <_dtoa_r+0x48c>
 800d464:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800d468:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d46c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d46e:	2b00      	cmp	r3, #0
 800d470:	f2c0 8157 	blt.w	800d722 <_dtoa_r+0x6fa>
 800d474:	2f0e      	cmp	r7, #14
 800d476:	f300 8154 	bgt.w	800d722 <_dtoa_r+0x6fa>
 800d47a:	4b4b      	ldr	r3, [pc, #300]	@ (800d5a8 <_dtoa_r+0x580>)
 800d47c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d480:	ed93 7b00 	vldr	d7, [r3]
 800d484:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d486:	2b00      	cmp	r3, #0
 800d488:	ed8d 7b00 	vstr	d7, [sp]
 800d48c:	f280 80e5 	bge.w	800d65a <_dtoa_r+0x632>
 800d490:	9b03      	ldr	r3, [sp, #12]
 800d492:	2b00      	cmp	r3, #0
 800d494:	f300 80e1 	bgt.w	800d65a <_dtoa_r+0x632>
 800d498:	d10c      	bne.n	800d4b4 <_dtoa_r+0x48c>
 800d49a:	4b48      	ldr	r3, [pc, #288]	@ (800d5bc <_dtoa_r+0x594>)
 800d49c:	2200      	movs	r2, #0
 800d49e:	ec51 0b17 	vmov	r0, r1, d7
 800d4a2:	f7f3 f8b1 	bl	8000608 <__aeabi_dmul>
 800d4a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d4aa:	f7f3 fb33 	bl	8000b14 <__aeabi_dcmpge>
 800d4ae:	2800      	cmp	r0, #0
 800d4b0:	f000 8266 	beq.w	800d980 <_dtoa_r+0x958>
 800d4b4:	2400      	movs	r4, #0
 800d4b6:	4625      	mov	r5, r4
 800d4b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d4ba:	4656      	mov	r6, sl
 800d4bc:	ea6f 0803 	mvn.w	r8, r3
 800d4c0:	2700      	movs	r7, #0
 800d4c2:	4621      	mov	r1, r4
 800d4c4:	4648      	mov	r0, r9
 800d4c6:	f000 fc09 	bl	800dcdc <_Bfree>
 800d4ca:	2d00      	cmp	r5, #0
 800d4cc:	f000 80bd 	beq.w	800d64a <_dtoa_r+0x622>
 800d4d0:	b12f      	cbz	r7, 800d4de <_dtoa_r+0x4b6>
 800d4d2:	42af      	cmp	r7, r5
 800d4d4:	d003      	beq.n	800d4de <_dtoa_r+0x4b6>
 800d4d6:	4639      	mov	r1, r7
 800d4d8:	4648      	mov	r0, r9
 800d4da:	f000 fbff 	bl	800dcdc <_Bfree>
 800d4de:	4629      	mov	r1, r5
 800d4e0:	4648      	mov	r0, r9
 800d4e2:	f000 fbfb 	bl	800dcdc <_Bfree>
 800d4e6:	e0b0      	b.n	800d64a <_dtoa_r+0x622>
 800d4e8:	07e2      	lsls	r2, r4, #31
 800d4ea:	d505      	bpl.n	800d4f8 <_dtoa_r+0x4d0>
 800d4ec:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d4f0:	f7f3 f88a 	bl	8000608 <__aeabi_dmul>
 800d4f4:	3601      	adds	r6, #1
 800d4f6:	2301      	movs	r3, #1
 800d4f8:	1064      	asrs	r4, r4, #1
 800d4fa:	3508      	adds	r5, #8
 800d4fc:	e762      	b.n	800d3c4 <_dtoa_r+0x39c>
 800d4fe:	2602      	movs	r6, #2
 800d500:	e765      	b.n	800d3ce <_dtoa_r+0x3a6>
 800d502:	9c03      	ldr	r4, [sp, #12]
 800d504:	46b8      	mov	r8, r7
 800d506:	e784      	b.n	800d412 <_dtoa_r+0x3ea>
 800d508:	4b27      	ldr	r3, [pc, #156]	@ (800d5a8 <_dtoa_r+0x580>)
 800d50a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d50c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d510:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d514:	4454      	add	r4, sl
 800d516:	2900      	cmp	r1, #0
 800d518:	d054      	beq.n	800d5c4 <_dtoa_r+0x59c>
 800d51a:	4929      	ldr	r1, [pc, #164]	@ (800d5c0 <_dtoa_r+0x598>)
 800d51c:	2000      	movs	r0, #0
 800d51e:	f7f3 f99d 	bl	800085c <__aeabi_ddiv>
 800d522:	4633      	mov	r3, r6
 800d524:	462a      	mov	r2, r5
 800d526:	f7f2 feb7 	bl	8000298 <__aeabi_dsub>
 800d52a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d52e:	4656      	mov	r6, sl
 800d530:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d534:	f7f3 fb18 	bl	8000b68 <__aeabi_d2iz>
 800d538:	4605      	mov	r5, r0
 800d53a:	f7f2 fffb 	bl	8000534 <__aeabi_i2d>
 800d53e:	4602      	mov	r2, r0
 800d540:	460b      	mov	r3, r1
 800d542:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d546:	f7f2 fea7 	bl	8000298 <__aeabi_dsub>
 800d54a:	3530      	adds	r5, #48	@ 0x30
 800d54c:	4602      	mov	r2, r0
 800d54e:	460b      	mov	r3, r1
 800d550:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d554:	f806 5b01 	strb.w	r5, [r6], #1
 800d558:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d55c:	f7f3 fac6 	bl	8000aec <__aeabi_dcmplt>
 800d560:	2800      	cmp	r0, #0
 800d562:	d172      	bne.n	800d64a <_dtoa_r+0x622>
 800d564:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d568:	4911      	ldr	r1, [pc, #68]	@ (800d5b0 <_dtoa_r+0x588>)
 800d56a:	2000      	movs	r0, #0
 800d56c:	f7f2 fe94 	bl	8000298 <__aeabi_dsub>
 800d570:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d574:	f7f3 faba 	bl	8000aec <__aeabi_dcmplt>
 800d578:	2800      	cmp	r0, #0
 800d57a:	f040 80b4 	bne.w	800d6e6 <_dtoa_r+0x6be>
 800d57e:	42a6      	cmp	r6, r4
 800d580:	f43f af70 	beq.w	800d464 <_dtoa_r+0x43c>
 800d584:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d588:	4b0a      	ldr	r3, [pc, #40]	@ (800d5b4 <_dtoa_r+0x58c>)
 800d58a:	2200      	movs	r2, #0
 800d58c:	f7f3 f83c 	bl	8000608 <__aeabi_dmul>
 800d590:	4b08      	ldr	r3, [pc, #32]	@ (800d5b4 <_dtoa_r+0x58c>)
 800d592:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d596:	2200      	movs	r2, #0
 800d598:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d59c:	f7f3 f834 	bl	8000608 <__aeabi_dmul>
 800d5a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d5a4:	e7c4      	b.n	800d530 <_dtoa_r+0x508>
 800d5a6:	bf00      	nop
 800d5a8:	0800f270 	.word	0x0800f270
 800d5ac:	0800f248 	.word	0x0800f248
 800d5b0:	3ff00000 	.word	0x3ff00000
 800d5b4:	40240000 	.word	0x40240000
 800d5b8:	401c0000 	.word	0x401c0000
 800d5bc:	40140000 	.word	0x40140000
 800d5c0:	3fe00000 	.word	0x3fe00000
 800d5c4:	4631      	mov	r1, r6
 800d5c6:	4628      	mov	r0, r5
 800d5c8:	f7f3 f81e 	bl	8000608 <__aeabi_dmul>
 800d5cc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d5d0:	9413      	str	r4, [sp, #76]	@ 0x4c
 800d5d2:	4656      	mov	r6, sl
 800d5d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d5d8:	f7f3 fac6 	bl	8000b68 <__aeabi_d2iz>
 800d5dc:	4605      	mov	r5, r0
 800d5de:	f7f2 ffa9 	bl	8000534 <__aeabi_i2d>
 800d5e2:	4602      	mov	r2, r0
 800d5e4:	460b      	mov	r3, r1
 800d5e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d5ea:	f7f2 fe55 	bl	8000298 <__aeabi_dsub>
 800d5ee:	3530      	adds	r5, #48	@ 0x30
 800d5f0:	f806 5b01 	strb.w	r5, [r6], #1
 800d5f4:	4602      	mov	r2, r0
 800d5f6:	460b      	mov	r3, r1
 800d5f8:	42a6      	cmp	r6, r4
 800d5fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d5fe:	f04f 0200 	mov.w	r2, #0
 800d602:	d124      	bne.n	800d64e <_dtoa_r+0x626>
 800d604:	4baf      	ldr	r3, [pc, #700]	@ (800d8c4 <_dtoa_r+0x89c>)
 800d606:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d60a:	f7f2 fe47 	bl	800029c <__adddf3>
 800d60e:	4602      	mov	r2, r0
 800d610:	460b      	mov	r3, r1
 800d612:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d616:	f7f3 fa87 	bl	8000b28 <__aeabi_dcmpgt>
 800d61a:	2800      	cmp	r0, #0
 800d61c:	d163      	bne.n	800d6e6 <_dtoa_r+0x6be>
 800d61e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d622:	49a8      	ldr	r1, [pc, #672]	@ (800d8c4 <_dtoa_r+0x89c>)
 800d624:	2000      	movs	r0, #0
 800d626:	f7f2 fe37 	bl	8000298 <__aeabi_dsub>
 800d62a:	4602      	mov	r2, r0
 800d62c:	460b      	mov	r3, r1
 800d62e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d632:	f7f3 fa5b 	bl	8000aec <__aeabi_dcmplt>
 800d636:	2800      	cmp	r0, #0
 800d638:	f43f af14 	beq.w	800d464 <_dtoa_r+0x43c>
 800d63c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800d63e:	1e73      	subs	r3, r6, #1
 800d640:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d642:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d646:	2b30      	cmp	r3, #48	@ 0x30
 800d648:	d0f8      	beq.n	800d63c <_dtoa_r+0x614>
 800d64a:	4647      	mov	r7, r8
 800d64c:	e03b      	b.n	800d6c6 <_dtoa_r+0x69e>
 800d64e:	4b9e      	ldr	r3, [pc, #632]	@ (800d8c8 <_dtoa_r+0x8a0>)
 800d650:	f7f2 ffda 	bl	8000608 <__aeabi_dmul>
 800d654:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d658:	e7bc      	b.n	800d5d4 <_dtoa_r+0x5ac>
 800d65a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800d65e:	4656      	mov	r6, sl
 800d660:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d664:	4620      	mov	r0, r4
 800d666:	4629      	mov	r1, r5
 800d668:	f7f3 f8f8 	bl	800085c <__aeabi_ddiv>
 800d66c:	f7f3 fa7c 	bl	8000b68 <__aeabi_d2iz>
 800d670:	4680      	mov	r8, r0
 800d672:	f7f2 ff5f 	bl	8000534 <__aeabi_i2d>
 800d676:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d67a:	f7f2 ffc5 	bl	8000608 <__aeabi_dmul>
 800d67e:	4602      	mov	r2, r0
 800d680:	460b      	mov	r3, r1
 800d682:	4620      	mov	r0, r4
 800d684:	4629      	mov	r1, r5
 800d686:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d68a:	f7f2 fe05 	bl	8000298 <__aeabi_dsub>
 800d68e:	f806 4b01 	strb.w	r4, [r6], #1
 800d692:	9d03      	ldr	r5, [sp, #12]
 800d694:	eba6 040a 	sub.w	r4, r6, sl
 800d698:	42a5      	cmp	r5, r4
 800d69a:	4602      	mov	r2, r0
 800d69c:	460b      	mov	r3, r1
 800d69e:	d133      	bne.n	800d708 <_dtoa_r+0x6e0>
 800d6a0:	f7f2 fdfc 	bl	800029c <__adddf3>
 800d6a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d6a8:	4604      	mov	r4, r0
 800d6aa:	460d      	mov	r5, r1
 800d6ac:	f7f3 fa3c 	bl	8000b28 <__aeabi_dcmpgt>
 800d6b0:	b9c0      	cbnz	r0, 800d6e4 <_dtoa_r+0x6bc>
 800d6b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d6b6:	4620      	mov	r0, r4
 800d6b8:	4629      	mov	r1, r5
 800d6ba:	f7f3 fa0d 	bl	8000ad8 <__aeabi_dcmpeq>
 800d6be:	b110      	cbz	r0, 800d6c6 <_dtoa_r+0x69e>
 800d6c0:	f018 0f01 	tst.w	r8, #1
 800d6c4:	d10e      	bne.n	800d6e4 <_dtoa_r+0x6bc>
 800d6c6:	9902      	ldr	r1, [sp, #8]
 800d6c8:	4648      	mov	r0, r9
 800d6ca:	f000 fb07 	bl	800dcdc <_Bfree>
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	7033      	strb	r3, [r6, #0]
 800d6d2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d6d4:	3701      	adds	r7, #1
 800d6d6:	601f      	str	r7, [r3, #0]
 800d6d8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	f000 824b 	beq.w	800db76 <_dtoa_r+0xb4e>
 800d6e0:	601e      	str	r6, [r3, #0]
 800d6e2:	e248      	b.n	800db76 <_dtoa_r+0xb4e>
 800d6e4:	46b8      	mov	r8, r7
 800d6e6:	4633      	mov	r3, r6
 800d6e8:	461e      	mov	r6, r3
 800d6ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d6ee:	2a39      	cmp	r2, #57	@ 0x39
 800d6f0:	d106      	bne.n	800d700 <_dtoa_r+0x6d8>
 800d6f2:	459a      	cmp	sl, r3
 800d6f4:	d1f8      	bne.n	800d6e8 <_dtoa_r+0x6c0>
 800d6f6:	2230      	movs	r2, #48	@ 0x30
 800d6f8:	f108 0801 	add.w	r8, r8, #1
 800d6fc:	f88a 2000 	strb.w	r2, [sl]
 800d700:	781a      	ldrb	r2, [r3, #0]
 800d702:	3201      	adds	r2, #1
 800d704:	701a      	strb	r2, [r3, #0]
 800d706:	e7a0      	b.n	800d64a <_dtoa_r+0x622>
 800d708:	4b6f      	ldr	r3, [pc, #444]	@ (800d8c8 <_dtoa_r+0x8a0>)
 800d70a:	2200      	movs	r2, #0
 800d70c:	f7f2 ff7c 	bl	8000608 <__aeabi_dmul>
 800d710:	2200      	movs	r2, #0
 800d712:	2300      	movs	r3, #0
 800d714:	4604      	mov	r4, r0
 800d716:	460d      	mov	r5, r1
 800d718:	f7f3 f9de 	bl	8000ad8 <__aeabi_dcmpeq>
 800d71c:	2800      	cmp	r0, #0
 800d71e:	d09f      	beq.n	800d660 <_dtoa_r+0x638>
 800d720:	e7d1      	b.n	800d6c6 <_dtoa_r+0x69e>
 800d722:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d724:	2a00      	cmp	r2, #0
 800d726:	f000 80ea 	beq.w	800d8fe <_dtoa_r+0x8d6>
 800d72a:	9a07      	ldr	r2, [sp, #28]
 800d72c:	2a01      	cmp	r2, #1
 800d72e:	f300 80cd 	bgt.w	800d8cc <_dtoa_r+0x8a4>
 800d732:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d734:	2a00      	cmp	r2, #0
 800d736:	f000 80c1 	beq.w	800d8bc <_dtoa_r+0x894>
 800d73a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d73e:	9c08      	ldr	r4, [sp, #32]
 800d740:	9e00      	ldr	r6, [sp, #0]
 800d742:	9a00      	ldr	r2, [sp, #0]
 800d744:	441a      	add	r2, r3
 800d746:	9200      	str	r2, [sp, #0]
 800d748:	9a06      	ldr	r2, [sp, #24]
 800d74a:	2101      	movs	r1, #1
 800d74c:	441a      	add	r2, r3
 800d74e:	4648      	mov	r0, r9
 800d750:	9206      	str	r2, [sp, #24]
 800d752:	f000 fb77 	bl	800de44 <__i2b>
 800d756:	4605      	mov	r5, r0
 800d758:	b166      	cbz	r6, 800d774 <_dtoa_r+0x74c>
 800d75a:	9b06      	ldr	r3, [sp, #24]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	dd09      	ble.n	800d774 <_dtoa_r+0x74c>
 800d760:	42b3      	cmp	r3, r6
 800d762:	9a00      	ldr	r2, [sp, #0]
 800d764:	bfa8      	it	ge
 800d766:	4633      	movge	r3, r6
 800d768:	1ad2      	subs	r2, r2, r3
 800d76a:	9200      	str	r2, [sp, #0]
 800d76c:	9a06      	ldr	r2, [sp, #24]
 800d76e:	1af6      	subs	r6, r6, r3
 800d770:	1ad3      	subs	r3, r2, r3
 800d772:	9306      	str	r3, [sp, #24]
 800d774:	9b08      	ldr	r3, [sp, #32]
 800d776:	b30b      	cbz	r3, 800d7bc <_dtoa_r+0x794>
 800d778:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	f000 80c6 	beq.w	800d90c <_dtoa_r+0x8e4>
 800d780:	2c00      	cmp	r4, #0
 800d782:	f000 80c0 	beq.w	800d906 <_dtoa_r+0x8de>
 800d786:	4629      	mov	r1, r5
 800d788:	4622      	mov	r2, r4
 800d78a:	4648      	mov	r0, r9
 800d78c:	f000 fc12 	bl	800dfb4 <__pow5mult>
 800d790:	9a02      	ldr	r2, [sp, #8]
 800d792:	4601      	mov	r1, r0
 800d794:	4605      	mov	r5, r0
 800d796:	4648      	mov	r0, r9
 800d798:	f000 fb6a 	bl	800de70 <__multiply>
 800d79c:	9902      	ldr	r1, [sp, #8]
 800d79e:	4680      	mov	r8, r0
 800d7a0:	4648      	mov	r0, r9
 800d7a2:	f000 fa9b 	bl	800dcdc <_Bfree>
 800d7a6:	9b08      	ldr	r3, [sp, #32]
 800d7a8:	1b1b      	subs	r3, r3, r4
 800d7aa:	9308      	str	r3, [sp, #32]
 800d7ac:	f000 80b1 	beq.w	800d912 <_dtoa_r+0x8ea>
 800d7b0:	9a08      	ldr	r2, [sp, #32]
 800d7b2:	4641      	mov	r1, r8
 800d7b4:	4648      	mov	r0, r9
 800d7b6:	f000 fbfd 	bl	800dfb4 <__pow5mult>
 800d7ba:	9002      	str	r0, [sp, #8]
 800d7bc:	2101      	movs	r1, #1
 800d7be:	4648      	mov	r0, r9
 800d7c0:	f000 fb40 	bl	800de44 <__i2b>
 800d7c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d7c6:	4604      	mov	r4, r0
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	f000 81d8 	beq.w	800db7e <_dtoa_r+0xb56>
 800d7ce:	461a      	mov	r2, r3
 800d7d0:	4601      	mov	r1, r0
 800d7d2:	4648      	mov	r0, r9
 800d7d4:	f000 fbee 	bl	800dfb4 <__pow5mult>
 800d7d8:	9b07      	ldr	r3, [sp, #28]
 800d7da:	2b01      	cmp	r3, #1
 800d7dc:	4604      	mov	r4, r0
 800d7de:	f300 809f 	bgt.w	800d920 <_dtoa_r+0x8f8>
 800d7e2:	9b04      	ldr	r3, [sp, #16]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	f040 8097 	bne.w	800d918 <_dtoa_r+0x8f0>
 800d7ea:	9b05      	ldr	r3, [sp, #20]
 800d7ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	f040 8093 	bne.w	800d91c <_dtoa_r+0x8f4>
 800d7f6:	9b05      	ldr	r3, [sp, #20]
 800d7f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d7fc:	0d1b      	lsrs	r3, r3, #20
 800d7fe:	051b      	lsls	r3, r3, #20
 800d800:	b133      	cbz	r3, 800d810 <_dtoa_r+0x7e8>
 800d802:	9b00      	ldr	r3, [sp, #0]
 800d804:	3301      	adds	r3, #1
 800d806:	9300      	str	r3, [sp, #0]
 800d808:	9b06      	ldr	r3, [sp, #24]
 800d80a:	3301      	adds	r3, #1
 800d80c:	9306      	str	r3, [sp, #24]
 800d80e:	2301      	movs	r3, #1
 800d810:	9308      	str	r3, [sp, #32]
 800d812:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d814:	2b00      	cmp	r3, #0
 800d816:	f000 81b8 	beq.w	800db8a <_dtoa_r+0xb62>
 800d81a:	6923      	ldr	r3, [r4, #16]
 800d81c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d820:	6918      	ldr	r0, [r3, #16]
 800d822:	f000 fac3 	bl	800ddac <__hi0bits>
 800d826:	f1c0 0020 	rsb	r0, r0, #32
 800d82a:	9b06      	ldr	r3, [sp, #24]
 800d82c:	4418      	add	r0, r3
 800d82e:	f010 001f 	ands.w	r0, r0, #31
 800d832:	f000 8082 	beq.w	800d93a <_dtoa_r+0x912>
 800d836:	f1c0 0320 	rsb	r3, r0, #32
 800d83a:	2b04      	cmp	r3, #4
 800d83c:	dd73      	ble.n	800d926 <_dtoa_r+0x8fe>
 800d83e:	9b00      	ldr	r3, [sp, #0]
 800d840:	f1c0 001c 	rsb	r0, r0, #28
 800d844:	4403      	add	r3, r0
 800d846:	9300      	str	r3, [sp, #0]
 800d848:	9b06      	ldr	r3, [sp, #24]
 800d84a:	4403      	add	r3, r0
 800d84c:	4406      	add	r6, r0
 800d84e:	9306      	str	r3, [sp, #24]
 800d850:	9b00      	ldr	r3, [sp, #0]
 800d852:	2b00      	cmp	r3, #0
 800d854:	dd05      	ble.n	800d862 <_dtoa_r+0x83a>
 800d856:	9902      	ldr	r1, [sp, #8]
 800d858:	461a      	mov	r2, r3
 800d85a:	4648      	mov	r0, r9
 800d85c:	f000 fc04 	bl	800e068 <__lshift>
 800d860:	9002      	str	r0, [sp, #8]
 800d862:	9b06      	ldr	r3, [sp, #24]
 800d864:	2b00      	cmp	r3, #0
 800d866:	dd05      	ble.n	800d874 <_dtoa_r+0x84c>
 800d868:	4621      	mov	r1, r4
 800d86a:	461a      	mov	r2, r3
 800d86c:	4648      	mov	r0, r9
 800d86e:	f000 fbfb 	bl	800e068 <__lshift>
 800d872:	4604      	mov	r4, r0
 800d874:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d876:	2b00      	cmp	r3, #0
 800d878:	d061      	beq.n	800d93e <_dtoa_r+0x916>
 800d87a:	9802      	ldr	r0, [sp, #8]
 800d87c:	4621      	mov	r1, r4
 800d87e:	f000 fc5f 	bl	800e140 <__mcmp>
 800d882:	2800      	cmp	r0, #0
 800d884:	da5b      	bge.n	800d93e <_dtoa_r+0x916>
 800d886:	2300      	movs	r3, #0
 800d888:	9902      	ldr	r1, [sp, #8]
 800d88a:	220a      	movs	r2, #10
 800d88c:	4648      	mov	r0, r9
 800d88e:	f000 fa47 	bl	800dd20 <__multadd>
 800d892:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d894:	9002      	str	r0, [sp, #8]
 800d896:	f107 38ff 	add.w	r8, r7, #4294967295
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	f000 8177 	beq.w	800db8e <_dtoa_r+0xb66>
 800d8a0:	4629      	mov	r1, r5
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	220a      	movs	r2, #10
 800d8a6:	4648      	mov	r0, r9
 800d8a8:	f000 fa3a 	bl	800dd20 <__multadd>
 800d8ac:	f1bb 0f00 	cmp.w	fp, #0
 800d8b0:	4605      	mov	r5, r0
 800d8b2:	dc6f      	bgt.n	800d994 <_dtoa_r+0x96c>
 800d8b4:	9b07      	ldr	r3, [sp, #28]
 800d8b6:	2b02      	cmp	r3, #2
 800d8b8:	dc49      	bgt.n	800d94e <_dtoa_r+0x926>
 800d8ba:	e06b      	b.n	800d994 <_dtoa_r+0x96c>
 800d8bc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d8be:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d8c2:	e73c      	b.n	800d73e <_dtoa_r+0x716>
 800d8c4:	3fe00000 	.word	0x3fe00000
 800d8c8:	40240000 	.word	0x40240000
 800d8cc:	9b03      	ldr	r3, [sp, #12]
 800d8ce:	1e5c      	subs	r4, r3, #1
 800d8d0:	9b08      	ldr	r3, [sp, #32]
 800d8d2:	42a3      	cmp	r3, r4
 800d8d4:	db09      	blt.n	800d8ea <_dtoa_r+0x8c2>
 800d8d6:	1b1c      	subs	r4, r3, r4
 800d8d8:	9b03      	ldr	r3, [sp, #12]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	f6bf af30 	bge.w	800d740 <_dtoa_r+0x718>
 800d8e0:	9b00      	ldr	r3, [sp, #0]
 800d8e2:	9a03      	ldr	r2, [sp, #12]
 800d8e4:	1a9e      	subs	r6, r3, r2
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	e72b      	b.n	800d742 <_dtoa_r+0x71a>
 800d8ea:	9b08      	ldr	r3, [sp, #32]
 800d8ec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d8ee:	9408      	str	r4, [sp, #32]
 800d8f0:	1ae3      	subs	r3, r4, r3
 800d8f2:	441a      	add	r2, r3
 800d8f4:	9e00      	ldr	r6, [sp, #0]
 800d8f6:	9b03      	ldr	r3, [sp, #12]
 800d8f8:	920d      	str	r2, [sp, #52]	@ 0x34
 800d8fa:	2400      	movs	r4, #0
 800d8fc:	e721      	b.n	800d742 <_dtoa_r+0x71a>
 800d8fe:	9c08      	ldr	r4, [sp, #32]
 800d900:	9e00      	ldr	r6, [sp, #0]
 800d902:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800d904:	e728      	b.n	800d758 <_dtoa_r+0x730>
 800d906:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800d90a:	e751      	b.n	800d7b0 <_dtoa_r+0x788>
 800d90c:	9a08      	ldr	r2, [sp, #32]
 800d90e:	9902      	ldr	r1, [sp, #8]
 800d910:	e750      	b.n	800d7b4 <_dtoa_r+0x78c>
 800d912:	f8cd 8008 	str.w	r8, [sp, #8]
 800d916:	e751      	b.n	800d7bc <_dtoa_r+0x794>
 800d918:	2300      	movs	r3, #0
 800d91a:	e779      	b.n	800d810 <_dtoa_r+0x7e8>
 800d91c:	9b04      	ldr	r3, [sp, #16]
 800d91e:	e777      	b.n	800d810 <_dtoa_r+0x7e8>
 800d920:	2300      	movs	r3, #0
 800d922:	9308      	str	r3, [sp, #32]
 800d924:	e779      	b.n	800d81a <_dtoa_r+0x7f2>
 800d926:	d093      	beq.n	800d850 <_dtoa_r+0x828>
 800d928:	9a00      	ldr	r2, [sp, #0]
 800d92a:	331c      	adds	r3, #28
 800d92c:	441a      	add	r2, r3
 800d92e:	9200      	str	r2, [sp, #0]
 800d930:	9a06      	ldr	r2, [sp, #24]
 800d932:	441a      	add	r2, r3
 800d934:	441e      	add	r6, r3
 800d936:	9206      	str	r2, [sp, #24]
 800d938:	e78a      	b.n	800d850 <_dtoa_r+0x828>
 800d93a:	4603      	mov	r3, r0
 800d93c:	e7f4      	b.n	800d928 <_dtoa_r+0x900>
 800d93e:	9b03      	ldr	r3, [sp, #12]
 800d940:	2b00      	cmp	r3, #0
 800d942:	46b8      	mov	r8, r7
 800d944:	dc20      	bgt.n	800d988 <_dtoa_r+0x960>
 800d946:	469b      	mov	fp, r3
 800d948:	9b07      	ldr	r3, [sp, #28]
 800d94a:	2b02      	cmp	r3, #2
 800d94c:	dd1e      	ble.n	800d98c <_dtoa_r+0x964>
 800d94e:	f1bb 0f00 	cmp.w	fp, #0
 800d952:	f47f adb1 	bne.w	800d4b8 <_dtoa_r+0x490>
 800d956:	4621      	mov	r1, r4
 800d958:	465b      	mov	r3, fp
 800d95a:	2205      	movs	r2, #5
 800d95c:	4648      	mov	r0, r9
 800d95e:	f000 f9df 	bl	800dd20 <__multadd>
 800d962:	4601      	mov	r1, r0
 800d964:	4604      	mov	r4, r0
 800d966:	9802      	ldr	r0, [sp, #8]
 800d968:	f000 fbea 	bl	800e140 <__mcmp>
 800d96c:	2800      	cmp	r0, #0
 800d96e:	f77f ada3 	ble.w	800d4b8 <_dtoa_r+0x490>
 800d972:	4656      	mov	r6, sl
 800d974:	2331      	movs	r3, #49	@ 0x31
 800d976:	f806 3b01 	strb.w	r3, [r6], #1
 800d97a:	f108 0801 	add.w	r8, r8, #1
 800d97e:	e59f      	b.n	800d4c0 <_dtoa_r+0x498>
 800d980:	9c03      	ldr	r4, [sp, #12]
 800d982:	46b8      	mov	r8, r7
 800d984:	4625      	mov	r5, r4
 800d986:	e7f4      	b.n	800d972 <_dtoa_r+0x94a>
 800d988:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800d98c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d98e:	2b00      	cmp	r3, #0
 800d990:	f000 8101 	beq.w	800db96 <_dtoa_r+0xb6e>
 800d994:	2e00      	cmp	r6, #0
 800d996:	dd05      	ble.n	800d9a4 <_dtoa_r+0x97c>
 800d998:	4629      	mov	r1, r5
 800d99a:	4632      	mov	r2, r6
 800d99c:	4648      	mov	r0, r9
 800d99e:	f000 fb63 	bl	800e068 <__lshift>
 800d9a2:	4605      	mov	r5, r0
 800d9a4:	9b08      	ldr	r3, [sp, #32]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d05c      	beq.n	800da64 <_dtoa_r+0xa3c>
 800d9aa:	6869      	ldr	r1, [r5, #4]
 800d9ac:	4648      	mov	r0, r9
 800d9ae:	f000 f955 	bl	800dc5c <_Balloc>
 800d9b2:	4606      	mov	r6, r0
 800d9b4:	b928      	cbnz	r0, 800d9c2 <_dtoa_r+0x99a>
 800d9b6:	4b82      	ldr	r3, [pc, #520]	@ (800dbc0 <_dtoa_r+0xb98>)
 800d9b8:	4602      	mov	r2, r0
 800d9ba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d9be:	f7ff bb4a 	b.w	800d056 <_dtoa_r+0x2e>
 800d9c2:	692a      	ldr	r2, [r5, #16]
 800d9c4:	3202      	adds	r2, #2
 800d9c6:	0092      	lsls	r2, r2, #2
 800d9c8:	f105 010c 	add.w	r1, r5, #12
 800d9cc:	300c      	adds	r0, #12
 800d9ce:	f000 fd7d 	bl	800e4cc <memcpy>
 800d9d2:	2201      	movs	r2, #1
 800d9d4:	4631      	mov	r1, r6
 800d9d6:	4648      	mov	r0, r9
 800d9d8:	f000 fb46 	bl	800e068 <__lshift>
 800d9dc:	f10a 0301 	add.w	r3, sl, #1
 800d9e0:	9300      	str	r3, [sp, #0]
 800d9e2:	eb0a 030b 	add.w	r3, sl, fp
 800d9e6:	9308      	str	r3, [sp, #32]
 800d9e8:	9b04      	ldr	r3, [sp, #16]
 800d9ea:	f003 0301 	and.w	r3, r3, #1
 800d9ee:	462f      	mov	r7, r5
 800d9f0:	9306      	str	r3, [sp, #24]
 800d9f2:	4605      	mov	r5, r0
 800d9f4:	9b00      	ldr	r3, [sp, #0]
 800d9f6:	9802      	ldr	r0, [sp, #8]
 800d9f8:	4621      	mov	r1, r4
 800d9fa:	f103 3bff 	add.w	fp, r3, #4294967295
 800d9fe:	f7ff fa89 	bl	800cf14 <quorem>
 800da02:	4603      	mov	r3, r0
 800da04:	3330      	adds	r3, #48	@ 0x30
 800da06:	9003      	str	r0, [sp, #12]
 800da08:	4639      	mov	r1, r7
 800da0a:	9802      	ldr	r0, [sp, #8]
 800da0c:	9309      	str	r3, [sp, #36]	@ 0x24
 800da0e:	f000 fb97 	bl	800e140 <__mcmp>
 800da12:	462a      	mov	r2, r5
 800da14:	9004      	str	r0, [sp, #16]
 800da16:	4621      	mov	r1, r4
 800da18:	4648      	mov	r0, r9
 800da1a:	f000 fbad 	bl	800e178 <__mdiff>
 800da1e:	68c2      	ldr	r2, [r0, #12]
 800da20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da22:	4606      	mov	r6, r0
 800da24:	bb02      	cbnz	r2, 800da68 <_dtoa_r+0xa40>
 800da26:	4601      	mov	r1, r0
 800da28:	9802      	ldr	r0, [sp, #8]
 800da2a:	f000 fb89 	bl	800e140 <__mcmp>
 800da2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da30:	4602      	mov	r2, r0
 800da32:	4631      	mov	r1, r6
 800da34:	4648      	mov	r0, r9
 800da36:	920c      	str	r2, [sp, #48]	@ 0x30
 800da38:	9309      	str	r3, [sp, #36]	@ 0x24
 800da3a:	f000 f94f 	bl	800dcdc <_Bfree>
 800da3e:	9b07      	ldr	r3, [sp, #28]
 800da40:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800da42:	9e00      	ldr	r6, [sp, #0]
 800da44:	ea42 0103 	orr.w	r1, r2, r3
 800da48:	9b06      	ldr	r3, [sp, #24]
 800da4a:	4319      	orrs	r1, r3
 800da4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da4e:	d10d      	bne.n	800da6c <_dtoa_r+0xa44>
 800da50:	2b39      	cmp	r3, #57	@ 0x39
 800da52:	d027      	beq.n	800daa4 <_dtoa_r+0xa7c>
 800da54:	9a04      	ldr	r2, [sp, #16]
 800da56:	2a00      	cmp	r2, #0
 800da58:	dd01      	ble.n	800da5e <_dtoa_r+0xa36>
 800da5a:	9b03      	ldr	r3, [sp, #12]
 800da5c:	3331      	adds	r3, #49	@ 0x31
 800da5e:	f88b 3000 	strb.w	r3, [fp]
 800da62:	e52e      	b.n	800d4c2 <_dtoa_r+0x49a>
 800da64:	4628      	mov	r0, r5
 800da66:	e7b9      	b.n	800d9dc <_dtoa_r+0x9b4>
 800da68:	2201      	movs	r2, #1
 800da6a:	e7e2      	b.n	800da32 <_dtoa_r+0xa0a>
 800da6c:	9904      	ldr	r1, [sp, #16]
 800da6e:	2900      	cmp	r1, #0
 800da70:	db04      	blt.n	800da7c <_dtoa_r+0xa54>
 800da72:	9807      	ldr	r0, [sp, #28]
 800da74:	4301      	orrs	r1, r0
 800da76:	9806      	ldr	r0, [sp, #24]
 800da78:	4301      	orrs	r1, r0
 800da7a:	d120      	bne.n	800dabe <_dtoa_r+0xa96>
 800da7c:	2a00      	cmp	r2, #0
 800da7e:	ddee      	ble.n	800da5e <_dtoa_r+0xa36>
 800da80:	9902      	ldr	r1, [sp, #8]
 800da82:	9300      	str	r3, [sp, #0]
 800da84:	2201      	movs	r2, #1
 800da86:	4648      	mov	r0, r9
 800da88:	f000 faee 	bl	800e068 <__lshift>
 800da8c:	4621      	mov	r1, r4
 800da8e:	9002      	str	r0, [sp, #8]
 800da90:	f000 fb56 	bl	800e140 <__mcmp>
 800da94:	2800      	cmp	r0, #0
 800da96:	9b00      	ldr	r3, [sp, #0]
 800da98:	dc02      	bgt.n	800daa0 <_dtoa_r+0xa78>
 800da9a:	d1e0      	bne.n	800da5e <_dtoa_r+0xa36>
 800da9c:	07da      	lsls	r2, r3, #31
 800da9e:	d5de      	bpl.n	800da5e <_dtoa_r+0xa36>
 800daa0:	2b39      	cmp	r3, #57	@ 0x39
 800daa2:	d1da      	bne.n	800da5a <_dtoa_r+0xa32>
 800daa4:	2339      	movs	r3, #57	@ 0x39
 800daa6:	f88b 3000 	strb.w	r3, [fp]
 800daaa:	4633      	mov	r3, r6
 800daac:	461e      	mov	r6, r3
 800daae:	3b01      	subs	r3, #1
 800dab0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800dab4:	2a39      	cmp	r2, #57	@ 0x39
 800dab6:	d04e      	beq.n	800db56 <_dtoa_r+0xb2e>
 800dab8:	3201      	adds	r2, #1
 800daba:	701a      	strb	r2, [r3, #0]
 800dabc:	e501      	b.n	800d4c2 <_dtoa_r+0x49a>
 800dabe:	2a00      	cmp	r2, #0
 800dac0:	dd03      	ble.n	800daca <_dtoa_r+0xaa2>
 800dac2:	2b39      	cmp	r3, #57	@ 0x39
 800dac4:	d0ee      	beq.n	800daa4 <_dtoa_r+0xa7c>
 800dac6:	3301      	adds	r3, #1
 800dac8:	e7c9      	b.n	800da5e <_dtoa_r+0xa36>
 800daca:	9a00      	ldr	r2, [sp, #0]
 800dacc:	9908      	ldr	r1, [sp, #32]
 800dace:	f802 3c01 	strb.w	r3, [r2, #-1]
 800dad2:	428a      	cmp	r2, r1
 800dad4:	d028      	beq.n	800db28 <_dtoa_r+0xb00>
 800dad6:	9902      	ldr	r1, [sp, #8]
 800dad8:	2300      	movs	r3, #0
 800dada:	220a      	movs	r2, #10
 800dadc:	4648      	mov	r0, r9
 800dade:	f000 f91f 	bl	800dd20 <__multadd>
 800dae2:	42af      	cmp	r7, r5
 800dae4:	9002      	str	r0, [sp, #8]
 800dae6:	f04f 0300 	mov.w	r3, #0
 800daea:	f04f 020a 	mov.w	r2, #10
 800daee:	4639      	mov	r1, r7
 800daf0:	4648      	mov	r0, r9
 800daf2:	d107      	bne.n	800db04 <_dtoa_r+0xadc>
 800daf4:	f000 f914 	bl	800dd20 <__multadd>
 800daf8:	4607      	mov	r7, r0
 800dafa:	4605      	mov	r5, r0
 800dafc:	9b00      	ldr	r3, [sp, #0]
 800dafe:	3301      	adds	r3, #1
 800db00:	9300      	str	r3, [sp, #0]
 800db02:	e777      	b.n	800d9f4 <_dtoa_r+0x9cc>
 800db04:	f000 f90c 	bl	800dd20 <__multadd>
 800db08:	4629      	mov	r1, r5
 800db0a:	4607      	mov	r7, r0
 800db0c:	2300      	movs	r3, #0
 800db0e:	220a      	movs	r2, #10
 800db10:	4648      	mov	r0, r9
 800db12:	f000 f905 	bl	800dd20 <__multadd>
 800db16:	4605      	mov	r5, r0
 800db18:	e7f0      	b.n	800dafc <_dtoa_r+0xad4>
 800db1a:	f1bb 0f00 	cmp.w	fp, #0
 800db1e:	bfcc      	ite	gt
 800db20:	465e      	movgt	r6, fp
 800db22:	2601      	movle	r6, #1
 800db24:	4456      	add	r6, sl
 800db26:	2700      	movs	r7, #0
 800db28:	9902      	ldr	r1, [sp, #8]
 800db2a:	9300      	str	r3, [sp, #0]
 800db2c:	2201      	movs	r2, #1
 800db2e:	4648      	mov	r0, r9
 800db30:	f000 fa9a 	bl	800e068 <__lshift>
 800db34:	4621      	mov	r1, r4
 800db36:	9002      	str	r0, [sp, #8]
 800db38:	f000 fb02 	bl	800e140 <__mcmp>
 800db3c:	2800      	cmp	r0, #0
 800db3e:	dcb4      	bgt.n	800daaa <_dtoa_r+0xa82>
 800db40:	d102      	bne.n	800db48 <_dtoa_r+0xb20>
 800db42:	9b00      	ldr	r3, [sp, #0]
 800db44:	07db      	lsls	r3, r3, #31
 800db46:	d4b0      	bmi.n	800daaa <_dtoa_r+0xa82>
 800db48:	4633      	mov	r3, r6
 800db4a:	461e      	mov	r6, r3
 800db4c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800db50:	2a30      	cmp	r2, #48	@ 0x30
 800db52:	d0fa      	beq.n	800db4a <_dtoa_r+0xb22>
 800db54:	e4b5      	b.n	800d4c2 <_dtoa_r+0x49a>
 800db56:	459a      	cmp	sl, r3
 800db58:	d1a8      	bne.n	800daac <_dtoa_r+0xa84>
 800db5a:	2331      	movs	r3, #49	@ 0x31
 800db5c:	f108 0801 	add.w	r8, r8, #1
 800db60:	f88a 3000 	strb.w	r3, [sl]
 800db64:	e4ad      	b.n	800d4c2 <_dtoa_r+0x49a>
 800db66:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800db68:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800dbc4 <_dtoa_r+0xb9c>
 800db6c:	b11b      	cbz	r3, 800db76 <_dtoa_r+0xb4e>
 800db6e:	f10a 0308 	add.w	r3, sl, #8
 800db72:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800db74:	6013      	str	r3, [r2, #0]
 800db76:	4650      	mov	r0, sl
 800db78:	b017      	add	sp, #92	@ 0x5c
 800db7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db7e:	9b07      	ldr	r3, [sp, #28]
 800db80:	2b01      	cmp	r3, #1
 800db82:	f77f ae2e 	ble.w	800d7e2 <_dtoa_r+0x7ba>
 800db86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800db88:	9308      	str	r3, [sp, #32]
 800db8a:	2001      	movs	r0, #1
 800db8c:	e64d      	b.n	800d82a <_dtoa_r+0x802>
 800db8e:	f1bb 0f00 	cmp.w	fp, #0
 800db92:	f77f aed9 	ble.w	800d948 <_dtoa_r+0x920>
 800db96:	4656      	mov	r6, sl
 800db98:	9802      	ldr	r0, [sp, #8]
 800db9a:	4621      	mov	r1, r4
 800db9c:	f7ff f9ba 	bl	800cf14 <quorem>
 800dba0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800dba4:	f806 3b01 	strb.w	r3, [r6], #1
 800dba8:	eba6 020a 	sub.w	r2, r6, sl
 800dbac:	4593      	cmp	fp, r2
 800dbae:	ddb4      	ble.n	800db1a <_dtoa_r+0xaf2>
 800dbb0:	9902      	ldr	r1, [sp, #8]
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	220a      	movs	r2, #10
 800dbb6:	4648      	mov	r0, r9
 800dbb8:	f000 f8b2 	bl	800dd20 <__multadd>
 800dbbc:	9002      	str	r0, [sp, #8]
 800dbbe:	e7eb      	b.n	800db98 <_dtoa_r+0xb70>
 800dbc0:	0800f1b0 	.word	0x0800f1b0
 800dbc4:	0800f134 	.word	0x0800f134

0800dbc8 <_free_r>:
 800dbc8:	b538      	push	{r3, r4, r5, lr}
 800dbca:	4605      	mov	r5, r0
 800dbcc:	2900      	cmp	r1, #0
 800dbce:	d041      	beq.n	800dc54 <_free_r+0x8c>
 800dbd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dbd4:	1f0c      	subs	r4, r1, #4
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	bfb8      	it	lt
 800dbda:	18e4      	addlt	r4, r4, r3
 800dbdc:	f7fe fb84 	bl	800c2e8 <__malloc_lock>
 800dbe0:	4a1d      	ldr	r2, [pc, #116]	@ (800dc58 <_free_r+0x90>)
 800dbe2:	6813      	ldr	r3, [r2, #0]
 800dbe4:	b933      	cbnz	r3, 800dbf4 <_free_r+0x2c>
 800dbe6:	6063      	str	r3, [r4, #4]
 800dbe8:	6014      	str	r4, [r2, #0]
 800dbea:	4628      	mov	r0, r5
 800dbec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dbf0:	f7fe bb80 	b.w	800c2f4 <__malloc_unlock>
 800dbf4:	42a3      	cmp	r3, r4
 800dbf6:	d908      	bls.n	800dc0a <_free_r+0x42>
 800dbf8:	6820      	ldr	r0, [r4, #0]
 800dbfa:	1821      	adds	r1, r4, r0
 800dbfc:	428b      	cmp	r3, r1
 800dbfe:	bf01      	itttt	eq
 800dc00:	6819      	ldreq	r1, [r3, #0]
 800dc02:	685b      	ldreq	r3, [r3, #4]
 800dc04:	1809      	addeq	r1, r1, r0
 800dc06:	6021      	streq	r1, [r4, #0]
 800dc08:	e7ed      	b.n	800dbe6 <_free_r+0x1e>
 800dc0a:	461a      	mov	r2, r3
 800dc0c:	685b      	ldr	r3, [r3, #4]
 800dc0e:	b10b      	cbz	r3, 800dc14 <_free_r+0x4c>
 800dc10:	42a3      	cmp	r3, r4
 800dc12:	d9fa      	bls.n	800dc0a <_free_r+0x42>
 800dc14:	6811      	ldr	r1, [r2, #0]
 800dc16:	1850      	adds	r0, r2, r1
 800dc18:	42a0      	cmp	r0, r4
 800dc1a:	d10b      	bne.n	800dc34 <_free_r+0x6c>
 800dc1c:	6820      	ldr	r0, [r4, #0]
 800dc1e:	4401      	add	r1, r0
 800dc20:	1850      	adds	r0, r2, r1
 800dc22:	4283      	cmp	r3, r0
 800dc24:	6011      	str	r1, [r2, #0]
 800dc26:	d1e0      	bne.n	800dbea <_free_r+0x22>
 800dc28:	6818      	ldr	r0, [r3, #0]
 800dc2a:	685b      	ldr	r3, [r3, #4]
 800dc2c:	6053      	str	r3, [r2, #4]
 800dc2e:	4408      	add	r0, r1
 800dc30:	6010      	str	r0, [r2, #0]
 800dc32:	e7da      	b.n	800dbea <_free_r+0x22>
 800dc34:	d902      	bls.n	800dc3c <_free_r+0x74>
 800dc36:	230c      	movs	r3, #12
 800dc38:	602b      	str	r3, [r5, #0]
 800dc3a:	e7d6      	b.n	800dbea <_free_r+0x22>
 800dc3c:	6820      	ldr	r0, [r4, #0]
 800dc3e:	1821      	adds	r1, r4, r0
 800dc40:	428b      	cmp	r3, r1
 800dc42:	bf04      	itt	eq
 800dc44:	6819      	ldreq	r1, [r3, #0]
 800dc46:	685b      	ldreq	r3, [r3, #4]
 800dc48:	6063      	str	r3, [r4, #4]
 800dc4a:	bf04      	itt	eq
 800dc4c:	1809      	addeq	r1, r1, r0
 800dc4e:	6021      	streq	r1, [r4, #0]
 800dc50:	6054      	str	r4, [r2, #4]
 800dc52:	e7ca      	b.n	800dbea <_free_r+0x22>
 800dc54:	bd38      	pop	{r3, r4, r5, pc}
 800dc56:	bf00      	nop
 800dc58:	20008c48 	.word	0x20008c48

0800dc5c <_Balloc>:
 800dc5c:	b570      	push	{r4, r5, r6, lr}
 800dc5e:	69c6      	ldr	r6, [r0, #28]
 800dc60:	4604      	mov	r4, r0
 800dc62:	460d      	mov	r5, r1
 800dc64:	b976      	cbnz	r6, 800dc84 <_Balloc+0x28>
 800dc66:	2010      	movs	r0, #16
 800dc68:	f7fe fa8c 	bl	800c184 <malloc>
 800dc6c:	4602      	mov	r2, r0
 800dc6e:	61e0      	str	r0, [r4, #28]
 800dc70:	b920      	cbnz	r0, 800dc7c <_Balloc+0x20>
 800dc72:	4b18      	ldr	r3, [pc, #96]	@ (800dcd4 <_Balloc+0x78>)
 800dc74:	4818      	ldr	r0, [pc, #96]	@ (800dcd8 <_Balloc+0x7c>)
 800dc76:	216b      	movs	r1, #107	@ 0x6b
 800dc78:	f7ff f92e 	bl	800ced8 <__assert_func>
 800dc7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dc80:	6006      	str	r6, [r0, #0]
 800dc82:	60c6      	str	r6, [r0, #12]
 800dc84:	69e6      	ldr	r6, [r4, #28]
 800dc86:	68f3      	ldr	r3, [r6, #12]
 800dc88:	b183      	cbz	r3, 800dcac <_Balloc+0x50>
 800dc8a:	69e3      	ldr	r3, [r4, #28]
 800dc8c:	68db      	ldr	r3, [r3, #12]
 800dc8e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dc92:	b9b8      	cbnz	r0, 800dcc4 <_Balloc+0x68>
 800dc94:	2101      	movs	r1, #1
 800dc96:	fa01 f605 	lsl.w	r6, r1, r5
 800dc9a:	1d72      	adds	r2, r6, #5
 800dc9c:	0092      	lsls	r2, r2, #2
 800dc9e:	4620      	mov	r0, r4
 800dca0:	f000 fc29 	bl	800e4f6 <_calloc_r>
 800dca4:	b160      	cbz	r0, 800dcc0 <_Balloc+0x64>
 800dca6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dcaa:	e00e      	b.n	800dcca <_Balloc+0x6e>
 800dcac:	2221      	movs	r2, #33	@ 0x21
 800dcae:	2104      	movs	r1, #4
 800dcb0:	4620      	mov	r0, r4
 800dcb2:	f000 fc20 	bl	800e4f6 <_calloc_r>
 800dcb6:	69e3      	ldr	r3, [r4, #28]
 800dcb8:	60f0      	str	r0, [r6, #12]
 800dcba:	68db      	ldr	r3, [r3, #12]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d1e4      	bne.n	800dc8a <_Balloc+0x2e>
 800dcc0:	2000      	movs	r0, #0
 800dcc2:	bd70      	pop	{r4, r5, r6, pc}
 800dcc4:	6802      	ldr	r2, [r0, #0]
 800dcc6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dcca:	2300      	movs	r3, #0
 800dccc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dcd0:	e7f7      	b.n	800dcc2 <_Balloc+0x66>
 800dcd2:	bf00      	nop
 800dcd4:	0800f141 	.word	0x0800f141
 800dcd8:	0800f1c1 	.word	0x0800f1c1

0800dcdc <_Bfree>:
 800dcdc:	b570      	push	{r4, r5, r6, lr}
 800dcde:	69c6      	ldr	r6, [r0, #28]
 800dce0:	4605      	mov	r5, r0
 800dce2:	460c      	mov	r4, r1
 800dce4:	b976      	cbnz	r6, 800dd04 <_Bfree+0x28>
 800dce6:	2010      	movs	r0, #16
 800dce8:	f7fe fa4c 	bl	800c184 <malloc>
 800dcec:	4602      	mov	r2, r0
 800dcee:	61e8      	str	r0, [r5, #28]
 800dcf0:	b920      	cbnz	r0, 800dcfc <_Bfree+0x20>
 800dcf2:	4b09      	ldr	r3, [pc, #36]	@ (800dd18 <_Bfree+0x3c>)
 800dcf4:	4809      	ldr	r0, [pc, #36]	@ (800dd1c <_Bfree+0x40>)
 800dcf6:	218f      	movs	r1, #143	@ 0x8f
 800dcf8:	f7ff f8ee 	bl	800ced8 <__assert_func>
 800dcfc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dd00:	6006      	str	r6, [r0, #0]
 800dd02:	60c6      	str	r6, [r0, #12]
 800dd04:	b13c      	cbz	r4, 800dd16 <_Bfree+0x3a>
 800dd06:	69eb      	ldr	r3, [r5, #28]
 800dd08:	6862      	ldr	r2, [r4, #4]
 800dd0a:	68db      	ldr	r3, [r3, #12]
 800dd0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dd10:	6021      	str	r1, [r4, #0]
 800dd12:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800dd16:	bd70      	pop	{r4, r5, r6, pc}
 800dd18:	0800f141 	.word	0x0800f141
 800dd1c:	0800f1c1 	.word	0x0800f1c1

0800dd20 <__multadd>:
 800dd20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd24:	690d      	ldr	r5, [r1, #16]
 800dd26:	4607      	mov	r7, r0
 800dd28:	460c      	mov	r4, r1
 800dd2a:	461e      	mov	r6, r3
 800dd2c:	f101 0c14 	add.w	ip, r1, #20
 800dd30:	2000      	movs	r0, #0
 800dd32:	f8dc 3000 	ldr.w	r3, [ip]
 800dd36:	b299      	uxth	r1, r3
 800dd38:	fb02 6101 	mla	r1, r2, r1, r6
 800dd3c:	0c1e      	lsrs	r6, r3, #16
 800dd3e:	0c0b      	lsrs	r3, r1, #16
 800dd40:	fb02 3306 	mla	r3, r2, r6, r3
 800dd44:	b289      	uxth	r1, r1
 800dd46:	3001      	adds	r0, #1
 800dd48:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800dd4c:	4285      	cmp	r5, r0
 800dd4e:	f84c 1b04 	str.w	r1, [ip], #4
 800dd52:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800dd56:	dcec      	bgt.n	800dd32 <__multadd+0x12>
 800dd58:	b30e      	cbz	r6, 800dd9e <__multadd+0x7e>
 800dd5a:	68a3      	ldr	r3, [r4, #8]
 800dd5c:	42ab      	cmp	r3, r5
 800dd5e:	dc19      	bgt.n	800dd94 <__multadd+0x74>
 800dd60:	6861      	ldr	r1, [r4, #4]
 800dd62:	4638      	mov	r0, r7
 800dd64:	3101      	adds	r1, #1
 800dd66:	f7ff ff79 	bl	800dc5c <_Balloc>
 800dd6a:	4680      	mov	r8, r0
 800dd6c:	b928      	cbnz	r0, 800dd7a <__multadd+0x5a>
 800dd6e:	4602      	mov	r2, r0
 800dd70:	4b0c      	ldr	r3, [pc, #48]	@ (800dda4 <__multadd+0x84>)
 800dd72:	480d      	ldr	r0, [pc, #52]	@ (800dda8 <__multadd+0x88>)
 800dd74:	21ba      	movs	r1, #186	@ 0xba
 800dd76:	f7ff f8af 	bl	800ced8 <__assert_func>
 800dd7a:	6922      	ldr	r2, [r4, #16]
 800dd7c:	3202      	adds	r2, #2
 800dd7e:	f104 010c 	add.w	r1, r4, #12
 800dd82:	0092      	lsls	r2, r2, #2
 800dd84:	300c      	adds	r0, #12
 800dd86:	f000 fba1 	bl	800e4cc <memcpy>
 800dd8a:	4621      	mov	r1, r4
 800dd8c:	4638      	mov	r0, r7
 800dd8e:	f7ff ffa5 	bl	800dcdc <_Bfree>
 800dd92:	4644      	mov	r4, r8
 800dd94:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dd98:	3501      	adds	r5, #1
 800dd9a:	615e      	str	r6, [r3, #20]
 800dd9c:	6125      	str	r5, [r4, #16]
 800dd9e:	4620      	mov	r0, r4
 800dda0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dda4:	0800f1b0 	.word	0x0800f1b0
 800dda8:	0800f1c1 	.word	0x0800f1c1

0800ddac <__hi0bits>:
 800ddac:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ddb0:	4603      	mov	r3, r0
 800ddb2:	bf36      	itet	cc
 800ddb4:	0403      	lslcc	r3, r0, #16
 800ddb6:	2000      	movcs	r0, #0
 800ddb8:	2010      	movcc	r0, #16
 800ddba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ddbe:	bf3c      	itt	cc
 800ddc0:	021b      	lslcc	r3, r3, #8
 800ddc2:	3008      	addcc	r0, #8
 800ddc4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ddc8:	bf3c      	itt	cc
 800ddca:	011b      	lslcc	r3, r3, #4
 800ddcc:	3004      	addcc	r0, #4
 800ddce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ddd2:	bf3c      	itt	cc
 800ddd4:	009b      	lslcc	r3, r3, #2
 800ddd6:	3002      	addcc	r0, #2
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	db05      	blt.n	800dde8 <__hi0bits+0x3c>
 800dddc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800dde0:	f100 0001 	add.w	r0, r0, #1
 800dde4:	bf08      	it	eq
 800dde6:	2020      	moveq	r0, #32
 800dde8:	4770      	bx	lr

0800ddea <__lo0bits>:
 800ddea:	6803      	ldr	r3, [r0, #0]
 800ddec:	4602      	mov	r2, r0
 800ddee:	f013 0007 	ands.w	r0, r3, #7
 800ddf2:	d00b      	beq.n	800de0c <__lo0bits+0x22>
 800ddf4:	07d9      	lsls	r1, r3, #31
 800ddf6:	d421      	bmi.n	800de3c <__lo0bits+0x52>
 800ddf8:	0798      	lsls	r0, r3, #30
 800ddfa:	bf49      	itett	mi
 800ddfc:	085b      	lsrmi	r3, r3, #1
 800ddfe:	089b      	lsrpl	r3, r3, #2
 800de00:	2001      	movmi	r0, #1
 800de02:	6013      	strmi	r3, [r2, #0]
 800de04:	bf5c      	itt	pl
 800de06:	6013      	strpl	r3, [r2, #0]
 800de08:	2002      	movpl	r0, #2
 800de0a:	4770      	bx	lr
 800de0c:	b299      	uxth	r1, r3
 800de0e:	b909      	cbnz	r1, 800de14 <__lo0bits+0x2a>
 800de10:	0c1b      	lsrs	r3, r3, #16
 800de12:	2010      	movs	r0, #16
 800de14:	b2d9      	uxtb	r1, r3
 800de16:	b909      	cbnz	r1, 800de1c <__lo0bits+0x32>
 800de18:	3008      	adds	r0, #8
 800de1a:	0a1b      	lsrs	r3, r3, #8
 800de1c:	0719      	lsls	r1, r3, #28
 800de1e:	bf04      	itt	eq
 800de20:	091b      	lsreq	r3, r3, #4
 800de22:	3004      	addeq	r0, #4
 800de24:	0799      	lsls	r1, r3, #30
 800de26:	bf04      	itt	eq
 800de28:	089b      	lsreq	r3, r3, #2
 800de2a:	3002      	addeq	r0, #2
 800de2c:	07d9      	lsls	r1, r3, #31
 800de2e:	d403      	bmi.n	800de38 <__lo0bits+0x4e>
 800de30:	085b      	lsrs	r3, r3, #1
 800de32:	f100 0001 	add.w	r0, r0, #1
 800de36:	d003      	beq.n	800de40 <__lo0bits+0x56>
 800de38:	6013      	str	r3, [r2, #0]
 800de3a:	4770      	bx	lr
 800de3c:	2000      	movs	r0, #0
 800de3e:	4770      	bx	lr
 800de40:	2020      	movs	r0, #32
 800de42:	4770      	bx	lr

0800de44 <__i2b>:
 800de44:	b510      	push	{r4, lr}
 800de46:	460c      	mov	r4, r1
 800de48:	2101      	movs	r1, #1
 800de4a:	f7ff ff07 	bl	800dc5c <_Balloc>
 800de4e:	4602      	mov	r2, r0
 800de50:	b928      	cbnz	r0, 800de5e <__i2b+0x1a>
 800de52:	4b05      	ldr	r3, [pc, #20]	@ (800de68 <__i2b+0x24>)
 800de54:	4805      	ldr	r0, [pc, #20]	@ (800de6c <__i2b+0x28>)
 800de56:	f240 1145 	movw	r1, #325	@ 0x145
 800de5a:	f7ff f83d 	bl	800ced8 <__assert_func>
 800de5e:	2301      	movs	r3, #1
 800de60:	6144      	str	r4, [r0, #20]
 800de62:	6103      	str	r3, [r0, #16]
 800de64:	bd10      	pop	{r4, pc}
 800de66:	bf00      	nop
 800de68:	0800f1b0 	.word	0x0800f1b0
 800de6c:	0800f1c1 	.word	0x0800f1c1

0800de70 <__multiply>:
 800de70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de74:	4617      	mov	r7, r2
 800de76:	690a      	ldr	r2, [r1, #16]
 800de78:	693b      	ldr	r3, [r7, #16]
 800de7a:	429a      	cmp	r2, r3
 800de7c:	bfa8      	it	ge
 800de7e:	463b      	movge	r3, r7
 800de80:	4689      	mov	r9, r1
 800de82:	bfa4      	itt	ge
 800de84:	460f      	movge	r7, r1
 800de86:	4699      	movge	r9, r3
 800de88:	693d      	ldr	r5, [r7, #16]
 800de8a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800de8e:	68bb      	ldr	r3, [r7, #8]
 800de90:	6879      	ldr	r1, [r7, #4]
 800de92:	eb05 060a 	add.w	r6, r5, sl
 800de96:	42b3      	cmp	r3, r6
 800de98:	b085      	sub	sp, #20
 800de9a:	bfb8      	it	lt
 800de9c:	3101      	addlt	r1, #1
 800de9e:	f7ff fedd 	bl	800dc5c <_Balloc>
 800dea2:	b930      	cbnz	r0, 800deb2 <__multiply+0x42>
 800dea4:	4602      	mov	r2, r0
 800dea6:	4b41      	ldr	r3, [pc, #260]	@ (800dfac <__multiply+0x13c>)
 800dea8:	4841      	ldr	r0, [pc, #260]	@ (800dfb0 <__multiply+0x140>)
 800deaa:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800deae:	f7ff f813 	bl	800ced8 <__assert_func>
 800deb2:	f100 0414 	add.w	r4, r0, #20
 800deb6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800deba:	4623      	mov	r3, r4
 800debc:	2200      	movs	r2, #0
 800debe:	4573      	cmp	r3, lr
 800dec0:	d320      	bcc.n	800df04 <__multiply+0x94>
 800dec2:	f107 0814 	add.w	r8, r7, #20
 800dec6:	f109 0114 	add.w	r1, r9, #20
 800deca:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800dece:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800ded2:	9302      	str	r3, [sp, #8]
 800ded4:	1beb      	subs	r3, r5, r7
 800ded6:	3b15      	subs	r3, #21
 800ded8:	f023 0303 	bic.w	r3, r3, #3
 800dedc:	3304      	adds	r3, #4
 800dede:	3715      	adds	r7, #21
 800dee0:	42bd      	cmp	r5, r7
 800dee2:	bf38      	it	cc
 800dee4:	2304      	movcc	r3, #4
 800dee6:	9301      	str	r3, [sp, #4]
 800dee8:	9b02      	ldr	r3, [sp, #8]
 800deea:	9103      	str	r1, [sp, #12]
 800deec:	428b      	cmp	r3, r1
 800deee:	d80c      	bhi.n	800df0a <__multiply+0x9a>
 800def0:	2e00      	cmp	r6, #0
 800def2:	dd03      	ble.n	800defc <__multiply+0x8c>
 800def4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800def8:	2b00      	cmp	r3, #0
 800defa:	d055      	beq.n	800dfa8 <__multiply+0x138>
 800defc:	6106      	str	r6, [r0, #16]
 800defe:	b005      	add	sp, #20
 800df00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df04:	f843 2b04 	str.w	r2, [r3], #4
 800df08:	e7d9      	b.n	800debe <__multiply+0x4e>
 800df0a:	f8b1 a000 	ldrh.w	sl, [r1]
 800df0e:	f1ba 0f00 	cmp.w	sl, #0
 800df12:	d01f      	beq.n	800df54 <__multiply+0xe4>
 800df14:	46c4      	mov	ip, r8
 800df16:	46a1      	mov	r9, r4
 800df18:	2700      	movs	r7, #0
 800df1a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800df1e:	f8d9 3000 	ldr.w	r3, [r9]
 800df22:	fa1f fb82 	uxth.w	fp, r2
 800df26:	b29b      	uxth	r3, r3
 800df28:	fb0a 330b 	mla	r3, sl, fp, r3
 800df2c:	443b      	add	r3, r7
 800df2e:	f8d9 7000 	ldr.w	r7, [r9]
 800df32:	0c12      	lsrs	r2, r2, #16
 800df34:	0c3f      	lsrs	r7, r7, #16
 800df36:	fb0a 7202 	mla	r2, sl, r2, r7
 800df3a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800df3e:	b29b      	uxth	r3, r3
 800df40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800df44:	4565      	cmp	r5, ip
 800df46:	f849 3b04 	str.w	r3, [r9], #4
 800df4a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800df4e:	d8e4      	bhi.n	800df1a <__multiply+0xaa>
 800df50:	9b01      	ldr	r3, [sp, #4]
 800df52:	50e7      	str	r7, [r4, r3]
 800df54:	9b03      	ldr	r3, [sp, #12]
 800df56:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800df5a:	3104      	adds	r1, #4
 800df5c:	f1b9 0f00 	cmp.w	r9, #0
 800df60:	d020      	beq.n	800dfa4 <__multiply+0x134>
 800df62:	6823      	ldr	r3, [r4, #0]
 800df64:	4647      	mov	r7, r8
 800df66:	46a4      	mov	ip, r4
 800df68:	f04f 0a00 	mov.w	sl, #0
 800df6c:	f8b7 b000 	ldrh.w	fp, [r7]
 800df70:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800df74:	fb09 220b 	mla	r2, r9, fp, r2
 800df78:	4452      	add	r2, sl
 800df7a:	b29b      	uxth	r3, r3
 800df7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800df80:	f84c 3b04 	str.w	r3, [ip], #4
 800df84:	f857 3b04 	ldr.w	r3, [r7], #4
 800df88:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800df8c:	f8bc 3000 	ldrh.w	r3, [ip]
 800df90:	fb09 330a 	mla	r3, r9, sl, r3
 800df94:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800df98:	42bd      	cmp	r5, r7
 800df9a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800df9e:	d8e5      	bhi.n	800df6c <__multiply+0xfc>
 800dfa0:	9a01      	ldr	r2, [sp, #4]
 800dfa2:	50a3      	str	r3, [r4, r2]
 800dfa4:	3404      	adds	r4, #4
 800dfa6:	e79f      	b.n	800dee8 <__multiply+0x78>
 800dfa8:	3e01      	subs	r6, #1
 800dfaa:	e7a1      	b.n	800def0 <__multiply+0x80>
 800dfac:	0800f1b0 	.word	0x0800f1b0
 800dfb0:	0800f1c1 	.word	0x0800f1c1

0800dfb4 <__pow5mult>:
 800dfb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dfb8:	4615      	mov	r5, r2
 800dfba:	f012 0203 	ands.w	r2, r2, #3
 800dfbe:	4607      	mov	r7, r0
 800dfc0:	460e      	mov	r6, r1
 800dfc2:	d007      	beq.n	800dfd4 <__pow5mult+0x20>
 800dfc4:	4c25      	ldr	r4, [pc, #148]	@ (800e05c <__pow5mult+0xa8>)
 800dfc6:	3a01      	subs	r2, #1
 800dfc8:	2300      	movs	r3, #0
 800dfca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dfce:	f7ff fea7 	bl	800dd20 <__multadd>
 800dfd2:	4606      	mov	r6, r0
 800dfd4:	10ad      	asrs	r5, r5, #2
 800dfd6:	d03d      	beq.n	800e054 <__pow5mult+0xa0>
 800dfd8:	69fc      	ldr	r4, [r7, #28]
 800dfda:	b97c      	cbnz	r4, 800dffc <__pow5mult+0x48>
 800dfdc:	2010      	movs	r0, #16
 800dfde:	f7fe f8d1 	bl	800c184 <malloc>
 800dfe2:	4602      	mov	r2, r0
 800dfe4:	61f8      	str	r0, [r7, #28]
 800dfe6:	b928      	cbnz	r0, 800dff4 <__pow5mult+0x40>
 800dfe8:	4b1d      	ldr	r3, [pc, #116]	@ (800e060 <__pow5mult+0xac>)
 800dfea:	481e      	ldr	r0, [pc, #120]	@ (800e064 <__pow5mult+0xb0>)
 800dfec:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800dff0:	f7fe ff72 	bl	800ced8 <__assert_func>
 800dff4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dff8:	6004      	str	r4, [r0, #0]
 800dffa:	60c4      	str	r4, [r0, #12]
 800dffc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e000:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e004:	b94c      	cbnz	r4, 800e01a <__pow5mult+0x66>
 800e006:	f240 2171 	movw	r1, #625	@ 0x271
 800e00a:	4638      	mov	r0, r7
 800e00c:	f7ff ff1a 	bl	800de44 <__i2b>
 800e010:	2300      	movs	r3, #0
 800e012:	f8c8 0008 	str.w	r0, [r8, #8]
 800e016:	4604      	mov	r4, r0
 800e018:	6003      	str	r3, [r0, #0]
 800e01a:	f04f 0900 	mov.w	r9, #0
 800e01e:	07eb      	lsls	r3, r5, #31
 800e020:	d50a      	bpl.n	800e038 <__pow5mult+0x84>
 800e022:	4631      	mov	r1, r6
 800e024:	4622      	mov	r2, r4
 800e026:	4638      	mov	r0, r7
 800e028:	f7ff ff22 	bl	800de70 <__multiply>
 800e02c:	4631      	mov	r1, r6
 800e02e:	4680      	mov	r8, r0
 800e030:	4638      	mov	r0, r7
 800e032:	f7ff fe53 	bl	800dcdc <_Bfree>
 800e036:	4646      	mov	r6, r8
 800e038:	106d      	asrs	r5, r5, #1
 800e03a:	d00b      	beq.n	800e054 <__pow5mult+0xa0>
 800e03c:	6820      	ldr	r0, [r4, #0]
 800e03e:	b938      	cbnz	r0, 800e050 <__pow5mult+0x9c>
 800e040:	4622      	mov	r2, r4
 800e042:	4621      	mov	r1, r4
 800e044:	4638      	mov	r0, r7
 800e046:	f7ff ff13 	bl	800de70 <__multiply>
 800e04a:	6020      	str	r0, [r4, #0]
 800e04c:	f8c0 9000 	str.w	r9, [r0]
 800e050:	4604      	mov	r4, r0
 800e052:	e7e4      	b.n	800e01e <__pow5mult+0x6a>
 800e054:	4630      	mov	r0, r6
 800e056:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e05a:	bf00      	nop
 800e05c:	0800f238 	.word	0x0800f238
 800e060:	0800f141 	.word	0x0800f141
 800e064:	0800f1c1 	.word	0x0800f1c1

0800e068 <__lshift>:
 800e068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e06c:	460c      	mov	r4, r1
 800e06e:	6849      	ldr	r1, [r1, #4]
 800e070:	6923      	ldr	r3, [r4, #16]
 800e072:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e076:	68a3      	ldr	r3, [r4, #8]
 800e078:	4607      	mov	r7, r0
 800e07a:	4691      	mov	r9, r2
 800e07c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e080:	f108 0601 	add.w	r6, r8, #1
 800e084:	42b3      	cmp	r3, r6
 800e086:	db0b      	blt.n	800e0a0 <__lshift+0x38>
 800e088:	4638      	mov	r0, r7
 800e08a:	f7ff fde7 	bl	800dc5c <_Balloc>
 800e08e:	4605      	mov	r5, r0
 800e090:	b948      	cbnz	r0, 800e0a6 <__lshift+0x3e>
 800e092:	4602      	mov	r2, r0
 800e094:	4b28      	ldr	r3, [pc, #160]	@ (800e138 <__lshift+0xd0>)
 800e096:	4829      	ldr	r0, [pc, #164]	@ (800e13c <__lshift+0xd4>)
 800e098:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e09c:	f7fe ff1c 	bl	800ced8 <__assert_func>
 800e0a0:	3101      	adds	r1, #1
 800e0a2:	005b      	lsls	r3, r3, #1
 800e0a4:	e7ee      	b.n	800e084 <__lshift+0x1c>
 800e0a6:	2300      	movs	r3, #0
 800e0a8:	f100 0114 	add.w	r1, r0, #20
 800e0ac:	f100 0210 	add.w	r2, r0, #16
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	4553      	cmp	r3, sl
 800e0b4:	db33      	blt.n	800e11e <__lshift+0xb6>
 800e0b6:	6920      	ldr	r0, [r4, #16]
 800e0b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e0bc:	f104 0314 	add.w	r3, r4, #20
 800e0c0:	f019 091f 	ands.w	r9, r9, #31
 800e0c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e0c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e0cc:	d02b      	beq.n	800e126 <__lshift+0xbe>
 800e0ce:	f1c9 0e20 	rsb	lr, r9, #32
 800e0d2:	468a      	mov	sl, r1
 800e0d4:	2200      	movs	r2, #0
 800e0d6:	6818      	ldr	r0, [r3, #0]
 800e0d8:	fa00 f009 	lsl.w	r0, r0, r9
 800e0dc:	4310      	orrs	r0, r2
 800e0de:	f84a 0b04 	str.w	r0, [sl], #4
 800e0e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e0e6:	459c      	cmp	ip, r3
 800e0e8:	fa22 f20e 	lsr.w	r2, r2, lr
 800e0ec:	d8f3      	bhi.n	800e0d6 <__lshift+0x6e>
 800e0ee:	ebac 0304 	sub.w	r3, ip, r4
 800e0f2:	3b15      	subs	r3, #21
 800e0f4:	f023 0303 	bic.w	r3, r3, #3
 800e0f8:	3304      	adds	r3, #4
 800e0fa:	f104 0015 	add.w	r0, r4, #21
 800e0fe:	4560      	cmp	r0, ip
 800e100:	bf88      	it	hi
 800e102:	2304      	movhi	r3, #4
 800e104:	50ca      	str	r2, [r1, r3]
 800e106:	b10a      	cbz	r2, 800e10c <__lshift+0xa4>
 800e108:	f108 0602 	add.w	r6, r8, #2
 800e10c:	3e01      	subs	r6, #1
 800e10e:	4638      	mov	r0, r7
 800e110:	612e      	str	r6, [r5, #16]
 800e112:	4621      	mov	r1, r4
 800e114:	f7ff fde2 	bl	800dcdc <_Bfree>
 800e118:	4628      	mov	r0, r5
 800e11a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e11e:	f842 0f04 	str.w	r0, [r2, #4]!
 800e122:	3301      	adds	r3, #1
 800e124:	e7c5      	b.n	800e0b2 <__lshift+0x4a>
 800e126:	3904      	subs	r1, #4
 800e128:	f853 2b04 	ldr.w	r2, [r3], #4
 800e12c:	f841 2f04 	str.w	r2, [r1, #4]!
 800e130:	459c      	cmp	ip, r3
 800e132:	d8f9      	bhi.n	800e128 <__lshift+0xc0>
 800e134:	e7ea      	b.n	800e10c <__lshift+0xa4>
 800e136:	bf00      	nop
 800e138:	0800f1b0 	.word	0x0800f1b0
 800e13c:	0800f1c1 	.word	0x0800f1c1

0800e140 <__mcmp>:
 800e140:	690a      	ldr	r2, [r1, #16]
 800e142:	4603      	mov	r3, r0
 800e144:	6900      	ldr	r0, [r0, #16]
 800e146:	1a80      	subs	r0, r0, r2
 800e148:	b530      	push	{r4, r5, lr}
 800e14a:	d10e      	bne.n	800e16a <__mcmp+0x2a>
 800e14c:	3314      	adds	r3, #20
 800e14e:	3114      	adds	r1, #20
 800e150:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e154:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e158:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e15c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e160:	4295      	cmp	r5, r2
 800e162:	d003      	beq.n	800e16c <__mcmp+0x2c>
 800e164:	d205      	bcs.n	800e172 <__mcmp+0x32>
 800e166:	f04f 30ff 	mov.w	r0, #4294967295
 800e16a:	bd30      	pop	{r4, r5, pc}
 800e16c:	42a3      	cmp	r3, r4
 800e16e:	d3f3      	bcc.n	800e158 <__mcmp+0x18>
 800e170:	e7fb      	b.n	800e16a <__mcmp+0x2a>
 800e172:	2001      	movs	r0, #1
 800e174:	e7f9      	b.n	800e16a <__mcmp+0x2a>
	...

0800e178 <__mdiff>:
 800e178:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e17c:	4689      	mov	r9, r1
 800e17e:	4606      	mov	r6, r0
 800e180:	4611      	mov	r1, r2
 800e182:	4648      	mov	r0, r9
 800e184:	4614      	mov	r4, r2
 800e186:	f7ff ffdb 	bl	800e140 <__mcmp>
 800e18a:	1e05      	subs	r5, r0, #0
 800e18c:	d112      	bne.n	800e1b4 <__mdiff+0x3c>
 800e18e:	4629      	mov	r1, r5
 800e190:	4630      	mov	r0, r6
 800e192:	f7ff fd63 	bl	800dc5c <_Balloc>
 800e196:	4602      	mov	r2, r0
 800e198:	b928      	cbnz	r0, 800e1a6 <__mdiff+0x2e>
 800e19a:	4b3f      	ldr	r3, [pc, #252]	@ (800e298 <__mdiff+0x120>)
 800e19c:	f240 2137 	movw	r1, #567	@ 0x237
 800e1a0:	483e      	ldr	r0, [pc, #248]	@ (800e29c <__mdiff+0x124>)
 800e1a2:	f7fe fe99 	bl	800ced8 <__assert_func>
 800e1a6:	2301      	movs	r3, #1
 800e1a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e1ac:	4610      	mov	r0, r2
 800e1ae:	b003      	add	sp, #12
 800e1b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1b4:	bfbc      	itt	lt
 800e1b6:	464b      	movlt	r3, r9
 800e1b8:	46a1      	movlt	r9, r4
 800e1ba:	4630      	mov	r0, r6
 800e1bc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e1c0:	bfba      	itte	lt
 800e1c2:	461c      	movlt	r4, r3
 800e1c4:	2501      	movlt	r5, #1
 800e1c6:	2500      	movge	r5, #0
 800e1c8:	f7ff fd48 	bl	800dc5c <_Balloc>
 800e1cc:	4602      	mov	r2, r0
 800e1ce:	b918      	cbnz	r0, 800e1d8 <__mdiff+0x60>
 800e1d0:	4b31      	ldr	r3, [pc, #196]	@ (800e298 <__mdiff+0x120>)
 800e1d2:	f240 2145 	movw	r1, #581	@ 0x245
 800e1d6:	e7e3      	b.n	800e1a0 <__mdiff+0x28>
 800e1d8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e1dc:	6926      	ldr	r6, [r4, #16]
 800e1de:	60c5      	str	r5, [r0, #12]
 800e1e0:	f109 0310 	add.w	r3, r9, #16
 800e1e4:	f109 0514 	add.w	r5, r9, #20
 800e1e8:	f104 0e14 	add.w	lr, r4, #20
 800e1ec:	f100 0b14 	add.w	fp, r0, #20
 800e1f0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e1f4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e1f8:	9301      	str	r3, [sp, #4]
 800e1fa:	46d9      	mov	r9, fp
 800e1fc:	f04f 0c00 	mov.w	ip, #0
 800e200:	9b01      	ldr	r3, [sp, #4]
 800e202:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e206:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e20a:	9301      	str	r3, [sp, #4]
 800e20c:	fa1f f38a 	uxth.w	r3, sl
 800e210:	4619      	mov	r1, r3
 800e212:	b283      	uxth	r3, r0
 800e214:	1acb      	subs	r3, r1, r3
 800e216:	0c00      	lsrs	r0, r0, #16
 800e218:	4463      	add	r3, ip
 800e21a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e21e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e222:	b29b      	uxth	r3, r3
 800e224:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e228:	4576      	cmp	r6, lr
 800e22a:	f849 3b04 	str.w	r3, [r9], #4
 800e22e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e232:	d8e5      	bhi.n	800e200 <__mdiff+0x88>
 800e234:	1b33      	subs	r3, r6, r4
 800e236:	3b15      	subs	r3, #21
 800e238:	f023 0303 	bic.w	r3, r3, #3
 800e23c:	3415      	adds	r4, #21
 800e23e:	3304      	adds	r3, #4
 800e240:	42a6      	cmp	r6, r4
 800e242:	bf38      	it	cc
 800e244:	2304      	movcc	r3, #4
 800e246:	441d      	add	r5, r3
 800e248:	445b      	add	r3, fp
 800e24a:	461e      	mov	r6, r3
 800e24c:	462c      	mov	r4, r5
 800e24e:	4544      	cmp	r4, r8
 800e250:	d30e      	bcc.n	800e270 <__mdiff+0xf8>
 800e252:	f108 0103 	add.w	r1, r8, #3
 800e256:	1b49      	subs	r1, r1, r5
 800e258:	f021 0103 	bic.w	r1, r1, #3
 800e25c:	3d03      	subs	r5, #3
 800e25e:	45a8      	cmp	r8, r5
 800e260:	bf38      	it	cc
 800e262:	2100      	movcc	r1, #0
 800e264:	440b      	add	r3, r1
 800e266:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e26a:	b191      	cbz	r1, 800e292 <__mdiff+0x11a>
 800e26c:	6117      	str	r7, [r2, #16]
 800e26e:	e79d      	b.n	800e1ac <__mdiff+0x34>
 800e270:	f854 1b04 	ldr.w	r1, [r4], #4
 800e274:	46e6      	mov	lr, ip
 800e276:	0c08      	lsrs	r0, r1, #16
 800e278:	fa1c fc81 	uxtah	ip, ip, r1
 800e27c:	4471      	add	r1, lr
 800e27e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e282:	b289      	uxth	r1, r1
 800e284:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e288:	f846 1b04 	str.w	r1, [r6], #4
 800e28c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e290:	e7dd      	b.n	800e24e <__mdiff+0xd6>
 800e292:	3f01      	subs	r7, #1
 800e294:	e7e7      	b.n	800e266 <__mdiff+0xee>
 800e296:	bf00      	nop
 800e298:	0800f1b0 	.word	0x0800f1b0
 800e29c:	0800f1c1 	.word	0x0800f1c1

0800e2a0 <__d2b>:
 800e2a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e2a4:	460f      	mov	r7, r1
 800e2a6:	2101      	movs	r1, #1
 800e2a8:	ec59 8b10 	vmov	r8, r9, d0
 800e2ac:	4616      	mov	r6, r2
 800e2ae:	f7ff fcd5 	bl	800dc5c <_Balloc>
 800e2b2:	4604      	mov	r4, r0
 800e2b4:	b930      	cbnz	r0, 800e2c4 <__d2b+0x24>
 800e2b6:	4602      	mov	r2, r0
 800e2b8:	4b23      	ldr	r3, [pc, #140]	@ (800e348 <__d2b+0xa8>)
 800e2ba:	4824      	ldr	r0, [pc, #144]	@ (800e34c <__d2b+0xac>)
 800e2bc:	f240 310f 	movw	r1, #783	@ 0x30f
 800e2c0:	f7fe fe0a 	bl	800ced8 <__assert_func>
 800e2c4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e2c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e2cc:	b10d      	cbz	r5, 800e2d2 <__d2b+0x32>
 800e2ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e2d2:	9301      	str	r3, [sp, #4]
 800e2d4:	f1b8 0300 	subs.w	r3, r8, #0
 800e2d8:	d023      	beq.n	800e322 <__d2b+0x82>
 800e2da:	4668      	mov	r0, sp
 800e2dc:	9300      	str	r3, [sp, #0]
 800e2de:	f7ff fd84 	bl	800ddea <__lo0bits>
 800e2e2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e2e6:	b1d0      	cbz	r0, 800e31e <__d2b+0x7e>
 800e2e8:	f1c0 0320 	rsb	r3, r0, #32
 800e2ec:	fa02 f303 	lsl.w	r3, r2, r3
 800e2f0:	430b      	orrs	r3, r1
 800e2f2:	40c2      	lsrs	r2, r0
 800e2f4:	6163      	str	r3, [r4, #20]
 800e2f6:	9201      	str	r2, [sp, #4]
 800e2f8:	9b01      	ldr	r3, [sp, #4]
 800e2fa:	61a3      	str	r3, [r4, #24]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	bf0c      	ite	eq
 800e300:	2201      	moveq	r2, #1
 800e302:	2202      	movne	r2, #2
 800e304:	6122      	str	r2, [r4, #16]
 800e306:	b1a5      	cbz	r5, 800e332 <__d2b+0x92>
 800e308:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e30c:	4405      	add	r5, r0
 800e30e:	603d      	str	r5, [r7, #0]
 800e310:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e314:	6030      	str	r0, [r6, #0]
 800e316:	4620      	mov	r0, r4
 800e318:	b003      	add	sp, #12
 800e31a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e31e:	6161      	str	r1, [r4, #20]
 800e320:	e7ea      	b.n	800e2f8 <__d2b+0x58>
 800e322:	a801      	add	r0, sp, #4
 800e324:	f7ff fd61 	bl	800ddea <__lo0bits>
 800e328:	9b01      	ldr	r3, [sp, #4]
 800e32a:	6163      	str	r3, [r4, #20]
 800e32c:	3020      	adds	r0, #32
 800e32e:	2201      	movs	r2, #1
 800e330:	e7e8      	b.n	800e304 <__d2b+0x64>
 800e332:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e336:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e33a:	6038      	str	r0, [r7, #0]
 800e33c:	6918      	ldr	r0, [r3, #16]
 800e33e:	f7ff fd35 	bl	800ddac <__hi0bits>
 800e342:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e346:	e7e5      	b.n	800e314 <__d2b+0x74>
 800e348:	0800f1b0 	.word	0x0800f1b0
 800e34c:	0800f1c1 	.word	0x0800f1c1

0800e350 <__sflush_r>:
 800e350:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e358:	0716      	lsls	r6, r2, #28
 800e35a:	4605      	mov	r5, r0
 800e35c:	460c      	mov	r4, r1
 800e35e:	d454      	bmi.n	800e40a <__sflush_r+0xba>
 800e360:	684b      	ldr	r3, [r1, #4]
 800e362:	2b00      	cmp	r3, #0
 800e364:	dc02      	bgt.n	800e36c <__sflush_r+0x1c>
 800e366:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e368:	2b00      	cmp	r3, #0
 800e36a:	dd48      	ble.n	800e3fe <__sflush_r+0xae>
 800e36c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e36e:	2e00      	cmp	r6, #0
 800e370:	d045      	beq.n	800e3fe <__sflush_r+0xae>
 800e372:	2300      	movs	r3, #0
 800e374:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e378:	682f      	ldr	r7, [r5, #0]
 800e37a:	6a21      	ldr	r1, [r4, #32]
 800e37c:	602b      	str	r3, [r5, #0]
 800e37e:	d030      	beq.n	800e3e2 <__sflush_r+0x92>
 800e380:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e382:	89a3      	ldrh	r3, [r4, #12]
 800e384:	0759      	lsls	r1, r3, #29
 800e386:	d505      	bpl.n	800e394 <__sflush_r+0x44>
 800e388:	6863      	ldr	r3, [r4, #4]
 800e38a:	1ad2      	subs	r2, r2, r3
 800e38c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e38e:	b10b      	cbz	r3, 800e394 <__sflush_r+0x44>
 800e390:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e392:	1ad2      	subs	r2, r2, r3
 800e394:	2300      	movs	r3, #0
 800e396:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e398:	6a21      	ldr	r1, [r4, #32]
 800e39a:	4628      	mov	r0, r5
 800e39c:	47b0      	blx	r6
 800e39e:	1c43      	adds	r3, r0, #1
 800e3a0:	89a3      	ldrh	r3, [r4, #12]
 800e3a2:	d106      	bne.n	800e3b2 <__sflush_r+0x62>
 800e3a4:	6829      	ldr	r1, [r5, #0]
 800e3a6:	291d      	cmp	r1, #29
 800e3a8:	d82b      	bhi.n	800e402 <__sflush_r+0xb2>
 800e3aa:	4a2a      	ldr	r2, [pc, #168]	@ (800e454 <__sflush_r+0x104>)
 800e3ac:	40ca      	lsrs	r2, r1
 800e3ae:	07d6      	lsls	r6, r2, #31
 800e3b0:	d527      	bpl.n	800e402 <__sflush_r+0xb2>
 800e3b2:	2200      	movs	r2, #0
 800e3b4:	6062      	str	r2, [r4, #4]
 800e3b6:	04d9      	lsls	r1, r3, #19
 800e3b8:	6922      	ldr	r2, [r4, #16]
 800e3ba:	6022      	str	r2, [r4, #0]
 800e3bc:	d504      	bpl.n	800e3c8 <__sflush_r+0x78>
 800e3be:	1c42      	adds	r2, r0, #1
 800e3c0:	d101      	bne.n	800e3c6 <__sflush_r+0x76>
 800e3c2:	682b      	ldr	r3, [r5, #0]
 800e3c4:	b903      	cbnz	r3, 800e3c8 <__sflush_r+0x78>
 800e3c6:	6560      	str	r0, [r4, #84]	@ 0x54
 800e3c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e3ca:	602f      	str	r7, [r5, #0]
 800e3cc:	b1b9      	cbz	r1, 800e3fe <__sflush_r+0xae>
 800e3ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e3d2:	4299      	cmp	r1, r3
 800e3d4:	d002      	beq.n	800e3dc <__sflush_r+0x8c>
 800e3d6:	4628      	mov	r0, r5
 800e3d8:	f7ff fbf6 	bl	800dbc8 <_free_r>
 800e3dc:	2300      	movs	r3, #0
 800e3de:	6363      	str	r3, [r4, #52]	@ 0x34
 800e3e0:	e00d      	b.n	800e3fe <__sflush_r+0xae>
 800e3e2:	2301      	movs	r3, #1
 800e3e4:	4628      	mov	r0, r5
 800e3e6:	47b0      	blx	r6
 800e3e8:	4602      	mov	r2, r0
 800e3ea:	1c50      	adds	r0, r2, #1
 800e3ec:	d1c9      	bne.n	800e382 <__sflush_r+0x32>
 800e3ee:	682b      	ldr	r3, [r5, #0]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d0c6      	beq.n	800e382 <__sflush_r+0x32>
 800e3f4:	2b1d      	cmp	r3, #29
 800e3f6:	d001      	beq.n	800e3fc <__sflush_r+0xac>
 800e3f8:	2b16      	cmp	r3, #22
 800e3fa:	d11e      	bne.n	800e43a <__sflush_r+0xea>
 800e3fc:	602f      	str	r7, [r5, #0]
 800e3fe:	2000      	movs	r0, #0
 800e400:	e022      	b.n	800e448 <__sflush_r+0xf8>
 800e402:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e406:	b21b      	sxth	r3, r3
 800e408:	e01b      	b.n	800e442 <__sflush_r+0xf2>
 800e40a:	690f      	ldr	r7, [r1, #16]
 800e40c:	2f00      	cmp	r7, #0
 800e40e:	d0f6      	beq.n	800e3fe <__sflush_r+0xae>
 800e410:	0793      	lsls	r3, r2, #30
 800e412:	680e      	ldr	r6, [r1, #0]
 800e414:	bf08      	it	eq
 800e416:	694b      	ldreq	r3, [r1, #20]
 800e418:	600f      	str	r7, [r1, #0]
 800e41a:	bf18      	it	ne
 800e41c:	2300      	movne	r3, #0
 800e41e:	eba6 0807 	sub.w	r8, r6, r7
 800e422:	608b      	str	r3, [r1, #8]
 800e424:	f1b8 0f00 	cmp.w	r8, #0
 800e428:	dde9      	ble.n	800e3fe <__sflush_r+0xae>
 800e42a:	6a21      	ldr	r1, [r4, #32]
 800e42c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e42e:	4643      	mov	r3, r8
 800e430:	463a      	mov	r2, r7
 800e432:	4628      	mov	r0, r5
 800e434:	47b0      	blx	r6
 800e436:	2800      	cmp	r0, #0
 800e438:	dc08      	bgt.n	800e44c <__sflush_r+0xfc>
 800e43a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e43e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e442:	81a3      	strh	r3, [r4, #12]
 800e444:	f04f 30ff 	mov.w	r0, #4294967295
 800e448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e44c:	4407      	add	r7, r0
 800e44e:	eba8 0800 	sub.w	r8, r8, r0
 800e452:	e7e7      	b.n	800e424 <__sflush_r+0xd4>
 800e454:	20400001 	.word	0x20400001

0800e458 <_fflush_r>:
 800e458:	b538      	push	{r3, r4, r5, lr}
 800e45a:	690b      	ldr	r3, [r1, #16]
 800e45c:	4605      	mov	r5, r0
 800e45e:	460c      	mov	r4, r1
 800e460:	b913      	cbnz	r3, 800e468 <_fflush_r+0x10>
 800e462:	2500      	movs	r5, #0
 800e464:	4628      	mov	r0, r5
 800e466:	bd38      	pop	{r3, r4, r5, pc}
 800e468:	b118      	cbz	r0, 800e472 <_fflush_r+0x1a>
 800e46a:	6a03      	ldr	r3, [r0, #32]
 800e46c:	b90b      	cbnz	r3, 800e472 <_fflush_r+0x1a>
 800e46e:	f7fe fc29 	bl	800ccc4 <__sinit>
 800e472:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d0f3      	beq.n	800e462 <_fflush_r+0xa>
 800e47a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e47c:	07d0      	lsls	r0, r2, #31
 800e47e:	d404      	bmi.n	800e48a <_fflush_r+0x32>
 800e480:	0599      	lsls	r1, r3, #22
 800e482:	d402      	bmi.n	800e48a <_fflush_r+0x32>
 800e484:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e486:	f7fe fd24 	bl	800ced2 <__retarget_lock_acquire_recursive>
 800e48a:	4628      	mov	r0, r5
 800e48c:	4621      	mov	r1, r4
 800e48e:	f7ff ff5f 	bl	800e350 <__sflush_r>
 800e492:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e494:	07da      	lsls	r2, r3, #31
 800e496:	4605      	mov	r5, r0
 800e498:	d4e4      	bmi.n	800e464 <_fflush_r+0xc>
 800e49a:	89a3      	ldrh	r3, [r4, #12]
 800e49c:	059b      	lsls	r3, r3, #22
 800e49e:	d4e1      	bmi.n	800e464 <_fflush_r+0xc>
 800e4a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e4a2:	f7fe fd17 	bl	800ced4 <__retarget_lock_release_recursive>
 800e4a6:	e7dd      	b.n	800e464 <_fflush_r+0xc>

0800e4a8 <fiprintf>:
 800e4a8:	b40e      	push	{r1, r2, r3}
 800e4aa:	b503      	push	{r0, r1, lr}
 800e4ac:	4601      	mov	r1, r0
 800e4ae:	ab03      	add	r3, sp, #12
 800e4b0:	4805      	ldr	r0, [pc, #20]	@ (800e4c8 <fiprintf+0x20>)
 800e4b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e4b6:	6800      	ldr	r0, [r0, #0]
 800e4b8:	9301      	str	r3, [sp, #4]
 800e4ba:	f000 f879 	bl	800e5b0 <_vfiprintf_r>
 800e4be:	b002      	add	sp, #8
 800e4c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e4c4:	b003      	add	sp, #12
 800e4c6:	4770      	bx	lr
 800e4c8:	20000050 	.word	0x20000050

0800e4cc <memcpy>:
 800e4cc:	440a      	add	r2, r1
 800e4ce:	4291      	cmp	r1, r2
 800e4d0:	f100 33ff 	add.w	r3, r0, #4294967295
 800e4d4:	d100      	bne.n	800e4d8 <memcpy+0xc>
 800e4d6:	4770      	bx	lr
 800e4d8:	b510      	push	{r4, lr}
 800e4da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e4de:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e4e2:	4291      	cmp	r1, r2
 800e4e4:	d1f9      	bne.n	800e4da <memcpy+0xe>
 800e4e6:	bd10      	pop	{r4, pc}

0800e4e8 <abort>:
 800e4e8:	b508      	push	{r3, lr}
 800e4ea:	2006      	movs	r0, #6
 800e4ec:	f000 fa34 	bl	800e958 <raise>
 800e4f0:	2001      	movs	r0, #1
 800e4f2:	f7f3 fad9 	bl	8001aa8 <_exit>

0800e4f6 <_calloc_r>:
 800e4f6:	b570      	push	{r4, r5, r6, lr}
 800e4f8:	fba1 5402 	umull	r5, r4, r1, r2
 800e4fc:	b934      	cbnz	r4, 800e50c <_calloc_r+0x16>
 800e4fe:	4629      	mov	r1, r5
 800e500:	f7fd fe72 	bl	800c1e8 <_malloc_r>
 800e504:	4606      	mov	r6, r0
 800e506:	b928      	cbnz	r0, 800e514 <_calloc_r+0x1e>
 800e508:	4630      	mov	r0, r6
 800e50a:	bd70      	pop	{r4, r5, r6, pc}
 800e50c:	220c      	movs	r2, #12
 800e50e:	6002      	str	r2, [r0, #0]
 800e510:	2600      	movs	r6, #0
 800e512:	e7f9      	b.n	800e508 <_calloc_r+0x12>
 800e514:	462a      	mov	r2, r5
 800e516:	4621      	mov	r1, r4
 800e518:	f7fe fc4d 	bl	800cdb6 <memset>
 800e51c:	e7f4      	b.n	800e508 <_calloc_r+0x12>

0800e51e <__ascii_mbtowc>:
 800e51e:	b082      	sub	sp, #8
 800e520:	b901      	cbnz	r1, 800e524 <__ascii_mbtowc+0x6>
 800e522:	a901      	add	r1, sp, #4
 800e524:	b142      	cbz	r2, 800e538 <__ascii_mbtowc+0x1a>
 800e526:	b14b      	cbz	r3, 800e53c <__ascii_mbtowc+0x1e>
 800e528:	7813      	ldrb	r3, [r2, #0]
 800e52a:	600b      	str	r3, [r1, #0]
 800e52c:	7812      	ldrb	r2, [r2, #0]
 800e52e:	1e10      	subs	r0, r2, #0
 800e530:	bf18      	it	ne
 800e532:	2001      	movne	r0, #1
 800e534:	b002      	add	sp, #8
 800e536:	4770      	bx	lr
 800e538:	4610      	mov	r0, r2
 800e53a:	e7fb      	b.n	800e534 <__ascii_mbtowc+0x16>
 800e53c:	f06f 0001 	mvn.w	r0, #1
 800e540:	e7f8      	b.n	800e534 <__ascii_mbtowc+0x16>

0800e542 <__ascii_wctomb>:
 800e542:	4603      	mov	r3, r0
 800e544:	4608      	mov	r0, r1
 800e546:	b141      	cbz	r1, 800e55a <__ascii_wctomb+0x18>
 800e548:	2aff      	cmp	r2, #255	@ 0xff
 800e54a:	d904      	bls.n	800e556 <__ascii_wctomb+0x14>
 800e54c:	228a      	movs	r2, #138	@ 0x8a
 800e54e:	601a      	str	r2, [r3, #0]
 800e550:	f04f 30ff 	mov.w	r0, #4294967295
 800e554:	4770      	bx	lr
 800e556:	700a      	strb	r2, [r1, #0]
 800e558:	2001      	movs	r0, #1
 800e55a:	4770      	bx	lr

0800e55c <__sfputc_r>:
 800e55c:	6893      	ldr	r3, [r2, #8]
 800e55e:	3b01      	subs	r3, #1
 800e560:	2b00      	cmp	r3, #0
 800e562:	b410      	push	{r4}
 800e564:	6093      	str	r3, [r2, #8]
 800e566:	da08      	bge.n	800e57a <__sfputc_r+0x1e>
 800e568:	6994      	ldr	r4, [r2, #24]
 800e56a:	42a3      	cmp	r3, r4
 800e56c:	db01      	blt.n	800e572 <__sfputc_r+0x16>
 800e56e:	290a      	cmp	r1, #10
 800e570:	d103      	bne.n	800e57a <__sfputc_r+0x1e>
 800e572:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e576:	f000 b933 	b.w	800e7e0 <__swbuf_r>
 800e57a:	6813      	ldr	r3, [r2, #0]
 800e57c:	1c58      	adds	r0, r3, #1
 800e57e:	6010      	str	r0, [r2, #0]
 800e580:	7019      	strb	r1, [r3, #0]
 800e582:	4608      	mov	r0, r1
 800e584:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e588:	4770      	bx	lr

0800e58a <__sfputs_r>:
 800e58a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e58c:	4606      	mov	r6, r0
 800e58e:	460f      	mov	r7, r1
 800e590:	4614      	mov	r4, r2
 800e592:	18d5      	adds	r5, r2, r3
 800e594:	42ac      	cmp	r4, r5
 800e596:	d101      	bne.n	800e59c <__sfputs_r+0x12>
 800e598:	2000      	movs	r0, #0
 800e59a:	e007      	b.n	800e5ac <__sfputs_r+0x22>
 800e59c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5a0:	463a      	mov	r2, r7
 800e5a2:	4630      	mov	r0, r6
 800e5a4:	f7ff ffda 	bl	800e55c <__sfputc_r>
 800e5a8:	1c43      	adds	r3, r0, #1
 800e5aa:	d1f3      	bne.n	800e594 <__sfputs_r+0xa>
 800e5ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e5b0 <_vfiprintf_r>:
 800e5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5b4:	460d      	mov	r5, r1
 800e5b6:	b09d      	sub	sp, #116	@ 0x74
 800e5b8:	4614      	mov	r4, r2
 800e5ba:	4698      	mov	r8, r3
 800e5bc:	4606      	mov	r6, r0
 800e5be:	b118      	cbz	r0, 800e5c8 <_vfiprintf_r+0x18>
 800e5c0:	6a03      	ldr	r3, [r0, #32]
 800e5c2:	b90b      	cbnz	r3, 800e5c8 <_vfiprintf_r+0x18>
 800e5c4:	f7fe fb7e 	bl	800ccc4 <__sinit>
 800e5c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e5ca:	07d9      	lsls	r1, r3, #31
 800e5cc:	d405      	bmi.n	800e5da <_vfiprintf_r+0x2a>
 800e5ce:	89ab      	ldrh	r3, [r5, #12]
 800e5d0:	059a      	lsls	r2, r3, #22
 800e5d2:	d402      	bmi.n	800e5da <_vfiprintf_r+0x2a>
 800e5d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e5d6:	f7fe fc7c 	bl	800ced2 <__retarget_lock_acquire_recursive>
 800e5da:	89ab      	ldrh	r3, [r5, #12]
 800e5dc:	071b      	lsls	r3, r3, #28
 800e5de:	d501      	bpl.n	800e5e4 <_vfiprintf_r+0x34>
 800e5e0:	692b      	ldr	r3, [r5, #16]
 800e5e2:	b99b      	cbnz	r3, 800e60c <_vfiprintf_r+0x5c>
 800e5e4:	4629      	mov	r1, r5
 800e5e6:	4630      	mov	r0, r6
 800e5e8:	f000 f938 	bl	800e85c <__swsetup_r>
 800e5ec:	b170      	cbz	r0, 800e60c <_vfiprintf_r+0x5c>
 800e5ee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e5f0:	07dc      	lsls	r4, r3, #31
 800e5f2:	d504      	bpl.n	800e5fe <_vfiprintf_r+0x4e>
 800e5f4:	f04f 30ff 	mov.w	r0, #4294967295
 800e5f8:	b01d      	add	sp, #116	@ 0x74
 800e5fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5fe:	89ab      	ldrh	r3, [r5, #12]
 800e600:	0598      	lsls	r0, r3, #22
 800e602:	d4f7      	bmi.n	800e5f4 <_vfiprintf_r+0x44>
 800e604:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e606:	f7fe fc65 	bl	800ced4 <__retarget_lock_release_recursive>
 800e60a:	e7f3      	b.n	800e5f4 <_vfiprintf_r+0x44>
 800e60c:	2300      	movs	r3, #0
 800e60e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e610:	2320      	movs	r3, #32
 800e612:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e616:	f8cd 800c 	str.w	r8, [sp, #12]
 800e61a:	2330      	movs	r3, #48	@ 0x30
 800e61c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e7cc <_vfiprintf_r+0x21c>
 800e620:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e624:	f04f 0901 	mov.w	r9, #1
 800e628:	4623      	mov	r3, r4
 800e62a:	469a      	mov	sl, r3
 800e62c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e630:	b10a      	cbz	r2, 800e636 <_vfiprintf_r+0x86>
 800e632:	2a25      	cmp	r2, #37	@ 0x25
 800e634:	d1f9      	bne.n	800e62a <_vfiprintf_r+0x7a>
 800e636:	ebba 0b04 	subs.w	fp, sl, r4
 800e63a:	d00b      	beq.n	800e654 <_vfiprintf_r+0xa4>
 800e63c:	465b      	mov	r3, fp
 800e63e:	4622      	mov	r2, r4
 800e640:	4629      	mov	r1, r5
 800e642:	4630      	mov	r0, r6
 800e644:	f7ff ffa1 	bl	800e58a <__sfputs_r>
 800e648:	3001      	adds	r0, #1
 800e64a:	f000 80a7 	beq.w	800e79c <_vfiprintf_r+0x1ec>
 800e64e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e650:	445a      	add	r2, fp
 800e652:	9209      	str	r2, [sp, #36]	@ 0x24
 800e654:	f89a 3000 	ldrb.w	r3, [sl]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	f000 809f 	beq.w	800e79c <_vfiprintf_r+0x1ec>
 800e65e:	2300      	movs	r3, #0
 800e660:	f04f 32ff 	mov.w	r2, #4294967295
 800e664:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e668:	f10a 0a01 	add.w	sl, sl, #1
 800e66c:	9304      	str	r3, [sp, #16]
 800e66e:	9307      	str	r3, [sp, #28]
 800e670:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e674:	931a      	str	r3, [sp, #104]	@ 0x68
 800e676:	4654      	mov	r4, sl
 800e678:	2205      	movs	r2, #5
 800e67a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e67e:	4853      	ldr	r0, [pc, #332]	@ (800e7cc <_vfiprintf_r+0x21c>)
 800e680:	f7f1 fdae 	bl	80001e0 <memchr>
 800e684:	9a04      	ldr	r2, [sp, #16]
 800e686:	b9d8      	cbnz	r0, 800e6c0 <_vfiprintf_r+0x110>
 800e688:	06d1      	lsls	r1, r2, #27
 800e68a:	bf44      	itt	mi
 800e68c:	2320      	movmi	r3, #32
 800e68e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e692:	0713      	lsls	r3, r2, #28
 800e694:	bf44      	itt	mi
 800e696:	232b      	movmi	r3, #43	@ 0x2b
 800e698:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e69c:	f89a 3000 	ldrb.w	r3, [sl]
 800e6a0:	2b2a      	cmp	r3, #42	@ 0x2a
 800e6a2:	d015      	beq.n	800e6d0 <_vfiprintf_r+0x120>
 800e6a4:	9a07      	ldr	r2, [sp, #28]
 800e6a6:	4654      	mov	r4, sl
 800e6a8:	2000      	movs	r0, #0
 800e6aa:	f04f 0c0a 	mov.w	ip, #10
 800e6ae:	4621      	mov	r1, r4
 800e6b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e6b4:	3b30      	subs	r3, #48	@ 0x30
 800e6b6:	2b09      	cmp	r3, #9
 800e6b8:	d94b      	bls.n	800e752 <_vfiprintf_r+0x1a2>
 800e6ba:	b1b0      	cbz	r0, 800e6ea <_vfiprintf_r+0x13a>
 800e6bc:	9207      	str	r2, [sp, #28]
 800e6be:	e014      	b.n	800e6ea <_vfiprintf_r+0x13a>
 800e6c0:	eba0 0308 	sub.w	r3, r0, r8
 800e6c4:	fa09 f303 	lsl.w	r3, r9, r3
 800e6c8:	4313      	orrs	r3, r2
 800e6ca:	9304      	str	r3, [sp, #16]
 800e6cc:	46a2      	mov	sl, r4
 800e6ce:	e7d2      	b.n	800e676 <_vfiprintf_r+0xc6>
 800e6d0:	9b03      	ldr	r3, [sp, #12]
 800e6d2:	1d19      	adds	r1, r3, #4
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	9103      	str	r1, [sp, #12]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	bfbb      	ittet	lt
 800e6dc:	425b      	neglt	r3, r3
 800e6de:	f042 0202 	orrlt.w	r2, r2, #2
 800e6e2:	9307      	strge	r3, [sp, #28]
 800e6e4:	9307      	strlt	r3, [sp, #28]
 800e6e6:	bfb8      	it	lt
 800e6e8:	9204      	strlt	r2, [sp, #16]
 800e6ea:	7823      	ldrb	r3, [r4, #0]
 800e6ec:	2b2e      	cmp	r3, #46	@ 0x2e
 800e6ee:	d10a      	bne.n	800e706 <_vfiprintf_r+0x156>
 800e6f0:	7863      	ldrb	r3, [r4, #1]
 800e6f2:	2b2a      	cmp	r3, #42	@ 0x2a
 800e6f4:	d132      	bne.n	800e75c <_vfiprintf_r+0x1ac>
 800e6f6:	9b03      	ldr	r3, [sp, #12]
 800e6f8:	1d1a      	adds	r2, r3, #4
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	9203      	str	r2, [sp, #12]
 800e6fe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e702:	3402      	adds	r4, #2
 800e704:	9305      	str	r3, [sp, #20]
 800e706:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e7dc <_vfiprintf_r+0x22c>
 800e70a:	7821      	ldrb	r1, [r4, #0]
 800e70c:	2203      	movs	r2, #3
 800e70e:	4650      	mov	r0, sl
 800e710:	f7f1 fd66 	bl	80001e0 <memchr>
 800e714:	b138      	cbz	r0, 800e726 <_vfiprintf_r+0x176>
 800e716:	9b04      	ldr	r3, [sp, #16]
 800e718:	eba0 000a 	sub.w	r0, r0, sl
 800e71c:	2240      	movs	r2, #64	@ 0x40
 800e71e:	4082      	lsls	r2, r0
 800e720:	4313      	orrs	r3, r2
 800e722:	3401      	adds	r4, #1
 800e724:	9304      	str	r3, [sp, #16]
 800e726:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e72a:	4829      	ldr	r0, [pc, #164]	@ (800e7d0 <_vfiprintf_r+0x220>)
 800e72c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e730:	2206      	movs	r2, #6
 800e732:	f7f1 fd55 	bl	80001e0 <memchr>
 800e736:	2800      	cmp	r0, #0
 800e738:	d03f      	beq.n	800e7ba <_vfiprintf_r+0x20a>
 800e73a:	4b26      	ldr	r3, [pc, #152]	@ (800e7d4 <_vfiprintf_r+0x224>)
 800e73c:	bb1b      	cbnz	r3, 800e786 <_vfiprintf_r+0x1d6>
 800e73e:	9b03      	ldr	r3, [sp, #12]
 800e740:	3307      	adds	r3, #7
 800e742:	f023 0307 	bic.w	r3, r3, #7
 800e746:	3308      	adds	r3, #8
 800e748:	9303      	str	r3, [sp, #12]
 800e74a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e74c:	443b      	add	r3, r7
 800e74e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e750:	e76a      	b.n	800e628 <_vfiprintf_r+0x78>
 800e752:	fb0c 3202 	mla	r2, ip, r2, r3
 800e756:	460c      	mov	r4, r1
 800e758:	2001      	movs	r0, #1
 800e75a:	e7a8      	b.n	800e6ae <_vfiprintf_r+0xfe>
 800e75c:	2300      	movs	r3, #0
 800e75e:	3401      	adds	r4, #1
 800e760:	9305      	str	r3, [sp, #20]
 800e762:	4619      	mov	r1, r3
 800e764:	f04f 0c0a 	mov.w	ip, #10
 800e768:	4620      	mov	r0, r4
 800e76a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e76e:	3a30      	subs	r2, #48	@ 0x30
 800e770:	2a09      	cmp	r2, #9
 800e772:	d903      	bls.n	800e77c <_vfiprintf_r+0x1cc>
 800e774:	2b00      	cmp	r3, #0
 800e776:	d0c6      	beq.n	800e706 <_vfiprintf_r+0x156>
 800e778:	9105      	str	r1, [sp, #20]
 800e77a:	e7c4      	b.n	800e706 <_vfiprintf_r+0x156>
 800e77c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e780:	4604      	mov	r4, r0
 800e782:	2301      	movs	r3, #1
 800e784:	e7f0      	b.n	800e768 <_vfiprintf_r+0x1b8>
 800e786:	ab03      	add	r3, sp, #12
 800e788:	9300      	str	r3, [sp, #0]
 800e78a:	462a      	mov	r2, r5
 800e78c:	4b12      	ldr	r3, [pc, #72]	@ (800e7d8 <_vfiprintf_r+0x228>)
 800e78e:	a904      	add	r1, sp, #16
 800e790:	4630      	mov	r0, r6
 800e792:	f7fd fe55 	bl	800c440 <_printf_float>
 800e796:	4607      	mov	r7, r0
 800e798:	1c78      	adds	r0, r7, #1
 800e79a:	d1d6      	bne.n	800e74a <_vfiprintf_r+0x19a>
 800e79c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e79e:	07d9      	lsls	r1, r3, #31
 800e7a0:	d405      	bmi.n	800e7ae <_vfiprintf_r+0x1fe>
 800e7a2:	89ab      	ldrh	r3, [r5, #12]
 800e7a4:	059a      	lsls	r2, r3, #22
 800e7a6:	d402      	bmi.n	800e7ae <_vfiprintf_r+0x1fe>
 800e7a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e7aa:	f7fe fb93 	bl	800ced4 <__retarget_lock_release_recursive>
 800e7ae:	89ab      	ldrh	r3, [r5, #12]
 800e7b0:	065b      	lsls	r3, r3, #25
 800e7b2:	f53f af1f 	bmi.w	800e5f4 <_vfiprintf_r+0x44>
 800e7b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e7b8:	e71e      	b.n	800e5f8 <_vfiprintf_r+0x48>
 800e7ba:	ab03      	add	r3, sp, #12
 800e7bc:	9300      	str	r3, [sp, #0]
 800e7be:	462a      	mov	r2, r5
 800e7c0:	4b05      	ldr	r3, [pc, #20]	@ (800e7d8 <_vfiprintf_r+0x228>)
 800e7c2:	a904      	add	r1, sp, #16
 800e7c4:	4630      	mov	r0, r6
 800e7c6:	f7fe f8d3 	bl	800c970 <_printf_i>
 800e7ca:	e7e4      	b.n	800e796 <_vfiprintf_r+0x1e6>
 800e7cc:	0800f224 	.word	0x0800f224
 800e7d0:	0800f22e 	.word	0x0800f22e
 800e7d4:	0800c441 	.word	0x0800c441
 800e7d8:	0800e58b 	.word	0x0800e58b
 800e7dc:	0800f22a 	.word	0x0800f22a

0800e7e0 <__swbuf_r>:
 800e7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7e2:	460e      	mov	r6, r1
 800e7e4:	4614      	mov	r4, r2
 800e7e6:	4605      	mov	r5, r0
 800e7e8:	b118      	cbz	r0, 800e7f2 <__swbuf_r+0x12>
 800e7ea:	6a03      	ldr	r3, [r0, #32]
 800e7ec:	b90b      	cbnz	r3, 800e7f2 <__swbuf_r+0x12>
 800e7ee:	f7fe fa69 	bl	800ccc4 <__sinit>
 800e7f2:	69a3      	ldr	r3, [r4, #24]
 800e7f4:	60a3      	str	r3, [r4, #8]
 800e7f6:	89a3      	ldrh	r3, [r4, #12]
 800e7f8:	071a      	lsls	r2, r3, #28
 800e7fa:	d501      	bpl.n	800e800 <__swbuf_r+0x20>
 800e7fc:	6923      	ldr	r3, [r4, #16]
 800e7fe:	b943      	cbnz	r3, 800e812 <__swbuf_r+0x32>
 800e800:	4621      	mov	r1, r4
 800e802:	4628      	mov	r0, r5
 800e804:	f000 f82a 	bl	800e85c <__swsetup_r>
 800e808:	b118      	cbz	r0, 800e812 <__swbuf_r+0x32>
 800e80a:	f04f 37ff 	mov.w	r7, #4294967295
 800e80e:	4638      	mov	r0, r7
 800e810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e812:	6823      	ldr	r3, [r4, #0]
 800e814:	6922      	ldr	r2, [r4, #16]
 800e816:	1a98      	subs	r0, r3, r2
 800e818:	6963      	ldr	r3, [r4, #20]
 800e81a:	b2f6      	uxtb	r6, r6
 800e81c:	4283      	cmp	r3, r0
 800e81e:	4637      	mov	r7, r6
 800e820:	dc05      	bgt.n	800e82e <__swbuf_r+0x4e>
 800e822:	4621      	mov	r1, r4
 800e824:	4628      	mov	r0, r5
 800e826:	f7ff fe17 	bl	800e458 <_fflush_r>
 800e82a:	2800      	cmp	r0, #0
 800e82c:	d1ed      	bne.n	800e80a <__swbuf_r+0x2a>
 800e82e:	68a3      	ldr	r3, [r4, #8]
 800e830:	3b01      	subs	r3, #1
 800e832:	60a3      	str	r3, [r4, #8]
 800e834:	6823      	ldr	r3, [r4, #0]
 800e836:	1c5a      	adds	r2, r3, #1
 800e838:	6022      	str	r2, [r4, #0]
 800e83a:	701e      	strb	r6, [r3, #0]
 800e83c:	6962      	ldr	r2, [r4, #20]
 800e83e:	1c43      	adds	r3, r0, #1
 800e840:	429a      	cmp	r2, r3
 800e842:	d004      	beq.n	800e84e <__swbuf_r+0x6e>
 800e844:	89a3      	ldrh	r3, [r4, #12]
 800e846:	07db      	lsls	r3, r3, #31
 800e848:	d5e1      	bpl.n	800e80e <__swbuf_r+0x2e>
 800e84a:	2e0a      	cmp	r6, #10
 800e84c:	d1df      	bne.n	800e80e <__swbuf_r+0x2e>
 800e84e:	4621      	mov	r1, r4
 800e850:	4628      	mov	r0, r5
 800e852:	f7ff fe01 	bl	800e458 <_fflush_r>
 800e856:	2800      	cmp	r0, #0
 800e858:	d0d9      	beq.n	800e80e <__swbuf_r+0x2e>
 800e85a:	e7d6      	b.n	800e80a <__swbuf_r+0x2a>

0800e85c <__swsetup_r>:
 800e85c:	b538      	push	{r3, r4, r5, lr}
 800e85e:	4b29      	ldr	r3, [pc, #164]	@ (800e904 <__swsetup_r+0xa8>)
 800e860:	4605      	mov	r5, r0
 800e862:	6818      	ldr	r0, [r3, #0]
 800e864:	460c      	mov	r4, r1
 800e866:	b118      	cbz	r0, 800e870 <__swsetup_r+0x14>
 800e868:	6a03      	ldr	r3, [r0, #32]
 800e86a:	b90b      	cbnz	r3, 800e870 <__swsetup_r+0x14>
 800e86c:	f7fe fa2a 	bl	800ccc4 <__sinit>
 800e870:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e874:	0719      	lsls	r1, r3, #28
 800e876:	d422      	bmi.n	800e8be <__swsetup_r+0x62>
 800e878:	06da      	lsls	r2, r3, #27
 800e87a:	d407      	bmi.n	800e88c <__swsetup_r+0x30>
 800e87c:	2209      	movs	r2, #9
 800e87e:	602a      	str	r2, [r5, #0]
 800e880:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e884:	81a3      	strh	r3, [r4, #12]
 800e886:	f04f 30ff 	mov.w	r0, #4294967295
 800e88a:	e033      	b.n	800e8f4 <__swsetup_r+0x98>
 800e88c:	0758      	lsls	r0, r3, #29
 800e88e:	d512      	bpl.n	800e8b6 <__swsetup_r+0x5a>
 800e890:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e892:	b141      	cbz	r1, 800e8a6 <__swsetup_r+0x4a>
 800e894:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e898:	4299      	cmp	r1, r3
 800e89a:	d002      	beq.n	800e8a2 <__swsetup_r+0x46>
 800e89c:	4628      	mov	r0, r5
 800e89e:	f7ff f993 	bl	800dbc8 <_free_r>
 800e8a2:	2300      	movs	r3, #0
 800e8a4:	6363      	str	r3, [r4, #52]	@ 0x34
 800e8a6:	89a3      	ldrh	r3, [r4, #12]
 800e8a8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e8ac:	81a3      	strh	r3, [r4, #12]
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	6063      	str	r3, [r4, #4]
 800e8b2:	6923      	ldr	r3, [r4, #16]
 800e8b4:	6023      	str	r3, [r4, #0]
 800e8b6:	89a3      	ldrh	r3, [r4, #12]
 800e8b8:	f043 0308 	orr.w	r3, r3, #8
 800e8bc:	81a3      	strh	r3, [r4, #12]
 800e8be:	6923      	ldr	r3, [r4, #16]
 800e8c0:	b94b      	cbnz	r3, 800e8d6 <__swsetup_r+0x7a>
 800e8c2:	89a3      	ldrh	r3, [r4, #12]
 800e8c4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e8c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e8cc:	d003      	beq.n	800e8d6 <__swsetup_r+0x7a>
 800e8ce:	4621      	mov	r1, r4
 800e8d0:	4628      	mov	r0, r5
 800e8d2:	f000 f883 	bl	800e9dc <__smakebuf_r>
 800e8d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e8da:	f013 0201 	ands.w	r2, r3, #1
 800e8de:	d00a      	beq.n	800e8f6 <__swsetup_r+0x9a>
 800e8e0:	2200      	movs	r2, #0
 800e8e2:	60a2      	str	r2, [r4, #8]
 800e8e4:	6962      	ldr	r2, [r4, #20]
 800e8e6:	4252      	negs	r2, r2
 800e8e8:	61a2      	str	r2, [r4, #24]
 800e8ea:	6922      	ldr	r2, [r4, #16]
 800e8ec:	b942      	cbnz	r2, 800e900 <__swsetup_r+0xa4>
 800e8ee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e8f2:	d1c5      	bne.n	800e880 <__swsetup_r+0x24>
 800e8f4:	bd38      	pop	{r3, r4, r5, pc}
 800e8f6:	0799      	lsls	r1, r3, #30
 800e8f8:	bf58      	it	pl
 800e8fa:	6962      	ldrpl	r2, [r4, #20]
 800e8fc:	60a2      	str	r2, [r4, #8]
 800e8fe:	e7f4      	b.n	800e8ea <__swsetup_r+0x8e>
 800e900:	2000      	movs	r0, #0
 800e902:	e7f7      	b.n	800e8f4 <__swsetup_r+0x98>
 800e904:	20000050 	.word	0x20000050

0800e908 <_raise_r>:
 800e908:	291f      	cmp	r1, #31
 800e90a:	b538      	push	{r3, r4, r5, lr}
 800e90c:	4605      	mov	r5, r0
 800e90e:	460c      	mov	r4, r1
 800e910:	d904      	bls.n	800e91c <_raise_r+0x14>
 800e912:	2316      	movs	r3, #22
 800e914:	6003      	str	r3, [r0, #0]
 800e916:	f04f 30ff 	mov.w	r0, #4294967295
 800e91a:	bd38      	pop	{r3, r4, r5, pc}
 800e91c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e91e:	b112      	cbz	r2, 800e926 <_raise_r+0x1e>
 800e920:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e924:	b94b      	cbnz	r3, 800e93a <_raise_r+0x32>
 800e926:	4628      	mov	r0, r5
 800e928:	f000 f830 	bl	800e98c <_getpid_r>
 800e92c:	4622      	mov	r2, r4
 800e92e:	4601      	mov	r1, r0
 800e930:	4628      	mov	r0, r5
 800e932:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e936:	f000 b817 	b.w	800e968 <_kill_r>
 800e93a:	2b01      	cmp	r3, #1
 800e93c:	d00a      	beq.n	800e954 <_raise_r+0x4c>
 800e93e:	1c59      	adds	r1, r3, #1
 800e940:	d103      	bne.n	800e94a <_raise_r+0x42>
 800e942:	2316      	movs	r3, #22
 800e944:	6003      	str	r3, [r0, #0]
 800e946:	2001      	movs	r0, #1
 800e948:	e7e7      	b.n	800e91a <_raise_r+0x12>
 800e94a:	2100      	movs	r1, #0
 800e94c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e950:	4620      	mov	r0, r4
 800e952:	4798      	blx	r3
 800e954:	2000      	movs	r0, #0
 800e956:	e7e0      	b.n	800e91a <_raise_r+0x12>

0800e958 <raise>:
 800e958:	4b02      	ldr	r3, [pc, #8]	@ (800e964 <raise+0xc>)
 800e95a:	4601      	mov	r1, r0
 800e95c:	6818      	ldr	r0, [r3, #0]
 800e95e:	f7ff bfd3 	b.w	800e908 <_raise_r>
 800e962:	bf00      	nop
 800e964:	20000050 	.word	0x20000050

0800e968 <_kill_r>:
 800e968:	b538      	push	{r3, r4, r5, lr}
 800e96a:	4d07      	ldr	r5, [pc, #28]	@ (800e988 <_kill_r+0x20>)
 800e96c:	2300      	movs	r3, #0
 800e96e:	4604      	mov	r4, r0
 800e970:	4608      	mov	r0, r1
 800e972:	4611      	mov	r1, r2
 800e974:	602b      	str	r3, [r5, #0]
 800e976:	f7f3 f887 	bl	8001a88 <_kill>
 800e97a:	1c43      	adds	r3, r0, #1
 800e97c:	d102      	bne.n	800e984 <_kill_r+0x1c>
 800e97e:	682b      	ldr	r3, [r5, #0]
 800e980:	b103      	cbz	r3, 800e984 <_kill_r+0x1c>
 800e982:	6023      	str	r3, [r4, #0]
 800e984:	bd38      	pop	{r3, r4, r5, pc}
 800e986:	bf00      	nop
 800e988:	20008d88 	.word	0x20008d88

0800e98c <_getpid_r>:
 800e98c:	f7f3 b874 	b.w	8001a78 <_getpid>

0800e990 <__swhatbuf_r>:
 800e990:	b570      	push	{r4, r5, r6, lr}
 800e992:	460c      	mov	r4, r1
 800e994:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e998:	2900      	cmp	r1, #0
 800e99a:	b096      	sub	sp, #88	@ 0x58
 800e99c:	4615      	mov	r5, r2
 800e99e:	461e      	mov	r6, r3
 800e9a0:	da0d      	bge.n	800e9be <__swhatbuf_r+0x2e>
 800e9a2:	89a3      	ldrh	r3, [r4, #12]
 800e9a4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e9a8:	f04f 0100 	mov.w	r1, #0
 800e9ac:	bf14      	ite	ne
 800e9ae:	2340      	movne	r3, #64	@ 0x40
 800e9b0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e9b4:	2000      	movs	r0, #0
 800e9b6:	6031      	str	r1, [r6, #0]
 800e9b8:	602b      	str	r3, [r5, #0]
 800e9ba:	b016      	add	sp, #88	@ 0x58
 800e9bc:	bd70      	pop	{r4, r5, r6, pc}
 800e9be:	466a      	mov	r2, sp
 800e9c0:	f000 f848 	bl	800ea54 <_fstat_r>
 800e9c4:	2800      	cmp	r0, #0
 800e9c6:	dbec      	blt.n	800e9a2 <__swhatbuf_r+0x12>
 800e9c8:	9901      	ldr	r1, [sp, #4]
 800e9ca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e9ce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e9d2:	4259      	negs	r1, r3
 800e9d4:	4159      	adcs	r1, r3
 800e9d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e9da:	e7eb      	b.n	800e9b4 <__swhatbuf_r+0x24>

0800e9dc <__smakebuf_r>:
 800e9dc:	898b      	ldrh	r3, [r1, #12]
 800e9de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e9e0:	079d      	lsls	r5, r3, #30
 800e9e2:	4606      	mov	r6, r0
 800e9e4:	460c      	mov	r4, r1
 800e9e6:	d507      	bpl.n	800e9f8 <__smakebuf_r+0x1c>
 800e9e8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e9ec:	6023      	str	r3, [r4, #0]
 800e9ee:	6123      	str	r3, [r4, #16]
 800e9f0:	2301      	movs	r3, #1
 800e9f2:	6163      	str	r3, [r4, #20]
 800e9f4:	b003      	add	sp, #12
 800e9f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e9f8:	ab01      	add	r3, sp, #4
 800e9fa:	466a      	mov	r2, sp
 800e9fc:	f7ff ffc8 	bl	800e990 <__swhatbuf_r>
 800ea00:	9f00      	ldr	r7, [sp, #0]
 800ea02:	4605      	mov	r5, r0
 800ea04:	4639      	mov	r1, r7
 800ea06:	4630      	mov	r0, r6
 800ea08:	f7fd fbee 	bl	800c1e8 <_malloc_r>
 800ea0c:	b948      	cbnz	r0, 800ea22 <__smakebuf_r+0x46>
 800ea0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea12:	059a      	lsls	r2, r3, #22
 800ea14:	d4ee      	bmi.n	800e9f4 <__smakebuf_r+0x18>
 800ea16:	f023 0303 	bic.w	r3, r3, #3
 800ea1a:	f043 0302 	orr.w	r3, r3, #2
 800ea1e:	81a3      	strh	r3, [r4, #12]
 800ea20:	e7e2      	b.n	800e9e8 <__smakebuf_r+0xc>
 800ea22:	89a3      	ldrh	r3, [r4, #12]
 800ea24:	6020      	str	r0, [r4, #0]
 800ea26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ea2a:	81a3      	strh	r3, [r4, #12]
 800ea2c:	9b01      	ldr	r3, [sp, #4]
 800ea2e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ea32:	b15b      	cbz	r3, 800ea4c <__smakebuf_r+0x70>
 800ea34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ea38:	4630      	mov	r0, r6
 800ea3a:	f000 f81d 	bl	800ea78 <_isatty_r>
 800ea3e:	b128      	cbz	r0, 800ea4c <__smakebuf_r+0x70>
 800ea40:	89a3      	ldrh	r3, [r4, #12]
 800ea42:	f023 0303 	bic.w	r3, r3, #3
 800ea46:	f043 0301 	orr.w	r3, r3, #1
 800ea4a:	81a3      	strh	r3, [r4, #12]
 800ea4c:	89a3      	ldrh	r3, [r4, #12]
 800ea4e:	431d      	orrs	r5, r3
 800ea50:	81a5      	strh	r5, [r4, #12]
 800ea52:	e7cf      	b.n	800e9f4 <__smakebuf_r+0x18>

0800ea54 <_fstat_r>:
 800ea54:	b538      	push	{r3, r4, r5, lr}
 800ea56:	4d07      	ldr	r5, [pc, #28]	@ (800ea74 <_fstat_r+0x20>)
 800ea58:	2300      	movs	r3, #0
 800ea5a:	4604      	mov	r4, r0
 800ea5c:	4608      	mov	r0, r1
 800ea5e:	4611      	mov	r1, r2
 800ea60:	602b      	str	r3, [r5, #0]
 800ea62:	f7f3 f871 	bl	8001b48 <_fstat>
 800ea66:	1c43      	adds	r3, r0, #1
 800ea68:	d102      	bne.n	800ea70 <_fstat_r+0x1c>
 800ea6a:	682b      	ldr	r3, [r5, #0]
 800ea6c:	b103      	cbz	r3, 800ea70 <_fstat_r+0x1c>
 800ea6e:	6023      	str	r3, [r4, #0]
 800ea70:	bd38      	pop	{r3, r4, r5, pc}
 800ea72:	bf00      	nop
 800ea74:	20008d88 	.word	0x20008d88

0800ea78 <_isatty_r>:
 800ea78:	b538      	push	{r3, r4, r5, lr}
 800ea7a:	4d06      	ldr	r5, [pc, #24]	@ (800ea94 <_isatty_r+0x1c>)
 800ea7c:	2300      	movs	r3, #0
 800ea7e:	4604      	mov	r4, r0
 800ea80:	4608      	mov	r0, r1
 800ea82:	602b      	str	r3, [r5, #0]
 800ea84:	f7f3 f870 	bl	8001b68 <_isatty>
 800ea88:	1c43      	adds	r3, r0, #1
 800ea8a:	d102      	bne.n	800ea92 <_isatty_r+0x1a>
 800ea8c:	682b      	ldr	r3, [r5, #0]
 800ea8e:	b103      	cbz	r3, 800ea92 <_isatty_r+0x1a>
 800ea90:	6023      	str	r3, [r4, #0]
 800ea92:	bd38      	pop	{r3, r4, r5, pc}
 800ea94:	20008d88 	.word	0x20008d88

0800ea98 <_init>:
 800ea98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea9a:	bf00      	nop
 800ea9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea9e:	bc08      	pop	{r3}
 800eaa0:	469e      	mov	lr, r3
 800eaa2:	4770      	bx	lr

0800eaa4 <_fini>:
 800eaa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eaa6:	bf00      	nop
 800eaa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eaaa:	bc08      	pop	{r3}
 800eaac:	469e      	mov	lr, r3
 800eaae:	4770      	bx	lr
