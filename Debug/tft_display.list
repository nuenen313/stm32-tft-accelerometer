
tft_display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e2f0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001294  0800e490  0800e490  0000f490  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f724  0800f724  0001120c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800f724  0800f724  00010724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f72c  0800f72c  0001120c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f72c  0800f72c  0001072c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f730  0800f730  00010730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000020c  20000000  0800f734  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008bac  2000020c  0800f940  0001120c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008db8  0800f940  00011db8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001120c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d7a5  00000000  00000000  0001123c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b51  00000000  00000000  0002e9e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a18  00000000  00000000  00033538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001b71a  00000000  00000000  00034f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00022d9a  00000000  00000000  0005066a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0009a4b1  00000000  00000000  00073404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0010d8b5  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00001408  00000000  00000000  0010d8f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007dd0  00000000  00000000  0010ed00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  00116ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000020c 	.word	0x2000020c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e478 	.word	0x0800e478

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000210 	.word	0x20000210
 80001dc:	0800e478 	.word	0x0800e478

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b988 	b.w	8000ee0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	468e      	mov	lr, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	4688      	mov	r8, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d962      	bls.n	8000cc4 <__udivmoddi4+0xdc>
 8000bfe:	fab2 f682 	clz	r6, r2
 8000c02:	b14e      	cbz	r6, 8000c18 <__udivmoddi4+0x30>
 8000c04:	f1c6 0320 	rsb	r3, r6, #32
 8000c08:	fa01 f806 	lsl.w	r8, r1, r6
 8000c0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c10:	40b7      	lsls	r7, r6
 8000c12:	ea43 0808 	orr.w	r8, r3, r8
 8000c16:	40b4      	lsls	r4, r6
 8000c18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c1c:	fa1f fc87 	uxth.w	ip, r7
 8000c20:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c24:	0c23      	lsrs	r3, r4, #16
 8000c26:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c2a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c3c:	f080 80ea 	bcs.w	8000e14 <__udivmoddi4+0x22c>
 8000c40:	429a      	cmp	r2, r3
 8000c42:	f240 80e7 	bls.w	8000e14 <__udivmoddi4+0x22c>
 8000c46:	3902      	subs	r1, #2
 8000c48:	443b      	add	r3, r7
 8000c4a:	1a9a      	subs	r2, r3, r2
 8000c4c:	b2a3      	uxth	r3, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c5a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5e:	459c      	cmp	ip, r3
 8000c60:	d909      	bls.n	8000c76 <__udivmoddi4+0x8e>
 8000c62:	18fb      	adds	r3, r7, r3
 8000c64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c68:	f080 80d6 	bcs.w	8000e18 <__udivmoddi4+0x230>
 8000c6c:	459c      	cmp	ip, r3
 8000c6e:	f240 80d3 	bls.w	8000e18 <__udivmoddi4+0x230>
 8000c72:	443b      	add	r3, r7
 8000c74:	3802      	subs	r0, #2
 8000c76:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7a:	eba3 030c 	sub.w	r3, r3, ip
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11d      	cbz	r5, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40f3      	lsrs	r3, r6
 8000c84:	2200      	movs	r2, #0
 8000c86:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d905      	bls.n	8000c9e <__udivmoddi4+0xb6>
 8000c92:	b10d      	cbz	r5, 8000c98 <__udivmoddi4+0xb0>
 8000c94:	e9c5 0100 	strd	r0, r1, [r5]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e7f5      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000c9e:	fab3 f183 	clz	r1, r3
 8000ca2:	2900      	cmp	r1, #0
 8000ca4:	d146      	bne.n	8000d34 <__udivmoddi4+0x14c>
 8000ca6:	4573      	cmp	r3, lr
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xc8>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 8105 	bhi.w	8000eba <__udivmoddi4+0x2d2>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	4690      	mov	r8, r2
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0e5      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cbe:	e9c5 4800 	strd	r4, r8, [r5]
 8000cc2:	e7e2      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f000 8090 	beq.w	8000dea <__udivmoddi4+0x202>
 8000cca:	fab2 f682 	clz	r6, r2
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	f040 80a4 	bne.w	8000e1c <__udivmoddi4+0x234>
 8000cd4:	1a8a      	subs	r2, r1, r2
 8000cd6:	0c03      	lsrs	r3, r0, #16
 8000cd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cdc:	b280      	uxth	r0, r0
 8000cde:	b2bc      	uxth	r4, r7
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ce6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cee:	fb04 f20c 	mul.w	r2, r4, ip
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d907      	bls.n	8000d06 <__udivmoddi4+0x11e>
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cfc:	d202      	bcs.n	8000d04 <__udivmoddi4+0x11c>
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	f200 80e0 	bhi.w	8000ec4 <__udivmoddi4+0x2dc>
 8000d04:	46c4      	mov	ip, r8
 8000d06:	1a9b      	subs	r3, r3, r2
 8000d08:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d0c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d10:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d14:	fb02 f404 	mul.w	r4, r2, r4
 8000d18:	429c      	cmp	r4, r3
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x144>
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x142>
 8000d24:	429c      	cmp	r4, r3
 8000d26:	f200 80ca 	bhi.w	8000ebe <__udivmoddi4+0x2d6>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	1b1b      	subs	r3, r3, r4
 8000d2e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d32:	e7a5      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d34:	f1c1 0620 	rsb	r6, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d3e:	431f      	orrs	r7, r3
 8000d40:	fa0e f401 	lsl.w	r4, lr, r1
 8000d44:	fa20 f306 	lsr.w	r3, r0, r6
 8000d48:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d4c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d50:	4323      	orrs	r3, r4
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	fa1f fc87 	uxth.w	ip, r7
 8000d5a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d5e:	0c1c      	lsrs	r4, r3, #16
 8000d60:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d64:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d68:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x1a0>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d7a:	f080 809c 	bcs.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	f240 8099 	bls.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d84:	3802      	subs	r0, #2
 8000d86:	443c      	add	r4, r7
 8000d88:	eba4 040e 	sub.w	r4, r4, lr
 8000d8c:	fa1f fe83 	uxth.w	lr, r3
 8000d90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d94:	fb09 4413 	mls	r4, r9, r3, r4
 8000d98:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d9c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da0:	45a4      	cmp	ip, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x1ce>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000daa:	f080 8082 	bcs.w	8000eb2 <__udivmoddi4+0x2ca>
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d97f      	bls.n	8000eb2 <__udivmoddi4+0x2ca>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dba:	eba4 040c 	sub.w	r4, r4, ip
 8000dbe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dc2:	4564      	cmp	r4, ip
 8000dc4:	4673      	mov	r3, lr
 8000dc6:	46e1      	mov	r9, ip
 8000dc8:	d362      	bcc.n	8000e90 <__udivmoddi4+0x2a8>
 8000dca:	d05f      	beq.n	8000e8c <__udivmoddi4+0x2a4>
 8000dcc:	b15d      	cbz	r5, 8000de6 <__udivmoddi4+0x1fe>
 8000dce:	ebb8 0203 	subs.w	r2, r8, r3
 8000dd2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dda:	fa22 f301 	lsr.w	r3, r2, r1
 8000dde:	431e      	orrs	r6, r3
 8000de0:	40cc      	lsrs	r4, r1
 8000de2:	e9c5 6400 	strd	r6, r4, [r5]
 8000de6:	2100      	movs	r1, #0
 8000de8:	e74f      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000dea:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dee:	0c01      	lsrs	r1, r0, #16
 8000df0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000df4:	b280      	uxth	r0, r0
 8000df6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	4638      	mov	r0, r7
 8000dfe:	463c      	mov	r4, r7
 8000e00:	46b8      	mov	r8, r7
 8000e02:	46be      	mov	lr, r7
 8000e04:	2620      	movs	r6, #32
 8000e06:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e0a:	eba2 0208 	sub.w	r2, r2, r8
 8000e0e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e12:	e766      	b.n	8000ce2 <__udivmoddi4+0xfa>
 8000e14:	4601      	mov	r1, r0
 8000e16:	e718      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e18:	4610      	mov	r0, r2
 8000e1a:	e72c      	b.n	8000c76 <__udivmoddi4+0x8e>
 8000e1c:	f1c6 0220 	rsb	r2, r6, #32
 8000e20:	fa2e f302 	lsr.w	r3, lr, r2
 8000e24:	40b7      	lsls	r7, r6
 8000e26:	40b1      	lsls	r1, r6
 8000e28:	fa20 f202 	lsr.w	r2, r0, r2
 8000e2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e30:	430a      	orrs	r2, r1
 8000e32:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e36:	b2bc      	uxth	r4, r7
 8000e38:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e42:	fb08 f904 	mul.w	r9, r8, r4
 8000e46:	40b0      	lsls	r0, r6
 8000e48:	4589      	cmp	r9, r1
 8000e4a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e4e:	b280      	uxth	r0, r0
 8000e50:	d93e      	bls.n	8000ed0 <__udivmoddi4+0x2e8>
 8000e52:	1879      	adds	r1, r7, r1
 8000e54:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e58:	d201      	bcs.n	8000e5e <__udivmoddi4+0x276>
 8000e5a:	4589      	cmp	r9, r1
 8000e5c:	d81f      	bhi.n	8000e9e <__udivmoddi4+0x2b6>
 8000e5e:	eba1 0109 	sub.w	r1, r1, r9
 8000e62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e66:	fb09 f804 	mul.w	r8, r9, r4
 8000e6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e6e:	b292      	uxth	r2, r2
 8000e70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e74:	4542      	cmp	r2, r8
 8000e76:	d229      	bcs.n	8000ecc <__udivmoddi4+0x2e4>
 8000e78:	18ba      	adds	r2, r7, r2
 8000e7a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e7e:	d2c4      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e80:	4542      	cmp	r2, r8
 8000e82:	d2c2      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e84:	f1a9 0102 	sub.w	r1, r9, #2
 8000e88:	443a      	add	r2, r7
 8000e8a:	e7be      	b.n	8000e0a <__udivmoddi4+0x222>
 8000e8c:	45f0      	cmp	r8, lr
 8000e8e:	d29d      	bcs.n	8000dcc <__udivmoddi4+0x1e4>
 8000e90:	ebbe 0302 	subs.w	r3, lr, r2
 8000e94:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e98:	3801      	subs	r0, #1
 8000e9a:	46e1      	mov	r9, ip
 8000e9c:	e796      	b.n	8000dcc <__udivmoddi4+0x1e4>
 8000e9e:	eba7 0909 	sub.w	r9, r7, r9
 8000ea2:	4449      	add	r1, r9
 8000ea4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ea8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eac:	fb09 f804 	mul.w	r8, r9, r4
 8000eb0:	e7db      	b.n	8000e6a <__udivmoddi4+0x282>
 8000eb2:	4673      	mov	r3, lr
 8000eb4:	e77f      	b.n	8000db6 <__udivmoddi4+0x1ce>
 8000eb6:	4650      	mov	r0, sl
 8000eb8:	e766      	b.n	8000d88 <__udivmoddi4+0x1a0>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e6fd      	b.n	8000cba <__udivmoddi4+0xd2>
 8000ebe:	443b      	add	r3, r7
 8000ec0:	3a02      	subs	r2, #2
 8000ec2:	e733      	b.n	8000d2c <__udivmoddi4+0x144>
 8000ec4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec8:	443b      	add	r3, r7
 8000eca:	e71c      	b.n	8000d06 <__udivmoddi4+0x11e>
 8000ecc:	4649      	mov	r1, r9
 8000ece:	e79c      	b.n	8000e0a <__udivmoddi4+0x222>
 8000ed0:	eba1 0109 	sub.w	r1, r1, r9
 8000ed4:	46c4      	mov	ip, r8
 8000ed6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eda:	fb09 f804 	mul.w	r8, r9, r4
 8000ede:	e7c4      	b.n	8000e6a <__udivmoddi4+0x282>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee4:	b590      	push	{r4, r7, lr}
 8000ee6:	b087      	sub	sp, #28
 8000ee8:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eea:	f001 fc63 	bl	80027b4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eee:	f000 f8a5 	bl	800103c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000ef2:	f000 f90b 	bl	800110c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef6:	f000 faa3 	bl	8001440 <MX_GPIO_Init>
  MX_DMA_Init();
 8000efa:	f000 fa81 	bl	8001400 <MX_DMA_Init>
  MX_I2C1_Init();
 8000efe:	f000 f939 	bl	8001174 <MX_I2C1_Init>
  MX_I2S2_Init();
 8000f02:	f000 f965 	bl	80011d0 <MX_I2S2_Init>
  MX_I2S3_Init();
 8000f06:	f000 f991 	bl	800122c <MX_I2S3_Init>
  MX_SPI1_Init();
 8000f0a:	f000 f9bf 	bl	800128c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000f0e:	f00a fb21 	bl	800b554 <MX_USB_HOST_Init>
  MX_SPI4_Init();
 8000f12:	f000 f9f1 	bl	80012f8 <MX_SPI4_Init>
  MX_TIM3_Init();
 8000f16:	f000 fa25 	bl	8001364 <MX_TIM3_Init>
  MX_CRC_Init();
 8000f1a:	f000 f917 	bl	800114c <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  Displ_Init(Displ_Orientat_90);		// initialize the display and set the initial display orientation (here is orientaton: 0°) - THIS FUNCTION MUST PRECEED ANY OTHER DISPLAY FUNCTION CALL.
 8000f1e:	2001      	movs	r0, #1
 8000f20:	f001 f82c 	bl	8001f7c <Displ_Init>
  Displ_CLS(BLACK);			// after initialization (above) and before turning on backlight (below), you can draw the initial display appearance. (here I'm just clearing display with a black background)
 8000f24:	2000      	movs	r0, #0
 8000f26:	f001 f96d 	bl	8002204 <Displ_CLS>
  Displ_BackLight('I');
 8000f2a:	2049      	movs	r0, #73	@ 0x49
 8000f2c:	f001 fac4 	bl	80024b8 <Displ_BackLight>
  Displ_FillArea(0,0,_width,_height,WHITE);
 8000f30:	4b39      	ldr	r3, [pc, #228]	@ (8001018 <main+0x134>)
 8000f32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f36:	b29a      	uxth	r2, r3
 8000f38:	4b38      	ldr	r3, [pc, #224]	@ (800101c <main+0x138>)
 8000f3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000f44:	9100      	str	r1, [sp, #0]
 8000f46:	2100      	movs	r1, #0
 8000f48:	2000      	movs	r0, #0
 8000f4a:	f001 f8a1 	bl	8002090 <Displ_FillArea>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000f4e:	f00a fb27 	bl	800b5a0 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    //Displ_PerfTest();
    //Touch_ShowData();
   if (Touch_GotATouch(1)){
 8000f52:	2001      	movs	r0, #1
 8000f54:	f001 fbda 	bl	800270c <Touch_GotATouch>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d033      	beq.n	8000fc6 <main+0xe2>
    	touchTime=HAL_GetTick();
 8000f5e:	f001 fc8f 	bl	8002880 <HAL_GetTick>
 8000f62:	4603      	mov	r3, r0
 8000f64:	4a2e      	ldr	r2, [pc, #184]	@ (8001020 <main+0x13c>)
 8000f66:	6013      	str	r3, [r2, #0]
    	touchDelay=(HAL_GetTick() - touchTime);
 8000f68:	f001 fc8a 	bl	8002880 <HAL_GetTick>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	4b2c      	ldr	r3, [pc, #176]	@ (8001020 <main+0x13c>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	1ad3      	subs	r3, r2, r3
 8000f74:	4a2b      	ldr	r2, [pc, #172]	@ (8001024 <main+0x140>)
 8000f76:	6013      	str	r3, [r2, #0]
    	Displ_CLS(WHITE);
 8000f78:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000f7c:	f001 f942 	bl	8002204 <Displ_CLS>
    	strcpy(text,"Touching");
 8000f80:	4b29      	ldr	r3, [pc, #164]	@ (8001028 <main+0x144>)
 8000f82:	4a2a      	ldr	r2, [pc, #168]	@ (800102c <main+0x148>)
 8000f84:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f86:	c303      	stmia	r3!, {r0, r1}
 8000f88:	701a      	strb	r2, [r3, #0]
    	Displ_WString(10,30,text,Font20,1,BLUE,WHITE);
 8000f8a:	4b29      	ldr	r3, [pc, #164]	@ (8001030 <main+0x14c>)
 8000f8c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f90:	9204      	str	r2, [sp, #16]
 8000f92:	221f      	movs	r2, #31
 8000f94:	9203      	str	r2, [sp, #12]
 8000f96:	2201      	movs	r2, #1
 8000f98:	9202      	str	r2, [sp, #8]
 8000f9a:	466c      	mov	r4, sp
 8000f9c:	1d1a      	adds	r2, r3, #4
 8000f9e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fa2:	e884 0003 	stmia.w	r4, {r0, r1}
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a1f      	ldr	r2, [pc, #124]	@ (8001028 <main+0x144>)
 8000faa:	211e      	movs	r1, #30
 8000fac:	200a      	movs	r0, #10
 8000fae:	f001 fa43 	bl	8002438 <Displ_WString>

    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fb8:	481e      	ldr	r0, [pc, #120]	@ (8001034 <main+0x150>)
 8000fba:	f002 fac5 	bl	8003548 <HAL_GPIO_WritePin>

    	Touch_WaitForUntouch(0);
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	f001 fb6a 	bl	8002698 <Touch_WaitForUntouch>
 8000fc4:	e7c3      	b.n	8000f4e <main+0x6a>
    }
    else{
    	Displ_CLS(WHITE);
 8000fc6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000fca:	f001 f91b 	bl	8002204 <Displ_CLS>
    	strcpy(text,"Not touching");
 8000fce:	4a16      	ldr	r2, [pc, #88]	@ (8001028 <main+0x144>)
 8000fd0:	4b19      	ldr	r3, [pc, #100]	@ (8001038 <main+0x154>)
 8000fd2:	4614      	mov	r4, r2
 8000fd4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fd6:	c407      	stmia	r4!, {r0, r1, r2}
 8000fd8:	7023      	strb	r3, [r4, #0]

    	Displ_WString(10,60,text,Font20,1,RED,WHITE);
 8000fda:	4b15      	ldr	r3, [pc, #84]	@ (8001030 <main+0x14c>)
 8000fdc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fe0:	9204      	str	r2, [sp, #16]
 8000fe2:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8000fe6:	9203      	str	r2, [sp, #12]
 8000fe8:	2201      	movs	r2, #1
 8000fea:	9202      	str	r2, [sp, #8]
 8000fec:	466c      	mov	r4, sp
 8000fee:	1d1a      	adds	r2, r3, #4
 8000ff0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ff4:	e884 0003 	stmia.w	r4, {r0, r1}
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a0b      	ldr	r2, [pc, #44]	@ (8001028 <main+0x144>)
 8000ffc:	213c      	movs	r1, #60	@ 0x3c
 8000ffe:	200a      	movs	r0, #10
 8001000:	f001 fa1a 	bl	8002438 <Displ_WString>
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8001004:	2200      	movs	r2, #0
 8001006:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800100a:	480a      	ldr	r0, [pc, #40]	@ (8001034 <main+0x150>)
 800100c:	f002 fa9c 	bl	8003548 <HAL_GPIO_WritePin>
        Touch_WaitForTouch(0);
 8001010:	2000      	movs	r0, #0
 8001012:	f001 fb1d 	bl	8002650 <Touch_WaitForTouch>
    MX_USB_HOST_Process();
 8001016:	e79a      	b.n	8000f4e <main+0x6a>
 8001018:	2000049a 	.word	0x2000049a
 800101c:	2000049c 	.word	0x2000049c
 8001020:	2000048c 	.word	0x2000048c
 8001024:	20000490 	.word	0x20000490
 8001028:	2000046c 	.word	0x2000046c
 800102c:	0800e490 	.word	0x0800e490
 8001030:	20000000 	.word	0x20000000
 8001034:	40020c00 	.word	0x40020c00
 8001038:	0800e49c 	.word	0x0800e49c

0800103c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b094      	sub	sp, #80	@ 0x50
 8001040:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001042:	f107 0320 	add.w	r3, r7, #32
 8001046:	2230      	movs	r2, #48	@ 0x30
 8001048:	2100      	movs	r1, #0
 800104a:	4618      	mov	r0, r3
 800104c:	f00b fba5 	bl	800c79a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001050:	f107 030c 	add.w	r3, r7, #12
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001060:	2300      	movs	r3, #0
 8001062:	60bb      	str	r3, [r7, #8]
 8001064:	4b27      	ldr	r3, [pc, #156]	@ (8001104 <SystemClock_Config+0xc8>)
 8001066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001068:	4a26      	ldr	r2, [pc, #152]	@ (8001104 <SystemClock_Config+0xc8>)
 800106a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800106e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001070:	4b24      	ldr	r3, [pc, #144]	@ (8001104 <SystemClock_Config+0xc8>)
 8001072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001074:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001078:	60bb      	str	r3, [r7, #8]
 800107a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800107c:	2300      	movs	r3, #0
 800107e:	607b      	str	r3, [r7, #4]
 8001080:	4b21      	ldr	r3, [pc, #132]	@ (8001108 <SystemClock_Config+0xcc>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a20      	ldr	r2, [pc, #128]	@ (8001108 <SystemClock_Config+0xcc>)
 8001086:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800108a:	6013      	str	r3, [r2, #0]
 800108c:	4b1e      	ldr	r3, [pc, #120]	@ (8001108 <SystemClock_Config+0xcc>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001094:	607b      	str	r3, [r7, #4]
 8001096:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001098:	2301      	movs	r3, #1
 800109a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800109c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010a0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010a2:	2302      	movs	r3, #2
 80010a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010a6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80010aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010ac:	2304      	movs	r3, #4
 80010ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80010b0:	23c0      	movs	r3, #192	@ 0xc0
 80010b2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80010b4:	2304      	movs	r3, #4
 80010b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80010b8:	2308      	movs	r3, #8
 80010ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010bc:	f107 0320 	add.w	r3, r7, #32
 80010c0:	4618      	mov	r0, r3
 80010c2:	f005 f98b 	bl	80063dc <HAL_RCC_OscConfig>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010cc:	f000 fac2 	bl	8001654 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010d0:	230f      	movs	r3, #15
 80010d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010d4:	2302      	movs	r3, #2
 80010d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010dc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80010e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80010e6:	f107 030c 	add.w	r3, r7, #12
 80010ea:	2103      	movs	r1, #3
 80010ec:	4618      	mov	r0, r3
 80010ee:	f005 fbed 	bl	80068cc <HAL_RCC_ClockConfig>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80010f8:	f000 faac 	bl	8001654 <Error_Handler>
  }
}
 80010fc:	bf00      	nop
 80010fe:	3750      	adds	r7, #80	@ 0x50
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40023800 	.word	0x40023800
 8001108:	40007000 	.word	0x40007000

0800110c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001112:	463b      	mov	r3, r7
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
 8001120:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001122:	2301      	movs	r3, #1
 8001124:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8001126:	23c8      	movs	r3, #200	@ 0xc8
 8001128:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 800112a:	2305      	movs	r3, #5
 800112c:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800112e:	2302      	movs	r3, #2
 8001130:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001132:	463b      	mov	r3, r7
 8001134:	4618      	mov	r0, r3
 8001136:	f005 fdd5 	bl	8006ce4 <HAL_RCCEx_PeriphCLKConfig>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8001140:	f000 fa88 	bl	8001654 <Error_Handler>
  }
}
 8001144:	bf00      	nop
 8001146:	3718      	adds	r7, #24
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001150:	4b06      	ldr	r3, [pc, #24]	@ (800116c <MX_CRC_Init+0x20>)
 8001152:	4a07      	ldr	r2, [pc, #28]	@ (8001170 <MX_CRC_Init+0x24>)
 8001154:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001156:	4805      	ldr	r0, [pc, #20]	@ (800116c <MX_CRC_Init+0x20>)
 8001158:	f001 fd31 	bl	8002bbe <HAL_CRC_Init>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001162:	f000 fa77 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000228 	.word	0x20000228
 8001170:	40023000 	.word	0x40023000

08001174 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001178:	4b12      	ldr	r3, [pc, #72]	@ (80011c4 <MX_I2C1_Init+0x50>)
 800117a:	4a13      	ldr	r2, [pc, #76]	@ (80011c8 <MX_I2C1_Init+0x54>)
 800117c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800117e:	4b11      	ldr	r3, [pc, #68]	@ (80011c4 <MX_I2C1_Init+0x50>)
 8001180:	4a12      	ldr	r2, [pc, #72]	@ (80011cc <MX_I2C1_Init+0x58>)
 8001182:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001184:	4b0f      	ldr	r3, [pc, #60]	@ (80011c4 <MX_I2C1_Init+0x50>)
 8001186:	2200      	movs	r2, #0
 8001188:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800118a:	4b0e      	ldr	r3, [pc, #56]	@ (80011c4 <MX_I2C1_Init+0x50>)
 800118c:	2200      	movs	r2, #0
 800118e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001190:	4b0c      	ldr	r3, [pc, #48]	@ (80011c4 <MX_I2C1_Init+0x50>)
 8001192:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001196:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001198:	4b0a      	ldr	r3, [pc, #40]	@ (80011c4 <MX_I2C1_Init+0x50>)
 800119a:	2200      	movs	r2, #0
 800119c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800119e:	4b09      	ldr	r3, [pc, #36]	@ (80011c4 <MX_I2C1_Init+0x50>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011a4:	4b07      	ldr	r3, [pc, #28]	@ (80011c4 <MX_I2C1_Init+0x50>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011aa:	4b06      	ldr	r3, [pc, #24]	@ (80011c4 <MX_I2C1_Init+0x50>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011b0:	4804      	ldr	r0, [pc, #16]	@ (80011c4 <MX_I2C1_Init+0x50>)
 80011b2:	f004 fb2f 	bl	8005814 <HAL_I2C_Init>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011bc:	f000 fa4a 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000230 	.word	0x20000230
 80011c8:	40005400 	.word	0x40005400
 80011cc:	000186a0 	.word	0x000186a0

080011d0 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80011d4:	4b12      	ldr	r3, [pc, #72]	@ (8001220 <MX_I2S2_Init+0x50>)
 80011d6:	4a13      	ldr	r2, [pc, #76]	@ (8001224 <MX_I2S2_Init+0x54>)
 80011d8:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80011da:	4b11      	ldr	r3, [pc, #68]	@ (8001220 <MX_I2S2_Init+0x50>)
 80011dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011e0:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80011e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001220 <MX_I2S2_Init+0x50>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80011e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001220 <MX_I2S2_Init+0x50>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80011ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001220 <MX_I2S2_Init+0x50>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80011f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001220 <MX_I2S2_Init+0x50>)
 80011f6:	4a0c      	ldr	r2, [pc, #48]	@ (8001228 <MX_I2S2_Init+0x58>)
 80011f8:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80011fa:	4b09      	ldr	r3, [pc, #36]	@ (8001220 <MX_I2S2_Init+0x50>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001200:	4b07      	ldr	r3, [pc, #28]	@ (8001220 <MX_I2S2_Init+0x50>)
 8001202:	2200      	movs	r2, #0
 8001204:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8001206:	4b06      	ldr	r3, [pc, #24]	@ (8001220 <MX_I2S2_Init+0x50>)
 8001208:	2201      	movs	r2, #1
 800120a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800120c:	4804      	ldr	r0, [pc, #16]	@ (8001220 <MX_I2S2_Init+0x50>)
 800120e:	f004 fc45 	bl	8005a9c <HAL_I2S_Init>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8001218:	f000 fa1c 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20000284 	.word	0x20000284
 8001224:	40003800 	.word	0x40003800
 8001228:	00017700 	.word	0x00017700

0800122c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001230:	4b13      	ldr	r3, [pc, #76]	@ (8001280 <MX_I2S3_Init+0x54>)
 8001232:	4a14      	ldr	r2, [pc, #80]	@ (8001284 <MX_I2S3_Init+0x58>)
 8001234:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001236:	4b12      	ldr	r3, [pc, #72]	@ (8001280 <MX_I2S3_Init+0x54>)
 8001238:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800123c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800123e:	4b10      	ldr	r3, [pc, #64]	@ (8001280 <MX_I2S3_Init+0x54>)
 8001240:	2200      	movs	r2, #0
 8001242:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001244:	4b0e      	ldr	r3, [pc, #56]	@ (8001280 <MX_I2S3_Init+0x54>)
 8001246:	2200      	movs	r2, #0
 8001248:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800124a:	4b0d      	ldr	r3, [pc, #52]	@ (8001280 <MX_I2S3_Init+0x54>)
 800124c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001250:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001252:	4b0b      	ldr	r3, [pc, #44]	@ (8001280 <MX_I2S3_Init+0x54>)
 8001254:	4a0c      	ldr	r2, [pc, #48]	@ (8001288 <MX_I2S3_Init+0x5c>)
 8001256:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001258:	4b09      	ldr	r3, [pc, #36]	@ (8001280 <MX_I2S3_Init+0x54>)
 800125a:	2200      	movs	r2, #0
 800125c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800125e:	4b08      	ldr	r3, [pc, #32]	@ (8001280 <MX_I2S3_Init+0x54>)
 8001260:	2200      	movs	r2, #0
 8001262:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001264:	4b06      	ldr	r3, [pc, #24]	@ (8001280 <MX_I2S3_Init+0x54>)
 8001266:	2200      	movs	r2, #0
 8001268:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800126a:	4805      	ldr	r0, [pc, #20]	@ (8001280 <MX_I2S3_Init+0x54>)
 800126c:	f004 fc16 	bl	8005a9c <HAL_I2S_Init>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001276:	f000 f9ed 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	200002cc 	.word	0x200002cc
 8001284:	40003c00 	.word	0x40003c00
 8001288:	00017700 	.word	0x00017700

0800128c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001290:	4b17      	ldr	r3, [pc, #92]	@ (80012f0 <MX_SPI1_Init+0x64>)
 8001292:	4a18      	ldr	r2, [pc, #96]	@ (80012f4 <MX_SPI1_Init+0x68>)
 8001294:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001296:	4b16      	ldr	r3, [pc, #88]	@ (80012f0 <MX_SPI1_Init+0x64>)
 8001298:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800129c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800129e:	4b14      	ldr	r3, [pc, #80]	@ (80012f0 <MX_SPI1_Init+0x64>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012a4:	4b12      	ldr	r3, [pc, #72]	@ (80012f0 <MX_SPI1_Init+0x64>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012aa:	4b11      	ldr	r3, [pc, #68]	@ (80012f0 <MX_SPI1_Init+0x64>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012b0:	4b0f      	ldr	r3, [pc, #60]	@ (80012f0 <MX_SPI1_Init+0x64>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012b6:	4b0e      	ldr	r3, [pc, #56]	@ (80012f0 <MX_SPI1_Init+0x64>)
 80012b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012bc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012be:	4b0c      	ldr	r3, [pc, #48]	@ (80012f0 <MX_SPI1_Init+0x64>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012c4:	4b0a      	ldr	r3, [pc, #40]	@ (80012f0 <MX_SPI1_Init+0x64>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012ca:	4b09      	ldr	r3, [pc, #36]	@ (80012f0 <MX_SPI1_Init+0x64>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012d0:	4b07      	ldr	r3, [pc, #28]	@ (80012f0 <MX_SPI1_Init+0x64>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80012d6:	4b06      	ldr	r3, [pc, #24]	@ (80012f0 <MX_SPI1_Init+0x64>)
 80012d8:	220a      	movs	r2, #10
 80012da:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012dc:	4804      	ldr	r0, [pc, #16]	@ (80012f0 <MX_SPI1_Init+0x64>)
 80012de:	f005 fe53 	bl	8006f88 <HAL_SPI_Init>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80012e8:	f000 f9b4 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012ec:	bf00      	nop
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000314 	.word	0x20000314
 80012f4:	40013000 	.word	0x40013000

080012f8 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80012fc:	4b17      	ldr	r3, [pc, #92]	@ (800135c <MX_SPI4_Init+0x64>)
 80012fe:	4a18      	ldr	r2, [pc, #96]	@ (8001360 <MX_SPI4_Init+0x68>)
 8001300:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001302:	4b16      	ldr	r3, [pc, #88]	@ (800135c <MX_SPI4_Init+0x64>)
 8001304:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001308:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800130a:	4b14      	ldr	r3, [pc, #80]	@ (800135c <MX_SPI4_Init+0x64>)
 800130c:	2200      	movs	r2, #0
 800130e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001310:	4b12      	ldr	r3, [pc, #72]	@ (800135c <MX_SPI4_Init+0x64>)
 8001312:	2200      	movs	r2, #0
 8001314:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001316:	4b11      	ldr	r3, [pc, #68]	@ (800135c <MX_SPI4_Init+0x64>)
 8001318:	2200      	movs	r2, #0
 800131a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800131c:	4b0f      	ldr	r3, [pc, #60]	@ (800135c <MX_SPI4_Init+0x64>)
 800131e:	2200      	movs	r2, #0
 8001320:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001322:	4b0e      	ldr	r3, [pc, #56]	@ (800135c <MX_SPI4_Init+0x64>)
 8001324:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001328:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800132a:	4b0c      	ldr	r3, [pc, #48]	@ (800135c <MX_SPI4_Init+0x64>)
 800132c:	2200      	movs	r2, #0
 800132e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001330:	4b0a      	ldr	r3, [pc, #40]	@ (800135c <MX_SPI4_Init+0x64>)
 8001332:	2200      	movs	r2, #0
 8001334:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001336:	4b09      	ldr	r3, [pc, #36]	@ (800135c <MX_SPI4_Init+0x64>)
 8001338:	2200      	movs	r2, #0
 800133a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800133c:	4b07      	ldr	r3, [pc, #28]	@ (800135c <MX_SPI4_Init+0x64>)
 800133e:	2200      	movs	r2, #0
 8001340:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 10;
 8001342:	4b06      	ldr	r3, [pc, #24]	@ (800135c <MX_SPI4_Init+0x64>)
 8001344:	220a      	movs	r2, #10
 8001346:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001348:	4804      	ldr	r0, [pc, #16]	@ (800135c <MX_SPI4_Init+0x64>)
 800134a:	f005 fe1d 	bl	8006f88 <HAL_SPI_Init>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8001354:	f000 f97e 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001358:	bf00      	nop
 800135a:	bd80      	pop	{r7, pc}
 800135c:	2000036c 	.word	0x2000036c
 8001360:	40013400 	.word	0x40013400

08001364 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800136a:	f107 0308 	add.w	r3, r7, #8
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001378:	463b      	mov	r3, r7
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001380:	4b1d      	ldr	r3, [pc, #116]	@ (80013f8 <MX_TIM3_Init+0x94>)
 8001382:	4a1e      	ldr	r2, [pc, #120]	@ (80013fc <MX_TIM3_Init+0x98>)
 8001384:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000;
 8001386:	4b1c      	ldr	r3, [pc, #112]	@ (80013f8 <MX_TIM3_Init+0x94>)
 8001388:	f242 7210 	movw	r2, #10000	@ 0x2710
 800138c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800138e:	4b1a      	ldr	r3, [pc, #104]	@ (80013f8 <MX_TIM3_Init+0x94>)
 8001390:	2200      	movs	r2, #0
 8001392:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8001394:	4b18      	ldr	r3, [pc, #96]	@ (80013f8 <MX_TIM3_Init+0x94>)
 8001396:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800139a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800139c:	4b16      	ldr	r3, [pc, #88]	@ (80013f8 <MX_TIM3_Init+0x94>)
 800139e:	2200      	movs	r2, #0
 80013a0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a2:	4b15      	ldr	r3, [pc, #84]	@ (80013f8 <MX_TIM3_Init+0x94>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013a8:	4813      	ldr	r0, [pc, #76]	@ (80013f8 <MX_TIM3_Init+0x94>)
 80013aa:	f006 fcd3 	bl	8007d54 <HAL_TIM_Base_Init>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80013b4:	f000 f94e 	bl	8001654 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013be:	f107 0308 	add.w	r3, r7, #8
 80013c2:	4619      	mov	r1, r3
 80013c4:	480c      	ldr	r0, [pc, #48]	@ (80013f8 <MX_TIM3_Init+0x94>)
 80013c6:	f006 fd14 	bl	8007df2 <HAL_TIM_ConfigClockSource>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80013d0:	f000 f940 	bl	8001654 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013d4:	2300      	movs	r3, #0
 80013d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013d8:	2300      	movs	r3, #0
 80013da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013dc:	463b      	mov	r3, r7
 80013de:	4619      	mov	r1, r3
 80013e0:	4805      	ldr	r0, [pc, #20]	@ (80013f8 <MX_TIM3_Init+0x94>)
 80013e2:	f006 feed 	bl	80081c0 <HAL_TIMEx_MasterConfigSynchronization>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80013ec:	f000 f932 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013f0:	bf00      	nop
 80013f2:	3718      	adds	r7, #24
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	20000424 	.word	0x20000424
 80013fc:	40000400 	.word	0x40000400

08001400 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	607b      	str	r3, [r7, #4]
 800140a:	4b0c      	ldr	r3, [pc, #48]	@ (800143c <MX_DMA_Init+0x3c>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140e:	4a0b      	ldr	r2, [pc, #44]	@ (800143c <MX_DMA_Init+0x3c>)
 8001410:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001414:	6313      	str	r3, [r2, #48]	@ 0x30
 8001416:	4b09      	ldr	r3, [pc, #36]	@ (800143c <MX_DMA_Init+0x3c>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800141e:	607b      	str	r3, [r7, #4]
 8001420:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001422:	2200      	movs	r2, #0
 8001424:	2100      	movs	r1, #0
 8001426:	2039      	movs	r0, #57	@ 0x39
 8001428:	f001 fb77 	bl	8002b1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800142c:	2039      	movs	r0, #57	@ 0x39
 800142e:	f001 fb90 	bl	8002b52 <HAL_NVIC_EnableIRQ>

}
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40023800 	.word	0x40023800

08001440 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b08c      	sub	sp, #48	@ 0x30
 8001444:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001446:	f107 031c 	add.w	r3, r7, #28
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	605a      	str	r2, [r3, #4]
 8001450:	609a      	str	r2, [r3, #8]
 8001452:	60da      	str	r2, [r3, #12]
 8001454:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	61bb      	str	r3, [r7, #24]
 800145a:	4b79      	ldr	r3, [pc, #484]	@ (8001640 <MX_GPIO_Init+0x200>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145e:	4a78      	ldr	r2, [pc, #480]	@ (8001640 <MX_GPIO_Init+0x200>)
 8001460:	f043 0310 	orr.w	r3, r3, #16
 8001464:	6313      	str	r3, [r2, #48]	@ 0x30
 8001466:	4b76      	ldr	r3, [pc, #472]	@ (8001640 <MX_GPIO_Init+0x200>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146a:	f003 0310 	and.w	r3, r3, #16
 800146e:	61bb      	str	r3, [r7, #24]
 8001470:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	617b      	str	r3, [r7, #20]
 8001476:	4b72      	ldr	r3, [pc, #456]	@ (8001640 <MX_GPIO_Init+0x200>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147a:	4a71      	ldr	r2, [pc, #452]	@ (8001640 <MX_GPIO_Init+0x200>)
 800147c:	f043 0304 	orr.w	r3, r3, #4
 8001480:	6313      	str	r3, [r2, #48]	@ 0x30
 8001482:	4b6f      	ldr	r3, [pc, #444]	@ (8001640 <MX_GPIO_Init+0x200>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001486:	f003 0304 	and.w	r3, r3, #4
 800148a:	617b      	str	r3, [r7, #20]
 800148c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	613b      	str	r3, [r7, #16]
 8001492:	4b6b      	ldr	r3, [pc, #428]	@ (8001640 <MX_GPIO_Init+0x200>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001496:	4a6a      	ldr	r2, [pc, #424]	@ (8001640 <MX_GPIO_Init+0x200>)
 8001498:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800149c:	6313      	str	r3, [r2, #48]	@ 0x30
 800149e:	4b68      	ldr	r3, [pc, #416]	@ (8001640 <MX_GPIO_Init+0x200>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014a6:	613b      	str	r3, [r7, #16]
 80014a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	4b64      	ldr	r3, [pc, #400]	@ (8001640 <MX_GPIO_Init+0x200>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b2:	4a63      	ldr	r2, [pc, #396]	@ (8001640 <MX_GPIO_Init+0x200>)
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ba:	4b61      	ldr	r3, [pc, #388]	@ (8001640 <MX_GPIO_Init+0x200>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	60bb      	str	r3, [r7, #8]
 80014ca:	4b5d      	ldr	r3, [pc, #372]	@ (8001640 <MX_GPIO_Init+0x200>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ce:	4a5c      	ldr	r2, [pc, #368]	@ (8001640 <MX_GPIO_Init+0x200>)
 80014d0:	f043 0302 	orr.w	r3, r3, #2
 80014d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014d6:	4b5a      	ldr	r3, [pc, #360]	@ (8001640 <MX_GPIO_Init+0x200>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	60bb      	str	r3, [r7, #8]
 80014e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	607b      	str	r3, [r7, #4]
 80014e6:	4b56      	ldr	r3, [pc, #344]	@ (8001640 <MX_GPIO_Init+0x200>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ea:	4a55      	ldr	r2, [pc, #340]	@ (8001640 <MX_GPIO_Init+0x200>)
 80014ec:	f043 0308 	orr.w	r3, r3, #8
 80014f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014f2:	4b53      	ldr	r3, [pc, #332]	@ (8001640 <MX_GPIO_Init+0x200>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f6:	f003 0308 	and.w	r3, r3, #8
 80014fa:	607b      	str	r3, [r7, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|DISPL_RST_Pin|DISPL_LED_Pin|DISPL_DC_Pin, GPIO_PIN_RESET);
 80014fe:	2200      	movs	r2, #0
 8001500:	f44f 61e1 	mov.w	r1, #1800	@ 0x708
 8001504:	484f      	ldr	r0, [pc, #316]	@ (8001644 <MX_GPIO_Init+0x204>)
 8001506:	f002 f81f 	bl	8003548 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800150a:	2201      	movs	r2, #1
 800150c:	2101      	movs	r1, #1
 800150e:	484e      	ldr	r0, [pc, #312]	@ (8001648 <MX_GPIO_Init+0x208>)
 8001510:	f002 f81a 	bl	8003548 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DISPL_CS_Pin|TOUCH_CS_Pin, GPIO_PIN_SET);
 8001514:	2201      	movs	r2, #1
 8001516:	f44f 6108 	mov.w	r1, #2176	@ 0x880
 800151a:	484a      	ldr	r0, [pc, #296]	@ (8001644 <MX_GPIO_Init+0x204>)
 800151c:	f002 f814 	bl	8003548 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001520:	2200      	movs	r2, #0
 8001522:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8001526:	4849      	ldr	r0, [pc, #292]	@ (800164c <MX_GPIO_Init+0x20c>)
 8001528:	f002 f80e 	bl	8003548 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 800152c:	2304      	movs	r3, #4
 800152e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001530:	2300      	movs	r3, #0
 8001532:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8001538:	f107 031c 	add.w	r3, r7, #28
 800153c:	4619      	mov	r1, r3
 800153e:	4841      	ldr	r0, [pc, #260]	@ (8001644 <MX_GPIO_Init+0x204>)
 8001540:	f001 fe66 	bl	8003210 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001544:	2308      	movs	r3, #8
 8001546:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001548:	2301      	movs	r3, #1
 800154a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001550:	2300      	movs	r3, #0
 8001552:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001554:	f107 031c 	add.w	r3, r7, #28
 8001558:	4619      	mov	r1, r3
 800155a:	483a      	ldr	r0, [pc, #232]	@ (8001644 <MX_GPIO_Init+0x204>)
 800155c:	f001 fe58 	bl	8003210 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8001560:	2332      	movs	r3, #50	@ 0x32
 8001562:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001564:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001568:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800156e:	f107 031c 	add.w	r3, r7, #28
 8001572:	4619      	mov	r1, r3
 8001574:	4833      	ldr	r0, [pc, #204]	@ (8001644 <MX_GPIO_Init+0x204>)
 8001576:	f001 fe4b 	bl	8003210 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800157a:	2301      	movs	r3, #1
 800157c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157e:	2301      	movs	r3, #1
 8001580:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001586:	2300      	movs	r3, #0
 8001588:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800158a:	f107 031c 	add.w	r3, r7, #28
 800158e:	4619      	mov	r1, r3
 8001590:	482d      	ldr	r0, [pc, #180]	@ (8001648 <MX_GPIO_Init+0x208>)
 8001592:	f001 fe3d 	bl	8003210 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001596:	2301      	movs	r3, #1
 8001598:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800159a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800159e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a4:	f107 031c 	add.w	r3, r7, #28
 80015a8:	4619      	mov	r1, r3
 80015aa:	4829      	ldr	r0, [pc, #164]	@ (8001650 <MX_GPIO_Init+0x210>)
 80015ac:	f001 fe30 	bl	8003210 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISPL_CS_Pin DISPL_RST_Pin DISPL_DC_Pin TOUCH_CS_Pin */
  GPIO_InitStruct.Pin = DISPL_CS_Pin|DISPL_RST_Pin|DISPL_DC_Pin|TOUCH_CS_Pin;
 80015b0:	f44f 6358 	mov.w	r3, #3456	@ 0xd80
 80015b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b6:	2301      	movs	r3, #1
 80015b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015be:	2303      	movs	r3, #3
 80015c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015c2:	f107 031c 	add.w	r3, r7, #28
 80015c6:	4619      	mov	r1, r3
 80015c8:	481e      	ldr	r0, [pc, #120]	@ (8001644 <MX_GPIO_Init+0x204>)
 80015ca:	f001 fe21 	bl	8003210 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPL_LED_Pin */
  GPIO_InitStruct.Pin = DISPL_LED_Pin;
 80015ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80015d2:	61fb      	str	r3, [r7, #28]
  //GPIO_InitStruct.Pull = GPIO_NOPULL;
  //GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  //HAL_GPIO_Init(DISPL_LED_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : TOUCH_INT_Pin */
  GPIO_InitStruct.Pin = TOUCH_INT_Pin;
 80015d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80015d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015da:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80015de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015e0:	2301      	movs	r3, #1
 80015e2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(TOUCH_INT_GPIO_Port, &GPIO_InitStruct);
 80015e4:	f107 031c 	add.w	r3, r7, #28
 80015e8:	4619      	mov	r1, r3
 80015ea:	4816      	ldr	r0, [pc, #88]	@ (8001644 <MX_GPIO_Init+0x204>)
 80015ec:	f001 fe10 	bl	8003210 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80015f0:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80015f4:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f6:	2301      	movs	r3, #1
 80015f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fe:	2300      	movs	r3, #0
 8001600:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001602:	f107 031c 	add.w	r3, r7, #28
 8001606:	4619      	mov	r1, r3
 8001608:	4810      	ldr	r0, [pc, #64]	@ (800164c <MX_GPIO_Init+0x20c>)
 800160a:	f001 fe01 	bl	8003210 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800160e:	2320      	movs	r3, #32
 8001610:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001612:	2300      	movs	r3, #0
 8001614:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800161a:	f107 031c 	add.w	r3, r7, #28
 800161e:	4619      	mov	r1, r3
 8001620:	480a      	ldr	r0, [pc, #40]	@ (800164c <MX_GPIO_Init+0x20c>)
 8001622:	f001 fdf5 	bl	8003210 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001626:	2200      	movs	r2, #0
 8001628:	2100      	movs	r1, #0
 800162a:	2028      	movs	r0, #40	@ 0x28
 800162c:	f001 fa75 	bl	8002b1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001630:	2028      	movs	r0, #40	@ 0x28
 8001632:	f001 fa8e 	bl	8002b52 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001636:	bf00      	nop
 8001638:	3730      	adds	r7, #48	@ 0x30
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40023800 	.word	0x40023800
 8001644:	40021000 	.word	0x40021000
 8001648:	40020800 	.word	0x40020800
 800164c:	40020c00 	.word	0x40020c00
 8001650:	40020000 	.word	0x40020000

08001654 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001658:	b672      	cpsid	i
}
 800165a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800165c:	bf00      	nop
 800165e:	e7fd      	b.n	800165c <Error_Handler+0x8>

08001660 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	607b      	str	r3, [r7, #4]
 800166a:	4b10      	ldr	r3, [pc, #64]	@ (80016ac <HAL_MspInit+0x4c>)
 800166c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800166e:	4a0f      	ldr	r2, [pc, #60]	@ (80016ac <HAL_MspInit+0x4c>)
 8001670:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001674:	6453      	str	r3, [r2, #68]	@ 0x44
 8001676:	4b0d      	ldr	r3, [pc, #52]	@ (80016ac <HAL_MspInit+0x4c>)
 8001678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800167a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800167e:	607b      	str	r3, [r7, #4]
 8001680:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	603b      	str	r3, [r7, #0]
 8001686:	4b09      	ldr	r3, [pc, #36]	@ (80016ac <HAL_MspInit+0x4c>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800168a:	4a08      	ldr	r2, [pc, #32]	@ (80016ac <HAL_MspInit+0x4c>)
 800168c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001690:	6413      	str	r3, [r2, #64]	@ 0x40
 8001692:	4b06      	ldr	r3, [pc, #24]	@ (80016ac <HAL_MspInit+0x4c>)
 8001694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001696:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800169a:	603b      	str	r3, [r7, #0]
 800169c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800169e:	2007      	movs	r0, #7
 80016a0:	f001 fa30 	bl	8002b04 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016a4:	bf00      	nop
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40023800 	.word	0x40023800

080016b0 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a0b      	ldr	r2, [pc, #44]	@ (80016ec <HAL_CRC_MspInit+0x3c>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d10d      	bne.n	80016de <HAL_CRC_MspInit+0x2e>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	4b0a      	ldr	r3, [pc, #40]	@ (80016f0 <HAL_CRC_MspInit+0x40>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ca:	4a09      	ldr	r2, [pc, #36]	@ (80016f0 <HAL_CRC_MspInit+0x40>)
 80016cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80016d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016d2:	4b07      	ldr	r3, [pc, #28]	@ (80016f0 <HAL_CRC_MspInit+0x40>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 80016de:	bf00      	nop
 80016e0:	3714      	adds	r7, #20
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	40023000 	.word	0x40023000
 80016f0:	40023800 	.word	0x40023800

080016f4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b08a      	sub	sp, #40	@ 0x28
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fc:	f107 0314 	add.w	r3, r7, #20
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	60da      	str	r2, [r3, #12]
 800170a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a19      	ldr	r2, [pc, #100]	@ (8001778 <HAL_I2C_MspInit+0x84>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d12c      	bne.n	8001770 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	613b      	str	r3, [r7, #16]
 800171a:	4b18      	ldr	r3, [pc, #96]	@ (800177c <HAL_I2C_MspInit+0x88>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171e:	4a17      	ldr	r2, [pc, #92]	@ (800177c <HAL_I2C_MspInit+0x88>)
 8001720:	f043 0302 	orr.w	r3, r3, #2
 8001724:	6313      	str	r3, [r2, #48]	@ 0x30
 8001726:	4b15      	ldr	r3, [pc, #84]	@ (800177c <HAL_I2C_MspInit+0x88>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	613b      	str	r3, [r7, #16]
 8001730:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001732:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001736:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001738:	2312      	movs	r3, #18
 800173a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800173c:	2301      	movs	r3, #1
 800173e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001740:	2300      	movs	r3, #0
 8001742:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001744:	2304      	movs	r3, #4
 8001746:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001748:	f107 0314 	add.w	r3, r7, #20
 800174c:	4619      	mov	r1, r3
 800174e:	480c      	ldr	r0, [pc, #48]	@ (8001780 <HAL_I2C_MspInit+0x8c>)
 8001750:	f001 fd5e 	bl	8003210 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001754:	2300      	movs	r3, #0
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	4b08      	ldr	r3, [pc, #32]	@ (800177c <HAL_I2C_MspInit+0x88>)
 800175a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175c:	4a07      	ldr	r2, [pc, #28]	@ (800177c <HAL_I2C_MspInit+0x88>)
 800175e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001762:	6413      	str	r3, [r2, #64]	@ 0x40
 8001764:	4b05      	ldr	r3, [pc, #20]	@ (800177c <HAL_I2C_MspInit+0x88>)
 8001766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001768:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001770:	bf00      	nop
 8001772:	3728      	adds	r7, #40	@ 0x28
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40005400 	.word	0x40005400
 800177c:	40023800 	.word	0x40023800
 8001780:	40020400 	.word	0x40020400

08001784 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b08e      	sub	sp, #56	@ 0x38
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	60da      	str	r2, [r3, #12]
 800179a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a59      	ldr	r2, [pc, #356]	@ (8001908 <HAL_I2S_MspInit+0x184>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d15b      	bne.n	800185e <HAL_I2S_MspInit+0xda>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	623b      	str	r3, [r7, #32]
 80017aa:	4b58      	ldr	r3, [pc, #352]	@ (800190c <HAL_I2S_MspInit+0x188>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ae:	4a57      	ldr	r2, [pc, #348]	@ (800190c <HAL_I2S_MspInit+0x188>)
 80017b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80017b6:	4b55      	ldr	r3, [pc, #340]	@ (800190c <HAL_I2S_MspInit+0x188>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017be:	623b      	str	r3, [r7, #32]
 80017c0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	61fb      	str	r3, [r7, #28]
 80017c6:	4b51      	ldr	r3, [pc, #324]	@ (800190c <HAL_I2S_MspInit+0x188>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ca:	4a50      	ldr	r2, [pc, #320]	@ (800190c <HAL_I2S_MspInit+0x188>)
 80017cc:	f043 0304 	orr.w	r3, r3, #4
 80017d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017d2:	4b4e      	ldr	r3, [pc, #312]	@ (800190c <HAL_I2S_MspInit+0x188>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d6:	f003 0304 	and.w	r3, r3, #4
 80017da:	61fb      	str	r3, [r7, #28]
 80017dc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	61bb      	str	r3, [r7, #24]
 80017e2:	4b4a      	ldr	r3, [pc, #296]	@ (800190c <HAL_I2S_MspInit+0x188>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e6:	4a49      	ldr	r2, [pc, #292]	@ (800190c <HAL_I2S_MspInit+0x188>)
 80017e8:	f043 0302 	orr.w	r3, r3, #2
 80017ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ee:	4b47      	ldr	r3, [pc, #284]	@ (800190c <HAL_I2S_MspInit+0x188>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	61bb      	str	r3, [r7, #24]
 80017f8:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017fa:	2304      	movs	r3, #4
 80017fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fe:	2302      	movs	r3, #2
 8001800:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001802:	2300      	movs	r3, #0
 8001804:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001806:	2300      	movs	r3, #0
 8001808:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 800180a:	2306      	movs	r3, #6
 800180c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800180e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001812:	4619      	mov	r1, r3
 8001814:	483e      	ldr	r0, [pc, #248]	@ (8001910 <HAL_I2S_MspInit+0x18c>)
 8001816:	f001 fcfb 	bl	8003210 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800181a:	2308      	movs	r3, #8
 800181c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181e:	2302      	movs	r3, #2
 8001820:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001826:	2300      	movs	r3, #0
 8001828:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800182a:	2305      	movs	r3, #5
 800182c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800182e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001832:	4619      	mov	r1, r3
 8001834:	4836      	ldr	r0, [pc, #216]	@ (8001910 <HAL_I2S_MspInit+0x18c>)
 8001836:	f001 fceb 	bl	8003210 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 800183a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800183e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001840:	2302      	movs	r3, #2
 8001842:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001848:	2300      	movs	r3, #0
 800184a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800184c:	2305      	movs	r3, #5
 800184e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001850:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001854:	4619      	mov	r1, r3
 8001856:	482f      	ldr	r0, [pc, #188]	@ (8001914 <HAL_I2S_MspInit+0x190>)
 8001858:	f001 fcda 	bl	8003210 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 800185c:	e04f      	b.n	80018fe <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a2d      	ldr	r2, [pc, #180]	@ (8001918 <HAL_I2S_MspInit+0x194>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d14a      	bne.n	80018fe <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001868:	2300      	movs	r3, #0
 800186a:	617b      	str	r3, [r7, #20]
 800186c:	4b27      	ldr	r3, [pc, #156]	@ (800190c <HAL_I2S_MspInit+0x188>)
 800186e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001870:	4a26      	ldr	r2, [pc, #152]	@ (800190c <HAL_I2S_MspInit+0x188>)
 8001872:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001876:	6413      	str	r3, [r2, #64]	@ 0x40
 8001878:	4b24      	ldr	r3, [pc, #144]	@ (800190c <HAL_I2S_MspInit+0x188>)
 800187a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800187c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001880:	617b      	str	r3, [r7, #20]
 8001882:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001884:	2300      	movs	r3, #0
 8001886:	613b      	str	r3, [r7, #16]
 8001888:	4b20      	ldr	r3, [pc, #128]	@ (800190c <HAL_I2S_MspInit+0x188>)
 800188a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188c:	4a1f      	ldr	r2, [pc, #124]	@ (800190c <HAL_I2S_MspInit+0x188>)
 800188e:	f043 0301 	orr.w	r3, r3, #1
 8001892:	6313      	str	r3, [r2, #48]	@ 0x30
 8001894:	4b1d      	ldr	r3, [pc, #116]	@ (800190c <HAL_I2S_MspInit+0x188>)
 8001896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001898:	f003 0301 	and.w	r3, r3, #1
 800189c:	613b      	str	r3, [r7, #16]
 800189e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018a0:	2300      	movs	r3, #0
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	4b19      	ldr	r3, [pc, #100]	@ (800190c <HAL_I2S_MspInit+0x188>)
 80018a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a8:	4a18      	ldr	r2, [pc, #96]	@ (800190c <HAL_I2S_MspInit+0x188>)
 80018aa:	f043 0304 	orr.w	r3, r3, #4
 80018ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80018b0:	4b16      	ldr	r3, [pc, #88]	@ (800190c <HAL_I2S_MspInit+0x188>)
 80018b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b4:	f003 0304 	and.w	r3, r3, #4
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80018bc:	2310      	movs	r3, #16
 80018be:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c0:	2302      	movs	r3, #2
 80018c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c8:	2300      	movs	r3, #0
 80018ca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80018cc:	2306      	movs	r3, #6
 80018ce:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80018d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018d4:	4619      	mov	r1, r3
 80018d6:	4811      	ldr	r0, [pc, #68]	@ (800191c <HAL_I2S_MspInit+0x198>)
 80018d8:	f001 fc9a 	bl	8003210 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80018dc:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80018e0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e2:	2302      	movs	r3, #2
 80018e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e6:	2300      	movs	r3, #0
 80018e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ea:	2300      	movs	r3, #0
 80018ec:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80018ee:	2306      	movs	r3, #6
 80018f0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018f6:	4619      	mov	r1, r3
 80018f8:	4805      	ldr	r0, [pc, #20]	@ (8001910 <HAL_I2S_MspInit+0x18c>)
 80018fa:	f001 fc89 	bl	8003210 <HAL_GPIO_Init>
}
 80018fe:	bf00      	nop
 8001900:	3738      	adds	r7, #56	@ 0x38
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40003800 	.word	0x40003800
 800190c:	40023800 	.word	0x40023800
 8001910:	40020800 	.word	0x40020800
 8001914:	40020400 	.word	0x40020400
 8001918:	40003c00 	.word	0x40003c00
 800191c:	40020000 	.word	0x40020000

08001920 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b08c      	sub	sp, #48	@ 0x30
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001928:	f107 031c 	add.w	r3, r7, #28
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	60da      	str	r2, [r3, #12]
 8001936:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a4d      	ldr	r2, [pc, #308]	@ (8001a74 <HAL_SPI_MspInit+0x154>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d12c      	bne.n	800199c <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	61bb      	str	r3, [r7, #24]
 8001946:	4b4c      	ldr	r3, [pc, #304]	@ (8001a78 <HAL_SPI_MspInit+0x158>)
 8001948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800194a:	4a4b      	ldr	r2, [pc, #300]	@ (8001a78 <HAL_SPI_MspInit+0x158>)
 800194c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001950:	6453      	str	r3, [r2, #68]	@ 0x44
 8001952:	4b49      	ldr	r3, [pc, #292]	@ (8001a78 <HAL_SPI_MspInit+0x158>)
 8001954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001956:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800195a:	61bb      	str	r3, [r7, #24]
 800195c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	617b      	str	r3, [r7, #20]
 8001962:	4b45      	ldr	r3, [pc, #276]	@ (8001a78 <HAL_SPI_MspInit+0x158>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001966:	4a44      	ldr	r2, [pc, #272]	@ (8001a78 <HAL_SPI_MspInit+0x158>)
 8001968:	f043 0301 	orr.w	r3, r3, #1
 800196c:	6313      	str	r3, [r2, #48]	@ 0x30
 800196e:	4b42      	ldr	r3, [pc, #264]	@ (8001a78 <HAL_SPI_MspInit+0x158>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	617b      	str	r3, [r7, #20]
 8001978:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800197a:	23e0      	movs	r3, #224	@ 0xe0
 800197c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197e:	2302      	movs	r3, #2
 8001980:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001982:	2300      	movs	r3, #0
 8001984:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001986:	2303      	movs	r3, #3
 8001988:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800198a:	2305      	movs	r3, #5
 800198c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198e:	f107 031c 	add.w	r3, r7, #28
 8001992:	4619      	mov	r1, r3
 8001994:	4839      	ldr	r0, [pc, #228]	@ (8001a7c <HAL_SPI_MspInit+0x15c>)
 8001996:	f001 fc3b 	bl	8003210 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI4_MspInit 1 */

    /* USER CODE END SPI4_MspInit 1 */
  }

}
 800199a:	e067      	b.n	8001a6c <HAL_SPI_MspInit+0x14c>
  else if(hspi->Instance==SPI4)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a37      	ldr	r2, [pc, #220]	@ (8001a80 <HAL_SPI_MspInit+0x160>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d162      	bne.n	8001a6c <HAL_SPI_MspInit+0x14c>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	613b      	str	r3, [r7, #16]
 80019aa:	4b33      	ldr	r3, [pc, #204]	@ (8001a78 <HAL_SPI_MspInit+0x158>)
 80019ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ae:	4a32      	ldr	r2, [pc, #200]	@ (8001a78 <HAL_SPI_MspInit+0x158>)
 80019b0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80019b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80019b6:	4b30      	ldr	r3, [pc, #192]	@ (8001a78 <HAL_SPI_MspInit+0x158>)
 80019b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019be:	613b      	str	r3, [r7, #16]
 80019c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	4b2c      	ldr	r3, [pc, #176]	@ (8001a78 <HAL_SPI_MspInit+0x158>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ca:	4a2b      	ldr	r2, [pc, #172]	@ (8001a78 <HAL_SPI_MspInit+0x158>)
 80019cc:	f043 0310 	orr.w	r3, r3, #16
 80019d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019d2:	4b29      	ldr	r3, [pc, #164]	@ (8001a78 <HAL_SPI_MspInit+0x158>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d6:	f003 0310 	and.w	r3, r3, #16
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DISPL_SCK_Pin|TOUCH_MISO_Pin|DISPL_MOSI_Pin;
 80019de:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 80019e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e4:	2302      	movs	r3, #2
 80019e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e8:	2300      	movs	r3, #0
 80019ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ec:	2303      	movs	r3, #3
 80019ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80019f0:	2305      	movs	r3, #5
 80019f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019f4:	f107 031c 	add.w	r3, r7, #28
 80019f8:	4619      	mov	r1, r3
 80019fa:	4822      	ldr	r0, [pc, #136]	@ (8001a84 <HAL_SPI_MspInit+0x164>)
 80019fc:	f001 fc08 	bl	8003210 <HAL_GPIO_Init>
    hdma_spi4_tx.Instance = DMA2_Stream1;
 8001a00:	4b21      	ldr	r3, [pc, #132]	@ (8001a88 <HAL_SPI_MspInit+0x168>)
 8001a02:	4a22      	ldr	r2, [pc, #136]	@ (8001a8c <HAL_SPI_MspInit+0x16c>)
 8001a04:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_4;
 8001a06:	4b20      	ldr	r3, [pc, #128]	@ (8001a88 <HAL_SPI_MspInit+0x168>)
 8001a08:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001a0c:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a0e:	4b1e      	ldr	r3, [pc, #120]	@ (8001a88 <HAL_SPI_MspInit+0x168>)
 8001a10:	2240      	movs	r2, #64	@ 0x40
 8001a12:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a14:	4b1c      	ldr	r3, [pc, #112]	@ (8001a88 <HAL_SPI_MspInit+0x168>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a1a:	4b1b      	ldr	r3, [pc, #108]	@ (8001a88 <HAL_SPI_MspInit+0x168>)
 8001a1c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a20:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a22:	4b19      	ldr	r3, [pc, #100]	@ (8001a88 <HAL_SPI_MspInit+0x168>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a28:	4b17      	ldr	r3, [pc, #92]	@ (8001a88 <HAL_SPI_MspInit+0x168>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8001a2e:	4b16      	ldr	r3, [pc, #88]	@ (8001a88 <HAL_SPI_MspInit+0x168>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a34:	4b14      	ldr	r3, [pc, #80]	@ (8001a88 <HAL_SPI_MspInit+0x168>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a3a:	4b13      	ldr	r3, [pc, #76]	@ (8001a88 <HAL_SPI_MspInit+0x168>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8001a40:	4811      	ldr	r0, [pc, #68]	@ (8001a88 <HAL_SPI_MspInit+0x168>)
 8001a42:	f001 f8d9 	bl	8002bf8 <HAL_DMA_Init>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <HAL_SPI_MspInit+0x130>
      Error_Handler();
 8001a4c:	f7ff fe02 	bl	8001654 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4a0d      	ldr	r2, [pc, #52]	@ (8001a88 <HAL_SPI_MspInit+0x168>)
 8001a54:	649a      	str	r2, [r3, #72]	@ 0x48
 8001a56:	4a0c      	ldr	r2, [pc, #48]	@ (8001a88 <HAL_SPI_MspInit+0x168>)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	2100      	movs	r1, #0
 8001a60:	2054      	movs	r0, #84	@ 0x54
 8001a62:	f001 f85a 	bl	8002b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8001a66:	2054      	movs	r0, #84	@ 0x54
 8001a68:	f001 f873 	bl	8002b52 <HAL_NVIC_EnableIRQ>
}
 8001a6c:	bf00      	nop
 8001a6e:	3730      	adds	r7, #48	@ 0x30
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40013000 	.word	0x40013000
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	40020000 	.word	0x40020000
 8001a80:	40013400 	.word	0x40013400
 8001a84:	40021000 	.word	0x40021000
 8001a88:	200003c4 	.word	0x200003c4
 8001a8c:	40026428 	.word	0x40026428

08001a90 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a0b      	ldr	r2, [pc, #44]	@ (8001acc <HAL_TIM_Base_MspInit+0x3c>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d10d      	bne.n	8001abe <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ad0 <HAL_TIM_Base_MspInit+0x40>)
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aaa:	4a09      	ldr	r2, [pc, #36]	@ (8001ad0 <HAL_TIM_Base_MspInit+0x40>)
 8001aac:	f043 0302 	orr.w	r3, r3, #2
 8001ab0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ab2:	4b07      	ldr	r3, [pc, #28]	@ (8001ad0 <HAL_TIM_Base_MspInit+0x40>)
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001abe:	bf00      	nop
 8001ac0:	3714      	adds	r7, #20
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	40000400 	.word	0x40000400
 8001ad0:	40023800 	.word	0x40023800

08001ad4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ad8:	bf00      	nop
 8001ada:	e7fd      	b.n	8001ad8 <NMI_Handler+0x4>

08001adc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ae0:	bf00      	nop
 8001ae2:	e7fd      	b.n	8001ae0 <HardFault_Handler+0x4>

08001ae4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ae8:	bf00      	nop
 8001aea:	e7fd      	b.n	8001ae8 <MemManage_Handler+0x4>

08001aec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001af0:	bf00      	nop
 8001af2:	e7fd      	b.n	8001af0 <BusFault_Handler+0x4>

08001af4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001af8:	bf00      	nop
 8001afa:	e7fd      	b.n	8001af8 <UsageFault_Handler+0x4>

08001afc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b00:	bf00      	nop
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b1c:	bf00      	nop
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b2a:	f000 fe95 	bl	8002858 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOUCH_INT_Pin);
 8001b36:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001b3a:	f001 fd1f 	bl	800357c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
	...

08001b44 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8001b48:	4802      	ldr	r0, [pc, #8]	@ (8001b54 <DMA2_Stream1_IRQHandler+0x10>)
 8001b4a:	f001 f925 	bl	8002d98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	200003c4 	.word	0x200003c4

08001b58 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001b5c:	4802      	ldr	r0, [pc, #8]	@ (8001b68 <OTG_FS_IRQHandler+0x10>)
 8001b5e:	f002 f805 	bl	8003b6c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001b62:	bf00      	nop
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	2000888c 	.word	0x2000888c

08001b6c <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8001b70:	4802      	ldr	r0, [pc, #8]	@ (8001b7c <SPI4_IRQHandler+0x10>)
 8001b72:	f005 fe99 	bl	80078a8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8001b76:	bf00      	nop
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	2000036c 	.word	0x2000036c

08001b80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  return 1;
 8001b84:	2301      	movs	r3, #1
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <_kill>:

int _kill(int pid, int sig)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b9a:	f00a fe61 	bl	800c860 <__errno>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2216      	movs	r2, #22
 8001ba2:	601a      	str	r2, [r3, #0]
  return -1;
 8001ba4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <_exit>:

void _exit (int status)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f7ff ffe7 	bl	8001b90 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bc2:	bf00      	nop
 8001bc4:	e7fd      	b.n	8001bc2 <_exit+0x12>

08001bc6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b086      	sub	sp, #24
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	60f8      	str	r0, [r7, #12]
 8001bce:	60b9      	str	r1, [r7, #8]
 8001bd0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	617b      	str	r3, [r7, #20]
 8001bd6:	e00a      	b.n	8001bee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bd8:	f3af 8000 	nop.w
 8001bdc:	4601      	mov	r1, r0
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	1c5a      	adds	r2, r3, #1
 8001be2:	60ba      	str	r2, [r7, #8]
 8001be4:	b2ca      	uxtb	r2, r1
 8001be6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	3301      	adds	r3, #1
 8001bec:	617b      	str	r3, [r7, #20]
 8001bee:	697a      	ldr	r2, [r7, #20]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	dbf0      	blt.n	8001bd8 <_read+0x12>
  }

  return len;
 8001bf6:	687b      	ldr	r3, [r7, #4]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3718      	adds	r7, #24
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	617b      	str	r3, [r7, #20]
 8001c10:	e009      	b.n	8001c26 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	1c5a      	adds	r2, r3, #1
 8001c16:	60ba      	str	r2, [r7, #8]
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	3301      	adds	r3, #1
 8001c24:	617b      	str	r3, [r7, #20]
 8001c26:	697a      	ldr	r2, [r7, #20]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	dbf1      	blt.n	8001c12 <_write+0x12>
  }
  return len;
 8001c2e:	687b      	ldr	r3, [r7, #4]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3718      	adds	r7, #24
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <_close>:

int _close(int file)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c60:	605a      	str	r2, [r3, #4]
  return 0;
 8001c62:	2300      	movs	r3, #0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <_isatty>:

int _isatty(int file)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c78:	2301      	movs	r3, #1
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b085      	sub	sp, #20
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	60f8      	str	r0, [r7, #12]
 8001c8e:	60b9      	str	r1, [r7, #8]
 8001c90:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3714      	adds	r7, #20
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ca8:	4a14      	ldr	r2, [pc, #80]	@ (8001cfc <_sbrk+0x5c>)
 8001caa:	4b15      	ldr	r3, [pc, #84]	@ (8001d00 <_sbrk+0x60>)
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cb4:	4b13      	ldr	r3, [pc, #76]	@ (8001d04 <_sbrk+0x64>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d102      	bne.n	8001cc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cbc:	4b11      	ldr	r3, [pc, #68]	@ (8001d04 <_sbrk+0x64>)
 8001cbe:	4a12      	ldr	r2, [pc, #72]	@ (8001d08 <_sbrk+0x68>)
 8001cc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cc2:	4b10      	ldr	r3, [pc, #64]	@ (8001d04 <_sbrk+0x64>)
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4413      	add	r3, r2
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d207      	bcs.n	8001ce0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cd0:	f00a fdc6 	bl	800c860 <__errno>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	220c      	movs	r2, #12
 8001cd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cda:	f04f 33ff 	mov.w	r3, #4294967295
 8001cde:	e009      	b.n	8001cf4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ce0:	4b08      	ldr	r3, [pc, #32]	@ (8001d04 <_sbrk+0x64>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ce6:	4b07      	ldr	r3, [pc, #28]	@ (8001d04 <_sbrk+0x64>)
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4413      	add	r3, r2
 8001cee:	4a05      	ldr	r2, [pc, #20]	@ (8001d04 <_sbrk+0x64>)
 8001cf0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3718      	adds	r7, #24
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	20020000 	.word	0x20020000
 8001d00:	00000400 	.word	0x00000400
 8001d04:	20000494 	.word	0x20000494
 8001d08:	20008db8 	.word	0x20008db8

08001d0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d10:	4b06      	ldr	r3, [pc, #24]	@ (8001d2c <SystemInit+0x20>)
 8001d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d16:	4a05      	ldr	r2, [pc, #20]	@ (8001d2c <SystemInit+0x20>)
 8001d18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d20:	bf00      	nop
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	e000ed00 	.word	0xe000ed00

08001d30 <Displ_Select>:

/******************************************
 * @brief	enable display, disabling touch
 * 			device selected if CS low
 ******************************************/
void Displ_Select(void) {
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
	if (TOUCH_SPI==DISPL_SPI){														// if SPI port shared (display <-> touch)
		if (HAL_GPIO_ReadPin(DISPL_CS_GPIO_Port, DISPL_CS_Pin)) {					// if display not yet selected
 8001d34:	2180      	movs	r1, #128	@ 0x80
 8001d36:	4810      	ldr	r0, [pc, #64]	@ (8001d78 <Displ_Select+0x48>)
 8001d38:	f001 fbee 	bl	8003518 <HAL_GPIO_ReadPin>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d017      	beq.n	8001d72 <Displ_Select+0x42>
			HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); 		// unselect touch
 8001d42:	2201      	movs	r2, #1
 8001d44:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001d48:	480b      	ldr	r0, [pc, #44]	@ (8001d78 <Displ_Select+0x48>)
 8001d4a:	f001 fbfd 	bl	8003548 <HAL_GPIO_WritePin>
			SET_DISPL_SPI_BAUDRATE;				   									//change SPI port speed as per display needs
 8001d4e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d7c <Displ_Select+0x4c>)
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	490a      	ldr	r1, [pc, #40]	@ (8001d7c <Displ_Select+0x4c>)
 8001d54:	f64f 73c7 	movw	r3, #65479	@ 0xffc7
 8001d58:	4013      	ands	r3, r2
 8001d5a:	600b      	str	r3, [r1, #0]
 8001d5c:	4b07      	ldr	r3, [pc, #28]	@ (8001d7c <Displ_Select+0x4c>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a06      	ldr	r2, [pc, #24]	@ (8001d7c <Displ_Select+0x4c>)
 8001d62:	f043 0318 	orr.w	r3, r3, #24
 8001d66:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET);	// select display
 8001d68:	2200      	movs	r2, #0
 8001d6a:	2180      	movs	r1, #128	@ 0x80
 8001d6c:	4802      	ldr	r0, [pc, #8]	@ (8001d78 <Displ_Select+0x48>)
 8001d6e:	f001 fbeb 	bl	8003548 <HAL_GPIO_WritePin>
		}
	}
}
 8001d72:	bf00      	nop
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	40013400 	.word	0x40013400

08001d80 <Displ_Transmit>:
 * @PARAM	DC_Status 	indicates if sending command or data
 * 			data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 * 			isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **************************/
void Displ_Transmit(GPIO_PinState DC_Status, uint8_t* data, uint16_t dataSize, uint8_t isTouchGFXBuffer ){
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6039      	str	r1, [r7, #0]
 8001d88:	4611      	mov	r1, r2
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	71fb      	strb	r3, [r7, #7]
 8001d90:	460b      	mov	r3, r1
 8001d92:	80bb      	strh	r3, [r7, #4]
 8001d94:	4613      	mov	r3, r2
 8001d96:	71bb      	strb	r3, [r7, #6]

	while (!Displ_SpiAvailable) {};  // waiting for a free SPI port. Flag is set to 1 by transmission-complete interrupt callback
 8001d98:	bf00      	nop
 8001d9a:	4b1c      	ldr	r3, [pc, #112]	@ (8001e0c <Displ_Transmit+0x8c>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d0fa      	beq.n	8001d9a <Displ_Transmit+0x1a>

	Displ_Select();
 8001da4:	f7ff ffc4 	bl	8001d30 <Displ_Select>
	HAL_GPIO_WritePin(DISPL_DC_GPIO_Port, DISPL_DC_Pin, DC_Status);
 8001da8:	79fb      	ldrb	r3, [r7, #7]
 8001daa:	461a      	mov	r2, r3
 8001dac:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001db0:	4817      	ldr	r0, [pc, #92]	@ (8001e10 <Displ_Transmit+0x90>)
 8001db2:	f001 fbc9 	bl	8003548 <HAL_GPIO_WritePin>

	if (isTouchGFXBuffer){
 8001db6:	79bb      	ldrb	r3, [r7, #6]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d016      	beq.n	8001dea <Displ_Transmit+0x6a>
#ifdef Z_RGB565
//if color format is RGB565 just swap even and odd bytes correcting endianess for ILI driver
		uint32_t *limit=(uint32_t*)(data+dataSize);
 8001dbc:	88bb      	ldrh	r3, [r7, #4]
 8001dbe:	683a      	ldr	r2, [r7, #0]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
		for (uint32_t *data32=(uint32_t*)data; data32<limit; data32++) {
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	617b      	str	r3, [r7, #20]
 8001dc8:	e00b      	b.n	8001de2 <Displ_Transmit+0x62>
			*data32=__REV16(*data32);
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	60fb      	str	r3, [r7, #12]
  __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	ba5b      	rev16	r3, r3
 8001dd4:	60bb      	str	r3, [r7, #8]
  return result;
 8001dd6:	68ba      	ldr	r2, [r7, #8]
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	601a      	str	r2, [r3, #0]
		for (uint32_t *data32=(uint32_t*)data; data32<limit; data32++) {
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	3304      	adds	r3, #4
 8001de0:	617b      	str	r3, [r7, #20]
 8001de2:	697a      	ldr	r2, [r7, #20]
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d3ef      	bcc.n	8001dca <Displ_Transmit+0x4a>
		HAL_SPI_Transmit_IT(&DISPL_SPI_PORT , data, dataSize);
#else
#ifdef DISPLAY_SPI_DMA_MODE
		if (dataSize<DISPL_DMA_CUTOFF) {
#endif //DISPLAY_SPI_DMA_MODE
			Displ_SpiAvailable=0;
 8001dea:	4b08      	ldr	r3, [pc, #32]	@ (8001e0c <Displ_Transmit+0x8c>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit(&DISPL_SPI_PORT , data, dataSize, HAL_MAX_DELAY);
 8001df0:	88ba      	ldrh	r2, [r7, #4]
 8001df2:	f04f 33ff 	mov.w	r3, #4294967295
 8001df6:	6839      	ldr	r1, [r7, #0]
 8001df8:	4806      	ldr	r0, [pc, #24]	@ (8001e14 <Displ_Transmit+0x94>)
 8001dfa:	f005 f94e 	bl	800709a <HAL_SPI_Transmit>
			Displ_SpiAvailable=1;
 8001dfe:	4b03      	ldr	r3, [pc, #12]	@ (8001e0c <Displ_Transmit+0x8c>)
 8001e00:	2201      	movs	r2, #1
 8001e02:	701a      	strb	r2, [r3, #0]
			Displ_SpiAvailable=0;
			HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT , data, dataSize);
		}
#endif //DISPLAY_SPI_DMA_MODE
#endif //DISPLAY_SPI_INTERRUPT_MODE
	}
 8001e04:	bf00      	nop
 8001e06:	3718      	adds	r7, #24
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	20000010 	.word	0x20000010
 8001e10:	40021000 	.word	0x40021000
 8001e14:	2000036c 	.word	0x2000036c

08001e18 <Displ_WriteCommand>:


/**********************************
 * @BRIEF	transmit a byte in a SPI_COMMAND format
 **********************************/
void Displ_WriteCommand(uint8_t cmd){
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	4603      	mov	r3, r0
 8001e20:	71fb      	strb	r3, [r7, #7]
	Displ_Transmit(SPI_COMMAND, &cmd, sizeof(cmd),0);
 8001e22:	1df9      	adds	r1, r7, #7
 8001e24:	2300      	movs	r3, #0
 8001e26:	2201      	movs	r2, #1
 8001e28:	2000      	movs	r0, #0
 8001e2a:	f7ff ffa9 	bl	8001d80 <Displ_Transmit>
}
 8001e2e:	bf00      	nop
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <Displ_WriteData>:
 * @BRIEF	transmit a set of data in a SPI_DATA format
 * @PARAM 	data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 * 			isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **********************************/
void Displ_WriteData(uint8_t* buff, size_t buff_size, uint8_t isTouchGFXBuffer){
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b084      	sub	sp, #16
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	60f8      	str	r0, [r7, #12]
 8001e3e:	60b9      	str	r1, [r7, #8]
 8001e40:	4613      	mov	r3, r2
 8001e42:	71fb      	strb	r3, [r7, #7]
	if (buff_size==0) return;
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d007      	beq.n	8001e5a <Displ_WriteData+0x24>
	Displ_Transmit(SPI_DATA, buff, buff_size, isTouchGFXBuffer);
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	b29a      	uxth	r2, r3
 8001e4e:	79fb      	ldrb	r3, [r7, #7]
 8001e50:	68f9      	ldr	r1, [r7, #12]
 8001e52:	2001      	movs	r0, #1
 8001e54:	f7ff ff94 	bl	8001d80 <Displ_Transmit>
 8001e58:	e000      	b.n	8001e5c <Displ_WriteData+0x26>
	if (buff_size==0) return;
 8001e5a:	bf00      	nop
}
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
	...

08001e64 <ILI9XXX_Init>:


/**********************************
 * @brief	ILIXXX initialization sequence
 **********************************/
void ILI9XXX_Init(){
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
	Displ_Select();
 8001e68:	f7ff ff62 	bl	8001d30 <Displ_Select>

	HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_RESET);
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e72:	481a      	ldr	r0, [pc, #104]	@ (8001edc <ILI9XXX_Init+0x78>)
 8001e74:	f001 fb68 	bl	8003548 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001e78:	2001      	movs	r0, #1
 8001e7a:	f000 fd0d 	bl	8002898 <HAL_Delay>
	HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_SET);
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e84:	4815      	ldr	r0, [pc, #84]	@ (8001edc <ILI9XXX_Init+0x78>)
 8001e86:	f001 fb5f 	bl	8003548 <HAL_GPIO_WritePin>
	HAL_Delay(150);
 8001e8a:	2096      	movs	r0, #150	@ 0x96
 8001e8c:	f000 fd04 	bl	8002898 <HAL_Delay>
		Displ_WriteData(data,3);
	#endif
*/


	Displ_WriteCommand(ILI9XXX_PIXEL_FORMAT);
 8001e90:	203a      	movs	r0, #58	@ 0x3a
 8001e92:	f7ff ffc1 	bl	8001e18 <Displ_WriteCommand>
#ifdef Z_RGB666
	Displ_WriteData((uint8_t *)"\x66",1,0);		// RGB666
#endif
#ifdef Z_RGB565
	Displ_WriteData((uint8_t *)"\x55",1,0);		// RGB565
 8001e96:	2200      	movs	r2, #0
 8001e98:	2101      	movs	r1, #1
 8001e9a:	4811      	ldr	r0, [pc, #68]	@ (8001ee0 <ILI9XXX_Init+0x7c>)
 8001e9c:	f7ff ffcb 	bl	8001e36 <Displ_WriteData>
#endif
	Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 8001ea0:	20b0      	movs	r0, #176	@ 0xb0
 8001ea2:	f7ff ffb9 	bl	8001e18 <Displ_WriteCommand>
	Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	2101      	movs	r1, #1
 8001eaa:	480e      	ldr	r0, [pc, #56]	@ (8001ee4 <ILI9XXX_Init+0x80>)
 8001eac:	f7ff ffc3 	bl	8001e36 <Displ_WriteData>

	Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 8001eb0:	20b0      	movs	r0, #176	@ 0xb0
 8001eb2:	f7ff ffb1 	bl	8001e18 <Displ_WriteCommand>
	Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	2101      	movs	r1, #1
 8001eba:	480a      	ldr	r0, [pc, #40]	@ (8001ee4 <ILI9XXX_Init+0x80>)
 8001ebc:	f7ff ffbb 	bl	8001e36 <Displ_WriteData>

	Displ_WriteCommand(ILI9XXX_SLEEP_OUT);
 8001ec0:	2011      	movs	r0, #17
 8001ec2:	f7ff ffa9 	bl	8001e18 <Displ_WriteCommand>
	HAL_Delay(120);
 8001ec6:	2078      	movs	r0, #120	@ 0x78
 8001ec8:	f000 fce6 	bl	8002898 <HAL_Delay>

	Displ_WriteCommand(ILI9XXX_DISPLAY_ON);
 8001ecc:	2029      	movs	r0, #41	@ 0x29
 8001ece:	f7ff ffa3 	bl	8001e18 <Displ_WriteCommand>
	HAL_Delay(5);
 8001ed2:	2005      	movs	r0, #5
 8001ed4:	f000 fce0 	bl	8002898 <HAL_Delay>

}
 8001ed8:	bf00      	nop
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	0800e4ac 	.word	0x0800e4ac
 8001ee4:	0800e4b0 	.word	0x0800e4b0

08001ee8 <Displ_SetAddressWindow>:
 * 			information
 * @param  x1,y1,x2,y2 top left and bottom
 * 					   right corner of the area
 * 					   to write
 **********************************************/
void Displ_SetAddressWindow(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8001ee8:	b590      	push	{r4, r7, lr}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4604      	mov	r4, r0
 8001ef0:	4608      	mov	r0, r1
 8001ef2:	4611      	mov	r1, r2
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	4623      	mov	r3, r4
 8001ef8:	80fb      	strh	r3, [r7, #6]
 8001efa:	4603      	mov	r3, r0
 8001efc:	80bb      	strh	r3, [r7, #4]
 8001efe:	460b      	mov	r3, r1
 8001f00:	807b      	strh	r3, [r7, #2]
 8001f02:	4613      	mov	r3, r2
 8001f04:	803b      	strh	r3, [r7, #0]
	static uint8_t data[4];

	((uint32_t *)data)[0]=(((x2 & 0xFF)<<24) | ((x2 & 0xFF00)<<8) | ((x1 & 0xFF)<<8) | ((x1 & 0xFF00)>>8) );
 8001f06:	887b      	ldrh	r3, [r7, #2]
 8001f08:	061a      	lsls	r2, r3, #24
 8001f0a:	887b      	ldrh	r3, [r7, #2]
 8001f0c:	021b      	lsls	r3, r3, #8
 8001f0e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8001f12:	431a      	orrs	r2, r3
 8001f14:	88fb      	ldrh	r3, [r7, #6]
 8001f16:	021b      	lsls	r3, r3, #8
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	88fa      	ldrh	r2, [r7, #6]
 8001f1e:	0a12      	lsrs	r2, r2, #8
 8001f20:	b292      	uxth	r2, r2
 8001f22:	431a      	orrs	r2, r3
 8001f24:	4b14      	ldr	r3, [pc, #80]	@ (8001f78 <Displ_SetAddressWindow+0x90>)
 8001f26:	601a      	str	r2, [r3, #0]
	Displ_WriteCommand(ILI9XXX_COLUMN_ADDR);
 8001f28:	202a      	movs	r0, #42	@ 0x2a
 8001f2a:	f7ff ff75 	bl	8001e18 <Displ_WriteCommand>
	Displ_WriteData(data, 4,0);
 8001f2e:	2200      	movs	r2, #0
 8001f30:	2104      	movs	r1, #4
 8001f32:	4811      	ldr	r0, [pc, #68]	@ (8001f78 <Displ_SetAddressWindow+0x90>)
 8001f34:	f7ff ff7f 	bl	8001e36 <Displ_WriteData>

	((uint32_t *)data)[0]=(((y2 & 0xFF)<<24) | ((y2 & 0xFF00)<<8) | ((y1 & 0xFF)<<8) | ((y1 & 0xFF00)>>8) );
 8001f38:	883b      	ldrh	r3, [r7, #0]
 8001f3a:	061a      	lsls	r2, r3, #24
 8001f3c:	883b      	ldrh	r3, [r7, #0]
 8001f3e:	021b      	lsls	r3, r3, #8
 8001f40:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8001f44:	431a      	orrs	r2, r3
 8001f46:	88bb      	ldrh	r3, [r7, #4]
 8001f48:	021b      	lsls	r3, r3, #8
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	88ba      	ldrh	r2, [r7, #4]
 8001f50:	0a12      	lsrs	r2, r2, #8
 8001f52:	b292      	uxth	r2, r2
 8001f54:	431a      	orrs	r2, r3
 8001f56:	4b08      	ldr	r3, [pc, #32]	@ (8001f78 <Displ_SetAddressWindow+0x90>)
 8001f58:	601a      	str	r2, [r3, #0]
	Displ_WriteCommand(ILI9XXX_PAGE_ADDR);
 8001f5a:	202b      	movs	r0, #43	@ 0x2b
 8001f5c:	f7ff ff5c 	bl	8001e18 <Displ_WriteCommand>
	Displ_WriteData(data, 4,0);
 8001f60:	2200      	movs	r2, #0
 8001f62:	2104      	movs	r1, #4
 8001f64:	4804      	ldr	r0, [pc, #16]	@ (8001f78 <Displ_SetAddressWindow+0x90>)
 8001f66:	f7ff ff66 	bl	8001e36 <Displ_WriteData>
	Displ_WriteCommand(ILI9XXX_MEMWR);
 8001f6a:	202c      	movs	r0, #44	@ 0x2c
 8001f6c:	f7ff ff54 	bl	8001e18 <Displ_WriteCommand>
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd90      	pop	{r4, r7, pc}
 8001f78:	200084a0 	.word	0x200084a0

08001f7c <Displ_Init>:

/*****************************************************
 * @brief				first display initialization.
 * @param	orientation	display orientation
 *****************************************************/
void Displ_Init(Displ_Orientat_e orientation){
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	4603      	mov	r3, r0
 8001f84:	71fb      	strb	r3, [r7, #7]
	if (TOUCH_SPI==DISPL_SPI){													// if touch and display share the same SPI port
		HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET); 		// unselect display (will be selected at writing time)
 8001f86:	2201      	movs	r2, #1
 8001f88:	2180      	movs	r1, #128	@ 0x80
 8001f8a:	4809      	ldr	r0, [pc, #36]	@ (8001fb0 <Displ_Init+0x34>)
 8001f8c:	f001 fadc 	bl	8003548 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);		// unselect touch (will be selected at writing time)
 8001f90:	2201      	movs	r2, #1
 8001f92:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001f96:	4806      	ldr	r0, [pc, #24]	@ (8001fb0 <Displ_Init+0x34>)
 8001f98:	f001 fad6 	bl	8003548 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET); 	// select display
		SET_DISPL_SPI_BAUDRATE;
		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);	// select touch
		SET_TOUCH_SPI_BAUDRATE;
	}
	ILI9XXX_Init();
 8001f9c:	f7ff ff62 	bl	8001e64 <ILI9XXX_Init>
	Displ_Orientation(orientation);
 8001fa0:	79fb      	ldrb	r3, [r7, #7]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f000 f806 	bl	8001fb4 <Displ_Orientation>
}
 8001fa8:	bf00      	nop
 8001faa:	3708      	adds	r7, #8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40021000 	.word	0x40021000

08001fb4 <Displ_Orientation>:

/**********************************************
 * @brief		set orientation of the display
 * @param  	m	orientation
 **********************************************/
void Displ_Orientation(Displ_Orientat_e orientation){
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	71fb      	strb	r3, [r7, #7]
	static uint8_t data[1];
	switch(orientation) {
 8001fbe:	79fb      	ldrb	r3, [r7, #7]
 8001fc0:	2b03      	cmp	r3, #3
 8001fc2:	d837      	bhi.n	8002034 <Displ_Orientation+0x80>
 8001fc4:	a201      	add	r2, pc, #4	@ (adr r2, 8001fcc <Displ_Orientation+0x18>)
 8001fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fca:	bf00      	nop
 8001fcc:	08001fdd 	.word	0x08001fdd
 8001fd0:	08001ff3 	.word	0x08001ff3
 8001fd4:	08002009 	.word	0x08002009
 8001fd8:	0800201f 	.word	0x0800201f
		case Displ_Orientat_0:
			data[0]=ILI9XXX_MADCTL_0DEG;
 8001fdc:	4b1d      	ldr	r3, [pc, #116]	@ (8002054 <Displ_Orientation+0xa0>)
 8001fde:	2288      	movs	r2, #136	@ 0x88
 8001fe0:	701a      	strb	r2, [r3, #0]
			_height = DISPL_HEIGHT;
 8001fe2:	4b1d      	ldr	r3, [pc, #116]	@ (8002058 <Displ_Orientation+0xa4>)
 8001fe4:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001fe8:	801a      	strh	r2, [r3, #0]
			_width = DISPL_WIDTH;
 8001fea:	4b1c      	ldr	r3, [pc, #112]	@ (800205c <Displ_Orientation+0xa8>)
 8001fec:	22f0      	movs	r2, #240	@ 0xf0
 8001fee:	801a      	strh	r2, [r3, #0]
			break;
 8001ff0:	e020      	b.n	8002034 <Displ_Orientation+0x80>
		case Displ_Orientat_90:
			data[0]=ILI9XXX_MADCTL_90DEG;
 8001ff2:	4b18      	ldr	r3, [pc, #96]	@ (8002054 <Displ_Orientation+0xa0>)
 8001ff4:	22e8      	movs	r2, #232	@ 0xe8
 8001ff6:	701a      	strb	r2, [r3, #0]
			_height = DISPL_WIDTH;
 8001ff8:	4b17      	ldr	r3, [pc, #92]	@ (8002058 <Displ_Orientation+0xa4>)
 8001ffa:	22f0      	movs	r2, #240	@ 0xf0
 8001ffc:	801a      	strh	r2, [r3, #0]
			_width = DISPL_HEIGHT;
 8001ffe:	4b17      	ldr	r3, [pc, #92]	@ (800205c <Displ_Orientation+0xa8>)
 8002000:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002004:	801a      	strh	r2, [r3, #0]
			break;
 8002006:	e015      	b.n	8002034 <Displ_Orientation+0x80>
		case Displ_Orientat_180:
			data[0]=ILI9XXX_MADCTL_180DEG;
 8002008:	4b12      	ldr	r3, [pc, #72]	@ (8002054 <Displ_Orientation+0xa0>)
 800200a:	2248      	movs	r2, #72	@ 0x48
 800200c:	701a      	strb	r2, [r3, #0]
			_height = DISPL_HEIGHT;
 800200e:	4b12      	ldr	r3, [pc, #72]	@ (8002058 <Displ_Orientation+0xa4>)
 8002010:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002014:	801a      	strh	r2, [r3, #0]
			_width = DISPL_WIDTH;
 8002016:	4b11      	ldr	r3, [pc, #68]	@ (800205c <Displ_Orientation+0xa8>)
 8002018:	22f0      	movs	r2, #240	@ 0xf0
 800201a:	801a      	strh	r2, [r3, #0]
			break;
 800201c:	e00a      	b.n	8002034 <Displ_Orientation+0x80>
		case Displ_Orientat_270:
			data[0]=ILI9XXX_MADCTL_270DEG;
 800201e:	4b0d      	ldr	r3, [pc, #52]	@ (8002054 <Displ_Orientation+0xa0>)
 8002020:	2228      	movs	r2, #40	@ 0x28
 8002022:	701a      	strb	r2, [r3, #0]
			_height = DISPL_WIDTH;
 8002024:	4b0c      	ldr	r3, [pc, #48]	@ (8002058 <Displ_Orientation+0xa4>)
 8002026:	22f0      	movs	r2, #240	@ 0xf0
 8002028:	801a      	strh	r2, [r3, #0]
			_width = DISPL_HEIGHT;
 800202a:	4b0c      	ldr	r3, [pc, #48]	@ (800205c <Displ_Orientation+0xa8>)
 800202c:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002030:	801a      	strh	r2, [r3, #0]
			break;
 8002032:	bf00      	nop
	}
	Displ_WriteCommand(ILI9XXX_MADCTL);
 8002034:	2036      	movs	r0, #54	@ 0x36
 8002036:	f7ff feef 	bl	8001e18 <Displ_WriteCommand>
	Displ_WriteData(data,1,0);
 800203a:	2200      	movs	r2, #0
 800203c:	2101      	movs	r1, #1
 800203e:	4805      	ldr	r0, [pc, #20]	@ (8002054 <Displ_Orientation+0xa0>)
 8002040:	f7ff fef9 	bl	8001e36 <Displ_WriteData>
	current_orientation = orientation;  //stores active orientation into a global variable for touch routines
 8002044:	4a06      	ldr	r2, [pc, #24]	@ (8002060 <Displ_Orientation+0xac>)
 8002046:	79fb      	ldrb	r3, [r7, #7]
 8002048:	7013      	strb	r3, [r2, #0]
}
 800204a:	bf00      	nop
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	200084a4 	.word	0x200084a4
 8002058:	2000049c 	.word	0x2000049c
 800205c:	2000049a 	.word	0x2000049a
 8002060:	20000498 	.word	0x20000498

08002064 <HAL_SPI_ErrorCallback>:




void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi){
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
	if (hspi->Instance==DISPL_SPI) {
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a05      	ldr	r2, [pc, #20]	@ (8002088 <HAL_SPI_ErrorCallback+0x24>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d102      	bne.n	800207c <HAL_SPI_ErrorCallback+0x18>
		Displ_SpiAvailable=1;
 8002076:	4b05      	ldr	r3, [pc, #20]	@ (800208c <HAL_SPI_ErrorCallback+0x28>)
 8002078:	2201      	movs	r2, #1
 800207a:	701a      	strb	r2, [r3, #0]
	}
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	40013400 	.word	0x40013400
 800208c:	20000010 	.word	0x20000010

08002090 <Displ_FillArea>:
/*****************************
 * @brief	fill a rectangle with a color
 * @param	x, y	top left corner of the rectangle
 * 			w, h 	width and height of the rectangle
 ******************************/
void Displ_FillArea(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8002090:	b590      	push	{r4, r7, lr}
 8002092:	b08b      	sub	sp, #44	@ 0x2c
 8002094:	af00      	add	r7, sp, #0
 8002096:	4604      	mov	r4, r0
 8002098:	4608      	mov	r0, r1
 800209a:	4611      	mov	r1, r2
 800209c:	461a      	mov	r2, r3
 800209e:	4623      	mov	r3, r4
 80020a0:	80fb      	strh	r3, [r7, #6]
 80020a2:	4603      	mov	r3, r0
 80020a4:	80bb      	strh	r3, [r7, #4]
 80020a6:	460b      	mov	r3, r1
 80020a8:	807b      	strh	r3, [r7, #2]
 80020aa:	4613      	mov	r3, r2
 80020ac:	803b      	strh	r3, [r7, #0]
 * -	swap buffers
 */

	uint32_t k,x1,y1,area,times;

	if((x >= _width) || (y >= _height) || (w == 0) || (h == 0)) return;//
 80020ae:	88fb      	ldrh	r3, [r7, #6]
 80020b0:	4a4f      	ldr	r2, [pc, #316]	@ (80021f0 <Displ_FillArea+0x160>)
 80020b2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80020b6:	4293      	cmp	r3, r2
 80020b8:	f280 8096 	bge.w	80021e8 <Displ_FillArea+0x158>
 80020bc:	88bb      	ldrh	r3, [r7, #4]
 80020be:	4a4d      	ldr	r2, [pc, #308]	@ (80021f4 <Displ_FillArea+0x164>)
 80020c0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80020c4:	4293      	cmp	r3, r2
 80020c6:	f280 808f 	bge.w	80021e8 <Displ_FillArea+0x158>
 80020ca:	887b      	ldrh	r3, [r7, #2]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	f000 808b 	beq.w	80021e8 <Displ_FillArea+0x158>
 80020d2:	883b      	ldrh	r3, [r7, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	f000 8087 	beq.w	80021e8 <Displ_FillArea+0x158>

	x1=x + w - 1;
 80020da:	88fa      	ldrh	r2, [r7, #6]
 80020dc:	887b      	ldrh	r3, [r7, #2]
 80020de:	4413      	add	r3, r2
 80020e0:	3b01      	subs	r3, #1
 80020e2:	623b      	str	r3, [r7, #32]
	if (x1 > _width) {
 80020e4:	4b42      	ldr	r3, [pc, #264]	@ (80021f0 <Displ_FillArea+0x160>)
 80020e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020ea:	461a      	mov	r2, r3
 80020ec:	6a3b      	ldr	r3, [r7, #32]
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d903      	bls.n	80020fa <Displ_FillArea+0x6a>
		x1=_width;
 80020f2:	4b3f      	ldr	r3, [pc, #252]	@ (80021f0 <Displ_FillArea+0x160>)
 80020f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020f8:	623b      	str	r3, [r7, #32]
	}

	y1=y + h - 1;
 80020fa:	88ba      	ldrh	r2, [r7, #4]
 80020fc:	883b      	ldrh	r3, [r7, #0]
 80020fe:	4413      	add	r3, r2
 8002100:	3b01      	subs	r3, #1
 8002102:	61fb      	str	r3, [r7, #28]
	if (y1 > _height) {
 8002104:	4b3b      	ldr	r3, [pc, #236]	@ (80021f4 <Displ_FillArea+0x164>)
 8002106:	f9b3 3000 	ldrsh.w	r3, [r3]
 800210a:	461a      	mov	r2, r3
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	4293      	cmp	r3, r2
 8002110:	d903      	bls.n	800211a <Displ_FillArea+0x8a>
		y1=_height;
 8002112:	4b38      	ldr	r3, [pc, #224]	@ (80021f4 <Displ_FillArea+0x164>)
 8002114:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002118:	61fb      	str	r3, [r7, #28]
// SETUP DISPLAY DATA BUFFER TO TRANSFER
#ifdef Z_RGB565 // setting up dispBuffer in RGB565 format

	uint32_t data32;

	data32=(color>>8) | (color<<8) | (color<<24); 	// supposing color is 0xABCD, data32 becomes 0xCDABCDAB - set a 32 bit variable with swapped endians
 800211a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800211c:	0a1b      	lsrs	r3, r3, #8
 800211e:	b29b      	uxth	r3, r3
 8002120:	461a      	mov	r2, r3
 8002122:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8002124:	021b      	lsls	r3, r3, #8
 8002126:	431a      	orrs	r2, r3
 8002128:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800212a:	061b      	lsls	r3, r3, #24
 800212c:	4313      	orrs	r3, r2
 800212e:	613b      	str	r3, [r7, #16]
	area=((y1-y+1)*(x1-x+1)); 						// area to fill in 16bit pixels
 8002130:	88bb      	ldrh	r3, [r7, #4]
 8002132:	69fa      	ldr	r2, [r7, #28]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	3301      	adds	r3, #1
 8002138:	88fa      	ldrh	r2, [r7, #6]
 800213a:	6a39      	ldr	r1, [r7, #32]
 800213c:	1a8a      	subs	r2, r1, r2
 800213e:	3201      	adds	r2, #1
 8002140:	fb02 f303 	mul.w	r3, r2, r3
 8002144:	60fb      	str	r3, [r7, #12]
	uint32_t *buf32Pos=(uint32_t *)dispBuffer; 		//dispBuffer defined in bytes, buf32Pos access it as 32 bit words
 8002146:	4b2c      	ldr	r3, [pc, #176]	@ (80021f8 <Displ_FillArea+0x168>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	617b      	str	r3, [r7, #20]
	if (area<(SIZEBUF>>1)) 							// if area is smaller than dispBuffer
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002152:	d204      	bcs.n	800215e <Displ_FillArea+0xce>
		times=(area>>1)+1; 							// number of times data32 has to be loaded into buffer
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	085b      	lsrs	r3, r3, #1
 8002158:	3301      	adds	r3, #1
 800215a:	61bb      	str	r3, [r7, #24]
 800215c:	e002      	b.n	8002164 <Displ_FillArea+0xd4>
	else
		times=(SIZEBUF>>2);  						// dispBuffer size as 32bit-words
 800215e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002162:	61bb      	str	r3, [r7, #24]
	for (k = 0; k < times; k++)
 8002164:	2300      	movs	r3, #0
 8002166:	627b      	str	r3, [r7, #36]	@ 0x24
 8002168:	e007      	b.n	800217a <Displ_FillArea+0xea>
		*(buf32Pos++)=data32; 						// loads buffer moving 32bit-words
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	1d1a      	adds	r2, r3, #4
 800216e:	617a      	str	r2, [r7, #20]
 8002170:	693a      	ldr	r2, [r7, #16]
 8002172:	601a      	str	r2, [r3, #0]
	for (k = 0; k < times; k++)
 8002174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002176:	3301      	adds	r3, #1
 8002178:	627b      	str	r3, [r7, #36]	@ 0x24
 800217a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	429a      	cmp	r2, r3
 8002180:	d3f3      	bcc.n	800216a <Displ_FillArea+0xda>
	}
	datasize=(buf8Pos-dispBuffer);
#endif

//START WRITING TO DISPLAY
	Displ_SetAddressWindow(x, y, x1, y1);
 8002182:	6a3b      	ldr	r3, [r7, #32]
 8002184:	b29a      	uxth	r2, r3
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	b29b      	uxth	r3, r3
 800218a:	88b9      	ldrh	r1, [r7, #4]
 800218c:	88f8      	ldrh	r0, [r7, #6]
 800218e:	f7ff feab 	bl	8001ee8 <Displ_SetAddressWindow>

#ifdef Z_RGB565 // transferring RGB666 format dispBuffer
	times=(area>>(BUFLEVEL-1));  					//how many times buffer must be sent via SPI. It is (BUFFLEVEL-1) because area is 16-bit while dispBuffer is 8-bit
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	0b5b      	lsrs	r3, r3, #13
 8002196:	61bb      	str	r3, [r7, #24]
	for  (k=0;k<times;k++) {
 8002198:	2300      	movs	r3, #0
 800219a:	627b      	str	r3, [r7, #36]	@ 0x24
 800219c:	e00a      	b.n	80021b4 <Displ_FillArea+0x124>
		Displ_WriteData(dispBuffer,SIZEBUF,0);
 800219e:	4b16      	ldr	r3, [pc, #88]	@ (80021f8 <Displ_FillArea+0x168>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7ff fe44 	bl	8001e36 <Displ_WriteData>
	for  (k=0;k<times;k++) {
 80021ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b0:	3301      	adds	r3, #1
 80021b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80021b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d3f0      	bcc.n	800219e <Displ_FillArea+0x10e>
	}
	Displ_WriteData(dispBuffer,(area<<1)-(times<<BUFLEVEL),0);
 80021bc:	4b0e      	ldr	r3, [pc, #56]	@ (80021f8 <Displ_FillArea+0x168>)
 80021be:	6818      	ldr	r0, [r3, #0]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	005a      	lsls	r2, r3, #1
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	039b      	lsls	r3, r3, #14
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2200      	movs	r2, #0
 80021cc:	4619      	mov	r1, r3
 80021ce:	f7ff fe32 	bl	8001e36 <Displ_WriteData>
	}
	Displ_WriteData(dispBuffer,(area-times*datasize),0);      //transfer last data frame
#endif

//BUFFER SWAP
	dispBuffer = (dispBuffer==dispBuffer1 ? dispBuffer2 : dispBuffer1); // swapping buffer
 80021d2:	4b09      	ldr	r3, [pc, #36]	@ (80021f8 <Displ_FillArea+0x168>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a09      	ldr	r2, [pc, #36]	@ (80021fc <Displ_FillArea+0x16c>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d101      	bne.n	80021e0 <Displ_FillArea+0x150>
 80021dc:	4b08      	ldr	r3, [pc, #32]	@ (8002200 <Displ_FillArea+0x170>)
 80021de:	e000      	b.n	80021e2 <Displ_FillArea+0x152>
 80021e0:	4b06      	ldr	r3, [pc, #24]	@ (80021fc <Displ_FillArea+0x16c>)
 80021e2:	4a05      	ldr	r2, [pc, #20]	@ (80021f8 <Displ_FillArea+0x168>)
 80021e4:	6013      	str	r3, [r2, #0]
 80021e6:	e000      	b.n	80021ea <Displ_FillArea+0x15a>
	if((x >= _width) || (y >= _height) || (w == 0) || (h == 0)) return;//
 80021e8:	bf00      	nop

}
 80021ea:	372c      	adds	r7, #44	@ 0x2c
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd90      	pop	{r4, r7, pc}
 80021f0:	2000049a 	.word	0x2000049a
 80021f4:	2000049c 	.word	0x2000049c
 80021f8:	20000014 	.word	0x20000014
 80021fc:	200004a0 	.word	0x200004a0
 8002200:	200044a0 	.word	0x200044a0

08002204 <Displ_CLS>:

/*****************
 * @brief	clear display with a color.
 * @param	bgcolor
 *****************/
void Displ_CLS(uint16_t bgcolor){
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af02      	add	r7, sp, #8
 800220a:	4603      	mov	r3, r0
 800220c:	80fb      	strh	r3, [r7, #6]
	Displ_FillArea(0, 0, _width, _height, bgcolor);
 800220e:	4b09      	ldr	r3, [pc, #36]	@ (8002234 <Displ_CLS+0x30>)
 8002210:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002214:	b29a      	uxth	r2, r3
 8002216:	4b08      	ldr	r3, [pc, #32]	@ (8002238 <Displ_CLS+0x34>)
 8002218:	f9b3 3000 	ldrsh.w	r3, [r3]
 800221c:	b299      	uxth	r1, r3
 800221e:	88fb      	ldrh	r3, [r7, #6]
 8002220:	9300      	str	r3, [sp, #0]
 8002222:	460b      	mov	r3, r1
 8002224:	2100      	movs	r1, #0
 8002226:	2000      	movs	r0, #0
 8002228:	f7ff ff32 	bl	8002090 <Displ_FillArea>
}
 800222c:	bf00      	nop
 800222e:	3708      	adds	r7, #8
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	2000049a 	.word	0x2000049a
 8002238:	2000049c 	.word	0x2000049c

0800223c <Displ_WChar>:
 * @brief	display one character on the display
 * @param 	x,y: top left corner of the character to be printed
 * 			ch, font, color, bgcolor: as per parameter name
 * 			size: (1 or 2) single or double wided printing
 **********************/
void Displ_WChar(uint16_t x, uint16_t y, char ch, sFONT font, uint8_t size, uint16_t color, uint16_t bgcolor) {
 800223c:	b082      	sub	sp, #8
 800223e:	b590      	push	{r4, r7, lr}
 8002240:	b08d      	sub	sp, #52	@ 0x34
 8002242:	af00      	add	r7, sp, #0
 8002244:	647b      	str	r3, [r7, #68]	@ 0x44
 8002246:	4603      	mov	r3, r0
 8002248:	80fb      	strh	r3, [r7, #6]
 800224a:	460b      	mov	r3, r1
 800224c:	80bb      	strh	r3, [r7, #4]
 800224e:	4613      	mov	r3, r2
 8002250:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, bytes, j, bufSize, mask;

    const uint8_t *pos;
	uint8_t wsize=font.Width; //printing char width
 8002252:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8002256:	76fb      	strb	r3, [r7, #27]

	if (size==2)
 8002258:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 800225c:	2b02      	cmp	r3, #2
 800225e:	d102      	bne.n	8002266 <Displ_WChar+0x2a>
		wsize<<= 1;
 8002260:	7efb      	ldrb	r3, [r7, #27]
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	76fb      	strb	r3, [r7, #27]
	bufSize=0;
 8002266:	2300      	movs	r3, #0
 8002268:	623b      	str	r3, [r7, #32]
	bytes=font.Height * font.Size ;
 800226a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800226e:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 8002272:	fb02 f303 	mul.w	r3, r2, r3
 8002276:	617b      	str	r3, [r7, #20]
	pos=font.table+(ch - 32) * bytes ;//that's char position in table
 8002278:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800227a:	78fb      	ldrb	r3, [r7, #3]
 800227c:	3b20      	subs	r3, #32
 800227e:	4619      	mov	r1, r3
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	fb01 f303 	mul.w	r3, r1, r3
 8002286:	4413      	add	r3, r2
 8002288:	613b      	str	r3, [r7, #16]
	switch (font.Size) {
 800228a:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800228e:	2b02      	cmp	r3, #2
 8002290:	d005      	beq.n	800229e <Displ_WChar+0x62>
 8002292:	2b03      	cmp	r3, #3
 8002294:	d107      	bne.n	80022a6 <Displ_WChar+0x6a>
		case 3:
			mask=0x800000;
 8002296:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800229a:	61fb      	str	r3, [r7, #28]
			break;
 800229c:	e005      	b.n	80022aa <Displ_WChar+0x6e>
		case 2:
			mask=0x8000;
 800229e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80022a2:	61fb      	str	r3, [r7, #28]
			break;
 80022a4:	e001      	b.n	80022aa <Displ_WChar+0x6e>
		default:
			mask=0x80;
 80022a6:	2380      	movs	r3, #128	@ 0x80
 80022a8:	61fb      	str	r3, [r7, #28]
	}

#ifdef Z_RGB565

	uint16_t color1, bgcolor1;
	uint16_t *dispBuffer16=(uint16_t *)dispBuffer;
 80022aa:	4b60      	ldr	r3, [pc, #384]	@ (800242c <Displ_WChar+0x1f0>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	60fb      	str	r3, [r7, #12]

	color1 = ((color & 0xFF)<<8 | (color >> 8));      		//swapping byte endian: STM32 is little endian, ST7735 is big endian
 80022b0:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	@ 0x54
 80022b4:	021b      	lsls	r3, r3, #8
 80022b6:	b21a      	sxth	r2, r3
 80022b8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 80022bc:	0a1b      	lsrs	r3, r3, #8
 80022be:	b29b      	uxth	r3, r3
 80022c0:	b21b      	sxth	r3, r3
 80022c2:	4313      	orrs	r3, r2
 80022c4:	b21b      	sxth	r3, r3
 80022c6:	817b      	strh	r3, [r7, #10]
	bgcolor1 = ((bgcolor & 0xFF)<<8 | (bgcolor >> 8));		//swapping byte endian: STM32 is little endian, ST7735 is big endian
 80022c8:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	@ 0x58
 80022cc:	021b      	lsls	r3, r3, #8
 80022ce:	b21a      	sxth	r2, r3
 80022d0:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 80022d4:	0a1b      	lsrs	r3, r3, #8
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	b21b      	sxth	r3, r3
 80022da:	4313      	orrs	r3, r2
 80022dc:	b21b      	sxth	r3, r3
 80022de:	813b      	strh	r3, [r7, #8]

	for(i = 0; i < (bytes); i+=font.Size){
 80022e0:	2300      	movs	r3, #0
 80022e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80022e4:	e06f      	b.n	80023c6 <Displ_WChar+0x18a>
		b=0;
 80022e6:	2300      	movs	r3, #0
 80022e8:	62bb      	str	r3, [r7, #40]	@ 0x28
		switch (font.Size) {
 80022ea:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d015      	beq.n	800231e <Displ_WChar+0xe2>
 80022f2:	2b03      	cmp	r3, #3
 80022f4:	d120      	bne.n	8002338 <Displ_WChar+0xfc>
			case 3:
				b=pos[i]<<16 | pos[i+1]<<8 | pos[i+2];
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022fa:	4413      	add	r3, r2
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	041a      	lsls	r2, r3, #16
 8002300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002302:	3301      	adds	r3, #1
 8002304:	6939      	ldr	r1, [r7, #16]
 8002306:	440b      	add	r3, r1
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	021b      	lsls	r3, r3, #8
 800230c:	4313      	orrs	r3, r2
 800230e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002310:	3202      	adds	r2, #2
 8002312:	6939      	ldr	r1, [r7, #16]
 8002314:	440a      	add	r2, r1
 8002316:	7812      	ldrb	r2, [r2, #0]
 8002318:	4313      	orrs	r3, r2
 800231a:	62bb      	str	r3, [r7, #40]	@ 0x28
				break;
 800231c:	e011      	b.n	8002342 <Displ_WChar+0x106>
			case 2:
				b=pos[i]<<8 | pos[i+1];
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002322:	4413      	add	r3, r2
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	021b      	lsls	r3, r3, #8
 8002328:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800232a:	3201      	adds	r2, #1
 800232c:	6939      	ldr	r1, [r7, #16]
 800232e:	440a      	add	r2, r1
 8002330:	7812      	ldrb	r2, [r2, #0]
 8002332:	4313      	orrs	r3, r2
 8002334:	62bb      	str	r3, [r7, #40]	@ 0x28
				break;
 8002336:	e004      	b.n	8002342 <Displ_WChar+0x106>
			default:
				b=pos[i];
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800233c:	4413      	add	r3, r2
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	62bb      	str	r3, [r7, #40]	@ 0x28
		}

		for(j = 0; j < font.Width; j++) {
 8002342:	2300      	movs	r3, #0
 8002344:	627b      	str	r3, [r7, #36]	@ 0x24
 8002346:	e032      	b.n	80023ae <Displ_WChar+0x172>
			if((b << j) & mask)  {
 8002348:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800234a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800234c:	409a      	lsls	r2, r3
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	4013      	ands	r3, r2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d014      	beq.n	8002380 <Displ_WChar+0x144>
				dispBuffer16[bufSize++] = color1;
 8002356:	6a3b      	ldr	r3, [r7, #32]
 8002358:	1c5a      	adds	r2, r3, #1
 800235a:	623a      	str	r2, [r7, #32]
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	4413      	add	r3, r2
 8002362:	897a      	ldrh	r2, [r7, #10]
 8002364:	801a      	strh	r2, [r3, #0]
				if (size==2){
 8002366:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 800236a:	2b02      	cmp	r3, #2
 800236c:	d11c      	bne.n	80023a8 <Displ_WChar+0x16c>
					dispBuffer16[bufSize++] = color1;
 800236e:	6a3b      	ldr	r3, [r7, #32]
 8002370:	1c5a      	adds	r2, r3, #1
 8002372:	623a      	str	r2, [r7, #32]
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	4413      	add	r3, r2
 800237a:	897a      	ldrh	r2, [r7, #10]
 800237c:	801a      	strh	r2, [r3, #0]
 800237e:	e013      	b.n	80023a8 <Displ_WChar+0x16c>
				}
			} else {
				dispBuffer16[bufSize++] = bgcolor1;
 8002380:	6a3b      	ldr	r3, [r7, #32]
 8002382:	1c5a      	adds	r2, r3, #1
 8002384:	623a      	str	r2, [r7, #32]
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	4413      	add	r3, r2
 800238c:	893a      	ldrh	r2, [r7, #8]
 800238e:	801a      	strh	r2, [r3, #0]
				if (size==2) {
 8002390:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8002394:	2b02      	cmp	r3, #2
 8002396:	d107      	bne.n	80023a8 <Displ_WChar+0x16c>
					dispBuffer16[bufSize++] = bgcolor1;
 8002398:	6a3b      	ldr	r3, [r7, #32]
 800239a:	1c5a      	adds	r2, r3, #1
 800239c:	623a      	str	r2, [r7, #32]
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	4413      	add	r3, r2
 80023a4:	893a      	ldrh	r2, [r7, #8]
 80023a6:	801a      	strh	r2, [r3, #0]
		for(j = 0; j < font.Width; j++) {
 80023a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023aa:	3301      	adds	r3, #1
 80023ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80023ae:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80023b2:	461a      	mov	r2, r3
 80023b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d3c6      	bcc.n	8002348 <Displ_WChar+0x10c>
	for(i = 0; i < (bytes); i+=font.Size){
 80023ba:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80023be:	461a      	mov	r2, r3
 80023c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023c2:	4413      	add	r3, r2
 80023c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d38b      	bcc.n	80022e6 <Displ_WChar+0xaa>
				}
			}
		}
	}
	bufSize<<=1;
 80023ce:	6a3b      	ldr	r3, [r7, #32]
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	623b      	str	r3, [r7, #32]
			}
		}
	}
#endif

	Displ_SetAddressWindow(x, y, x+wsize-1, y+font.Height-1);
 80023d4:	7efb      	ldrb	r3, [r7, #27]
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	88fb      	ldrh	r3, [r7, #6]
 80023da:	4413      	add	r3, r2
 80023dc:	b29b      	uxth	r3, r3
 80023de:	3b01      	subs	r3, #1
 80023e0:	b29c      	uxth	r4, r3
 80023e2:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 80023e6:	88bb      	ldrh	r3, [r7, #4]
 80023e8:	4413      	add	r3, r2
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	3b01      	subs	r3, #1
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	88b9      	ldrh	r1, [r7, #4]
 80023f2:	88f8      	ldrh	r0, [r7, #6]
 80023f4:	4622      	mov	r2, r4
 80023f6:	f7ff fd77 	bl	8001ee8 <Displ_SetAddressWindow>
	Displ_WriteData(dispBuffer,bufSize,0);
 80023fa:	4b0c      	ldr	r3, [pc, #48]	@ (800242c <Displ_WChar+0x1f0>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2200      	movs	r2, #0
 8002400:	6a39      	ldr	r1, [r7, #32]
 8002402:	4618      	mov	r0, r3
 8002404:	f7ff fd17 	bl	8001e36 <Displ_WriteData>
	dispBuffer = (dispBuffer==dispBuffer1 ? dispBuffer2 : dispBuffer1); // swapping buffer
 8002408:	4b08      	ldr	r3, [pc, #32]	@ (800242c <Displ_WChar+0x1f0>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a08      	ldr	r2, [pc, #32]	@ (8002430 <Displ_WChar+0x1f4>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d101      	bne.n	8002416 <Displ_WChar+0x1da>
 8002412:	4b08      	ldr	r3, [pc, #32]	@ (8002434 <Displ_WChar+0x1f8>)
 8002414:	e000      	b.n	8002418 <Displ_WChar+0x1dc>
 8002416:	4b06      	ldr	r3, [pc, #24]	@ (8002430 <Displ_WChar+0x1f4>)
 8002418:	4a04      	ldr	r2, [pc, #16]	@ (800242c <Displ_WChar+0x1f0>)
 800241a:	6013      	str	r3, [r2, #0]

}
 800241c:	bf00      	nop
 800241e:	3734      	adds	r7, #52	@ 0x34
 8002420:	46bd      	mov	sp, r7
 8002422:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002426:	b002      	add	sp, #8
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	20000014 	.word	0x20000014
 8002430:	200004a0 	.word	0x200004a0
 8002434:	200044a0 	.word	0x200044a0

08002438 <Displ_WString>:
 * 			font	to bu used
 * 			size	1 (normal), 2 (double width)
 * 			color	font color
 * 			bgcolor	background color
 ************************/
void Displ_WString(uint16_t x, uint16_t y, const char* str, sFONT font, uint8_t size, uint16_t color, uint16_t bgcolor) {
 8002438:	b082      	sub	sp, #8
 800243a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800243c:	b08b      	sub	sp, #44	@ 0x2c
 800243e:	af06      	add	r7, sp, #24
 8002440:	603a      	str	r2, [r7, #0]
 8002442:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002444:	4603      	mov	r3, r0
 8002446:	80fb      	strh	r3, [r7, #6]
 8002448:	460b      	mov	r3, r1
 800244a:	80bb      	strh	r3, [r7, #4]
	uint16_t delta=font.Width;
 800244c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800244e:	81fb      	strh	r3, [r7, #14]
	if (size>1)
 8002450:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8002454:	2b01      	cmp	r3, #1
 8002456:	d922      	bls.n	800249e <Displ_WString+0x66>
		delta<<=1;
 8002458:	89fb      	ldrh	r3, [r7, #14]
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	81fb      	strh	r3, [r7, #14]

    while(*str) {
 800245e:	e01e      	b.n	800249e <Displ_WString+0x66>
                str++;
                continue;
            }
        }
 */
        Displ_WChar(x, y, *str, font, size, color, bgcolor);
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	781a      	ldrb	r2, [r3, #0]
 8002464:	88bd      	ldrh	r5, [r7, #4]
 8002466:	88fc      	ldrh	r4, [r7, #6]
 8002468:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800246c:	9304      	str	r3, [sp, #16]
 800246e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8002470:	9303      	str	r3, [sp, #12]
 8002472:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8002476:	9302      	str	r3, [sp, #8]
 8002478:	466e      	mov	r6, sp
 800247a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800247e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002482:	e886 0003 	stmia.w	r6, {r0, r1}
 8002486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002488:	4629      	mov	r1, r5
 800248a:	4620      	mov	r0, r4
 800248c:	f7ff fed6 	bl	800223c <Displ_WChar>
        x += delta;
 8002490:	88fa      	ldrh	r2, [r7, #6]
 8002492:	89fb      	ldrh	r3, [r7, #14]
 8002494:	4413      	add	r3, r2
 8002496:	80fb      	strh	r3, [r7, #6]
        str++;
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	3301      	adds	r3, #1
 800249c:	603b      	str	r3, [r7, #0]
    while(*str) {
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d1dc      	bne.n	8002460 <Displ_WString+0x28>
    }
}
 80024a6:	bf00      	nop
 80024a8:	bf00      	nop
 80024aa:	3714      	adds	r7, #20
 80024ac:	46bd      	mov	sp, r7
 80024ae:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80024b2:	b002      	add	sp, #8
 80024b4:	4770      	bx	lr
	...

080024b8 <Displ_BackLight>:
 *				'0'		set the display level to 0 (off)
 *				'I'		'Initialize'  IT MUST BE in dimming mode
 *              'Q'		do nothing, just return current level
 * @return		current backlight level
 **************************************/
uint32_t  Displ_BackLight(uint8_t cmd) {
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	4603      	mov	r3, r0
 80024c0:	71fb      	strb	r3, [r7, #7]

#ifdef DISPLAY_DIMMING_MODE
	static uint16_t memCCR1=0;  			//it stores CCR1 value while in stand-by
#endif

	switch (cmd) {
 80024c2:	79fb      	ldrb	r3, [r7, #7]
 80024c4:	2b51      	cmp	r3, #81	@ 0x51
 80024c6:	d00a      	beq.n	80024de <Displ_BackLight+0x26>
 80024c8:	2b51      	cmp	r3, #81	@ 0x51
 80024ca:	dc18      	bgt.n	80024fe <Displ_BackLight+0x46>
 80024cc:	2b46      	cmp	r3, #70	@ 0x46
 80024ce:	d008      	beq.n	80024e2 <Displ_BackLight+0x2a>
 80024d0:	2b46      	cmp	r3, #70	@ 0x46
 80024d2:	dc14      	bgt.n	80024fe <Displ_BackLight+0x46>
 80024d4:	2b30      	cmp	r3, #48	@ 0x30
 80024d6:	d00b      	beq.n	80024f0 <Displ_BackLight+0x38>
 80024d8:	2b31      	cmp	r3, #49	@ 0x31
 80024da:	d002      	beq.n	80024e2 <Displ_BackLight+0x2a>
	  	HAL_TIM_PWM_Start(&BKLIT_T, BKLIT_CHANNEL);
		BKLIT_TIMER->BKLIT_CCR=BKLIT_INIT_LEVEL;
		break;
#endif
	default:
		break;
 80024dc:	e00f      	b.n	80024fe <Displ_BackLight+0x46>
		__NOP();
 80024de:	bf00      	nop
		break;
 80024e0:	e00e      	b.n	8002500 <Displ_BackLight+0x48>
		HAL_GPIO_WritePin(DISPL_LED_GPIO_Port, DISPL_LED_Pin, GPIO_PIN_SET);
 80024e2:	2201      	movs	r2, #1
 80024e4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80024e8:	480a      	ldr	r0, [pc, #40]	@ (8002514 <Displ_BackLight+0x5c>)
 80024ea:	f001 f82d 	bl	8003548 <HAL_GPIO_WritePin>
		break;
 80024ee:	e007      	b.n	8002500 <Displ_BackLight+0x48>
		HAL_GPIO_WritePin(DISPL_LED_GPIO_Port, DISPL_LED_Pin, GPIO_PIN_RESET);
 80024f0:	2200      	movs	r2, #0
 80024f2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80024f6:	4807      	ldr	r0, [pc, #28]	@ (8002514 <Displ_BackLight+0x5c>)
 80024f8:	f001 f826 	bl	8003548 <HAL_GPIO_WritePin>
		break;
 80024fc:	e000      	b.n	8002500 <Displ_BackLight+0x48>
		break;
 80024fe:	bf00      	nop
	}
#ifndef DISPLAY_DIMMING_MODE
	return HAL_GPIO_ReadPin(DISPL_LED_GPIO_Port, DISPL_LED_Pin);
 8002500:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002504:	4803      	ldr	r0, [pc, #12]	@ (8002514 <Displ_BackLight+0x5c>)
 8002506:	f001 f807 	bl	8003518 <HAL_GPIO_ReadPin>
 800250a:	4603      	mov	r3, r0
#else
	return (BKLIT_TIMER->BKLIT_CCR);
#endif
}
 800250c:	4618      	mov	r0, r3
 800250e:	3708      	adds	r7, #8
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	40021000 	.word	0x40021000

08002518 <Touch_HandlePenDownInterrupt>:
volatile uint8_t Touch_PenDown=0;						// set to 1 by pendown interrupt callback, reset to 0 by sw
volatile uint8_t Touch_Int_Enabled=1;					// while reading touch sensor touch interrupt handling is disabled through this flag



void Touch_HandlePenDownInterrupt (){
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
	if (Touch_Int_Enabled) {
 800251c:	4b06      	ldr	r3, [pc, #24]	@ (8002538 <Touch_HandlePenDownInterrupt+0x20>)
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b00      	cmp	r3, #0
 8002524:	d002      	beq.n	800252c <Touch_HandlePenDownInterrupt+0x14>
		Touch_PenDown=1;
 8002526:	4b05      	ldr	r3, [pc, #20]	@ (800253c <Touch_HandlePenDownInterrupt+0x24>)
 8002528:	2201      	movs	r2, #1
 800252a:	701a      	strb	r2, [r3, #0]
	}
}
 800252c:	bf00      	nop
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	20000018 	.word	0x20000018
 800253c:	200084a5 	.word	0x200084a5

08002540 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	4603      	mov	r3, r0
 8002548:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin==TOUCH_INT_Pin){
 800254a:	88fb      	ldrh	r3, [r7, #6]
 800254c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002550:	d101      	bne.n	8002556 <HAL_GPIO_EXTI_Callback+0x16>
		Touch_HandlePenDownInterrupt();
 8002552:	f7ff ffe1 	bl	8002518 <Touch_HandlePenDownInterrupt>
	}
}
 8002556:	bf00      	nop
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
	...

08002560 <Touch_Select>:

/******************************************
 * @brief	enable touch, disabling display
 * 			set SPI baudrate as needed
 ******************************************/
void Touch_Select(void) {
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
	if (TOUCH_SPI==DISPL_SPI){														// if touch and display share the same SPI port
		if (!HAL_GPIO_ReadPin(DISPL_CS_GPIO_Port, DISPL_CS_Pin)) {					// if display selected
 8002564:	2180      	movs	r1, #128	@ 0x80
 8002566:	4813      	ldr	r0, [pc, #76]	@ (80025b4 <Touch_Select+0x54>)
 8002568:	f000 ffd6 	bl	8003518 <HAL_GPIO_ReadPin>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10a      	bne.n	8002588 <Touch_Select+0x28>
			while (!Displ_SpiAvailable) {};  										// waiting for completing display communication. Flag is set to 1 by transmission-complete interrupt callback
 8002572:	bf00      	nop
 8002574:	4b10      	ldr	r3, [pc, #64]	@ (80025b8 <Touch_Select+0x58>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d0fa      	beq.n	8002574 <Touch_Select+0x14>
			HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET); 		// unselect display
 800257e:	2201      	movs	r2, #1
 8002580:	2180      	movs	r1, #128	@ 0x80
 8002582:	480c      	ldr	r0, [pc, #48]	@ (80025b4 <Touch_Select+0x54>)
 8002584:	f000 ffe0 	bl	8003548 <HAL_GPIO_WritePin>
		}
		SET_TOUCH_SPI_BAUDRATE;				   										//change SPI port speed as per display needs
 8002588:	4b0c      	ldr	r3, [pc, #48]	@ (80025bc <Touch_Select+0x5c>)
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	490b      	ldr	r1, [pc, #44]	@ (80025bc <Touch_Select+0x5c>)
 800258e:	f64f 73c7 	movw	r3, #65479	@ 0xffc7
 8002592:	4013      	ands	r3, r2
 8002594:	600b      	str	r3, [r1, #0]
 8002596:	4b09      	ldr	r3, [pc, #36]	@ (80025bc <Touch_Select+0x5c>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a08      	ldr	r2, [pc, #32]	@ (80025bc <Touch_Select+0x5c>)
 800259c:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 80025a0:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);
 80025a2:	2200      	movs	r2, #0
 80025a4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80025a8:	4802      	ldr	r0, [pc, #8]	@ (80025b4 <Touch_Select+0x54>)
 80025aa:	f000 ffcd 	bl	8003548 <HAL_GPIO_WritePin>
	}
}
 80025ae:	bf00      	nop
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	40021000 	.word	0x40021000
 80025b8:	20000010 	.word	0x20000010
 80025bc:	40013400 	.word	0x40013400

080025c0 <Touch_UnSelect>:


/******************************************
 * @brief	disable touch
 ******************************************/
void Touch_UnSelect(void) {
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
	if (TOUCH_SPI==DISPL_SPI){														// if touch and display share the same SPI port
		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);			// unselect touch
 80025c4:	2201      	movs	r2, #1
 80025c6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80025ca:	4802      	ldr	r0, [pc, #8]	@ (80025d4 <Touch_UnSelect+0x14>)
 80025cc:	f000 ffbc 	bl	8003548 <HAL_GPIO_WritePin>
	}
}
 80025d0:	bf00      	nop
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	40021000 	.word	0x40021000

080025d8 <Touch_PollAxis>:
 * @params	axis	use only one of the three options X_AXIS, Y_AXIS or Z_AXIS
 * @return			the level measured on the "axis" axis
 * 					PLEASE NOTE this function should be only for internal usage
 * 								Use Touch_GetXYTouch() instead
 *******************************************************************************/
uint16_t Touch_PollAxis(uint8_t axis) {
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	4603      	mov	r3, r0
 80025e0:	71fb      	strb	r3, [r7, #7]
	uint8_t poll[2] = {0,0};
 80025e2:	2300      	movs	r3, #0
 80025e4:	813b      	strh	r3, [r7, #8]
	uint32_t poll16;
	
	if (TOUCH_SPI==DISPL_SPI){				// if touch and display share the same SPI port
		Touch_Select();						// enable CS on touch device
 80025e6:	f7ff ffbb 	bl	8002560 <Touch_Select>
	}

	Touch_Int_Enabled=0;	//disable interrupt handling: sensor reading triggers interrupt
 80025ea:	4b17      	ldr	r3, [pc, #92]	@ (8002648 <Touch_PollAxis+0x70>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	701a      	strb	r2, [r3, #0]
	// disable interrupt while enquiring the touch sensor because it triggers the interrupt pin
	HAL_NVIC_DisableIRQ(TOUCH_INT_EXTI_IRQn);
 80025f0:	2028      	movs	r0, #40	@ 0x28
 80025f2:	f000 fabc 	bl	8002b6e <HAL_NVIC_DisableIRQ>

	HAL_SPI_Transmit(&TOUCH_SPI_PORT, &axis, 1, 10);
 80025f6:	1df9      	adds	r1, r7, #7
 80025f8:	230a      	movs	r3, #10
 80025fa:	2201      	movs	r2, #1
 80025fc:	4813      	ldr	r0, [pc, #76]	@ (800264c <Touch_PollAxis+0x74>)
 80025fe:	f004 fd4c 	bl	800709a <HAL_SPI_Transmit>
	if (HAL_SPI_Receive(&TOUCH_SPI_PORT, poll, 2, 10) == HAL_OK) {
 8002602:	f107 0108 	add.w	r1, r7, #8
 8002606:	230a      	movs	r3, #10
 8002608:	2202      	movs	r2, #2
 800260a:	4810      	ldr	r0, [pc, #64]	@ (800264c <Touch_PollAxis+0x74>)
 800260c:	f004 fe89 	bl	8007322 <HAL_SPI_Receive>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d105      	bne.n	8002622 <Touch_PollAxis+0x4a>
		poll16 = (poll[0]<<8) + poll[1];
 8002616:	7a3b      	ldrb	r3, [r7, #8]
 8002618:	021b      	lsls	r3, r3, #8
 800261a:	7a7a      	ldrb	r2, [r7, #9]
 800261c:	4413      	add	r3, r2
 800261e:	60fb      	str	r3, [r7, #12]
 8002620:	e001      	b.n	8002626 <Touch_PollAxis+0x4e>
	}
	else {
		poll16 = 0;
 8002622:	2300      	movs	r3, #0
 8002624:	60fb      	str	r3, [r7, #12]
	}

//enable back interrupt after reading the sensor
	HAL_NVIC_ClearPendingIRQ(TOUCH_INT_EXTI_IRQn);
 8002626:	2028      	movs	r0, #40	@ 0x28
 8002628:	f000 fabb 	bl	8002ba2 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(TOUCH_INT_EXTI_IRQn);
 800262c:	2028      	movs	r0, #40	@ 0x28
 800262e:	f000 fa90 	bl	8002b52 <HAL_NVIC_EnableIRQ>

	Touch_Int_Enabled=1;
 8002632:	4b05      	ldr	r3, [pc, #20]	@ (8002648 <Touch_PollAxis+0x70>)
 8002634:	2201      	movs	r2, #1
 8002636:	701a      	strb	r2, [r3, #0]

	if (TOUCH_SPI==DISPL_SPI){	// if touch and display share the same SPI port
		Touch_UnSelect();
 8002638:	f7ff ffc2 	bl	80025c0 <Touch_UnSelect>
	}

	return poll16;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	b29b      	uxth	r3, r3
}
 8002640:	4618      	mov	r0, r3
 8002642:	3710      	adds	r7, #16
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	20000018 	.word	0x20000018
 800264c:	2000036c 	.word	0x2000036c

08002650 <Touch_WaitForTouch>:
 * @params	delay	max time (ms) waiting for a touch, 0=infinite
 * #return	1 		if touched within "delay" period
 * 			0		if elapsed time with no touch
 * 					PLEASE NOTE: doesn't reset Touch recording flag
 ***********************************************************/
uint8_t Touch_WaitForTouch(uint16_t delay) {
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	4603      	mov	r3, r0
 8002658:	80fb      	strh	r3, [r7, #6]
	uint16_t starttime;

	starttime = HAL_GetTick();
 800265a:	f000 f911 	bl	8002880 <HAL_GetTick>
 800265e:	4603      	mov	r3, r0
 8002660:	81fb      	strh	r3, [r7, #14]
	while (!Touch_PenDown) {
 8002662:	e00c      	b.n	800267e <Touch_WaitForTouch+0x2e>
		if ((delay!=0) && ((HAL_GetTick()-starttime)>delay))
 8002664:	88fb      	ldrh	r3, [r7, #6]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d009      	beq.n	800267e <Touch_WaitForTouch+0x2e>
 800266a:	f000 f909 	bl	8002880 <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	89fb      	ldrh	r3, [r7, #14]
 8002672:	1ad2      	subs	r2, r2, r3
 8002674:	88fb      	ldrh	r3, [r7, #6]
 8002676:	429a      	cmp	r2, r3
 8002678:	d901      	bls.n	800267e <Touch_WaitForTouch+0x2e>
			return 0;
 800267a:	2300      	movs	r3, #0
 800267c:	e005      	b.n	800268a <Touch_WaitForTouch+0x3a>
	while (!Touch_PenDown) {
 800267e:	4b05      	ldr	r3, [pc, #20]	@ (8002694 <Touch_WaitForTouch+0x44>)
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	b2db      	uxtb	r3, r3
 8002684:	2b00      	cmp	r3, #0
 8002686:	d0ed      	beq.n	8002664 <Touch_WaitForTouch+0x14>
	};
	return 1;
 8002688:	2301      	movs	r3, #1
}
 800268a:	4618      	mov	r0, r3
 800268c:	3710      	adds	r7, #16
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	200084a5 	.word	0x200084a5

08002698 <Touch_WaitForUntouch>:
 * @params	delay	max time (ms) waiting for leaving touch, 0=infinite
 * #return	1 		if no touch on display
 * 			0		if elapsed time still touching display
 * PLEASE NOTE		if pen up, it resets the touch recording flag
 *************************************************************/
uint8_t Touch_WaitForUntouch(uint16_t delay) {
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	4603      	mov	r3, r0
 80026a0:	80fb      	strh	r3, [r7, #6]
	uint16_t starttime;
	uint8_t pen_up=0;
 80026a2:	2300      	movs	r3, #0
 80026a4:	73fb      	strb	r3, [r7, #15]

	starttime = HAL_GetTick();
 80026a6:	f000 f8eb 	bl	8002880 <HAL_GetTick>
 80026aa:	4603      	mov	r3, r0
 80026ac:	81bb      	strh	r3, [r7, #12]
	while (1) {
		if ((delay!=0) && ((HAL_GetTick()-starttime)>delay))
 80026ae:	88fb      	ldrh	r3, [r7, #6]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d009      	beq.n	80026c8 <Touch_WaitForUntouch+0x30>
 80026b4:	f000 f8e4 	bl	8002880 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	89bb      	ldrh	r3, [r7, #12]
 80026bc:	1ad2      	subs	r2, r2, r3
 80026be:	88fb      	ldrh	r3, [r7, #6]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d901      	bls.n	80026c8 <Touch_WaitForUntouch+0x30>
			return 0;
 80026c4:	2300      	movs	r3, #0
 80026c6:	e01b      	b.n	8002700 <Touch_WaitForUntouch+0x68>
		if (Touch_PollAxis(Z_AXIS)<=Z_THRESHOLD)
 80026c8:	20b0      	movs	r0, #176	@ 0xb0
 80026ca:	f7ff ff85 	bl	80025d8 <Touch_PollAxis>
 80026ce:	4603      	mov	r3, r0
 80026d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026d4:	d801      	bhi.n	80026da <Touch_WaitForUntouch+0x42>
			pen_up=1;
 80026d6:	2301      	movs	r3, #1
 80026d8:	73fb      	strb	r3, [r7, #15]
//		if (Touch_PollAxis(Y_AXIS)>=Y_THRESHOLD)     // check on Y_AXIS no more used since introducing ILI9488
//			pen_up=1;
		if (Touch_PollAxis(X_AXIS)<=X_THRESHOLD)
 80026da:	20d0      	movs	r0, #208	@ 0xd0
 80026dc:	f7ff ff7c 	bl	80025d8 <Touch_PollAxis>
 80026e0:	4603      	mov	r3, r0
 80026e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026e6:	d801      	bhi.n	80026ec <Touch_WaitForUntouch+0x54>
			pen_up=1;
 80026e8:	2301      	movs	r3, #1
 80026ea:	73fb      	strb	r3, [r7, #15]
		if (pen_up) {            //	Pen is now up: reset Touch_PenDown anyway.
 80026ec:	7bfb      	ldrb	r3, [r7, #15]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d0dd      	beq.n	80026ae <Touch_WaitForUntouch+0x16>
			HAL_Delay(10);		// pen is Up just now: wait just a few
 80026f2:	200a      	movs	r0, #10
 80026f4:	f000 f8d0 	bl	8002898 <HAL_Delay>
			Touch_PenDown=0;
 80026f8:	4b03      	ldr	r3, [pc, #12]	@ (8002708 <Touch_WaitForUntouch+0x70>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	701a      	strb	r2, [r3, #0]
			return 1;
 80026fe:	2301      	movs	r3, #1
		}
	}
}
 8002700:	4618      	mov	r0, r3
 8002702:	3710      	adds	r7, #16
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	200084a5 	.word	0x200084a5

0800270c <Touch_GotATouch>:
 * 						(use "2" in main loop activating touchgfxSignalVSync()
 * @returns		1	if recorded a touch
 * 				0	if no touch recorded
 ***********************************************************/

uint8_t Touch_GotATouch(uint8_t reset) {
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	4603      	mov	r3, r0
 8002714:	71fb      	strb	r3, [r7, #7]
static uint32_t touchTime=0;
uint8_t result = Touch_PenDown;
 8002716:	4b10      	ldr	r3, [pc, #64]	@ (8002758 <Touch_GotATouch+0x4c>)
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	73fb      	strb	r3, [r7, #15]

//	if (result)
//		result=Touch_PollTouch();

	if (reset==2){
 800271c:	79fb      	ldrb	r3, [r7, #7]
 800271e:	2b02      	cmp	r3, #2
 8002720:	d10f      	bne.n	8002742 <Touch_GotATouch+0x36>
		if ((HAL_GetTick()-touchTime) >= TOUCHGFX_TIMING)
 8002722:	f000 f8ad 	bl	8002880 <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	4b0c      	ldr	r3, [pc, #48]	@ (800275c <Touch_GotATouch+0x50>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b3b      	cmp	r3, #59	@ 0x3b
 8002730:	d905      	bls.n	800273e <Touch_GotATouch+0x32>
			touchTime=HAL_GetTick();
 8002732:	f000 f8a5 	bl	8002880 <HAL_GetTick>
 8002736:	4603      	mov	r3, r0
 8002738:	4a08      	ldr	r2, [pc, #32]	@ (800275c <Touch_GotATouch+0x50>)
 800273a:	6013      	str	r3, [r2, #0]
 800273c:	e001      	b.n	8002742 <Touch_GotATouch+0x36>
		else
			result=0;
 800273e:	2300      	movs	r3, #0
 8002740:	73fb      	strb	r3, [r7, #15]
	}
	if (reset==1)
 8002742:	79fb      	ldrb	r3, [r7, #7]
 8002744:	2b01      	cmp	r3, #1
 8002746:	d102      	bne.n	800274e <Touch_GotATouch+0x42>
		Touch_PenDown=0;
 8002748:	4b03      	ldr	r3, [pc, #12]	@ (8002758 <Touch_GotATouch+0x4c>)
 800274a:	2200      	movs	r2, #0
 800274c:	701a      	strb	r2, [r3, #0]
	return result;
 800274e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002750:	4618      	mov	r0, r3
 8002752:	3710      	adds	r7, #16
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	200084a5 	.word	0x200084a5
 800275c:	200084a8 	.word	0x200084a8

08002760 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002760:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002798 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002764:	f7ff fad2 	bl	8001d0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002768:	480c      	ldr	r0, [pc, #48]	@ (800279c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800276a:	490d      	ldr	r1, [pc, #52]	@ (80027a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800276c:	4a0d      	ldr	r2, [pc, #52]	@ (80027a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800276e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002770:	e002      	b.n	8002778 <LoopCopyDataInit>

08002772 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002772:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002774:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002776:	3304      	adds	r3, #4

08002778 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002778:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800277a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800277c:	d3f9      	bcc.n	8002772 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800277e:	4a0a      	ldr	r2, [pc, #40]	@ (80027a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002780:	4c0a      	ldr	r4, [pc, #40]	@ (80027ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8002782:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002784:	e001      	b.n	800278a <LoopFillZerobss>

08002786 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002786:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002788:	3204      	adds	r2, #4

0800278a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800278a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800278c:	d3fb      	bcc.n	8002786 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800278e:	f00a f86d 	bl	800c86c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002792:	f7fe fba7 	bl	8000ee4 <main>
  bx  lr    
 8002796:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002798:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800279c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027a0:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 80027a4:	0800f734 	.word	0x0800f734
  ldr r2, =_sbss
 80027a8:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 80027ac:	20008db8 	.word	0x20008db8

080027b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027b0:	e7fe      	b.n	80027b0 <ADC_IRQHandler>
	...

080027b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027b8:	4b0e      	ldr	r3, [pc, #56]	@ (80027f4 <HAL_Init+0x40>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a0d      	ldr	r2, [pc, #52]	@ (80027f4 <HAL_Init+0x40>)
 80027be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80027c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027c4:	4b0b      	ldr	r3, [pc, #44]	@ (80027f4 <HAL_Init+0x40>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a0a      	ldr	r2, [pc, #40]	@ (80027f4 <HAL_Init+0x40>)
 80027ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80027ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027d0:	4b08      	ldr	r3, [pc, #32]	@ (80027f4 <HAL_Init+0x40>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a07      	ldr	r2, [pc, #28]	@ (80027f4 <HAL_Init+0x40>)
 80027d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027dc:	2003      	movs	r0, #3
 80027de:	f000 f991 	bl	8002b04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027e2:	2000      	movs	r0, #0
 80027e4:	f000 f808 	bl	80027f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027e8:	f7fe ff3a 	bl	8001660 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	40023c00 	.word	0x40023c00

080027f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002800:	4b12      	ldr	r3, [pc, #72]	@ (800284c <HAL_InitTick+0x54>)
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	4b12      	ldr	r3, [pc, #72]	@ (8002850 <HAL_InitTick+0x58>)
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	4619      	mov	r1, r3
 800280a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800280e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002812:	fbb2 f3f3 	udiv	r3, r2, r3
 8002816:	4618      	mov	r0, r3
 8002818:	f000 f9b7 	bl	8002b8a <HAL_SYSTICK_Config>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e00e      	b.n	8002844 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2b0f      	cmp	r3, #15
 800282a:	d80a      	bhi.n	8002842 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800282c:	2200      	movs	r2, #0
 800282e:	6879      	ldr	r1, [r7, #4]
 8002830:	f04f 30ff 	mov.w	r0, #4294967295
 8002834:	f000 f971 	bl	8002b1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002838:	4a06      	ldr	r2, [pc, #24]	@ (8002854 <HAL_InitTick+0x5c>)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800283e:	2300      	movs	r3, #0
 8002840:	e000      	b.n	8002844 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
}
 8002844:	4618      	mov	r0, r3
 8002846:	3708      	adds	r7, #8
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	2000000c 	.word	0x2000000c
 8002850:	20000020 	.word	0x20000020
 8002854:	2000001c 	.word	0x2000001c

08002858 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800285c:	4b06      	ldr	r3, [pc, #24]	@ (8002878 <HAL_IncTick+0x20>)
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	461a      	mov	r2, r3
 8002862:	4b06      	ldr	r3, [pc, #24]	@ (800287c <HAL_IncTick+0x24>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4413      	add	r3, r2
 8002868:	4a04      	ldr	r2, [pc, #16]	@ (800287c <HAL_IncTick+0x24>)
 800286a:	6013      	str	r3, [r2, #0]
}
 800286c:	bf00      	nop
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	20000020 	.word	0x20000020
 800287c:	200084ac 	.word	0x200084ac

08002880 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  return uwTick;
 8002884:	4b03      	ldr	r3, [pc, #12]	@ (8002894 <HAL_GetTick+0x14>)
 8002886:	681b      	ldr	r3, [r3, #0]
}
 8002888:	4618      	mov	r0, r3
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	200084ac 	.word	0x200084ac

08002898 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028a0:	f7ff ffee 	bl	8002880 <HAL_GetTick>
 80028a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b0:	d005      	beq.n	80028be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028b2:	4b0a      	ldr	r3, [pc, #40]	@ (80028dc <HAL_Delay+0x44>)
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	461a      	mov	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	4413      	add	r3, r2
 80028bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028be:	bf00      	nop
 80028c0:	f7ff ffde 	bl	8002880 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d8f7      	bhi.n	80028c0 <HAL_Delay+0x28>
  {
  }
}
 80028d0:	bf00      	nop
 80028d2:	bf00      	nop
 80028d4:	3710      	adds	r7, #16
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	20000020 	.word	0x20000020

080028e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f003 0307 	and.w	r3, r3, #7
 80028ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002924 <__NVIC_SetPriorityGrouping+0x44>)
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028f6:	68ba      	ldr	r2, [r7, #8]
 80028f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028fc:	4013      	ands	r3, r2
 80028fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002908:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800290c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002910:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002912:	4a04      	ldr	r2, [pc, #16]	@ (8002924 <__NVIC_SetPriorityGrouping+0x44>)
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	60d3      	str	r3, [r2, #12]
}
 8002918:	bf00      	nop
 800291a:	3714      	adds	r7, #20
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr
 8002924:	e000ed00 	.word	0xe000ed00

08002928 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800292c:	4b04      	ldr	r3, [pc, #16]	@ (8002940 <__NVIC_GetPriorityGrouping+0x18>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	0a1b      	lsrs	r3, r3, #8
 8002932:	f003 0307 	and.w	r3, r3, #7
}
 8002936:	4618      	mov	r0, r3
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr
 8002940:	e000ed00 	.word	0xe000ed00

08002944 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	4603      	mov	r3, r0
 800294c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800294e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002952:	2b00      	cmp	r3, #0
 8002954:	db0b      	blt.n	800296e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002956:	79fb      	ldrb	r3, [r7, #7]
 8002958:	f003 021f 	and.w	r2, r3, #31
 800295c:	4907      	ldr	r1, [pc, #28]	@ (800297c <__NVIC_EnableIRQ+0x38>)
 800295e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002962:	095b      	lsrs	r3, r3, #5
 8002964:	2001      	movs	r0, #1
 8002966:	fa00 f202 	lsl.w	r2, r0, r2
 800296a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800296e:	bf00      	nop
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	e000e100 	.word	0xe000e100

08002980 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	4603      	mov	r3, r0
 8002988:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800298a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298e:	2b00      	cmp	r3, #0
 8002990:	db12      	blt.n	80029b8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002992:	79fb      	ldrb	r3, [r7, #7]
 8002994:	f003 021f 	and.w	r2, r3, #31
 8002998:	490a      	ldr	r1, [pc, #40]	@ (80029c4 <__NVIC_DisableIRQ+0x44>)
 800299a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299e:	095b      	lsrs	r3, r3, #5
 80029a0:	2001      	movs	r0, #1
 80029a2:	fa00 f202 	lsl.w	r2, r0, r2
 80029a6:	3320      	adds	r3, #32
 80029a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80029ac:	f3bf 8f4f 	dsb	sy
}
 80029b0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80029b2:	f3bf 8f6f 	isb	sy
}
 80029b6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr
 80029c4:	e000e100 	.word	0xe000e100

080029c8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	4603      	mov	r3, r0
 80029d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	db0c      	blt.n	80029f4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029da:	79fb      	ldrb	r3, [r7, #7]
 80029dc:	f003 021f 	and.w	r2, r3, #31
 80029e0:	4907      	ldr	r1, [pc, #28]	@ (8002a00 <__NVIC_ClearPendingIRQ+0x38>)
 80029e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e6:	095b      	lsrs	r3, r3, #5
 80029e8:	2001      	movs	r0, #1
 80029ea:	fa00 f202 	lsl.w	r2, r0, r2
 80029ee:	3360      	adds	r3, #96	@ 0x60
 80029f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr
 8002a00:	e000e100 	.word	0xe000e100

08002a04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	6039      	str	r1, [r7, #0]
 8002a0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	db0a      	blt.n	8002a2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	b2da      	uxtb	r2, r3
 8002a1c:	490c      	ldr	r1, [pc, #48]	@ (8002a50 <__NVIC_SetPriority+0x4c>)
 8002a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a22:	0112      	lsls	r2, r2, #4
 8002a24:	b2d2      	uxtb	r2, r2
 8002a26:	440b      	add	r3, r1
 8002a28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a2c:	e00a      	b.n	8002a44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	b2da      	uxtb	r2, r3
 8002a32:	4908      	ldr	r1, [pc, #32]	@ (8002a54 <__NVIC_SetPriority+0x50>)
 8002a34:	79fb      	ldrb	r3, [r7, #7]
 8002a36:	f003 030f 	and.w	r3, r3, #15
 8002a3a:	3b04      	subs	r3, #4
 8002a3c:	0112      	lsls	r2, r2, #4
 8002a3e:	b2d2      	uxtb	r2, r2
 8002a40:	440b      	add	r3, r1
 8002a42:	761a      	strb	r2, [r3, #24]
}
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr
 8002a50:	e000e100 	.word	0xe000e100
 8002a54:	e000ed00 	.word	0xe000ed00

08002a58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b089      	sub	sp, #36	@ 0x24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f003 0307 	and.w	r3, r3, #7
 8002a6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	f1c3 0307 	rsb	r3, r3, #7
 8002a72:	2b04      	cmp	r3, #4
 8002a74:	bf28      	it	cs
 8002a76:	2304      	movcs	r3, #4
 8002a78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	3304      	adds	r3, #4
 8002a7e:	2b06      	cmp	r3, #6
 8002a80:	d902      	bls.n	8002a88 <NVIC_EncodePriority+0x30>
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	3b03      	subs	r3, #3
 8002a86:	e000      	b.n	8002a8a <NVIC_EncodePriority+0x32>
 8002a88:	2300      	movs	r3, #0
 8002a8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	fa02 f303 	lsl.w	r3, r2, r3
 8002a96:	43da      	mvns	r2, r3
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	401a      	ands	r2, r3
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002aa0:	f04f 31ff 	mov.w	r1, #4294967295
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aaa:	43d9      	mvns	r1, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ab0:	4313      	orrs	r3, r2
         );
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3724      	adds	r7, #36	@ 0x24
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
	...

08002ac0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	3b01      	subs	r3, #1
 8002acc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ad0:	d301      	bcc.n	8002ad6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e00f      	b.n	8002af6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ad6:	4a0a      	ldr	r2, [pc, #40]	@ (8002b00 <SysTick_Config+0x40>)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	3b01      	subs	r3, #1
 8002adc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ade:	210f      	movs	r1, #15
 8002ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ae4:	f7ff ff8e 	bl	8002a04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ae8:	4b05      	ldr	r3, [pc, #20]	@ (8002b00 <SysTick_Config+0x40>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002aee:	4b04      	ldr	r3, [pc, #16]	@ (8002b00 <SysTick_Config+0x40>)
 8002af0:	2207      	movs	r2, #7
 8002af2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	e000e010 	.word	0xe000e010

08002b04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f7ff fee7 	bl	80028e0 <__NVIC_SetPriorityGrouping>
}
 8002b12:	bf00      	nop
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b086      	sub	sp, #24
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	4603      	mov	r3, r0
 8002b22:	60b9      	str	r1, [r7, #8]
 8002b24:	607a      	str	r2, [r7, #4]
 8002b26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b2c:	f7ff fefc 	bl	8002928 <__NVIC_GetPriorityGrouping>
 8002b30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	68b9      	ldr	r1, [r7, #8]
 8002b36:	6978      	ldr	r0, [r7, #20]
 8002b38:	f7ff ff8e 	bl	8002a58 <NVIC_EncodePriority>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b42:	4611      	mov	r1, r2
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7ff ff5d 	bl	8002a04 <__NVIC_SetPriority>
}
 8002b4a:	bf00      	nop
 8002b4c:	3718      	adds	r7, #24
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b082      	sub	sp, #8
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	4603      	mov	r3, r0
 8002b5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7ff feef 	bl	8002944 <__NVIC_EnableIRQ>
}
 8002b66:	bf00      	nop
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b082      	sub	sp, #8
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	4603      	mov	r3, r0
 8002b76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7ff feff 	bl	8002980 <__NVIC_DisableIRQ>
}
 8002b82:	bf00      	nop
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b082      	sub	sp, #8
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f7ff ff94 	bl	8002ac0 <SysTick_Config>
 8002b98:	4603      	mov	r3, r0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3708      	adds	r7, #8
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	b082      	sub	sp, #8
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	4603      	mov	r3, r0
 8002baa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7ff ff09 	bl	80029c8 <__NVIC_ClearPendingIRQ>
}
 8002bb6:	bf00      	nop
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b082      	sub	sp, #8
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d101      	bne.n	8002bd0 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e00e      	b.n	8002bee <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	795b      	ldrb	r3, [r3, #5]
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d105      	bne.n	8002be6 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f7fe fd65 	bl	80016b0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2201      	movs	r2, #1
 8002bea:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
	...

08002bf8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b086      	sub	sp, #24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c00:	2300      	movs	r3, #0
 8002c02:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002c04:	f7ff fe3c 	bl	8002880 <HAL_GetTick>
 8002c08:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d101      	bne.n	8002c14 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e099      	b.n	8002d48 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2202      	movs	r2, #2
 8002c18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f022 0201 	bic.w	r2, r2, #1
 8002c32:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c34:	e00f      	b.n	8002c56 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c36:	f7ff fe23 	bl	8002880 <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	2b05      	cmp	r3, #5
 8002c42:	d908      	bls.n	8002c56 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2220      	movs	r2, #32
 8002c48:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2203      	movs	r2, #3
 8002c4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e078      	b.n	8002d48 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0301 	and.w	r3, r3, #1
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d1e8      	bne.n	8002c36 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c6c:	697a      	ldr	r2, [r7, #20]
 8002c6e:	4b38      	ldr	r3, [pc, #224]	@ (8002d50 <HAL_DMA_Init+0x158>)
 8002c70:	4013      	ands	r3, r2
 8002c72:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685a      	ldr	r2, [r3, #4]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c82:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	691b      	ldr	r3, [r3, #16]
 8002c88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ca2:	697a      	ldr	r2, [r7, #20]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cac:	2b04      	cmp	r3, #4
 8002cae:	d107      	bne.n	8002cc0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	697a      	ldr	r2, [r7, #20]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	697a      	ldr	r2, [r7, #20]
 8002cc6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	f023 0307 	bic.w	r3, r3, #7
 8002cd6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cdc:	697a      	ldr	r2, [r7, #20]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d117      	bne.n	8002d1a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cee:	697a      	ldr	r2, [r7, #20]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d00e      	beq.n	8002d1a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f000 fa0b 	bl	8003118 <DMA_CheckFifoParam>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d008      	beq.n	8002d1a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2240      	movs	r2, #64	@ 0x40
 8002d0c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2201      	movs	r2, #1
 8002d12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002d16:	2301      	movs	r3, #1
 8002d18:	e016      	b.n	8002d48 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 f9c2 	bl	80030ac <DMA_CalcBaseAndBitshift>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d30:	223f      	movs	r2, #63	@ 0x3f
 8002d32:	409a      	lsls	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3718      	adds	r7, #24
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	f010803f 	.word	0xf010803f

08002d54 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d004      	beq.n	8002d72 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2280      	movs	r2, #128	@ 0x80
 8002d6c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e00c      	b.n	8002d8c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2205      	movs	r2, #5
 8002d76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f022 0201 	bic.w	r2, r2, #1
 8002d88:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002da0:	2300      	movs	r3, #0
 8002da2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002da4:	4b8e      	ldr	r3, [pc, #568]	@ (8002fe0 <HAL_DMA_IRQHandler+0x248>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a8e      	ldr	r2, [pc, #568]	@ (8002fe4 <HAL_DMA_IRQHandler+0x24c>)
 8002daa:	fba2 2303 	umull	r2, r3, r2, r3
 8002dae:	0a9b      	lsrs	r3, r3, #10
 8002db0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002db6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dc2:	2208      	movs	r2, #8
 8002dc4:	409a      	lsls	r2, r3
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d01a      	beq.n	8002e04 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0304 	and.w	r3, r3, #4
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d013      	beq.n	8002e04 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f022 0204 	bic.w	r2, r2, #4
 8002dea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002df0:	2208      	movs	r2, #8
 8002df2:	409a      	lsls	r2, r3
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dfc:	f043 0201 	orr.w	r2, r3, #1
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e08:	2201      	movs	r2, #1
 8002e0a:	409a      	lsls	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d012      	beq.n	8002e3a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00b      	beq.n	8002e3a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e26:	2201      	movs	r2, #1
 8002e28:	409a      	lsls	r2, r3
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e32:	f043 0202 	orr.w	r2, r3, #2
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e3e:	2204      	movs	r2, #4
 8002e40:	409a      	lsls	r2, r3
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	4013      	ands	r3, r2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d012      	beq.n	8002e70 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d00b      	beq.n	8002e70 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e5c:	2204      	movs	r2, #4
 8002e5e:	409a      	lsls	r2, r3
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e68:	f043 0204 	orr.w	r2, r3, #4
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e74:	2210      	movs	r2, #16
 8002e76:	409a      	lsls	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d043      	beq.n	8002f08 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0308 	and.w	r3, r3, #8
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d03c      	beq.n	8002f08 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e92:	2210      	movs	r2, #16
 8002e94:	409a      	lsls	r2, r3
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d018      	beq.n	8002eda <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d108      	bne.n	8002ec8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d024      	beq.n	8002f08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	4798      	blx	r3
 8002ec6:	e01f      	b.n	8002f08 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d01b      	beq.n	8002f08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	4798      	blx	r3
 8002ed8:	e016      	b.n	8002f08 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d107      	bne.n	8002ef8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f022 0208 	bic.w	r2, r2, #8
 8002ef6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d003      	beq.n	8002f08 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f0c:	2220      	movs	r2, #32
 8002f0e:	409a      	lsls	r2, r3
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	4013      	ands	r3, r2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f000 808f 	beq.w	8003038 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0310 	and.w	r3, r3, #16
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f000 8087 	beq.w	8003038 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f2e:	2220      	movs	r2, #32
 8002f30:	409a      	lsls	r2, r3
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b05      	cmp	r3, #5
 8002f40:	d136      	bne.n	8002fb0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f022 0216 	bic.w	r2, r2, #22
 8002f50:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	695a      	ldr	r2, [r3, #20]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f60:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d103      	bne.n	8002f72 <HAL_DMA_IRQHandler+0x1da>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d007      	beq.n	8002f82 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f022 0208 	bic.w	r2, r2, #8
 8002f80:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f86:	223f      	movs	r2, #63	@ 0x3f
 8002f88:	409a      	lsls	r2, r3
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2201      	movs	r2, #1
 8002f92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d07e      	beq.n	80030a4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	4798      	blx	r3
        }
        return;
 8002fae:	e079      	b.n	80030a4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d01d      	beq.n	8002ffa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d10d      	bne.n	8002fe8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d031      	beq.n	8003038 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	4798      	blx	r3
 8002fdc:	e02c      	b.n	8003038 <HAL_DMA_IRQHandler+0x2a0>
 8002fde:	bf00      	nop
 8002fe0:	2000000c 	.word	0x2000000c
 8002fe4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d023      	beq.n	8003038 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	4798      	blx	r3
 8002ff8:	e01e      	b.n	8003038 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003004:	2b00      	cmp	r3, #0
 8003006:	d10f      	bne.n	8003028 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f022 0210 	bic.w	r2, r2, #16
 8003016:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800302c:	2b00      	cmp	r3, #0
 800302e:	d003      	beq.n	8003038 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800303c:	2b00      	cmp	r3, #0
 800303e:	d032      	beq.n	80030a6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003044:	f003 0301 	and.w	r3, r3, #1
 8003048:	2b00      	cmp	r3, #0
 800304a:	d022      	beq.n	8003092 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2205      	movs	r2, #5
 8003050:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f022 0201 	bic.w	r2, r2, #1
 8003062:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	3301      	adds	r3, #1
 8003068:	60bb      	str	r3, [r7, #8]
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	429a      	cmp	r2, r3
 800306e:	d307      	bcc.n	8003080 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1f2      	bne.n	8003064 <HAL_DMA_IRQHandler+0x2cc>
 800307e:	e000      	b.n	8003082 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003080:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2201      	movs	r2, #1
 8003086:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003096:	2b00      	cmp	r3, #0
 8003098:	d005      	beq.n	80030a6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	4798      	blx	r3
 80030a2:	e000      	b.n	80030a6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80030a4:	bf00      	nop
    }
  }
}
 80030a6:	3718      	adds	r7, #24
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b085      	sub	sp, #20
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	3b10      	subs	r3, #16
 80030bc:	4a14      	ldr	r2, [pc, #80]	@ (8003110 <DMA_CalcBaseAndBitshift+0x64>)
 80030be:	fba2 2303 	umull	r2, r3, r2, r3
 80030c2:	091b      	lsrs	r3, r3, #4
 80030c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80030c6:	4a13      	ldr	r2, [pc, #76]	@ (8003114 <DMA_CalcBaseAndBitshift+0x68>)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	4413      	add	r3, r2
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	461a      	mov	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2b03      	cmp	r3, #3
 80030d8:	d909      	bls.n	80030ee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80030e2:	f023 0303 	bic.w	r3, r3, #3
 80030e6:	1d1a      	adds	r2, r3, #4
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	659a      	str	r2, [r3, #88]	@ 0x58
 80030ec:	e007      	b.n	80030fe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80030f6:	f023 0303 	bic.w	r3, r3, #3
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003102:	4618      	mov	r0, r3
 8003104:	3714      	adds	r7, #20
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	aaaaaaab 	.word	0xaaaaaaab
 8003114:	0800f3a8 	.word	0x0800f3a8

08003118 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003118:	b480      	push	{r7}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003120:	2300      	movs	r3, #0
 8003122:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003128:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d11f      	bne.n	8003172 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	2b03      	cmp	r3, #3
 8003136:	d856      	bhi.n	80031e6 <DMA_CheckFifoParam+0xce>
 8003138:	a201      	add	r2, pc, #4	@ (adr r2, 8003140 <DMA_CheckFifoParam+0x28>)
 800313a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800313e:	bf00      	nop
 8003140:	08003151 	.word	0x08003151
 8003144:	08003163 	.word	0x08003163
 8003148:	08003151 	.word	0x08003151
 800314c:	080031e7 	.word	0x080031e7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003154:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d046      	beq.n	80031ea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003160:	e043      	b.n	80031ea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003166:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800316a:	d140      	bne.n	80031ee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003170:	e03d      	b.n	80031ee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800317a:	d121      	bne.n	80031c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	2b03      	cmp	r3, #3
 8003180:	d837      	bhi.n	80031f2 <DMA_CheckFifoParam+0xda>
 8003182:	a201      	add	r2, pc, #4	@ (adr r2, 8003188 <DMA_CheckFifoParam+0x70>)
 8003184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003188:	08003199 	.word	0x08003199
 800318c:	0800319f 	.word	0x0800319f
 8003190:	08003199 	.word	0x08003199
 8003194:	080031b1 	.word	0x080031b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	73fb      	strb	r3, [r7, #15]
      break;
 800319c:	e030      	b.n	8003200 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031a2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d025      	beq.n	80031f6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031ae:	e022      	b.n	80031f6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031b4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80031b8:	d11f      	bne.n	80031fa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80031be:	e01c      	b.n	80031fa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d903      	bls.n	80031ce <DMA_CheckFifoParam+0xb6>
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	2b03      	cmp	r3, #3
 80031ca:	d003      	beq.n	80031d4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80031cc:	e018      	b.n	8003200 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	73fb      	strb	r3, [r7, #15]
      break;
 80031d2:	e015      	b.n	8003200 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00e      	beq.n	80031fe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	73fb      	strb	r3, [r7, #15]
      break;
 80031e4:	e00b      	b.n	80031fe <DMA_CheckFifoParam+0xe6>
      break;
 80031e6:	bf00      	nop
 80031e8:	e00a      	b.n	8003200 <DMA_CheckFifoParam+0xe8>
      break;
 80031ea:	bf00      	nop
 80031ec:	e008      	b.n	8003200 <DMA_CheckFifoParam+0xe8>
      break;
 80031ee:	bf00      	nop
 80031f0:	e006      	b.n	8003200 <DMA_CheckFifoParam+0xe8>
      break;
 80031f2:	bf00      	nop
 80031f4:	e004      	b.n	8003200 <DMA_CheckFifoParam+0xe8>
      break;
 80031f6:	bf00      	nop
 80031f8:	e002      	b.n	8003200 <DMA_CheckFifoParam+0xe8>
      break;   
 80031fa:	bf00      	nop
 80031fc:	e000      	b.n	8003200 <DMA_CheckFifoParam+0xe8>
      break;
 80031fe:	bf00      	nop
    }
  } 
  
  return status; 
 8003200:	7bfb      	ldrb	r3, [r7, #15]
}
 8003202:	4618      	mov	r0, r3
 8003204:	3714      	adds	r7, #20
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop

08003210 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003210:	b480      	push	{r7}
 8003212:	b089      	sub	sp, #36	@ 0x24
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800321a:	2300      	movs	r3, #0
 800321c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800321e:	2300      	movs	r3, #0
 8003220:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003222:	2300      	movs	r3, #0
 8003224:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003226:	2300      	movs	r3, #0
 8003228:	61fb      	str	r3, [r7, #28]
 800322a:	e159      	b.n	80034e0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800322c:	2201      	movs	r2, #1
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	697a      	ldr	r2, [r7, #20]
 800323c:	4013      	ands	r3, r2
 800323e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	429a      	cmp	r2, r3
 8003246:	f040 8148 	bne.w	80034da <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f003 0303 	and.w	r3, r3, #3
 8003252:	2b01      	cmp	r3, #1
 8003254:	d005      	beq.n	8003262 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800325e:	2b02      	cmp	r3, #2
 8003260:	d130      	bne.n	80032c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	005b      	lsls	r3, r3, #1
 800326c:	2203      	movs	r2, #3
 800326e:	fa02 f303 	lsl.w	r3, r2, r3
 8003272:	43db      	mvns	r3, r3
 8003274:	69ba      	ldr	r2, [r7, #24]
 8003276:	4013      	ands	r3, r2
 8003278:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	68da      	ldr	r2, [r3, #12]
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	005b      	lsls	r3, r3, #1
 8003282:	fa02 f303 	lsl.w	r3, r2, r3
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	4313      	orrs	r3, r2
 800328a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	69ba      	ldr	r2, [r7, #24]
 8003290:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003298:	2201      	movs	r2, #1
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	fa02 f303 	lsl.w	r3, r2, r3
 80032a0:	43db      	mvns	r3, r3
 80032a2:	69ba      	ldr	r2, [r7, #24]
 80032a4:	4013      	ands	r3, r2
 80032a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	091b      	lsrs	r3, r3, #4
 80032ae:	f003 0201 	and.w	r2, r3, #1
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	fa02 f303 	lsl.w	r3, r2, r3
 80032b8:	69ba      	ldr	r2, [r7, #24]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f003 0303 	and.w	r3, r3, #3
 80032cc:	2b03      	cmp	r3, #3
 80032ce:	d017      	beq.n	8003300 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	2203      	movs	r2, #3
 80032dc:	fa02 f303 	lsl.w	r3, r2, r3
 80032e0:	43db      	mvns	r3, r3
 80032e2:	69ba      	ldr	r2, [r7, #24]
 80032e4:	4013      	ands	r3, r2
 80032e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	689a      	ldr	r2, [r3, #8]
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	fa02 f303 	lsl.w	r3, r2, r3
 80032f4:	69ba      	ldr	r2, [r7, #24]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f003 0303 	and.w	r3, r3, #3
 8003308:	2b02      	cmp	r3, #2
 800330a:	d123      	bne.n	8003354 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	08da      	lsrs	r2, r3, #3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	3208      	adds	r2, #8
 8003314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003318:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	f003 0307 	and.w	r3, r3, #7
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	220f      	movs	r2, #15
 8003324:	fa02 f303 	lsl.w	r3, r2, r3
 8003328:	43db      	mvns	r3, r3
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	4013      	ands	r3, r2
 800332e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	691a      	ldr	r2, [r3, #16]
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	f003 0307 	and.w	r3, r3, #7
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	fa02 f303 	lsl.w	r3, r2, r3
 8003340:	69ba      	ldr	r2, [r7, #24]
 8003342:	4313      	orrs	r3, r2
 8003344:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	08da      	lsrs	r2, r3, #3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	3208      	adds	r2, #8
 800334e:	69b9      	ldr	r1, [r7, #24]
 8003350:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	005b      	lsls	r3, r3, #1
 800335e:	2203      	movs	r2, #3
 8003360:	fa02 f303 	lsl.w	r3, r2, r3
 8003364:	43db      	mvns	r3, r3
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	4013      	ands	r3, r2
 800336a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f003 0203 	and.w	r2, r3, #3
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	005b      	lsls	r3, r3, #1
 8003378:	fa02 f303 	lsl.w	r3, r2, r3
 800337c:	69ba      	ldr	r2, [r7, #24]
 800337e:	4313      	orrs	r3, r2
 8003380:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003390:	2b00      	cmp	r3, #0
 8003392:	f000 80a2 	beq.w	80034da <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003396:	2300      	movs	r3, #0
 8003398:	60fb      	str	r3, [r7, #12]
 800339a:	4b57      	ldr	r3, [pc, #348]	@ (80034f8 <HAL_GPIO_Init+0x2e8>)
 800339c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800339e:	4a56      	ldr	r2, [pc, #344]	@ (80034f8 <HAL_GPIO_Init+0x2e8>)
 80033a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80033a6:	4b54      	ldr	r3, [pc, #336]	@ (80034f8 <HAL_GPIO_Init+0x2e8>)
 80033a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033ae:	60fb      	str	r3, [r7, #12]
 80033b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033b2:	4a52      	ldr	r2, [pc, #328]	@ (80034fc <HAL_GPIO_Init+0x2ec>)
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	089b      	lsrs	r3, r3, #2
 80033b8:	3302      	adds	r3, #2
 80033ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	f003 0303 	and.w	r3, r3, #3
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	220f      	movs	r2, #15
 80033ca:	fa02 f303 	lsl.w	r3, r2, r3
 80033ce:	43db      	mvns	r3, r3
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	4013      	ands	r3, r2
 80033d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a49      	ldr	r2, [pc, #292]	@ (8003500 <HAL_GPIO_Init+0x2f0>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d019      	beq.n	8003412 <HAL_GPIO_Init+0x202>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a48      	ldr	r2, [pc, #288]	@ (8003504 <HAL_GPIO_Init+0x2f4>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d013      	beq.n	800340e <HAL_GPIO_Init+0x1fe>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a47      	ldr	r2, [pc, #284]	@ (8003508 <HAL_GPIO_Init+0x2f8>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d00d      	beq.n	800340a <HAL_GPIO_Init+0x1fa>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a46      	ldr	r2, [pc, #280]	@ (800350c <HAL_GPIO_Init+0x2fc>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d007      	beq.n	8003406 <HAL_GPIO_Init+0x1f6>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a45      	ldr	r2, [pc, #276]	@ (8003510 <HAL_GPIO_Init+0x300>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d101      	bne.n	8003402 <HAL_GPIO_Init+0x1f2>
 80033fe:	2304      	movs	r3, #4
 8003400:	e008      	b.n	8003414 <HAL_GPIO_Init+0x204>
 8003402:	2307      	movs	r3, #7
 8003404:	e006      	b.n	8003414 <HAL_GPIO_Init+0x204>
 8003406:	2303      	movs	r3, #3
 8003408:	e004      	b.n	8003414 <HAL_GPIO_Init+0x204>
 800340a:	2302      	movs	r3, #2
 800340c:	e002      	b.n	8003414 <HAL_GPIO_Init+0x204>
 800340e:	2301      	movs	r3, #1
 8003410:	e000      	b.n	8003414 <HAL_GPIO_Init+0x204>
 8003412:	2300      	movs	r3, #0
 8003414:	69fa      	ldr	r2, [r7, #28]
 8003416:	f002 0203 	and.w	r2, r2, #3
 800341a:	0092      	lsls	r2, r2, #2
 800341c:	4093      	lsls	r3, r2
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	4313      	orrs	r3, r2
 8003422:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003424:	4935      	ldr	r1, [pc, #212]	@ (80034fc <HAL_GPIO_Init+0x2ec>)
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	089b      	lsrs	r3, r3, #2
 800342a:	3302      	adds	r3, #2
 800342c:	69ba      	ldr	r2, [r7, #24]
 800342e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003432:	4b38      	ldr	r3, [pc, #224]	@ (8003514 <HAL_GPIO_Init+0x304>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	43db      	mvns	r3, r3
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	4013      	ands	r3, r2
 8003440:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d003      	beq.n	8003456 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	4313      	orrs	r3, r2
 8003454:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003456:	4a2f      	ldr	r2, [pc, #188]	@ (8003514 <HAL_GPIO_Init+0x304>)
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800345c:	4b2d      	ldr	r3, [pc, #180]	@ (8003514 <HAL_GPIO_Init+0x304>)
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	43db      	mvns	r3, r3
 8003466:	69ba      	ldr	r2, [r7, #24]
 8003468:	4013      	ands	r3, r2
 800346a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d003      	beq.n	8003480 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	4313      	orrs	r3, r2
 800347e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003480:	4a24      	ldr	r2, [pc, #144]	@ (8003514 <HAL_GPIO_Init+0x304>)
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003486:	4b23      	ldr	r3, [pc, #140]	@ (8003514 <HAL_GPIO_Init+0x304>)
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	43db      	mvns	r3, r3
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	4013      	ands	r3, r2
 8003494:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d003      	beq.n	80034aa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80034a2:	69ba      	ldr	r2, [r7, #24]
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034aa:	4a1a      	ldr	r2, [pc, #104]	@ (8003514 <HAL_GPIO_Init+0x304>)
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034b0:	4b18      	ldr	r3, [pc, #96]	@ (8003514 <HAL_GPIO_Init+0x304>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	43db      	mvns	r3, r3
 80034ba:	69ba      	ldr	r2, [r7, #24]
 80034bc:	4013      	ands	r3, r2
 80034be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d003      	beq.n	80034d4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034d4:	4a0f      	ldr	r2, [pc, #60]	@ (8003514 <HAL_GPIO_Init+0x304>)
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	3301      	adds	r3, #1
 80034de:	61fb      	str	r3, [r7, #28]
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	2b0f      	cmp	r3, #15
 80034e4:	f67f aea2 	bls.w	800322c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034e8:	bf00      	nop
 80034ea:	bf00      	nop
 80034ec:	3724      	adds	r7, #36	@ 0x24
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	40023800 	.word	0x40023800
 80034fc:	40013800 	.word	0x40013800
 8003500:	40020000 	.word	0x40020000
 8003504:	40020400 	.word	0x40020400
 8003508:	40020800 	.word	0x40020800
 800350c:	40020c00 	.word	0x40020c00
 8003510:	40021000 	.word	0x40021000
 8003514:	40013c00 	.word	0x40013c00

08003518 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003518:	b480      	push	{r7}
 800351a:	b085      	sub	sp, #20
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	460b      	mov	r3, r1
 8003522:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	691a      	ldr	r2, [r3, #16]
 8003528:	887b      	ldrh	r3, [r7, #2]
 800352a:	4013      	ands	r3, r2
 800352c:	2b00      	cmp	r3, #0
 800352e:	d002      	beq.n	8003536 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003530:	2301      	movs	r3, #1
 8003532:	73fb      	strb	r3, [r7, #15]
 8003534:	e001      	b.n	800353a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003536:	2300      	movs	r3, #0
 8003538:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800353a:	7bfb      	ldrb	r3, [r7, #15]
}
 800353c:	4618      	mov	r0, r3
 800353e:	3714      	adds	r7, #20
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	460b      	mov	r3, r1
 8003552:	807b      	strh	r3, [r7, #2]
 8003554:	4613      	mov	r3, r2
 8003556:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003558:	787b      	ldrb	r3, [r7, #1]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d003      	beq.n	8003566 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800355e:	887a      	ldrh	r2, [r7, #2]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003564:	e003      	b.n	800356e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003566:	887b      	ldrh	r3, [r7, #2]
 8003568:	041a      	lsls	r2, r3, #16
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	619a      	str	r2, [r3, #24]
}
 800356e:	bf00      	nop
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
	...

0800357c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	4603      	mov	r3, r0
 8003584:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003586:	4b08      	ldr	r3, [pc, #32]	@ (80035a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003588:	695a      	ldr	r2, [r3, #20]
 800358a:	88fb      	ldrh	r3, [r7, #6]
 800358c:	4013      	ands	r3, r2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d006      	beq.n	80035a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003592:	4a05      	ldr	r2, [pc, #20]	@ (80035a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003594:	88fb      	ldrh	r3, [r7, #6]
 8003596:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003598:	88fb      	ldrh	r3, [r7, #6]
 800359a:	4618      	mov	r0, r3
 800359c:	f7fe ffd0 	bl	8002540 <HAL_GPIO_EXTI_Callback>
  }
}
 80035a0:	bf00      	nop
 80035a2:	3708      	adds	r7, #8
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	40013c00 	.word	0x40013c00

080035ac <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b086      	sub	sp, #24
 80035b0:	af02      	add	r7, sp, #8
 80035b2:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e059      	b.n	8003672 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d106      	bne.n	80035de <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f008 f819 	bl	800b610 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2203      	movs	r2, #3
 80035e2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035ec:	d102      	bne.n	80035f4 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4618      	mov	r0, r3
 80035fa:	f004 fec4 	bl	8008386 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6818      	ldr	r0, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	7c1a      	ldrb	r2, [r3, #16]
 8003606:	f88d 2000 	strb.w	r2, [sp]
 800360a:	3304      	adds	r3, #4
 800360c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800360e:	f004 fe45 	bl	800829c <USB_CoreInit>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d005      	beq.n	8003624 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2202      	movs	r2, #2
 800361c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e026      	b.n	8003672 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2101      	movs	r1, #1
 800362a:	4618      	mov	r0, r3
 800362c:	f004 febc 	bl	80083a8 <USB_SetCurrentMode>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d005      	beq.n	8003642 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2202      	movs	r2, #2
 800363a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e017      	b.n	8003672 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6818      	ldr	r0, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	7c1a      	ldrb	r2, [r3, #16]
 800364a:	f88d 2000 	strb.w	r2, [sp]
 800364e:	3304      	adds	r3, #4
 8003650:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003652:	f005 f865 	bl	8008720 <USB_HostInit>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d005      	beq.n	8003668 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2202      	movs	r2, #2
 8003660:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e004      	b.n	8003672 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3710      	adds	r7, #16
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800367a:	b590      	push	{r4, r7, lr}
 800367c:	b08b      	sub	sp, #44	@ 0x2c
 800367e:	af04      	add	r7, sp, #16
 8003680:	6078      	str	r0, [r7, #4]
 8003682:	4608      	mov	r0, r1
 8003684:	4611      	mov	r1, r2
 8003686:	461a      	mov	r2, r3
 8003688:	4603      	mov	r3, r0
 800368a:	70fb      	strb	r3, [r7, #3]
 800368c:	460b      	mov	r3, r1
 800368e:	70bb      	strb	r3, [r7, #2]
 8003690:	4613      	mov	r3, r2
 8003692:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8003694:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003696:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d101      	bne.n	80036a6 <HAL_HCD_HC_Init+0x2c>
 80036a2:	2302      	movs	r3, #2
 80036a4:	e09d      	b.n	80037e2 <HAL_HCD_HC_Init+0x168>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2201      	movs	r2, #1
 80036aa:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80036ae:	78fa      	ldrb	r2, [r7, #3]
 80036b0:	6879      	ldr	r1, [r7, #4]
 80036b2:	4613      	mov	r3, r2
 80036b4:	011b      	lsls	r3, r3, #4
 80036b6:	1a9b      	subs	r3, r3, r2
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	440b      	add	r3, r1
 80036bc:	3319      	adds	r3, #25
 80036be:	2200      	movs	r2, #0
 80036c0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80036c2:	78fa      	ldrb	r2, [r7, #3]
 80036c4:	6879      	ldr	r1, [r7, #4]
 80036c6:	4613      	mov	r3, r2
 80036c8:	011b      	lsls	r3, r3, #4
 80036ca:	1a9b      	subs	r3, r3, r2
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	440b      	add	r3, r1
 80036d0:	3314      	adds	r3, #20
 80036d2:	787a      	ldrb	r2, [r7, #1]
 80036d4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80036d6:	78fa      	ldrb	r2, [r7, #3]
 80036d8:	6879      	ldr	r1, [r7, #4]
 80036da:	4613      	mov	r3, r2
 80036dc:	011b      	lsls	r3, r3, #4
 80036de:	1a9b      	subs	r3, r3, r2
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	440b      	add	r3, r1
 80036e4:	3315      	adds	r3, #21
 80036e6:	78fa      	ldrb	r2, [r7, #3]
 80036e8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80036ea:	78fa      	ldrb	r2, [r7, #3]
 80036ec:	6879      	ldr	r1, [r7, #4]
 80036ee:	4613      	mov	r3, r2
 80036f0:	011b      	lsls	r3, r3, #4
 80036f2:	1a9b      	subs	r3, r3, r2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	440b      	add	r3, r1
 80036f8:	3326      	adds	r3, #38	@ 0x26
 80036fa:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80036fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003700:	78fa      	ldrb	r2, [r7, #3]
 8003702:	78bb      	ldrb	r3, [r7, #2]
 8003704:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003708:	b2d8      	uxtb	r0, r3
 800370a:	6879      	ldr	r1, [r7, #4]
 800370c:	4613      	mov	r3, r2
 800370e:	011b      	lsls	r3, r3, #4
 8003710:	1a9b      	subs	r3, r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	440b      	add	r3, r1
 8003716:	3316      	adds	r3, #22
 8003718:	4602      	mov	r2, r0
 800371a:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800371c:	78fb      	ldrb	r3, [r7, #3]
 800371e:	4619      	mov	r1, r3
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f000 fbc7 	bl	8003eb4 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8003726:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800372a:	2b00      	cmp	r3, #0
 800372c:	da0a      	bge.n	8003744 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800372e:	78fa      	ldrb	r2, [r7, #3]
 8003730:	6879      	ldr	r1, [r7, #4]
 8003732:	4613      	mov	r3, r2
 8003734:	011b      	lsls	r3, r3, #4
 8003736:	1a9b      	subs	r3, r3, r2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	440b      	add	r3, r1
 800373c:	3317      	adds	r3, #23
 800373e:	2201      	movs	r2, #1
 8003740:	701a      	strb	r2, [r3, #0]
 8003742:	e009      	b.n	8003758 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003744:	78fa      	ldrb	r2, [r7, #3]
 8003746:	6879      	ldr	r1, [r7, #4]
 8003748:	4613      	mov	r3, r2
 800374a:	011b      	lsls	r3, r3, #4
 800374c:	1a9b      	subs	r3, r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	440b      	add	r3, r1
 8003752:	3317      	adds	r3, #23
 8003754:	2200      	movs	r2, #0
 8003756:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4618      	mov	r0, r3
 800375e:	f005 f92d 	bl	80089bc <USB_GetHostSpeed>
 8003762:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8003764:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003768:	2b01      	cmp	r3, #1
 800376a:	d10b      	bne.n	8003784 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800376c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003770:	2b01      	cmp	r3, #1
 8003772:	d107      	bne.n	8003784 <HAL_HCD_HC_Init+0x10a>
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d104      	bne.n	8003784 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	2bbc      	cmp	r3, #188	@ 0xbc
 800377e:	d901      	bls.n	8003784 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8003780:	23bc      	movs	r3, #188	@ 0xbc
 8003782:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8003784:	78fa      	ldrb	r2, [r7, #3]
 8003786:	6879      	ldr	r1, [r7, #4]
 8003788:	4613      	mov	r3, r2
 800378a:	011b      	lsls	r3, r3, #4
 800378c:	1a9b      	subs	r3, r3, r2
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	440b      	add	r3, r1
 8003792:	3318      	adds	r3, #24
 8003794:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8003798:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 800379a:	78fa      	ldrb	r2, [r7, #3]
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	b298      	uxth	r0, r3
 80037a0:	6879      	ldr	r1, [r7, #4]
 80037a2:	4613      	mov	r3, r2
 80037a4:	011b      	lsls	r3, r3, #4
 80037a6:	1a9b      	subs	r3, r3, r2
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	440b      	add	r3, r1
 80037ac:	3328      	adds	r3, #40	@ 0x28
 80037ae:	4602      	mov	r2, r0
 80037b0:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6818      	ldr	r0, [r3, #0]
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	787c      	ldrb	r4, [r7, #1]
 80037bc:	78ba      	ldrb	r2, [r7, #2]
 80037be:	78f9      	ldrb	r1, [r7, #3]
 80037c0:	9302      	str	r3, [sp, #8]
 80037c2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80037c6:	9301      	str	r3, [sp, #4]
 80037c8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	4623      	mov	r3, r4
 80037d0:	f005 f91c 	bl	8008a0c <USB_HC_Init>
 80037d4:	4603      	mov	r3, r0
 80037d6:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80037e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	371c      	adds	r7, #28
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd90      	pop	{r4, r7, pc}

080037ea <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b084      	sub	sp, #16
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
 80037f2:	460b      	mov	r3, r1
 80037f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80037f6:	2300      	movs	r3, #0
 80037f8:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003800:	2b01      	cmp	r3, #1
 8003802:	d101      	bne.n	8003808 <HAL_HCD_HC_Halt+0x1e>
 8003804:	2302      	movs	r3, #2
 8003806:	e00f      	b.n	8003828 <HAL_HCD_HC_Halt+0x3e>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	78fa      	ldrb	r2, [r7, #3]
 8003816:	4611      	mov	r1, r2
 8003818:	4618      	mov	r0, r3
 800381a:	f005 fc62 	bl	80090e2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8003826:	7bfb      	ldrb	r3, [r7, #15]
}
 8003828:	4618      	mov	r0, r3
 800382a:	3710      	adds	r7, #16
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	4608      	mov	r0, r1
 800383a:	4611      	mov	r1, r2
 800383c:	461a      	mov	r2, r3
 800383e:	4603      	mov	r3, r0
 8003840:	70fb      	strb	r3, [r7, #3]
 8003842:	460b      	mov	r3, r1
 8003844:	70bb      	strb	r3, [r7, #2]
 8003846:	4613      	mov	r3, r2
 8003848:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800384a:	78fa      	ldrb	r2, [r7, #3]
 800384c:	6879      	ldr	r1, [r7, #4]
 800384e:	4613      	mov	r3, r2
 8003850:	011b      	lsls	r3, r3, #4
 8003852:	1a9b      	subs	r3, r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	440b      	add	r3, r1
 8003858:	3317      	adds	r3, #23
 800385a:	78ba      	ldrb	r2, [r7, #2]
 800385c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800385e:	78fa      	ldrb	r2, [r7, #3]
 8003860:	6879      	ldr	r1, [r7, #4]
 8003862:	4613      	mov	r3, r2
 8003864:	011b      	lsls	r3, r3, #4
 8003866:	1a9b      	subs	r3, r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	440b      	add	r3, r1
 800386c:	3326      	adds	r3, #38	@ 0x26
 800386e:	787a      	ldrb	r2, [r7, #1]
 8003870:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003872:	7c3b      	ldrb	r3, [r7, #16]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d114      	bne.n	80038a2 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003878:	78fa      	ldrb	r2, [r7, #3]
 800387a:	6879      	ldr	r1, [r7, #4]
 800387c:	4613      	mov	r3, r2
 800387e:	011b      	lsls	r3, r3, #4
 8003880:	1a9b      	subs	r3, r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	440b      	add	r3, r1
 8003886:	332a      	adds	r3, #42	@ 0x2a
 8003888:	2203      	movs	r2, #3
 800388a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800388c:	78fa      	ldrb	r2, [r7, #3]
 800388e:	6879      	ldr	r1, [r7, #4]
 8003890:	4613      	mov	r3, r2
 8003892:	011b      	lsls	r3, r3, #4
 8003894:	1a9b      	subs	r3, r3, r2
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	440b      	add	r3, r1
 800389a:	3319      	adds	r3, #25
 800389c:	7f3a      	ldrb	r2, [r7, #28]
 800389e:	701a      	strb	r2, [r3, #0]
 80038a0:	e009      	b.n	80038b6 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80038a2:	78fa      	ldrb	r2, [r7, #3]
 80038a4:	6879      	ldr	r1, [r7, #4]
 80038a6:	4613      	mov	r3, r2
 80038a8:	011b      	lsls	r3, r3, #4
 80038aa:	1a9b      	subs	r3, r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	440b      	add	r3, r1
 80038b0:	332a      	adds	r3, #42	@ 0x2a
 80038b2:	2202      	movs	r2, #2
 80038b4:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80038b6:	787b      	ldrb	r3, [r7, #1]
 80038b8:	2b03      	cmp	r3, #3
 80038ba:	f200 8102 	bhi.w	8003ac2 <HAL_HCD_HC_SubmitRequest+0x292>
 80038be:	a201      	add	r2, pc, #4	@ (adr r2, 80038c4 <HAL_HCD_HC_SubmitRequest+0x94>)
 80038c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c4:	080038d5 	.word	0x080038d5
 80038c8:	08003aad 	.word	0x08003aad
 80038cc:	08003999 	.word	0x08003999
 80038d0:	08003a23 	.word	0x08003a23
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80038d4:	7c3b      	ldrb	r3, [r7, #16]
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	f040 80f5 	bne.w	8003ac6 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80038dc:	78bb      	ldrb	r3, [r7, #2]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d12d      	bne.n	800393e <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80038e2:	8b3b      	ldrh	r3, [r7, #24]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d109      	bne.n	80038fc <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80038e8:	78fa      	ldrb	r2, [r7, #3]
 80038ea:	6879      	ldr	r1, [r7, #4]
 80038ec:	4613      	mov	r3, r2
 80038ee:	011b      	lsls	r3, r3, #4
 80038f0:	1a9b      	subs	r3, r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	440b      	add	r3, r1
 80038f6:	333d      	adds	r3, #61	@ 0x3d
 80038f8:	2201      	movs	r2, #1
 80038fa:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80038fc:	78fa      	ldrb	r2, [r7, #3]
 80038fe:	6879      	ldr	r1, [r7, #4]
 8003900:	4613      	mov	r3, r2
 8003902:	011b      	lsls	r3, r3, #4
 8003904:	1a9b      	subs	r3, r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	440b      	add	r3, r1
 800390a:	333d      	adds	r3, #61	@ 0x3d
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10a      	bne.n	8003928 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003912:	78fa      	ldrb	r2, [r7, #3]
 8003914:	6879      	ldr	r1, [r7, #4]
 8003916:	4613      	mov	r3, r2
 8003918:	011b      	lsls	r3, r3, #4
 800391a:	1a9b      	subs	r3, r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	440b      	add	r3, r1
 8003920:	332a      	adds	r3, #42	@ 0x2a
 8003922:	2200      	movs	r2, #0
 8003924:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8003926:	e0ce      	b.n	8003ac6 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003928:	78fa      	ldrb	r2, [r7, #3]
 800392a:	6879      	ldr	r1, [r7, #4]
 800392c:	4613      	mov	r3, r2
 800392e:	011b      	lsls	r3, r3, #4
 8003930:	1a9b      	subs	r3, r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	440b      	add	r3, r1
 8003936:	332a      	adds	r3, #42	@ 0x2a
 8003938:	2202      	movs	r2, #2
 800393a:	701a      	strb	r2, [r3, #0]
      break;
 800393c:	e0c3      	b.n	8003ac6 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800393e:	78fa      	ldrb	r2, [r7, #3]
 8003940:	6879      	ldr	r1, [r7, #4]
 8003942:	4613      	mov	r3, r2
 8003944:	011b      	lsls	r3, r3, #4
 8003946:	1a9b      	subs	r3, r3, r2
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	440b      	add	r3, r1
 800394c:	331a      	adds	r3, #26
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	2b01      	cmp	r3, #1
 8003952:	f040 80b8 	bne.w	8003ac6 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8003956:	78fa      	ldrb	r2, [r7, #3]
 8003958:	6879      	ldr	r1, [r7, #4]
 800395a:	4613      	mov	r3, r2
 800395c:	011b      	lsls	r3, r3, #4
 800395e:	1a9b      	subs	r3, r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	440b      	add	r3, r1
 8003964:	333c      	adds	r3, #60	@ 0x3c
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d10a      	bne.n	8003982 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800396c:	78fa      	ldrb	r2, [r7, #3]
 800396e:	6879      	ldr	r1, [r7, #4]
 8003970:	4613      	mov	r3, r2
 8003972:	011b      	lsls	r3, r3, #4
 8003974:	1a9b      	subs	r3, r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	440b      	add	r3, r1
 800397a:	332a      	adds	r3, #42	@ 0x2a
 800397c:	2200      	movs	r2, #0
 800397e:	701a      	strb	r2, [r3, #0]
      break;
 8003980:	e0a1      	b.n	8003ac6 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003982:	78fa      	ldrb	r2, [r7, #3]
 8003984:	6879      	ldr	r1, [r7, #4]
 8003986:	4613      	mov	r3, r2
 8003988:	011b      	lsls	r3, r3, #4
 800398a:	1a9b      	subs	r3, r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	440b      	add	r3, r1
 8003990:	332a      	adds	r3, #42	@ 0x2a
 8003992:	2202      	movs	r2, #2
 8003994:	701a      	strb	r2, [r3, #0]
      break;
 8003996:	e096      	b.n	8003ac6 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003998:	78bb      	ldrb	r3, [r7, #2]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d120      	bne.n	80039e0 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800399e:	78fa      	ldrb	r2, [r7, #3]
 80039a0:	6879      	ldr	r1, [r7, #4]
 80039a2:	4613      	mov	r3, r2
 80039a4:	011b      	lsls	r3, r3, #4
 80039a6:	1a9b      	subs	r3, r3, r2
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	440b      	add	r3, r1
 80039ac:	333d      	adds	r3, #61	@ 0x3d
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d10a      	bne.n	80039ca <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80039b4:	78fa      	ldrb	r2, [r7, #3]
 80039b6:	6879      	ldr	r1, [r7, #4]
 80039b8:	4613      	mov	r3, r2
 80039ba:	011b      	lsls	r3, r3, #4
 80039bc:	1a9b      	subs	r3, r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	440b      	add	r3, r1
 80039c2:	332a      	adds	r3, #42	@ 0x2a
 80039c4:	2200      	movs	r2, #0
 80039c6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80039c8:	e07e      	b.n	8003ac8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80039ca:	78fa      	ldrb	r2, [r7, #3]
 80039cc:	6879      	ldr	r1, [r7, #4]
 80039ce:	4613      	mov	r3, r2
 80039d0:	011b      	lsls	r3, r3, #4
 80039d2:	1a9b      	subs	r3, r3, r2
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	440b      	add	r3, r1
 80039d8:	332a      	adds	r3, #42	@ 0x2a
 80039da:	2202      	movs	r2, #2
 80039dc:	701a      	strb	r2, [r3, #0]
      break;
 80039de:	e073      	b.n	8003ac8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80039e0:	78fa      	ldrb	r2, [r7, #3]
 80039e2:	6879      	ldr	r1, [r7, #4]
 80039e4:	4613      	mov	r3, r2
 80039e6:	011b      	lsls	r3, r3, #4
 80039e8:	1a9b      	subs	r3, r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	440b      	add	r3, r1
 80039ee:	333c      	adds	r3, #60	@ 0x3c
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d10a      	bne.n	8003a0c <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80039f6:	78fa      	ldrb	r2, [r7, #3]
 80039f8:	6879      	ldr	r1, [r7, #4]
 80039fa:	4613      	mov	r3, r2
 80039fc:	011b      	lsls	r3, r3, #4
 80039fe:	1a9b      	subs	r3, r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	440b      	add	r3, r1
 8003a04:	332a      	adds	r3, #42	@ 0x2a
 8003a06:	2200      	movs	r2, #0
 8003a08:	701a      	strb	r2, [r3, #0]
      break;
 8003a0a:	e05d      	b.n	8003ac8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003a0c:	78fa      	ldrb	r2, [r7, #3]
 8003a0e:	6879      	ldr	r1, [r7, #4]
 8003a10:	4613      	mov	r3, r2
 8003a12:	011b      	lsls	r3, r3, #4
 8003a14:	1a9b      	subs	r3, r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	440b      	add	r3, r1
 8003a1a:	332a      	adds	r3, #42	@ 0x2a
 8003a1c:	2202      	movs	r2, #2
 8003a1e:	701a      	strb	r2, [r3, #0]
      break;
 8003a20:	e052      	b.n	8003ac8 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003a22:	78bb      	ldrb	r3, [r7, #2]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d120      	bne.n	8003a6a <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003a28:	78fa      	ldrb	r2, [r7, #3]
 8003a2a:	6879      	ldr	r1, [r7, #4]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	011b      	lsls	r3, r3, #4
 8003a30:	1a9b      	subs	r3, r3, r2
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	440b      	add	r3, r1
 8003a36:	333d      	adds	r3, #61	@ 0x3d
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d10a      	bne.n	8003a54 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003a3e:	78fa      	ldrb	r2, [r7, #3]
 8003a40:	6879      	ldr	r1, [r7, #4]
 8003a42:	4613      	mov	r3, r2
 8003a44:	011b      	lsls	r3, r3, #4
 8003a46:	1a9b      	subs	r3, r3, r2
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	440b      	add	r3, r1
 8003a4c:	332a      	adds	r3, #42	@ 0x2a
 8003a4e:	2200      	movs	r2, #0
 8003a50:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003a52:	e039      	b.n	8003ac8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003a54:	78fa      	ldrb	r2, [r7, #3]
 8003a56:	6879      	ldr	r1, [r7, #4]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	011b      	lsls	r3, r3, #4
 8003a5c:	1a9b      	subs	r3, r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	440b      	add	r3, r1
 8003a62:	332a      	adds	r3, #42	@ 0x2a
 8003a64:	2202      	movs	r2, #2
 8003a66:	701a      	strb	r2, [r3, #0]
      break;
 8003a68:	e02e      	b.n	8003ac8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003a6a:	78fa      	ldrb	r2, [r7, #3]
 8003a6c:	6879      	ldr	r1, [r7, #4]
 8003a6e:	4613      	mov	r3, r2
 8003a70:	011b      	lsls	r3, r3, #4
 8003a72:	1a9b      	subs	r3, r3, r2
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	440b      	add	r3, r1
 8003a78:	333c      	adds	r3, #60	@ 0x3c
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d10a      	bne.n	8003a96 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003a80:	78fa      	ldrb	r2, [r7, #3]
 8003a82:	6879      	ldr	r1, [r7, #4]
 8003a84:	4613      	mov	r3, r2
 8003a86:	011b      	lsls	r3, r3, #4
 8003a88:	1a9b      	subs	r3, r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	440b      	add	r3, r1
 8003a8e:	332a      	adds	r3, #42	@ 0x2a
 8003a90:	2200      	movs	r2, #0
 8003a92:	701a      	strb	r2, [r3, #0]
      break;
 8003a94:	e018      	b.n	8003ac8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003a96:	78fa      	ldrb	r2, [r7, #3]
 8003a98:	6879      	ldr	r1, [r7, #4]
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	011b      	lsls	r3, r3, #4
 8003a9e:	1a9b      	subs	r3, r3, r2
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	440b      	add	r3, r1
 8003aa4:	332a      	adds	r3, #42	@ 0x2a
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	701a      	strb	r2, [r3, #0]
      break;
 8003aaa:	e00d      	b.n	8003ac8 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003aac:	78fa      	ldrb	r2, [r7, #3]
 8003aae:	6879      	ldr	r1, [r7, #4]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	011b      	lsls	r3, r3, #4
 8003ab4:	1a9b      	subs	r3, r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	440b      	add	r3, r1
 8003aba:	332a      	adds	r3, #42	@ 0x2a
 8003abc:	2200      	movs	r2, #0
 8003abe:	701a      	strb	r2, [r3, #0]
      break;
 8003ac0:	e002      	b.n	8003ac8 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8003ac2:	bf00      	nop
 8003ac4:	e000      	b.n	8003ac8 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8003ac6:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003ac8:	78fa      	ldrb	r2, [r7, #3]
 8003aca:	6879      	ldr	r1, [r7, #4]
 8003acc:	4613      	mov	r3, r2
 8003ace:	011b      	lsls	r3, r3, #4
 8003ad0:	1a9b      	subs	r3, r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	440b      	add	r3, r1
 8003ad6:	332c      	adds	r3, #44	@ 0x2c
 8003ad8:	697a      	ldr	r2, [r7, #20]
 8003ada:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003adc:	78fa      	ldrb	r2, [r7, #3]
 8003ade:	8b39      	ldrh	r1, [r7, #24]
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	011b      	lsls	r3, r3, #4
 8003ae6:	1a9b      	subs	r3, r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	4403      	add	r3, r0
 8003aec:	3334      	adds	r3, #52	@ 0x34
 8003aee:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003af0:	78fa      	ldrb	r2, [r7, #3]
 8003af2:	6879      	ldr	r1, [r7, #4]
 8003af4:	4613      	mov	r3, r2
 8003af6:	011b      	lsls	r3, r3, #4
 8003af8:	1a9b      	subs	r3, r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	440b      	add	r3, r1
 8003afe:	334c      	adds	r3, #76	@ 0x4c
 8003b00:	2200      	movs	r2, #0
 8003b02:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003b04:	78fa      	ldrb	r2, [r7, #3]
 8003b06:	6879      	ldr	r1, [r7, #4]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	011b      	lsls	r3, r3, #4
 8003b0c:	1a9b      	subs	r3, r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	440b      	add	r3, r1
 8003b12:	3338      	adds	r3, #56	@ 0x38
 8003b14:	2200      	movs	r2, #0
 8003b16:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003b18:	78fa      	ldrb	r2, [r7, #3]
 8003b1a:	6879      	ldr	r1, [r7, #4]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	011b      	lsls	r3, r3, #4
 8003b20:	1a9b      	subs	r3, r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	440b      	add	r3, r1
 8003b26:	3315      	adds	r3, #21
 8003b28:	78fa      	ldrb	r2, [r7, #3]
 8003b2a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003b2c:	78fa      	ldrb	r2, [r7, #3]
 8003b2e:	6879      	ldr	r1, [r7, #4]
 8003b30:	4613      	mov	r3, r2
 8003b32:	011b      	lsls	r3, r3, #4
 8003b34:	1a9b      	subs	r3, r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	440b      	add	r3, r1
 8003b3a:	334d      	adds	r3, #77	@ 0x4d
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6818      	ldr	r0, [r3, #0]
 8003b44:	78fa      	ldrb	r2, [r7, #3]
 8003b46:	4613      	mov	r3, r2
 8003b48:	011b      	lsls	r3, r3, #4
 8003b4a:	1a9b      	subs	r3, r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	3310      	adds	r3, #16
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	4413      	add	r3, r2
 8003b54:	1d19      	adds	r1, r3, #4
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	799b      	ldrb	r3, [r3, #6]
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	f005 f86c 	bl	8008c38 <USB_HC_StartXfer>
 8003b60:	4603      	mov	r3, r0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3708      	adds	r7, #8
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop

08003b6c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b086      	sub	sp, #24
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4618      	mov	r0, r3
 8003b84:	f004 fd86 	bl	8008694 <USB_GetMode>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	f040 80fb 	bne.w	8003d86 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4618      	mov	r0, r3
 8003b96:	f004 fd49 	bl	800862c <USB_ReadInterrupts>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f000 80f1 	beq.w	8003d84 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f004 fd40 	bl	800862c <USB_ReadInterrupts>
 8003bac:	4603      	mov	r3, r0
 8003bae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003bb2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003bb6:	d104      	bne.n	8003bc2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003bc0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f004 fd30 	bl	800862c <USB_ReadInterrupts>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003bd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003bd6:	d104      	bne.n	8003be2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003be0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f004 fd20 	bl	800862c <USB_ReadInterrupts>
 8003bec:	4603      	mov	r3, r0
 8003bee:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003bf2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003bf6:	d104      	bne.n	8003c02 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003c00:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f004 fd10 	bl	800862c <USB_ReadInterrupts>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	f003 0302 	and.w	r3, r3, #2
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d103      	bne.n	8003c1e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2202      	movs	r2, #2
 8003c1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4618      	mov	r0, r3
 8003c24:	f004 fd02 	bl	800862c <USB_ReadInterrupts>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003c2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c32:	d120      	bne.n	8003c76 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003c3c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d113      	bne.n	8003c76 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003c4e:	2110      	movs	r1, #16
 8003c50:	6938      	ldr	r0, [r7, #16]
 8003c52:	f004 fbf5 	bl	8008440 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003c56:	6938      	ldr	r0, [r7, #16]
 8003c58:	f004 fc24 	bl	80084a4 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	7a5b      	ldrb	r3, [r3, #9]
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d105      	bne.n	8003c70 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2101      	movs	r1, #1
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f004 fe06 	bl	800887c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f007 fd4b 	bl	800b70c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f004 fcd6 	bl	800862c <USB_ReadInterrupts>
 8003c80:	4603      	mov	r3, r0
 8003c82:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c86:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c8a:	d102      	bne.n	8003c92 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f001 fd4d 	bl	800572c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4618      	mov	r0, r3
 8003c98:	f004 fcc8 	bl	800862c <USB_ReadInterrupts>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	f003 0308 	and.w	r3, r3, #8
 8003ca2:	2b08      	cmp	r3, #8
 8003ca4:	d106      	bne.n	8003cb4 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f007 fd14 	bl	800b6d4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2208      	movs	r2, #8
 8003cb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f004 fcb7 	bl	800862c <USB_ReadInterrupts>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cc4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003cc8:	d139      	bne.n	8003d3e <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f005 f9f6 	bl	80090c0 <USB_HC_ReadInterrupt>
 8003cd4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	617b      	str	r3, [r7, #20]
 8003cda:	e025      	b.n	8003d28 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	f003 030f 	and.w	r3, r3, #15
 8003ce2:	68ba      	ldr	r2, [r7, #8]
 8003ce4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ce8:	f003 0301 	and.w	r3, r3, #1
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d018      	beq.n	8003d22 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	015a      	lsls	r2, r3, #5
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d06:	d106      	bne.n	8003d16 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 f905 	bl	8003f1e <HCD_HC_IN_IRQHandler>
 8003d14:	e005      	b.n	8003d22 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f000 ff67 	bl	8004bf0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	3301      	adds	r3, #1
 8003d26:	617b      	str	r3, [r7, #20]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	795b      	ldrb	r3, [r3, #5]
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d3d3      	bcc.n	8003cdc <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003d3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4618      	mov	r0, r3
 8003d44:	f004 fc72 	bl	800862c <USB_ReadInterrupts>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	f003 0310 	and.w	r3, r3, #16
 8003d4e:	2b10      	cmp	r3, #16
 8003d50:	d101      	bne.n	8003d56 <HAL_HCD_IRQHandler+0x1ea>
 8003d52:	2301      	movs	r3, #1
 8003d54:	e000      	b.n	8003d58 <HAL_HCD_IRQHandler+0x1ec>
 8003d56:	2300      	movs	r3, #0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d014      	beq.n	8003d86 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	699a      	ldr	r2, [r3, #24]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f022 0210 	bic.w	r2, r2, #16
 8003d6a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f001 fbfe 	bl	800556e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	699a      	ldr	r2, [r3, #24]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f042 0210 	orr.w	r2, r2, #16
 8003d80:	619a      	str	r2, [r3, #24]
 8003d82:	e000      	b.n	8003d86 <HAL_HCD_IRQHandler+0x21a>
      return;
 8003d84:	bf00      	nop
    }
  }
}
 8003d86:	3718      	adds	r7, #24
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d101      	bne.n	8003da2 <HAL_HCD_Start+0x16>
 8003d9e:	2302      	movs	r3, #2
 8003da0:	e013      	b.n	8003dca <HAL_HCD_Start+0x3e>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2101      	movs	r1, #1
 8003db0:	4618      	mov	r0, r3
 8003db2:	f004 fdca 	bl	800894a <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f004 fad2 	bl	8008364 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3708      	adds	r7, #8
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}

08003dd2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003dd2:	b580      	push	{r7, lr}
 8003dd4:	b082      	sub	sp, #8
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d101      	bne.n	8003de8 <HAL_HCD_Stop+0x16>
 8003de4:	2302      	movs	r3, #2
 8003de6:	e00d      	b.n	8003e04 <HAL_HCD_Stop+0x32>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4618      	mov	r0, r3
 8003df6:	f005 fa94 	bl	8009322 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3708      	adds	r7, #8
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b082      	sub	sp, #8
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f004 fd6c 	bl	80088f6 <USB_ResetPort>
 8003e1e:	4603      	mov	r3, r0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3708      	adds	r7, #8
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	460b      	mov	r3, r1
 8003e32:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003e34:	78fa      	ldrb	r2, [r7, #3]
 8003e36:	6879      	ldr	r1, [r7, #4]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	011b      	lsls	r3, r3, #4
 8003e3c:	1a9b      	subs	r3, r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	440b      	add	r3, r1
 8003e42:	334c      	adds	r3, #76	@ 0x4c
 8003e44:	781b      	ldrb	r3, [r3, #0]
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	370c      	adds	r7, #12
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr

08003e52 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003e52:	b480      	push	{r7}
 8003e54:	b083      	sub	sp, #12
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003e5e:	78fa      	ldrb	r2, [r7, #3]
 8003e60:	6879      	ldr	r1, [r7, #4]
 8003e62:	4613      	mov	r3, r2
 8003e64:	011b      	lsls	r3, r3, #4
 8003e66:	1a9b      	subs	r3, r3, r2
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	440b      	add	r3, r1
 8003e6c:	3338      	adds	r3, #56	@ 0x38
 8003e6e:	681b      	ldr	r3, [r3, #0]
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f004 fdae 	bl	80089ea <USB_GetCurrentFrame>
 8003e8e:	4603      	mov	r3, r0
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3708      	adds	r7, #8
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f004 fd89 	bl	80089bc <USB_GetHostSpeed>
 8003eaa:	4603      	mov	r3, r0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3708      	adds	r7, #8
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8003ec0:	78fa      	ldrb	r2, [r7, #3]
 8003ec2:	6879      	ldr	r1, [r7, #4]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	011b      	lsls	r3, r3, #4
 8003ec8:	1a9b      	subs	r3, r3, r2
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	440b      	add	r3, r1
 8003ece:	331a      	adds	r3, #26
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8003ed4:	78fa      	ldrb	r2, [r7, #3]
 8003ed6:	6879      	ldr	r1, [r7, #4]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	011b      	lsls	r3, r3, #4
 8003edc:	1a9b      	subs	r3, r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	440b      	add	r3, r1
 8003ee2:	331b      	adds	r3, #27
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8003ee8:	78fa      	ldrb	r2, [r7, #3]
 8003eea:	6879      	ldr	r1, [r7, #4]
 8003eec:	4613      	mov	r3, r2
 8003eee:	011b      	lsls	r3, r3, #4
 8003ef0:	1a9b      	subs	r3, r3, r2
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	440b      	add	r3, r1
 8003ef6:	3325      	adds	r3, #37	@ 0x25
 8003ef8:	2200      	movs	r2, #0
 8003efa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8003efc:	78fa      	ldrb	r2, [r7, #3]
 8003efe:	6879      	ldr	r1, [r7, #4]
 8003f00:	4613      	mov	r3, r2
 8003f02:	011b      	lsls	r3, r3, #4
 8003f04:	1a9b      	subs	r3, r3, r2
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	440b      	add	r3, r1
 8003f0a:	3324      	adds	r3, #36	@ 0x24
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	370c      	adds	r7, #12
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr

08003f1e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b086      	sub	sp, #24
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
 8003f26:	460b      	mov	r3, r1
 8003f28:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	78fa      	ldrb	r2, [r7, #3]
 8003f3a:	4611      	mov	r1, r2
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f004 fb88 	bl	8008652 <USB_ReadChInterrupts>
 8003f42:	4603      	mov	r3, r0
 8003f44:	f003 0304 	and.w	r3, r3, #4
 8003f48:	2b04      	cmp	r3, #4
 8003f4a:	d11a      	bne.n	8003f82 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003f4c:	78fb      	ldrb	r3, [r7, #3]
 8003f4e:	015a      	lsls	r2, r3, #5
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	4413      	add	r3, r2
 8003f54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f58:	461a      	mov	r2, r3
 8003f5a:	2304      	movs	r3, #4
 8003f5c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003f5e:	78fa      	ldrb	r2, [r7, #3]
 8003f60:	6879      	ldr	r1, [r7, #4]
 8003f62:	4613      	mov	r3, r2
 8003f64:	011b      	lsls	r3, r3, #4
 8003f66:	1a9b      	subs	r3, r3, r2
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	440b      	add	r3, r1
 8003f6c:	334d      	adds	r3, #77	@ 0x4d
 8003f6e:	2207      	movs	r2, #7
 8003f70:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	78fa      	ldrb	r2, [r7, #3]
 8003f78:	4611      	mov	r1, r2
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f005 f8b1 	bl	80090e2 <USB_HC_Halt>
 8003f80:	e09e      	b.n	80040c0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	78fa      	ldrb	r2, [r7, #3]
 8003f88:	4611      	mov	r1, r2
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f004 fb61 	bl	8008652 <USB_ReadChInterrupts>
 8003f90:	4603      	mov	r3, r0
 8003f92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f9a:	d11b      	bne.n	8003fd4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8003f9c:	78fb      	ldrb	r3, [r7, #3]
 8003f9e:	015a      	lsls	r2, r3, #5
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fa8:	461a      	mov	r2, r3
 8003faa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003fae:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8003fb0:	78fa      	ldrb	r2, [r7, #3]
 8003fb2:	6879      	ldr	r1, [r7, #4]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	011b      	lsls	r3, r3, #4
 8003fb8:	1a9b      	subs	r3, r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	440b      	add	r3, r1
 8003fbe:	334d      	adds	r3, #77	@ 0x4d
 8003fc0:	2208      	movs	r2, #8
 8003fc2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	78fa      	ldrb	r2, [r7, #3]
 8003fca:	4611      	mov	r1, r2
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f005 f888 	bl	80090e2 <USB_HC_Halt>
 8003fd2:	e075      	b.n	80040c0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	78fa      	ldrb	r2, [r7, #3]
 8003fda:	4611      	mov	r1, r2
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f004 fb38 	bl	8008652 <USB_ReadChInterrupts>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	f003 0308 	and.w	r3, r3, #8
 8003fe8:	2b08      	cmp	r3, #8
 8003fea:	d11a      	bne.n	8004022 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003fec:	78fb      	ldrb	r3, [r7, #3]
 8003fee:	015a      	lsls	r2, r3, #5
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	2308      	movs	r3, #8
 8003ffc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003ffe:	78fa      	ldrb	r2, [r7, #3]
 8004000:	6879      	ldr	r1, [r7, #4]
 8004002:	4613      	mov	r3, r2
 8004004:	011b      	lsls	r3, r3, #4
 8004006:	1a9b      	subs	r3, r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	440b      	add	r3, r1
 800400c:	334d      	adds	r3, #77	@ 0x4d
 800400e:	2206      	movs	r2, #6
 8004010:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	78fa      	ldrb	r2, [r7, #3]
 8004018:	4611      	mov	r1, r2
 800401a:	4618      	mov	r0, r3
 800401c:	f005 f861 	bl	80090e2 <USB_HC_Halt>
 8004020:	e04e      	b.n	80040c0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	78fa      	ldrb	r2, [r7, #3]
 8004028:	4611      	mov	r1, r2
 800402a:	4618      	mov	r0, r3
 800402c:	f004 fb11 	bl	8008652 <USB_ReadChInterrupts>
 8004030:	4603      	mov	r3, r0
 8004032:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004036:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800403a:	d11b      	bne.n	8004074 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800403c:	78fb      	ldrb	r3, [r7, #3]
 800403e:	015a      	lsls	r2, r3, #5
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	4413      	add	r3, r2
 8004044:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004048:	461a      	mov	r2, r3
 800404a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800404e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004050:	78fa      	ldrb	r2, [r7, #3]
 8004052:	6879      	ldr	r1, [r7, #4]
 8004054:	4613      	mov	r3, r2
 8004056:	011b      	lsls	r3, r3, #4
 8004058:	1a9b      	subs	r3, r3, r2
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	440b      	add	r3, r1
 800405e:	334d      	adds	r3, #77	@ 0x4d
 8004060:	2209      	movs	r2, #9
 8004062:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	78fa      	ldrb	r2, [r7, #3]
 800406a:	4611      	mov	r1, r2
 800406c:	4618      	mov	r0, r3
 800406e:	f005 f838 	bl	80090e2 <USB_HC_Halt>
 8004072:	e025      	b.n	80040c0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	78fa      	ldrb	r2, [r7, #3]
 800407a:	4611      	mov	r1, r2
 800407c:	4618      	mov	r0, r3
 800407e:	f004 fae8 	bl	8008652 <USB_ReadChInterrupts>
 8004082:	4603      	mov	r3, r0
 8004084:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004088:	2b80      	cmp	r3, #128	@ 0x80
 800408a:	d119      	bne.n	80040c0 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800408c:	78fb      	ldrb	r3, [r7, #3]
 800408e:	015a      	lsls	r2, r3, #5
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	4413      	add	r3, r2
 8004094:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004098:	461a      	mov	r2, r3
 800409a:	2380      	movs	r3, #128	@ 0x80
 800409c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800409e:	78fa      	ldrb	r2, [r7, #3]
 80040a0:	6879      	ldr	r1, [r7, #4]
 80040a2:	4613      	mov	r3, r2
 80040a4:	011b      	lsls	r3, r3, #4
 80040a6:	1a9b      	subs	r3, r3, r2
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	440b      	add	r3, r1
 80040ac:	334d      	adds	r3, #77	@ 0x4d
 80040ae:	2207      	movs	r2, #7
 80040b0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	78fa      	ldrb	r2, [r7, #3]
 80040b8:	4611      	mov	r1, r2
 80040ba:	4618      	mov	r0, r3
 80040bc:	f005 f811 	bl	80090e2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	78fa      	ldrb	r2, [r7, #3]
 80040c6:	4611      	mov	r1, r2
 80040c8:	4618      	mov	r0, r3
 80040ca:	f004 fac2 	bl	8008652 <USB_ReadChInterrupts>
 80040ce:	4603      	mov	r3, r0
 80040d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040d8:	d112      	bne.n	8004100 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	78fa      	ldrb	r2, [r7, #3]
 80040e0:	4611      	mov	r1, r2
 80040e2:	4618      	mov	r0, r3
 80040e4:	f004 fffd 	bl	80090e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80040e8:	78fb      	ldrb	r3, [r7, #3]
 80040ea:	015a      	lsls	r2, r3, #5
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	4413      	add	r3, r2
 80040f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040f4:	461a      	mov	r2, r3
 80040f6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80040fa:	6093      	str	r3, [r2, #8]
 80040fc:	f000 bd75 	b.w	8004bea <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	78fa      	ldrb	r2, [r7, #3]
 8004106:	4611      	mov	r1, r2
 8004108:	4618      	mov	r0, r3
 800410a:	f004 faa2 	bl	8008652 <USB_ReadChInterrupts>
 800410e:	4603      	mov	r3, r0
 8004110:	f003 0301 	and.w	r3, r3, #1
 8004114:	2b01      	cmp	r3, #1
 8004116:	f040 8128 	bne.w	800436a <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800411a:	78fb      	ldrb	r3, [r7, #3]
 800411c:	015a      	lsls	r2, r3, #5
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	4413      	add	r3, r2
 8004122:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004126:	461a      	mov	r2, r3
 8004128:	2320      	movs	r3, #32
 800412a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 800412c:	78fa      	ldrb	r2, [r7, #3]
 800412e:	6879      	ldr	r1, [r7, #4]
 8004130:	4613      	mov	r3, r2
 8004132:	011b      	lsls	r3, r3, #4
 8004134:	1a9b      	subs	r3, r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	440b      	add	r3, r1
 800413a:	331b      	adds	r3, #27
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	2b01      	cmp	r3, #1
 8004140:	d119      	bne.n	8004176 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004142:	78fa      	ldrb	r2, [r7, #3]
 8004144:	6879      	ldr	r1, [r7, #4]
 8004146:	4613      	mov	r3, r2
 8004148:	011b      	lsls	r3, r3, #4
 800414a:	1a9b      	subs	r3, r3, r2
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	440b      	add	r3, r1
 8004150:	331b      	adds	r3, #27
 8004152:	2200      	movs	r2, #0
 8004154:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004156:	78fb      	ldrb	r3, [r7, #3]
 8004158:	015a      	lsls	r2, r3, #5
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	4413      	add	r3, r2
 800415e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	78fa      	ldrb	r2, [r7, #3]
 8004166:	0151      	lsls	r1, r2, #5
 8004168:	693a      	ldr	r2, [r7, #16]
 800416a:	440a      	add	r2, r1
 800416c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004170:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004174:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	799b      	ldrb	r3, [r3, #6]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d01b      	beq.n	80041b6 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800417e:	78fa      	ldrb	r2, [r7, #3]
 8004180:	6879      	ldr	r1, [r7, #4]
 8004182:	4613      	mov	r3, r2
 8004184:	011b      	lsls	r3, r3, #4
 8004186:	1a9b      	subs	r3, r3, r2
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	440b      	add	r3, r1
 800418c:	3330      	adds	r3, #48	@ 0x30
 800418e:	6819      	ldr	r1, [r3, #0]
 8004190:	78fb      	ldrb	r3, [r7, #3]
 8004192:	015a      	lsls	r2, r3, #5
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	4413      	add	r3, r2
 8004198:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041a2:	78fa      	ldrb	r2, [r7, #3]
 80041a4:	1ac9      	subs	r1, r1, r3
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	4613      	mov	r3, r2
 80041aa:	011b      	lsls	r3, r3, #4
 80041ac:	1a9b      	subs	r3, r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	4403      	add	r3, r0
 80041b2:	3338      	adds	r3, #56	@ 0x38
 80041b4:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80041b6:	78fa      	ldrb	r2, [r7, #3]
 80041b8:	6879      	ldr	r1, [r7, #4]
 80041ba:	4613      	mov	r3, r2
 80041bc:	011b      	lsls	r3, r3, #4
 80041be:	1a9b      	subs	r3, r3, r2
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	440b      	add	r3, r1
 80041c4:	334d      	adds	r3, #77	@ 0x4d
 80041c6:	2201      	movs	r2, #1
 80041c8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80041ca:	78fa      	ldrb	r2, [r7, #3]
 80041cc:	6879      	ldr	r1, [r7, #4]
 80041ce:	4613      	mov	r3, r2
 80041d0:	011b      	lsls	r3, r3, #4
 80041d2:	1a9b      	subs	r3, r3, r2
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	440b      	add	r3, r1
 80041d8:	3344      	adds	r3, #68	@ 0x44
 80041da:	2200      	movs	r2, #0
 80041dc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80041de:	78fb      	ldrb	r3, [r7, #3]
 80041e0:	015a      	lsls	r2, r3, #5
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	4413      	add	r3, r2
 80041e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041ea:	461a      	mov	r2, r3
 80041ec:	2301      	movs	r3, #1
 80041ee:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80041f0:	78fa      	ldrb	r2, [r7, #3]
 80041f2:	6879      	ldr	r1, [r7, #4]
 80041f4:	4613      	mov	r3, r2
 80041f6:	011b      	lsls	r3, r3, #4
 80041f8:	1a9b      	subs	r3, r3, r2
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	440b      	add	r3, r1
 80041fe:	3326      	adds	r3, #38	@ 0x26
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00a      	beq.n	800421c <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004206:	78fa      	ldrb	r2, [r7, #3]
 8004208:	6879      	ldr	r1, [r7, #4]
 800420a:	4613      	mov	r3, r2
 800420c:	011b      	lsls	r3, r3, #4
 800420e:	1a9b      	subs	r3, r3, r2
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	440b      	add	r3, r1
 8004214:	3326      	adds	r3, #38	@ 0x26
 8004216:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004218:	2b02      	cmp	r3, #2
 800421a:	d110      	bne.n	800423e <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	78fa      	ldrb	r2, [r7, #3]
 8004222:	4611      	mov	r1, r2
 8004224:	4618      	mov	r0, r3
 8004226:	f004 ff5c 	bl	80090e2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800422a:	78fb      	ldrb	r3, [r7, #3]
 800422c:	015a      	lsls	r2, r3, #5
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	4413      	add	r3, r2
 8004232:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004236:	461a      	mov	r2, r3
 8004238:	2310      	movs	r3, #16
 800423a:	6093      	str	r3, [r2, #8]
 800423c:	e03d      	b.n	80042ba <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800423e:	78fa      	ldrb	r2, [r7, #3]
 8004240:	6879      	ldr	r1, [r7, #4]
 8004242:	4613      	mov	r3, r2
 8004244:	011b      	lsls	r3, r3, #4
 8004246:	1a9b      	subs	r3, r3, r2
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	440b      	add	r3, r1
 800424c:	3326      	adds	r3, #38	@ 0x26
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	2b03      	cmp	r3, #3
 8004252:	d00a      	beq.n	800426a <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8004254:	78fa      	ldrb	r2, [r7, #3]
 8004256:	6879      	ldr	r1, [r7, #4]
 8004258:	4613      	mov	r3, r2
 800425a:	011b      	lsls	r3, r3, #4
 800425c:	1a9b      	subs	r3, r3, r2
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	440b      	add	r3, r1
 8004262:	3326      	adds	r3, #38	@ 0x26
 8004264:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8004266:	2b01      	cmp	r3, #1
 8004268:	d127      	bne.n	80042ba <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800426a:	78fb      	ldrb	r3, [r7, #3]
 800426c:	015a      	lsls	r2, r3, #5
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	4413      	add	r3, r2
 8004272:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	78fa      	ldrb	r2, [r7, #3]
 800427a:	0151      	lsls	r1, r2, #5
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	440a      	add	r2, r1
 8004280:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004284:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004288:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800428a:	78fa      	ldrb	r2, [r7, #3]
 800428c:	6879      	ldr	r1, [r7, #4]
 800428e:	4613      	mov	r3, r2
 8004290:	011b      	lsls	r3, r3, #4
 8004292:	1a9b      	subs	r3, r3, r2
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	440b      	add	r3, r1
 8004298:	334c      	adds	r3, #76	@ 0x4c
 800429a:	2201      	movs	r2, #1
 800429c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800429e:	78fa      	ldrb	r2, [r7, #3]
 80042a0:	6879      	ldr	r1, [r7, #4]
 80042a2:	4613      	mov	r3, r2
 80042a4:	011b      	lsls	r3, r3, #4
 80042a6:	1a9b      	subs	r3, r3, r2
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	440b      	add	r3, r1
 80042ac:	334c      	adds	r3, #76	@ 0x4c
 80042ae:	781a      	ldrb	r2, [r3, #0]
 80042b0:	78fb      	ldrb	r3, [r7, #3]
 80042b2:	4619      	mov	r1, r3
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f007 fa37 	bl	800b728 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	799b      	ldrb	r3, [r3, #6]
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d13b      	bne.n	800433a <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80042c2:	78fa      	ldrb	r2, [r7, #3]
 80042c4:	6879      	ldr	r1, [r7, #4]
 80042c6:	4613      	mov	r3, r2
 80042c8:	011b      	lsls	r3, r3, #4
 80042ca:	1a9b      	subs	r3, r3, r2
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	440b      	add	r3, r1
 80042d0:	3338      	adds	r3, #56	@ 0x38
 80042d2:	6819      	ldr	r1, [r3, #0]
 80042d4:	78fa      	ldrb	r2, [r7, #3]
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	4613      	mov	r3, r2
 80042da:	011b      	lsls	r3, r3, #4
 80042dc:	1a9b      	subs	r3, r3, r2
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	4403      	add	r3, r0
 80042e2:	3328      	adds	r3, #40	@ 0x28
 80042e4:	881b      	ldrh	r3, [r3, #0]
 80042e6:	440b      	add	r3, r1
 80042e8:	1e59      	subs	r1, r3, #1
 80042ea:	78fa      	ldrb	r2, [r7, #3]
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	4613      	mov	r3, r2
 80042f0:	011b      	lsls	r3, r3, #4
 80042f2:	1a9b      	subs	r3, r3, r2
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	4403      	add	r3, r0
 80042f8:	3328      	adds	r3, #40	@ 0x28
 80042fa:	881b      	ldrh	r3, [r3, #0]
 80042fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8004300:	f003 0301 	and.w	r3, r3, #1
 8004304:	2b00      	cmp	r3, #0
 8004306:	f000 8470 	beq.w	8004bea <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800430a:	78fa      	ldrb	r2, [r7, #3]
 800430c:	6879      	ldr	r1, [r7, #4]
 800430e:	4613      	mov	r3, r2
 8004310:	011b      	lsls	r3, r3, #4
 8004312:	1a9b      	subs	r3, r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	440b      	add	r3, r1
 8004318:	333c      	adds	r3, #60	@ 0x3c
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	78fa      	ldrb	r2, [r7, #3]
 800431e:	f083 0301 	eor.w	r3, r3, #1
 8004322:	b2d8      	uxtb	r0, r3
 8004324:	6879      	ldr	r1, [r7, #4]
 8004326:	4613      	mov	r3, r2
 8004328:	011b      	lsls	r3, r3, #4
 800432a:	1a9b      	subs	r3, r3, r2
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	440b      	add	r3, r1
 8004330:	333c      	adds	r3, #60	@ 0x3c
 8004332:	4602      	mov	r2, r0
 8004334:	701a      	strb	r2, [r3, #0]
 8004336:	f000 bc58 	b.w	8004bea <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800433a:	78fa      	ldrb	r2, [r7, #3]
 800433c:	6879      	ldr	r1, [r7, #4]
 800433e:	4613      	mov	r3, r2
 8004340:	011b      	lsls	r3, r3, #4
 8004342:	1a9b      	subs	r3, r3, r2
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	440b      	add	r3, r1
 8004348:	333c      	adds	r3, #60	@ 0x3c
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	78fa      	ldrb	r2, [r7, #3]
 800434e:	f083 0301 	eor.w	r3, r3, #1
 8004352:	b2d8      	uxtb	r0, r3
 8004354:	6879      	ldr	r1, [r7, #4]
 8004356:	4613      	mov	r3, r2
 8004358:	011b      	lsls	r3, r3, #4
 800435a:	1a9b      	subs	r3, r3, r2
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	440b      	add	r3, r1
 8004360:	333c      	adds	r3, #60	@ 0x3c
 8004362:	4602      	mov	r2, r0
 8004364:	701a      	strb	r2, [r3, #0]
 8004366:	f000 bc40 	b.w	8004bea <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	78fa      	ldrb	r2, [r7, #3]
 8004370:	4611      	mov	r1, r2
 8004372:	4618      	mov	r0, r3
 8004374:	f004 f96d 	bl	8008652 <USB_ReadChInterrupts>
 8004378:	4603      	mov	r3, r0
 800437a:	f003 0320 	and.w	r3, r3, #32
 800437e:	2b20      	cmp	r3, #32
 8004380:	d131      	bne.n	80043e6 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004382:	78fb      	ldrb	r3, [r7, #3]
 8004384:	015a      	lsls	r2, r3, #5
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	4413      	add	r3, r2
 800438a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800438e:	461a      	mov	r2, r3
 8004390:	2320      	movs	r3, #32
 8004392:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8004394:	78fa      	ldrb	r2, [r7, #3]
 8004396:	6879      	ldr	r1, [r7, #4]
 8004398:	4613      	mov	r3, r2
 800439a:	011b      	lsls	r3, r3, #4
 800439c:	1a9b      	subs	r3, r3, r2
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	440b      	add	r3, r1
 80043a2:	331a      	adds	r3, #26
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	f040 841f 	bne.w	8004bea <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80043ac:	78fa      	ldrb	r2, [r7, #3]
 80043ae:	6879      	ldr	r1, [r7, #4]
 80043b0:	4613      	mov	r3, r2
 80043b2:	011b      	lsls	r3, r3, #4
 80043b4:	1a9b      	subs	r3, r3, r2
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	440b      	add	r3, r1
 80043ba:	331b      	adds	r3, #27
 80043bc:	2201      	movs	r2, #1
 80043be:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80043c0:	78fa      	ldrb	r2, [r7, #3]
 80043c2:	6879      	ldr	r1, [r7, #4]
 80043c4:	4613      	mov	r3, r2
 80043c6:	011b      	lsls	r3, r3, #4
 80043c8:	1a9b      	subs	r3, r3, r2
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	440b      	add	r3, r1
 80043ce:	334d      	adds	r3, #77	@ 0x4d
 80043d0:	2203      	movs	r2, #3
 80043d2:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	78fa      	ldrb	r2, [r7, #3]
 80043da:	4611      	mov	r1, r2
 80043dc:	4618      	mov	r0, r3
 80043de:	f004 fe80 	bl	80090e2 <USB_HC_Halt>
 80043e2:	f000 bc02 	b.w	8004bea <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	78fa      	ldrb	r2, [r7, #3]
 80043ec:	4611      	mov	r1, r2
 80043ee:	4618      	mov	r0, r3
 80043f0:	f004 f92f 	bl	8008652 <USB_ReadChInterrupts>
 80043f4:	4603      	mov	r3, r0
 80043f6:	f003 0302 	and.w	r3, r3, #2
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	f040 8305 	bne.w	8004a0a <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004400:	78fb      	ldrb	r3, [r7, #3]
 8004402:	015a      	lsls	r2, r3, #5
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	4413      	add	r3, r2
 8004408:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800440c:	461a      	mov	r2, r3
 800440e:	2302      	movs	r3, #2
 8004410:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004412:	78fa      	ldrb	r2, [r7, #3]
 8004414:	6879      	ldr	r1, [r7, #4]
 8004416:	4613      	mov	r3, r2
 8004418:	011b      	lsls	r3, r3, #4
 800441a:	1a9b      	subs	r3, r3, r2
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	440b      	add	r3, r1
 8004420:	334d      	adds	r3, #77	@ 0x4d
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d114      	bne.n	8004452 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004428:	78fa      	ldrb	r2, [r7, #3]
 800442a:	6879      	ldr	r1, [r7, #4]
 800442c:	4613      	mov	r3, r2
 800442e:	011b      	lsls	r3, r3, #4
 8004430:	1a9b      	subs	r3, r3, r2
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	440b      	add	r3, r1
 8004436:	334d      	adds	r3, #77	@ 0x4d
 8004438:	2202      	movs	r2, #2
 800443a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800443c:	78fa      	ldrb	r2, [r7, #3]
 800443e:	6879      	ldr	r1, [r7, #4]
 8004440:	4613      	mov	r3, r2
 8004442:	011b      	lsls	r3, r3, #4
 8004444:	1a9b      	subs	r3, r3, r2
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	440b      	add	r3, r1
 800444a:	334c      	adds	r3, #76	@ 0x4c
 800444c:	2201      	movs	r2, #1
 800444e:	701a      	strb	r2, [r3, #0]
 8004450:	e2cc      	b.n	80049ec <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004452:	78fa      	ldrb	r2, [r7, #3]
 8004454:	6879      	ldr	r1, [r7, #4]
 8004456:	4613      	mov	r3, r2
 8004458:	011b      	lsls	r3, r3, #4
 800445a:	1a9b      	subs	r3, r3, r2
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	440b      	add	r3, r1
 8004460:	334d      	adds	r3, #77	@ 0x4d
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	2b06      	cmp	r3, #6
 8004466:	d114      	bne.n	8004492 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004468:	78fa      	ldrb	r2, [r7, #3]
 800446a:	6879      	ldr	r1, [r7, #4]
 800446c:	4613      	mov	r3, r2
 800446e:	011b      	lsls	r3, r3, #4
 8004470:	1a9b      	subs	r3, r3, r2
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	440b      	add	r3, r1
 8004476:	334d      	adds	r3, #77	@ 0x4d
 8004478:	2202      	movs	r2, #2
 800447a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 800447c:	78fa      	ldrb	r2, [r7, #3]
 800447e:	6879      	ldr	r1, [r7, #4]
 8004480:	4613      	mov	r3, r2
 8004482:	011b      	lsls	r3, r3, #4
 8004484:	1a9b      	subs	r3, r3, r2
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	440b      	add	r3, r1
 800448a:	334c      	adds	r3, #76	@ 0x4c
 800448c:	2205      	movs	r2, #5
 800448e:	701a      	strb	r2, [r3, #0]
 8004490:	e2ac      	b.n	80049ec <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004492:	78fa      	ldrb	r2, [r7, #3]
 8004494:	6879      	ldr	r1, [r7, #4]
 8004496:	4613      	mov	r3, r2
 8004498:	011b      	lsls	r3, r3, #4
 800449a:	1a9b      	subs	r3, r3, r2
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	440b      	add	r3, r1
 80044a0:	334d      	adds	r3, #77	@ 0x4d
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	2b07      	cmp	r3, #7
 80044a6:	d00b      	beq.n	80044c0 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80044a8:	78fa      	ldrb	r2, [r7, #3]
 80044aa:	6879      	ldr	r1, [r7, #4]
 80044ac:	4613      	mov	r3, r2
 80044ae:	011b      	lsls	r3, r3, #4
 80044b0:	1a9b      	subs	r3, r3, r2
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	440b      	add	r3, r1
 80044b6:	334d      	adds	r3, #77	@ 0x4d
 80044b8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80044ba:	2b09      	cmp	r3, #9
 80044bc:	f040 80a6 	bne.w	800460c <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80044c0:	78fa      	ldrb	r2, [r7, #3]
 80044c2:	6879      	ldr	r1, [r7, #4]
 80044c4:	4613      	mov	r3, r2
 80044c6:	011b      	lsls	r3, r3, #4
 80044c8:	1a9b      	subs	r3, r3, r2
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	440b      	add	r3, r1
 80044ce:	334d      	adds	r3, #77	@ 0x4d
 80044d0:	2202      	movs	r2, #2
 80044d2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80044d4:	78fa      	ldrb	r2, [r7, #3]
 80044d6:	6879      	ldr	r1, [r7, #4]
 80044d8:	4613      	mov	r3, r2
 80044da:	011b      	lsls	r3, r3, #4
 80044dc:	1a9b      	subs	r3, r3, r2
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	440b      	add	r3, r1
 80044e2:	3344      	adds	r3, #68	@ 0x44
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	1c59      	adds	r1, r3, #1
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	4613      	mov	r3, r2
 80044ec:	011b      	lsls	r3, r3, #4
 80044ee:	1a9b      	subs	r3, r3, r2
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	4403      	add	r3, r0
 80044f4:	3344      	adds	r3, #68	@ 0x44
 80044f6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80044f8:	78fa      	ldrb	r2, [r7, #3]
 80044fa:	6879      	ldr	r1, [r7, #4]
 80044fc:	4613      	mov	r3, r2
 80044fe:	011b      	lsls	r3, r3, #4
 8004500:	1a9b      	subs	r3, r3, r2
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	440b      	add	r3, r1
 8004506:	3344      	adds	r3, #68	@ 0x44
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2b02      	cmp	r3, #2
 800450c:	d943      	bls.n	8004596 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800450e:	78fa      	ldrb	r2, [r7, #3]
 8004510:	6879      	ldr	r1, [r7, #4]
 8004512:	4613      	mov	r3, r2
 8004514:	011b      	lsls	r3, r3, #4
 8004516:	1a9b      	subs	r3, r3, r2
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	440b      	add	r3, r1
 800451c:	3344      	adds	r3, #68	@ 0x44
 800451e:	2200      	movs	r2, #0
 8004520:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8004522:	78fa      	ldrb	r2, [r7, #3]
 8004524:	6879      	ldr	r1, [r7, #4]
 8004526:	4613      	mov	r3, r2
 8004528:	011b      	lsls	r3, r3, #4
 800452a:	1a9b      	subs	r3, r3, r2
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	440b      	add	r3, r1
 8004530:	331a      	adds	r3, #26
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	2b01      	cmp	r3, #1
 8004536:	d123      	bne.n	8004580 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8004538:	78fa      	ldrb	r2, [r7, #3]
 800453a:	6879      	ldr	r1, [r7, #4]
 800453c:	4613      	mov	r3, r2
 800453e:	011b      	lsls	r3, r3, #4
 8004540:	1a9b      	subs	r3, r3, r2
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	440b      	add	r3, r1
 8004546:	331b      	adds	r3, #27
 8004548:	2200      	movs	r2, #0
 800454a:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 800454c:	78fa      	ldrb	r2, [r7, #3]
 800454e:	6879      	ldr	r1, [r7, #4]
 8004550:	4613      	mov	r3, r2
 8004552:	011b      	lsls	r3, r3, #4
 8004554:	1a9b      	subs	r3, r3, r2
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	440b      	add	r3, r1
 800455a:	331c      	adds	r3, #28
 800455c:	2200      	movs	r2, #0
 800455e:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004560:	78fb      	ldrb	r3, [r7, #3]
 8004562:	015a      	lsls	r2, r3, #5
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	4413      	add	r3, r2
 8004568:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	78fa      	ldrb	r2, [r7, #3]
 8004570:	0151      	lsls	r1, r2, #5
 8004572:	693a      	ldr	r2, [r7, #16]
 8004574:	440a      	add	r2, r1
 8004576:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800457a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800457e:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004580:	78fa      	ldrb	r2, [r7, #3]
 8004582:	6879      	ldr	r1, [r7, #4]
 8004584:	4613      	mov	r3, r2
 8004586:	011b      	lsls	r3, r3, #4
 8004588:	1a9b      	subs	r3, r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	440b      	add	r3, r1
 800458e:	334c      	adds	r3, #76	@ 0x4c
 8004590:	2204      	movs	r2, #4
 8004592:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004594:	e229      	b.n	80049ea <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004596:	78fa      	ldrb	r2, [r7, #3]
 8004598:	6879      	ldr	r1, [r7, #4]
 800459a:	4613      	mov	r3, r2
 800459c:	011b      	lsls	r3, r3, #4
 800459e:	1a9b      	subs	r3, r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	440b      	add	r3, r1
 80045a4:	334c      	adds	r3, #76	@ 0x4c
 80045a6:	2202      	movs	r2, #2
 80045a8:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80045aa:	78fa      	ldrb	r2, [r7, #3]
 80045ac:	6879      	ldr	r1, [r7, #4]
 80045ae:	4613      	mov	r3, r2
 80045b0:	011b      	lsls	r3, r3, #4
 80045b2:	1a9b      	subs	r3, r3, r2
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	440b      	add	r3, r1
 80045b8:	3326      	adds	r3, #38	@ 0x26
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00b      	beq.n	80045d8 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80045c0:	78fa      	ldrb	r2, [r7, #3]
 80045c2:	6879      	ldr	r1, [r7, #4]
 80045c4:	4613      	mov	r3, r2
 80045c6:	011b      	lsls	r3, r3, #4
 80045c8:	1a9b      	subs	r3, r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	440b      	add	r3, r1
 80045ce:	3326      	adds	r3, #38	@ 0x26
 80045d0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	f040 8209 	bne.w	80049ea <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80045d8:	78fb      	ldrb	r3, [r7, #3]
 80045da:	015a      	lsls	r2, r3, #5
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	4413      	add	r3, r2
 80045e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80045ee:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80045f6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80045f8:	78fb      	ldrb	r3, [r7, #3]
 80045fa:	015a      	lsls	r2, r3, #5
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	4413      	add	r3, r2
 8004600:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004604:	461a      	mov	r2, r3
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800460a:	e1ee      	b.n	80049ea <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800460c:	78fa      	ldrb	r2, [r7, #3]
 800460e:	6879      	ldr	r1, [r7, #4]
 8004610:	4613      	mov	r3, r2
 8004612:	011b      	lsls	r3, r3, #4
 8004614:	1a9b      	subs	r3, r3, r2
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	440b      	add	r3, r1
 800461a:	334d      	adds	r3, #77	@ 0x4d
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	2b05      	cmp	r3, #5
 8004620:	f040 80c8 	bne.w	80047b4 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004624:	78fa      	ldrb	r2, [r7, #3]
 8004626:	6879      	ldr	r1, [r7, #4]
 8004628:	4613      	mov	r3, r2
 800462a:	011b      	lsls	r3, r3, #4
 800462c:	1a9b      	subs	r3, r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	440b      	add	r3, r1
 8004632:	334d      	adds	r3, #77	@ 0x4d
 8004634:	2202      	movs	r2, #2
 8004636:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004638:	78fa      	ldrb	r2, [r7, #3]
 800463a:	6879      	ldr	r1, [r7, #4]
 800463c:	4613      	mov	r3, r2
 800463e:	011b      	lsls	r3, r3, #4
 8004640:	1a9b      	subs	r3, r3, r2
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	440b      	add	r3, r1
 8004646:	331b      	adds	r3, #27
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	2b01      	cmp	r3, #1
 800464c:	f040 81ce 	bne.w	80049ec <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004650:	78fa      	ldrb	r2, [r7, #3]
 8004652:	6879      	ldr	r1, [r7, #4]
 8004654:	4613      	mov	r3, r2
 8004656:	011b      	lsls	r3, r3, #4
 8004658:	1a9b      	subs	r3, r3, r2
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	440b      	add	r3, r1
 800465e:	3326      	adds	r3, #38	@ 0x26
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	2b03      	cmp	r3, #3
 8004664:	d16b      	bne.n	800473e <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8004666:	78fa      	ldrb	r2, [r7, #3]
 8004668:	6879      	ldr	r1, [r7, #4]
 800466a:	4613      	mov	r3, r2
 800466c:	011b      	lsls	r3, r3, #4
 800466e:	1a9b      	subs	r3, r3, r2
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	440b      	add	r3, r1
 8004674:	3348      	adds	r3, #72	@ 0x48
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	1c59      	adds	r1, r3, #1
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	4613      	mov	r3, r2
 800467e:	011b      	lsls	r3, r3, #4
 8004680:	1a9b      	subs	r3, r3, r2
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	4403      	add	r3, r0
 8004686:	3348      	adds	r3, #72	@ 0x48
 8004688:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800468a:	78fa      	ldrb	r2, [r7, #3]
 800468c:	6879      	ldr	r1, [r7, #4]
 800468e:	4613      	mov	r3, r2
 8004690:	011b      	lsls	r3, r3, #4
 8004692:	1a9b      	subs	r3, r3, r2
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	440b      	add	r3, r1
 8004698:	3348      	adds	r3, #72	@ 0x48
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2b02      	cmp	r3, #2
 800469e:	d943      	bls.n	8004728 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80046a0:	78fa      	ldrb	r2, [r7, #3]
 80046a2:	6879      	ldr	r1, [r7, #4]
 80046a4:	4613      	mov	r3, r2
 80046a6:	011b      	lsls	r3, r3, #4
 80046a8:	1a9b      	subs	r3, r3, r2
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	440b      	add	r3, r1
 80046ae:	3348      	adds	r3, #72	@ 0x48
 80046b0:	2200      	movs	r2, #0
 80046b2:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80046b4:	78fa      	ldrb	r2, [r7, #3]
 80046b6:	6879      	ldr	r1, [r7, #4]
 80046b8:	4613      	mov	r3, r2
 80046ba:	011b      	lsls	r3, r3, #4
 80046bc:	1a9b      	subs	r3, r3, r2
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	440b      	add	r3, r1
 80046c2:	331b      	adds	r3, #27
 80046c4:	2200      	movs	r2, #0
 80046c6:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80046c8:	78fa      	ldrb	r2, [r7, #3]
 80046ca:	6879      	ldr	r1, [r7, #4]
 80046cc:	4613      	mov	r3, r2
 80046ce:	011b      	lsls	r3, r3, #4
 80046d0:	1a9b      	subs	r3, r3, r2
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	440b      	add	r3, r1
 80046d6:	3344      	adds	r3, #68	@ 0x44
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d809      	bhi.n	80046f2 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80046de:	78fa      	ldrb	r2, [r7, #3]
 80046e0:	6879      	ldr	r1, [r7, #4]
 80046e2:	4613      	mov	r3, r2
 80046e4:	011b      	lsls	r3, r3, #4
 80046e6:	1a9b      	subs	r3, r3, r2
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	440b      	add	r3, r1
 80046ec:	331c      	adds	r3, #28
 80046ee:	2201      	movs	r2, #1
 80046f0:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80046f2:	78fb      	ldrb	r3, [r7, #3]
 80046f4:	015a      	lsls	r2, r3, #5
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	4413      	add	r3, r2
 80046fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	78fa      	ldrb	r2, [r7, #3]
 8004702:	0151      	lsls	r1, r2, #5
 8004704:	693a      	ldr	r2, [r7, #16]
 8004706:	440a      	add	r2, r1
 8004708:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800470c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004710:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8004712:	78fa      	ldrb	r2, [r7, #3]
 8004714:	6879      	ldr	r1, [r7, #4]
 8004716:	4613      	mov	r3, r2
 8004718:	011b      	lsls	r3, r3, #4
 800471a:	1a9b      	subs	r3, r3, r2
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	440b      	add	r3, r1
 8004720:	334c      	adds	r3, #76	@ 0x4c
 8004722:	2204      	movs	r2, #4
 8004724:	701a      	strb	r2, [r3, #0]
 8004726:	e014      	b.n	8004752 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004728:	78fa      	ldrb	r2, [r7, #3]
 800472a:	6879      	ldr	r1, [r7, #4]
 800472c:	4613      	mov	r3, r2
 800472e:	011b      	lsls	r3, r3, #4
 8004730:	1a9b      	subs	r3, r3, r2
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	440b      	add	r3, r1
 8004736:	334c      	adds	r3, #76	@ 0x4c
 8004738:	2202      	movs	r2, #2
 800473a:	701a      	strb	r2, [r3, #0]
 800473c:	e009      	b.n	8004752 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800473e:	78fa      	ldrb	r2, [r7, #3]
 8004740:	6879      	ldr	r1, [r7, #4]
 8004742:	4613      	mov	r3, r2
 8004744:	011b      	lsls	r3, r3, #4
 8004746:	1a9b      	subs	r3, r3, r2
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	440b      	add	r3, r1
 800474c:	334c      	adds	r3, #76	@ 0x4c
 800474e:	2202      	movs	r2, #2
 8004750:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004752:	78fa      	ldrb	r2, [r7, #3]
 8004754:	6879      	ldr	r1, [r7, #4]
 8004756:	4613      	mov	r3, r2
 8004758:	011b      	lsls	r3, r3, #4
 800475a:	1a9b      	subs	r3, r3, r2
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	440b      	add	r3, r1
 8004760:	3326      	adds	r3, #38	@ 0x26
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d00b      	beq.n	8004780 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004768:	78fa      	ldrb	r2, [r7, #3]
 800476a:	6879      	ldr	r1, [r7, #4]
 800476c:	4613      	mov	r3, r2
 800476e:	011b      	lsls	r3, r3, #4
 8004770:	1a9b      	subs	r3, r3, r2
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	440b      	add	r3, r1
 8004776:	3326      	adds	r3, #38	@ 0x26
 8004778:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800477a:	2b02      	cmp	r3, #2
 800477c:	f040 8136 	bne.w	80049ec <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004780:	78fb      	ldrb	r3, [r7, #3]
 8004782:	015a      	lsls	r2, r3, #5
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	4413      	add	r3, r2
 8004788:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004796:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800479e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80047a0:	78fb      	ldrb	r3, [r7, #3]
 80047a2:	015a      	lsls	r2, r3, #5
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	4413      	add	r3, r2
 80047a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047ac:	461a      	mov	r2, r3
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6013      	str	r3, [r2, #0]
 80047b2:	e11b      	b.n	80049ec <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80047b4:	78fa      	ldrb	r2, [r7, #3]
 80047b6:	6879      	ldr	r1, [r7, #4]
 80047b8:	4613      	mov	r3, r2
 80047ba:	011b      	lsls	r3, r3, #4
 80047bc:	1a9b      	subs	r3, r3, r2
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	440b      	add	r3, r1
 80047c2:	334d      	adds	r3, #77	@ 0x4d
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	2b03      	cmp	r3, #3
 80047c8:	f040 8081 	bne.w	80048ce <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80047cc:	78fa      	ldrb	r2, [r7, #3]
 80047ce:	6879      	ldr	r1, [r7, #4]
 80047d0:	4613      	mov	r3, r2
 80047d2:	011b      	lsls	r3, r3, #4
 80047d4:	1a9b      	subs	r3, r3, r2
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	440b      	add	r3, r1
 80047da:	334d      	adds	r3, #77	@ 0x4d
 80047dc:	2202      	movs	r2, #2
 80047de:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80047e0:	78fa      	ldrb	r2, [r7, #3]
 80047e2:	6879      	ldr	r1, [r7, #4]
 80047e4:	4613      	mov	r3, r2
 80047e6:	011b      	lsls	r3, r3, #4
 80047e8:	1a9b      	subs	r3, r3, r2
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	440b      	add	r3, r1
 80047ee:	331b      	adds	r3, #27
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	f040 80fa 	bne.w	80049ec <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80047f8:	78fa      	ldrb	r2, [r7, #3]
 80047fa:	6879      	ldr	r1, [r7, #4]
 80047fc:	4613      	mov	r3, r2
 80047fe:	011b      	lsls	r3, r3, #4
 8004800:	1a9b      	subs	r3, r3, r2
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	440b      	add	r3, r1
 8004806:	334c      	adds	r3, #76	@ 0x4c
 8004808:	2202      	movs	r2, #2
 800480a:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800480c:	78fb      	ldrb	r3, [r7, #3]
 800480e:	015a      	lsls	r2, r3, #5
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	4413      	add	r3, r2
 8004814:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	78fa      	ldrb	r2, [r7, #3]
 800481c:	0151      	lsls	r1, r2, #5
 800481e:	693a      	ldr	r2, [r7, #16]
 8004820:	440a      	add	r2, r1
 8004822:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004826:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800482a:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800482c:	78fb      	ldrb	r3, [r7, #3]
 800482e:	015a      	lsls	r2, r3, #5
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	4413      	add	r3, r2
 8004834:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	78fa      	ldrb	r2, [r7, #3]
 800483c:	0151      	lsls	r1, r2, #5
 800483e:	693a      	ldr	r2, [r7, #16]
 8004840:	440a      	add	r2, r1
 8004842:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004846:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800484a:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 800484c:	78fb      	ldrb	r3, [r7, #3]
 800484e:	015a      	lsls	r2, r3, #5
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	4413      	add	r3, r2
 8004854:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	78fa      	ldrb	r2, [r7, #3]
 800485c:	0151      	lsls	r1, r2, #5
 800485e:	693a      	ldr	r2, [r7, #16]
 8004860:	440a      	add	r2, r1
 8004862:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004866:	f023 0320 	bic.w	r3, r3, #32
 800486a:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800486c:	78fa      	ldrb	r2, [r7, #3]
 800486e:	6879      	ldr	r1, [r7, #4]
 8004870:	4613      	mov	r3, r2
 8004872:	011b      	lsls	r3, r3, #4
 8004874:	1a9b      	subs	r3, r3, r2
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	440b      	add	r3, r1
 800487a:	3326      	adds	r3, #38	@ 0x26
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00b      	beq.n	800489a <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004882:	78fa      	ldrb	r2, [r7, #3]
 8004884:	6879      	ldr	r1, [r7, #4]
 8004886:	4613      	mov	r3, r2
 8004888:	011b      	lsls	r3, r3, #4
 800488a:	1a9b      	subs	r3, r3, r2
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	440b      	add	r3, r1
 8004890:	3326      	adds	r3, #38	@ 0x26
 8004892:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004894:	2b02      	cmp	r3, #2
 8004896:	f040 80a9 	bne.w	80049ec <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800489a:	78fb      	ldrb	r3, [r7, #3]
 800489c:	015a      	lsls	r2, r3, #5
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	4413      	add	r3, r2
 80048a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80048b0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80048b8:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80048ba:	78fb      	ldrb	r3, [r7, #3]
 80048bc:	015a      	lsls	r2, r3, #5
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	4413      	add	r3, r2
 80048c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048c6:	461a      	mov	r2, r3
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6013      	str	r3, [r2, #0]
 80048cc:	e08e      	b.n	80049ec <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80048ce:	78fa      	ldrb	r2, [r7, #3]
 80048d0:	6879      	ldr	r1, [r7, #4]
 80048d2:	4613      	mov	r3, r2
 80048d4:	011b      	lsls	r3, r3, #4
 80048d6:	1a9b      	subs	r3, r3, r2
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	440b      	add	r3, r1
 80048dc:	334d      	adds	r3, #77	@ 0x4d
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	2b04      	cmp	r3, #4
 80048e2:	d143      	bne.n	800496c <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80048e4:	78fa      	ldrb	r2, [r7, #3]
 80048e6:	6879      	ldr	r1, [r7, #4]
 80048e8:	4613      	mov	r3, r2
 80048ea:	011b      	lsls	r3, r3, #4
 80048ec:	1a9b      	subs	r3, r3, r2
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	440b      	add	r3, r1
 80048f2:	334d      	adds	r3, #77	@ 0x4d
 80048f4:	2202      	movs	r2, #2
 80048f6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80048f8:	78fa      	ldrb	r2, [r7, #3]
 80048fa:	6879      	ldr	r1, [r7, #4]
 80048fc:	4613      	mov	r3, r2
 80048fe:	011b      	lsls	r3, r3, #4
 8004900:	1a9b      	subs	r3, r3, r2
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	440b      	add	r3, r1
 8004906:	334c      	adds	r3, #76	@ 0x4c
 8004908:	2202      	movs	r2, #2
 800490a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800490c:	78fa      	ldrb	r2, [r7, #3]
 800490e:	6879      	ldr	r1, [r7, #4]
 8004910:	4613      	mov	r3, r2
 8004912:	011b      	lsls	r3, r3, #4
 8004914:	1a9b      	subs	r3, r3, r2
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	440b      	add	r3, r1
 800491a:	3326      	adds	r3, #38	@ 0x26
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00a      	beq.n	8004938 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004922:	78fa      	ldrb	r2, [r7, #3]
 8004924:	6879      	ldr	r1, [r7, #4]
 8004926:	4613      	mov	r3, r2
 8004928:	011b      	lsls	r3, r3, #4
 800492a:	1a9b      	subs	r3, r3, r2
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	440b      	add	r3, r1
 8004930:	3326      	adds	r3, #38	@ 0x26
 8004932:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004934:	2b02      	cmp	r3, #2
 8004936:	d159      	bne.n	80049ec <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004938:	78fb      	ldrb	r3, [r7, #3]
 800493a:	015a      	lsls	r2, r3, #5
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	4413      	add	r3, r2
 8004940:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800494e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004956:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004958:	78fb      	ldrb	r3, [r7, #3]
 800495a:	015a      	lsls	r2, r3, #5
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	4413      	add	r3, r2
 8004960:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004964:	461a      	mov	r2, r3
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6013      	str	r3, [r2, #0]
 800496a:	e03f      	b.n	80049ec <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 800496c:	78fa      	ldrb	r2, [r7, #3]
 800496e:	6879      	ldr	r1, [r7, #4]
 8004970:	4613      	mov	r3, r2
 8004972:	011b      	lsls	r3, r3, #4
 8004974:	1a9b      	subs	r3, r3, r2
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	440b      	add	r3, r1
 800497a:	334d      	adds	r3, #77	@ 0x4d
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	2b08      	cmp	r3, #8
 8004980:	d126      	bne.n	80049d0 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004982:	78fa      	ldrb	r2, [r7, #3]
 8004984:	6879      	ldr	r1, [r7, #4]
 8004986:	4613      	mov	r3, r2
 8004988:	011b      	lsls	r3, r3, #4
 800498a:	1a9b      	subs	r3, r3, r2
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	440b      	add	r3, r1
 8004990:	334d      	adds	r3, #77	@ 0x4d
 8004992:	2202      	movs	r2, #2
 8004994:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004996:	78fa      	ldrb	r2, [r7, #3]
 8004998:	6879      	ldr	r1, [r7, #4]
 800499a:	4613      	mov	r3, r2
 800499c:	011b      	lsls	r3, r3, #4
 800499e:	1a9b      	subs	r3, r3, r2
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	440b      	add	r3, r1
 80049a4:	3344      	adds	r3, #68	@ 0x44
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	1c59      	adds	r1, r3, #1
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	4613      	mov	r3, r2
 80049ae:	011b      	lsls	r3, r3, #4
 80049b0:	1a9b      	subs	r3, r3, r2
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	4403      	add	r3, r0
 80049b6:	3344      	adds	r3, #68	@ 0x44
 80049b8:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80049ba:	78fa      	ldrb	r2, [r7, #3]
 80049bc:	6879      	ldr	r1, [r7, #4]
 80049be:	4613      	mov	r3, r2
 80049c0:	011b      	lsls	r3, r3, #4
 80049c2:	1a9b      	subs	r3, r3, r2
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	440b      	add	r3, r1
 80049c8:	334c      	adds	r3, #76	@ 0x4c
 80049ca:	2204      	movs	r2, #4
 80049cc:	701a      	strb	r2, [r3, #0]
 80049ce:	e00d      	b.n	80049ec <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80049d0:	78fa      	ldrb	r2, [r7, #3]
 80049d2:	6879      	ldr	r1, [r7, #4]
 80049d4:	4613      	mov	r3, r2
 80049d6:	011b      	lsls	r3, r3, #4
 80049d8:	1a9b      	subs	r3, r3, r2
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	440b      	add	r3, r1
 80049de:	334d      	adds	r3, #77	@ 0x4d
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	f000 8100 	beq.w	8004be8 <HCD_HC_IN_IRQHandler+0xcca>
 80049e8:	e000      	b.n	80049ec <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80049ea:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80049ec:	78fa      	ldrb	r2, [r7, #3]
 80049ee:	6879      	ldr	r1, [r7, #4]
 80049f0:	4613      	mov	r3, r2
 80049f2:	011b      	lsls	r3, r3, #4
 80049f4:	1a9b      	subs	r3, r3, r2
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	440b      	add	r3, r1
 80049fa:	334c      	adds	r3, #76	@ 0x4c
 80049fc:	781a      	ldrb	r2, [r3, #0]
 80049fe:	78fb      	ldrb	r3, [r7, #3]
 8004a00:	4619      	mov	r1, r3
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f006 fe90 	bl	800b728 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004a08:	e0ef      	b.n	8004bea <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	78fa      	ldrb	r2, [r7, #3]
 8004a10:	4611      	mov	r1, r2
 8004a12:	4618      	mov	r0, r3
 8004a14:	f003 fe1d 	bl	8008652 <USB_ReadChInterrupts>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a1e:	2b40      	cmp	r3, #64	@ 0x40
 8004a20:	d12f      	bne.n	8004a82 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004a22:	78fb      	ldrb	r3, [r7, #3]
 8004a24:	015a      	lsls	r2, r3, #5
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	4413      	add	r3, r2
 8004a2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a2e:	461a      	mov	r2, r3
 8004a30:	2340      	movs	r3, #64	@ 0x40
 8004a32:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8004a34:	78fa      	ldrb	r2, [r7, #3]
 8004a36:	6879      	ldr	r1, [r7, #4]
 8004a38:	4613      	mov	r3, r2
 8004a3a:	011b      	lsls	r3, r3, #4
 8004a3c:	1a9b      	subs	r3, r3, r2
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	440b      	add	r3, r1
 8004a42:	334d      	adds	r3, #77	@ 0x4d
 8004a44:	2205      	movs	r2, #5
 8004a46:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004a48:	78fa      	ldrb	r2, [r7, #3]
 8004a4a:	6879      	ldr	r1, [r7, #4]
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	011b      	lsls	r3, r3, #4
 8004a50:	1a9b      	subs	r3, r3, r2
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	440b      	add	r3, r1
 8004a56:	331a      	adds	r3, #26
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d109      	bne.n	8004a72 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004a5e:	78fa      	ldrb	r2, [r7, #3]
 8004a60:	6879      	ldr	r1, [r7, #4]
 8004a62:	4613      	mov	r3, r2
 8004a64:	011b      	lsls	r3, r3, #4
 8004a66:	1a9b      	subs	r3, r3, r2
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	440b      	add	r3, r1
 8004a6c:	3344      	adds	r3, #68	@ 0x44
 8004a6e:	2200      	movs	r2, #0
 8004a70:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	78fa      	ldrb	r2, [r7, #3]
 8004a78:	4611      	mov	r1, r2
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f004 fb31 	bl	80090e2 <USB_HC_Halt>
 8004a80:	e0b3      	b.n	8004bea <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	78fa      	ldrb	r2, [r7, #3]
 8004a88:	4611      	mov	r1, r2
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f003 fde1 	bl	8008652 <USB_ReadChInterrupts>
 8004a90:	4603      	mov	r3, r0
 8004a92:	f003 0310 	and.w	r3, r3, #16
 8004a96:	2b10      	cmp	r3, #16
 8004a98:	f040 80a7 	bne.w	8004bea <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004a9c:	78fa      	ldrb	r2, [r7, #3]
 8004a9e:	6879      	ldr	r1, [r7, #4]
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	011b      	lsls	r3, r3, #4
 8004aa4:	1a9b      	subs	r3, r3, r2
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	440b      	add	r3, r1
 8004aaa:	3326      	adds	r3, #38	@ 0x26
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	2b03      	cmp	r3, #3
 8004ab0:	d11b      	bne.n	8004aea <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004ab2:	78fa      	ldrb	r2, [r7, #3]
 8004ab4:	6879      	ldr	r1, [r7, #4]
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	011b      	lsls	r3, r3, #4
 8004aba:	1a9b      	subs	r3, r3, r2
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	440b      	add	r3, r1
 8004ac0:	3344      	adds	r3, #68	@ 0x44
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8004ac6:	78fa      	ldrb	r2, [r7, #3]
 8004ac8:	6879      	ldr	r1, [r7, #4]
 8004aca:	4613      	mov	r3, r2
 8004acc:	011b      	lsls	r3, r3, #4
 8004ace:	1a9b      	subs	r3, r3, r2
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	440b      	add	r3, r1
 8004ad4:	334d      	adds	r3, #77	@ 0x4d
 8004ad6:	2204      	movs	r2, #4
 8004ad8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	78fa      	ldrb	r2, [r7, #3]
 8004ae0:	4611      	mov	r1, r2
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f004 fafd 	bl	80090e2 <USB_HC_Halt>
 8004ae8:	e03f      	b.n	8004b6a <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004aea:	78fa      	ldrb	r2, [r7, #3]
 8004aec:	6879      	ldr	r1, [r7, #4]
 8004aee:	4613      	mov	r3, r2
 8004af0:	011b      	lsls	r3, r3, #4
 8004af2:	1a9b      	subs	r3, r3, r2
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	440b      	add	r3, r1
 8004af8:	3326      	adds	r3, #38	@ 0x26
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d00a      	beq.n	8004b16 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004b00:	78fa      	ldrb	r2, [r7, #3]
 8004b02:	6879      	ldr	r1, [r7, #4]
 8004b04:	4613      	mov	r3, r2
 8004b06:	011b      	lsls	r3, r3, #4
 8004b08:	1a9b      	subs	r3, r3, r2
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	440b      	add	r3, r1
 8004b0e:	3326      	adds	r3, #38	@ 0x26
 8004b10:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d129      	bne.n	8004b6a <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004b16:	78fa      	ldrb	r2, [r7, #3]
 8004b18:	6879      	ldr	r1, [r7, #4]
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	011b      	lsls	r3, r3, #4
 8004b1e:	1a9b      	subs	r3, r3, r2
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	440b      	add	r3, r1
 8004b24:	3344      	adds	r3, #68	@ 0x44
 8004b26:	2200      	movs	r2, #0
 8004b28:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	799b      	ldrb	r3, [r3, #6]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00a      	beq.n	8004b48 <HCD_HC_IN_IRQHandler+0xc2a>
 8004b32:	78fa      	ldrb	r2, [r7, #3]
 8004b34:	6879      	ldr	r1, [r7, #4]
 8004b36:	4613      	mov	r3, r2
 8004b38:	011b      	lsls	r3, r3, #4
 8004b3a:	1a9b      	subs	r3, r3, r2
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	440b      	add	r3, r1
 8004b40:	331b      	adds	r3, #27
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d110      	bne.n	8004b6a <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8004b48:	78fa      	ldrb	r2, [r7, #3]
 8004b4a:	6879      	ldr	r1, [r7, #4]
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	011b      	lsls	r3, r3, #4
 8004b50:	1a9b      	subs	r3, r3, r2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	440b      	add	r3, r1
 8004b56:	334d      	adds	r3, #77	@ 0x4d
 8004b58:	2204      	movs	r2, #4
 8004b5a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	78fa      	ldrb	r2, [r7, #3]
 8004b62:	4611      	mov	r1, r2
 8004b64:	4618      	mov	r0, r3
 8004b66:	f004 fabc 	bl	80090e2 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004b6a:	78fa      	ldrb	r2, [r7, #3]
 8004b6c:	6879      	ldr	r1, [r7, #4]
 8004b6e:	4613      	mov	r3, r2
 8004b70:	011b      	lsls	r3, r3, #4
 8004b72:	1a9b      	subs	r3, r3, r2
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	440b      	add	r3, r1
 8004b78:	331b      	adds	r3, #27
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d129      	bne.n	8004bd4 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004b80:	78fa      	ldrb	r2, [r7, #3]
 8004b82:	6879      	ldr	r1, [r7, #4]
 8004b84:	4613      	mov	r3, r2
 8004b86:	011b      	lsls	r3, r3, #4
 8004b88:	1a9b      	subs	r3, r3, r2
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	440b      	add	r3, r1
 8004b8e:	331b      	adds	r3, #27
 8004b90:	2200      	movs	r2, #0
 8004b92:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004b94:	78fb      	ldrb	r3, [r7, #3]
 8004b96:	015a      	lsls	r2, r3, #5
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	4413      	add	r3, r2
 8004b9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	78fa      	ldrb	r2, [r7, #3]
 8004ba4:	0151      	lsls	r1, r2, #5
 8004ba6:	693a      	ldr	r2, [r7, #16]
 8004ba8:	440a      	add	r2, r1
 8004baa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004bae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bb2:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8004bb4:	78fb      	ldrb	r3, [r7, #3]
 8004bb6:	015a      	lsls	r2, r3, #5
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	4413      	add	r3, r2
 8004bbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	78fa      	ldrb	r2, [r7, #3]
 8004bc4:	0151      	lsls	r1, r2, #5
 8004bc6:	693a      	ldr	r2, [r7, #16]
 8004bc8:	440a      	add	r2, r1
 8004bca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004bce:	f043 0320 	orr.w	r3, r3, #32
 8004bd2:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004bd4:	78fb      	ldrb	r3, [r7, #3]
 8004bd6:	015a      	lsls	r2, r3, #5
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	4413      	add	r3, r2
 8004bdc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004be0:	461a      	mov	r2, r3
 8004be2:	2310      	movs	r3, #16
 8004be4:	6093      	str	r3, [r2, #8]
 8004be6:	e000      	b.n	8004bea <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8004be8:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8004bea:	3718      	adds	r7, #24
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b086      	sub	sp, #24
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	460b      	mov	r3, r1
 8004bfa:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	78fa      	ldrb	r2, [r7, #3]
 8004c0c:	4611      	mov	r1, r2
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f003 fd1f 	bl	8008652 <USB_ReadChInterrupts>
 8004c14:	4603      	mov	r3, r0
 8004c16:	f003 0304 	and.w	r3, r3, #4
 8004c1a:	2b04      	cmp	r3, #4
 8004c1c:	d11b      	bne.n	8004c56 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004c1e:	78fb      	ldrb	r3, [r7, #3]
 8004c20:	015a      	lsls	r2, r3, #5
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	4413      	add	r3, r2
 8004c26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	2304      	movs	r3, #4
 8004c2e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004c30:	78fa      	ldrb	r2, [r7, #3]
 8004c32:	6879      	ldr	r1, [r7, #4]
 8004c34:	4613      	mov	r3, r2
 8004c36:	011b      	lsls	r3, r3, #4
 8004c38:	1a9b      	subs	r3, r3, r2
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	440b      	add	r3, r1
 8004c3e:	334d      	adds	r3, #77	@ 0x4d
 8004c40:	2207      	movs	r2, #7
 8004c42:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	78fa      	ldrb	r2, [r7, #3]
 8004c4a:	4611      	mov	r1, r2
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f004 fa48 	bl	80090e2 <USB_HC_Halt>
 8004c52:	f000 bc89 	b.w	8005568 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	78fa      	ldrb	r2, [r7, #3]
 8004c5c:	4611      	mov	r1, r2
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f003 fcf7 	bl	8008652 <USB_ReadChInterrupts>
 8004c64:	4603      	mov	r3, r0
 8004c66:	f003 0320 	and.w	r3, r3, #32
 8004c6a:	2b20      	cmp	r3, #32
 8004c6c:	f040 8082 	bne.w	8004d74 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004c70:	78fb      	ldrb	r3, [r7, #3]
 8004c72:	015a      	lsls	r2, r3, #5
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	4413      	add	r3, r2
 8004c78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	2320      	movs	r3, #32
 8004c80:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8004c82:	78fa      	ldrb	r2, [r7, #3]
 8004c84:	6879      	ldr	r1, [r7, #4]
 8004c86:	4613      	mov	r3, r2
 8004c88:	011b      	lsls	r3, r3, #4
 8004c8a:	1a9b      	subs	r3, r3, r2
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	440b      	add	r3, r1
 8004c90:	3319      	adds	r3, #25
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d124      	bne.n	8004ce2 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8004c98:	78fa      	ldrb	r2, [r7, #3]
 8004c9a:	6879      	ldr	r1, [r7, #4]
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	011b      	lsls	r3, r3, #4
 8004ca0:	1a9b      	subs	r3, r3, r2
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	440b      	add	r3, r1
 8004ca6:	3319      	adds	r3, #25
 8004ca8:	2200      	movs	r2, #0
 8004caa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004cac:	78fa      	ldrb	r2, [r7, #3]
 8004cae:	6879      	ldr	r1, [r7, #4]
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	011b      	lsls	r3, r3, #4
 8004cb4:	1a9b      	subs	r3, r3, r2
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	440b      	add	r3, r1
 8004cba:	334c      	adds	r3, #76	@ 0x4c
 8004cbc:	2202      	movs	r2, #2
 8004cbe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004cc0:	78fa      	ldrb	r2, [r7, #3]
 8004cc2:	6879      	ldr	r1, [r7, #4]
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	011b      	lsls	r3, r3, #4
 8004cc8:	1a9b      	subs	r3, r3, r2
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	440b      	add	r3, r1
 8004cce:	334d      	adds	r3, #77	@ 0x4d
 8004cd0:	2203      	movs	r2, #3
 8004cd2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	78fa      	ldrb	r2, [r7, #3]
 8004cda:	4611      	mov	r1, r2
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f004 fa00 	bl	80090e2 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8004ce2:	78fa      	ldrb	r2, [r7, #3]
 8004ce4:	6879      	ldr	r1, [r7, #4]
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	011b      	lsls	r3, r3, #4
 8004cea:	1a9b      	subs	r3, r3, r2
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	440b      	add	r3, r1
 8004cf0:	331a      	adds	r3, #26
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	f040 8437 	bne.w	8005568 <HCD_HC_OUT_IRQHandler+0x978>
 8004cfa:	78fa      	ldrb	r2, [r7, #3]
 8004cfc:	6879      	ldr	r1, [r7, #4]
 8004cfe:	4613      	mov	r3, r2
 8004d00:	011b      	lsls	r3, r3, #4
 8004d02:	1a9b      	subs	r3, r3, r2
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	440b      	add	r3, r1
 8004d08:	331b      	adds	r3, #27
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	f040 842b 	bne.w	8005568 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8004d12:	78fa      	ldrb	r2, [r7, #3]
 8004d14:	6879      	ldr	r1, [r7, #4]
 8004d16:	4613      	mov	r3, r2
 8004d18:	011b      	lsls	r3, r3, #4
 8004d1a:	1a9b      	subs	r3, r3, r2
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	440b      	add	r3, r1
 8004d20:	3326      	adds	r3, #38	@ 0x26
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d009      	beq.n	8004d3c <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004d28:	78fa      	ldrb	r2, [r7, #3]
 8004d2a:	6879      	ldr	r1, [r7, #4]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	011b      	lsls	r3, r3, #4
 8004d30:	1a9b      	subs	r3, r3, r2
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	440b      	add	r3, r1
 8004d36:	331b      	adds	r3, #27
 8004d38:	2201      	movs	r2, #1
 8004d3a:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8004d3c:	78fa      	ldrb	r2, [r7, #3]
 8004d3e:	6879      	ldr	r1, [r7, #4]
 8004d40:	4613      	mov	r3, r2
 8004d42:	011b      	lsls	r3, r3, #4
 8004d44:	1a9b      	subs	r3, r3, r2
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	440b      	add	r3, r1
 8004d4a:	334d      	adds	r3, #77	@ 0x4d
 8004d4c:	2203      	movs	r2, #3
 8004d4e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	78fa      	ldrb	r2, [r7, #3]
 8004d56:	4611      	mov	r1, r2
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f004 f9c2 	bl	80090e2 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8004d5e:	78fa      	ldrb	r2, [r7, #3]
 8004d60:	6879      	ldr	r1, [r7, #4]
 8004d62:	4613      	mov	r3, r2
 8004d64:	011b      	lsls	r3, r3, #4
 8004d66:	1a9b      	subs	r3, r3, r2
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	440b      	add	r3, r1
 8004d6c:	3344      	adds	r3, #68	@ 0x44
 8004d6e:	2200      	movs	r2, #0
 8004d70:	601a      	str	r2, [r3, #0]
 8004d72:	e3f9      	b.n	8005568 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	78fa      	ldrb	r2, [r7, #3]
 8004d7a:	4611      	mov	r1, r2
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f003 fc68 	bl	8008652 <USB_ReadChInterrupts>
 8004d82:	4603      	mov	r3, r0
 8004d84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d8c:	d111      	bne.n	8004db2 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004d8e:	78fb      	ldrb	r3, [r7, #3]
 8004d90:	015a      	lsls	r2, r3, #5
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	4413      	add	r3, r2
 8004d96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004da0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	78fa      	ldrb	r2, [r7, #3]
 8004da8:	4611      	mov	r1, r2
 8004daa:	4618      	mov	r0, r3
 8004dac:	f004 f999 	bl	80090e2 <USB_HC_Halt>
 8004db0:	e3da      	b.n	8005568 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	78fa      	ldrb	r2, [r7, #3]
 8004db8:	4611      	mov	r1, r2
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f003 fc49 	bl	8008652 <USB_ReadChInterrupts>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	f003 0301 	and.w	r3, r3, #1
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d168      	bne.n	8004e9c <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004dca:	78fa      	ldrb	r2, [r7, #3]
 8004dcc:	6879      	ldr	r1, [r7, #4]
 8004dce:	4613      	mov	r3, r2
 8004dd0:	011b      	lsls	r3, r3, #4
 8004dd2:	1a9b      	subs	r3, r3, r2
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	440b      	add	r3, r1
 8004dd8:	3344      	adds	r3, #68	@ 0x44
 8004dda:	2200      	movs	r2, #0
 8004ddc:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	78fa      	ldrb	r2, [r7, #3]
 8004de4:	4611      	mov	r1, r2
 8004de6:	4618      	mov	r0, r3
 8004de8:	f003 fc33 	bl	8008652 <USB_ReadChInterrupts>
 8004dec:	4603      	mov	r3, r0
 8004dee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004df2:	2b40      	cmp	r3, #64	@ 0x40
 8004df4:	d112      	bne.n	8004e1c <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004df6:	78fa      	ldrb	r2, [r7, #3]
 8004df8:	6879      	ldr	r1, [r7, #4]
 8004dfa:	4613      	mov	r3, r2
 8004dfc:	011b      	lsls	r3, r3, #4
 8004dfe:	1a9b      	subs	r3, r3, r2
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	440b      	add	r3, r1
 8004e04:	3319      	adds	r3, #25
 8004e06:	2201      	movs	r2, #1
 8004e08:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004e0a:	78fb      	ldrb	r3, [r7, #3]
 8004e0c:	015a      	lsls	r2, r3, #5
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	4413      	add	r3, r2
 8004e12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e16:	461a      	mov	r2, r3
 8004e18:	2340      	movs	r3, #64	@ 0x40
 8004e1a:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8004e1c:	78fa      	ldrb	r2, [r7, #3]
 8004e1e:	6879      	ldr	r1, [r7, #4]
 8004e20:	4613      	mov	r3, r2
 8004e22:	011b      	lsls	r3, r3, #4
 8004e24:	1a9b      	subs	r3, r3, r2
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	440b      	add	r3, r1
 8004e2a:	331b      	adds	r3, #27
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d019      	beq.n	8004e66 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004e32:	78fa      	ldrb	r2, [r7, #3]
 8004e34:	6879      	ldr	r1, [r7, #4]
 8004e36:	4613      	mov	r3, r2
 8004e38:	011b      	lsls	r3, r3, #4
 8004e3a:	1a9b      	subs	r3, r3, r2
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	440b      	add	r3, r1
 8004e40:	331b      	adds	r3, #27
 8004e42:	2200      	movs	r2, #0
 8004e44:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004e46:	78fb      	ldrb	r3, [r7, #3]
 8004e48:	015a      	lsls	r2, r3, #5
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	78fa      	ldrb	r2, [r7, #3]
 8004e56:	0151      	lsls	r1, r2, #5
 8004e58:	693a      	ldr	r2, [r7, #16]
 8004e5a:	440a      	add	r2, r1
 8004e5c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004e60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e64:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004e66:	78fb      	ldrb	r3, [r7, #3]
 8004e68:	015a      	lsls	r2, r3, #5
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e72:	461a      	mov	r2, r3
 8004e74:	2301      	movs	r3, #1
 8004e76:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8004e78:	78fa      	ldrb	r2, [r7, #3]
 8004e7a:	6879      	ldr	r1, [r7, #4]
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	011b      	lsls	r3, r3, #4
 8004e80:	1a9b      	subs	r3, r3, r2
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	440b      	add	r3, r1
 8004e86:	334d      	adds	r3, #77	@ 0x4d
 8004e88:	2201      	movs	r2, #1
 8004e8a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	78fa      	ldrb	r2, [r7, #3]
 8004e92:	4611      	mov	r1, r2
 8004e94:	4618      	mov	r0, r3
 8004e96:	f004 f924 	bl	80090e2 <USB_HC_Halt>
 8004e9a:	e365      	b.n	8005568 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	78fa      	ldrb	r2, [r7, #3]
 8004ea2:	4611      	mov	r1, r2
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f003 fbd4 	bl	8008652 <USB_ReadChInterrupts>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eb0:	2b40      	cmp	r3, #64	@ 0x40
 8004eb2:	d139      	bne.n	8004f28 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8004eb4:	78fa      	ldrb	r2, [r7, #3]
 8004eb6:	6879      	ldr	r1, [r7, #4]
 8004eb8:	4613      	mov	r3, r2
 8004eba:	011b      	lsls	r3, r3, #4
 8004ebc:	1a9b      	subs	r3, r3, r2
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	440b      	add	r3, r1
 8004ec2:	334d      	adds	r3, #77	@ 0x4d
 8004ec4:	2205      	movs	r2, #5
 8004ec6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004ec8:	78fa      	ldrb	r2, [r7, #3]
 8004eca:	6879      	ldr	r1, [r7, #4]
 8004ecc:	4613      	mov	r3, r2
 8004ece:	011b      	lsls	r3, r3, #4
 8004ed0:	1a9b      	subs	r3, r3, r2
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	440b      	add	r3, r1
 8004ed6:	331a      	adds	r3, #26
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d109      	bne.n	8004ef2 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004ede:	78fa      	ldrb	r2, [r7, #3]
 8004ee0:	6879      	ldr	r1, [r7, #4]
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	011b      	lsls	r3, r3, #4
 8004ee6:	1a9b      	subs	r3, r3, r2
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	440b      	add	r3, r1
 8004eec:	3319      	adds	r3, #25
 8004eee:	2201      	movs	r2, #1
 8004ef0:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8004ef2:	78fa      	ldrb	r2, [r7, #3]
 8004ef4:	6879      	ldr	r1, [r7, #4]
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	011b      	lsls	r3, r3, #4
 8004efa:	1a9b      	subs	r3, r3, r2
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	440b      	add	r3, r1
 8004f00:	3344      	adds	r3, #68	@ 0x44
 8004f02:	2200      	movs	r2, #0
 8004f04:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	78fa      	ldrb	r2, [r7, #3]
 8004f0c:	4611      	mov	r1, r2
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f004 f8e7 	bl	80090e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004f14:	78fb      	ldrb	r3, [r7, #3]
 8004f16:	015a      	lsls	r2, r3, #5
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f20:	461a      	mov	r2, r3
 8004f22:	2340      	movs	r3, #64	@ 0x40
 8004f24:	6093      	str	r3, [r2, #8]
 8004f26:	e31f      	b.n	8005568 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	78fa      	ldrb	r2, [r7, #3]
 8004f2e:	4611      	mov	r1, r2
 8004f30:	4618      	mov	r0, r3
 8004f32:	f003 fb8e 	bl	8008652 <USB_ReadChInterrupts>
 8004f36:	4603      	mov	r3, r0
 8004f38:	f003 0308 	and.w	r3, r3, #8
 8004f3c:	2b08      	cmp	r3, #8
 8004f3e:	d11a      	bne.n	8004f76 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004f40:	78fb      	ldrb	r3, [r7, #3]
 8004f42:	015a      	lsls	r2, r3, #5
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	4413      	add	r3, r2
 8004f48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	2308      	movs	r3, #8
 8004f50:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004f52:	78fa      	ldrb	r2, [r7, #3]
 8004f54:	6879      	ldr	r1, [r7, #4]
 8004f56:	4613      	mov	r3, r2
 8004f58:	011b      	lsls	r3, r3, #4
 8004f5a:	1a9b      	subs	r3, r3, r2
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	440b      	add	r3, r1
 8004f60:	334d      	adds	r3, #77	@ 0x4d
 8004f62:	2206      	movs	r2, #6
 8004f64:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	78fa      	ldrb	r2, [r7, #3]
 8004f6c:	4611      	mov	r1, r2
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f004 f8b7 	bl	80090e2 <USB_HC_Halt>
 8004f74:	e2f8      	b.n	8005568 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	78fa      	ldrb	r2, [r7, #3]
 8004f7c:	4611      	mov	r1, r2
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f003 fb67 	bl	8008652 <USB_ReadChInterrupts>
 8004f84:	4603      	mov	r3, r0
 8004f86:	f003 0310 	and.w	r3, r3, #16
 8004f8a:	2b10      	cmp	r3, #16
 8004f8c:	d144      	bne.n	8005018 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004f8e:	78fa      	ldrb	r2, [r7, #3]
 8004f90:	6879      	ldr	r1, [r7, #4]
 8004f92:	4613      	mov	r3, r2
 8004f94:	011b      	lsls	r3, r3, #4
 8004f96:	1a9b      	subs	r3, r3, r2
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	440b      	add	r3, r1
 8004f9c:	3344      	adds	r3, #68	@ 0x44
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8004fa2:	78fa      	ldrb	r2, [r7, #3]
 8004fa4:	6879      	ldr	r1, [r7, #4]
 8004fa6:	4613      	mov	r3, r2
 8004fa8:	011b      	lsls	r3, r3, #4
 8004faa:	1a9b      	subs	r3, r3, r2
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	440b      	add	r3, r1
 8004fb0:	334d      	adds	r3, #77	@ 0x4d
 8004fb2:	2204      	movs	r2, #4
 8004fb4:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8004fb6:	78fa      	ldrb	r2, [r7, #3]
 8004fb8:	6879      	ldr	r1, [r7, #4]
 8004fba:	4613      	mov	r3, r2
 8004fbc:	011b      	lsls	r3, r3, #4
 8004fbe:	1a9b      	subs	r3, r3, r2
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	440b      	add	r3, r1
 8004fc4:	3319      	adds	r3, #25
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d114      	bne.n	8004ff6 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8004fcc:	78fa      	ldrb	r2, [r7, #3]
 8004fce:	6879      	ldr	r1, [r7, #4]
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	011b      	lsls	r3, r3, #4
 8004fd4:	1a9b      	subs	r3, r3, r2
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	440b      	add	r3, r1
 8004fda:	3318      	adds	r3, #24
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d109      	bne.n	8004ff6 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8004fe2:	78fa      	ldrb	r2, [r7, #3]
 8004fe4:	6879      	ldr	r1, [r7, #4]
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	011b      	lsls	r3, r3, #4
 8004fea:	1a9b      	subs	r3, r3, r2
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	440b      	add	r3, r1
 8004ff0:	3319      	adds	r3, #25
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	78fa      	ldrb	r2, [r7, #3]
 8004ffc:	4611      	mov	r1, r2
 8004ffe:	4618      	mov	r0, r3
 8005000:	f004 f86f 	bl	80090e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8005004:	78fb      	ldrb	r3, [r7, #3]
 8005006:	015a      	lsls	r2, r3, #5
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	4413      	add	r3, r2
 800500c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005010:	461a      	mov	r2, r3
 8005012:	2310      	movs	r3, #16
 8005014:	6093      	str	r3, [r2, #8]
 8005016:	e2a7      	b.n	8005568 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	78fa      	ldrb	r2, [r7, #3]
 800501e:	4611      	mov	r1, r2
 8005020:	4618      	mov	r0, r3
 8005022:	f003 fb16 	bl	8008652 <USB_ReadChInterrupts>
 8005026:	4603      	mov	r3, r0
 8005028:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800502c:	2b80      	cmp	r3, #128	@ 0x80
 800502e:	f040 8083 	bne.w	8005138 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	799b      	ldrb	r3, [r3, #6]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d111      	bne.n	800505e <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800503a:	78fa      	ldrb	r2, [r7, #3]
 800503c:	6879      	ldr	r1, [r7, #4]
 800503e:	4613      	mov	r3, r2
 8005040:	011b      	lsls	r3, r3, #4
 8005042:	1a9b      	subs	r3, r3, r2
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	440b      	add	r3, r1
 8005048:	334d      	adds	r3, #77	@ 0x4d
 800504a:	2207      	movs	r2, #7
 800504c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	78fa      	ldrb	r2, [r7, #3]
 8005054:	4611      	mov	r1, r2
 8005056:	4618      	mov	r0, r3
 8005058:	f004 f843 	bl	80090e2 <USB_HC_Halt>
 800505c:	e062      	b.n	8005124 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800505e:	78fa      	ldrb	r2, [r7, #3]
 8005060:	6879      	ldr	r1, [r7, #4]
 8005062:	4613      	mov	r3, r2
 8005064:	011b      	lsls	r3, r3, #4
 8005066:	1a9b      	subs	r3, r3, r2
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	440b      	add	r3, r1
 800506c:	3344      	adds	r3, #68	@ 0x44
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	1c59      	adds	r1, r3, #1
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	4613      	mov	r3, r2
 8005076:	011b      	lsls	r3, r3, #4
 8005078:	1a9b      	subs	r3, r3, r2
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	4403      	add	r3, r0
 800507e:	3344      	adds	r3, #68	@ 0x44
 8005080:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005082:	78fa      	ldrb	r2, [r7, #3]
 8005084:	6879      	ldr	r1, [r7, #4]
 8005086:	4613      	mov	r3, r2
 8005088:	011b      	lsls	r3, r3, #4
 800508a:	1a9b      	subs	r3, r3, r2
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	440b      	add	r3, r1
 8005090:	3344      	adds	r3, #68	@ 0x44
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2b02      	cmp	r3, #2
 8005096:	d922      	bls.n	80050de <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005098:	78fa      	ldrb	r2, [r7, #3]
 800509a:	6879      	ldr	r1, [r7, #4]
 800509c:	4613      	mov	r3, r2
 800509e:	011b      	lsls	r3, r3, #4
 80050a0:	1a9b      	subs	r3, r3, r2
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	440b      	add	r3, r1
 80050a6:	3344      	adds	r3, #68	@ 0x44
 80050a8:	2200      	movs	r2, #0
 80050aa:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80050ac:	78fa      	ldrb	r2, [r7, #3]
 80050ae:	6879      	ldr	r1, [r7, #4]
 80050b0:	4613      	mov	r3, r2
 80050b2:	011b      	lsls	r3, r3, #4
 80050b4:	1a9b      	subs	r3, r3, r2
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	440b      	add	r3, r1
 80050ba:	334c      	adds	r3, #76	@ 0x4c
 80050bc:	2204      	movs	r2, #4
 80050be:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80050c0:	78fa      	ldrb	r2, [r7, #3]
 80050c2:	6879      	ldr	r1, [r7, #4]
 80050c4:	4613      	mov	r3, r2
 80050c6:	011b      	lsls	r3, r3, #4
 80050c8:	1a9b      	subs	r3, r3, r2
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	440b      	add	r3, r1
 80050ce:	334c      	adds	r3, #76	@ 0x4c
 80050d0:	781a      	ldrb	r2, [r3, #0]
 80050d2:	78fb      	ldrb	r3, [r7, #3]
 80050d4:	4619      	mov	r1, r3
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f006 fb26 	bl	800b728 <HAL_HCD_HC_NotifyURBChange_Callback>
 80050dc:	e022      	b.n	8005124 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80050de:	78fa      	ldrb	r2, [r7, #3]
 80050e0:	6879      	ldr	r1, [r7, #4]
 80050e2:	4613      	mov	r3, r2
 80050e4:	011b      	lsls	r3, r3, #4
 80050e6:	1a9b      	subs	r3, r3, r2
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	440b      	add	r3, r1
 80050ec:	334c      	adds	r3, #76	@ 0x4c
 80050ee:	2202      	movs	r2, #2
 80050f0:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80050f2:	78fb      	ldrb	r3, [r7, #3]
 80050f4:	015a      	lsls	r2, r3, #5
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	4413      	add	r3, r2
 80050fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005108:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005110:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005112:	78fb      	ldrb	r3, [r7, #3]
 8005114:	015a      	lsls	r2, r3, #5
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	4413      	add	r3, r2
 800511a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800511e:	461a      	mov	r2, r3
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8005124:	78fb      	ldrb	r3, [r7, #3]
 8005126:	015a      	lsls	r2, r3, #5
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	4413      	add	r3, r2
 800512c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005130:	461a      	mov	r2, r3
 8005132:	2380      	movs	r3, #128	@ 0x80
 8005134:	6093      	str	r3, [r2, #8]
 8005136:	e217      	b.n	8005568 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	78fa      	ldrb	r2, [r7, #3]
 800513e:	4611      	mov	r1, r2
 8005140:	4618      	mov	r0, r3
 8005142:	f003 fa86 	bl	8008652 <USB_ReadChInterrupts>
 8005146:	4603      	mov	r3, r0
 8005148:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800514c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005150:	d11b      	bne.n	800518a <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8005152:	78fa      	ldrb	r2, [r7, #3]
 8005154:	6879      	ldr	r1, [r7, #4]
 8005156:	4613      	mov	r3, r2
 8005158:	011b      	lsls	r3, r3, #4
 800515a:	1a9b      	subs	r3, r3, r2
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	440b      	add	r3, r1
 8005160:	334d      	adds	r3, #77	@ 0x4d
 8005162:	2209      	movs	r2, #9
 8005164:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	78fa      	ldrb	r2, [r7, #3]
 800516c:	4611      	mov	r1, r2
 800516e:	4618      	mov	r0, r3
 8005170:	f003 ffb7 	bl	80090e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8005174:	78fb      	ldrb	r3, [r7, #3]
 8005176:	015a      	lsls	r2, r3, #5
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	4413      	add	r3, r2
 800517c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005180:	461a      	mov	r2, r3
 8005182:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005186:	6093      	str	r3, [r2, #8]
 8005188:	e1ee      	b.n	8005568 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	78fa      	ldrb	r2, [r7, #3]
 8005190:	4611      	mov	r1, r2
 8005192:	4618      	mov	r0, r3
 8005194:	f003 fa5d 	bl	8008652 <USB_ReadChInterrupts>
 8005198:	4603      	mov	r3, r0
 800519a:	f003 0302 	and.w	r3, r3, #2
 800519e:	2b02      	cmp	r3, #2
 80051a0:	f040 81df 	bne.w	8005562 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80051a4:	78fb      	ldrb	r3, [r7, #3]
 80051a6:	015a      	lsls	r2, r3, #5
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	4413      	add	r3, r2
 80051ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051b0:	461a      	mov	r2, r3
 80051b2:	2302      	movs	r3, #2
 80051b4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80051b6:	78fa      	ldrb	r2, [r7, #3]
 80051b8:	6879      	ldr	r1, [r7, #4]
 80051ba:	4613      	mov	r3, r2
 80051bc:	011b      	lsls	r3, r3, #4
 80051be:	1a9b      	subs	r3, r3, r2
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	440b      	add	r3, r1
 80051c4:	334d      	adds	r3, #77	@ 0x4d
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	f040 8093 	bne.w	80052f4 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80051ce:	78fa      	ldrb	r2, [r7, #3]
 80051d0:	6879      	ldr	r1, [r7, #4]
 80051d2:	4613      	mov	r3, r2
 80051d4:	011b      	lsls	r3, r3, #4
 80051d6:	1a9b      	subs	r3, r3, r2
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	440b      	add	r3, r1
 80051dc:	334d      	adds	r3, #77	@ 0x4d
 80051de:	2202      	movs	r2, #2
 80051e0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80051e2:	78fa      	ldrb	r2, [r7, #3]
 80051e4:	6879      	ldr	r1, [r7, #4]
 80051e6:	4613      	mov	r3, r2
 80051e8:	011b      	lsls	r3, r3, #4
 80051ea:	1a9b      	subs	r3, r3, r2
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	440b      	add	r3, r1
 80051f0:	334c      	adds	r3, #76	@ 0x4c
 80051f2:	2201      	movs	r2, #1
 80051f4:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80051f6:	78fa      	ldrb	r2, [r7, #3]
 80051f8:	6879      	ldr	r1, [r7, #4]
 80051fa:	4613      	mov	r3, r2
 80051fc:	011b      	lsls	r3, r3, #4
 80051fe:	1a9b      	subs	r3, r3, r2
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	440b      	add	r3, r1
 8005204:	3326      	adds	r3, #38	@ 0x26
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	2b02      	cmp	r3, #2
 800520a:	d00b      	beq.n	8005224 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 800520c:	78fa      	ldrb	r2, [r7, #3]
 800520e:	6879      	ldr	r1, [r7, #4]
 8005210:	4613      	mov	r3, r2
 8005212:	011b      	lsls	r3, r3, #4
 8005214:	1a9b      	subs	r3, r3, r2
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	440b      	add	r3, r1
 800521a:	3326      	adds	r3, #38	@ 0x26
 800521c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800521e:	2b03      	cmp	r3, #3
 8005220:	f040 8190 	bne.w	8005544 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	799b      	ldrb	r3, [r3, #6]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d115      	bne.n	8005258 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 800522c:	78fa      	ldrb	r2, [r7, #3]
 800522e:	6879      	ldr	r1, [r7, #4]
 8005230:	4613      	mov	r3, r2
 8005232:	011b      	lsls	r3, r3, #4
 8005234:	1a9b      	subs	r3, r3, r2
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	440b      	add	r3, r1
 800523a:	333d      	adds	r3, #61	@ 0x3d
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	78fa      	ldrb	r2, [r7, #3]
 8005240:	f083 0301 	eor.w	r3, r3, #1
 8005244:	b2d8      	uxtb	r0, r3
 8005246:	6879      	ldr	r1, [r7, #4]
 8005248:	4613      	mov	r3, r2
 800524a:	011b      	lsls	r3, r3, #4
 800524c:	1a9b      	subs	r3, r3, r2
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	440b      	add	r3, r1
 8005252:	333d      	adds	r3, #61	@ 0x3d
 8005254:	4602      	mov	r2, r0
 8005256:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	799b      	ldrb	r3, [r3, #6]
 800525c:	2b01      	cmp	r3, #1
 800525e:	f040 8171 	bne.w	8005544 <HCD_HC_OUT_IRQHandler+0x954>
 8005262:	78fa      	ldrb	r2, [r7, #3]
 8005264:	6879      	ldr	r1, [r7, #4]
 8005266:	4613      	mov	r3, r2
 8005268:	011b      	lsls	r3, r3, #4
 800526a:	1a9b      	subs	r3, r3, r2
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	440b      	add	r3, r1
 8005270:	3334      	adds	r3, #52	@ 0x34
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2b00      	cmp	r3, #0
 8005276:	f000 8165 	beq.w	8005544 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800527a:	78fa      	ldrb	r2, [r7, #3]
 800527c:	6879      	ldr	r1, [r7, #4]
 800527e:	4613      	mov	r3, r2
 8005280:	011b      	lsls	r3, r3, #4
 8005282:	1a9b      	subs	r3, r3, r2
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	440b      	add	r3, r1
 8005288:	3334      	adds	r3, #52	@ 0x34
 800528a:	6819      	ldr	r1, [r3, #0]
 800528c:	78fa      	ldrb	r2, [r7, #3]
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	4613      	mov	r3, r2
 8005292:	011b      	lsls	r3, r3, #4
 8005294:	1a9b      	subs	r3, r3, r2
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	4403      	add	r3, r0
 800529a:	3328      	adds	r3, #40	@ 0x28
 800529c:	881b      	ldrh	r3, [r3, #0]
 800529e:	440b      	add	r3, r1
 80052a0:	1e59      	subs	r1, r3, #1
 80052a2:	78fa      	ldrb	r2, [r7, #3]
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	4613      	mov	r3, r2
 80052a8:	011b      	lsls	r3, r3, #4
 80052aa:	1a9b      	subs	r3, r3, r2
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	4403      	add	r3, r0
 80052b0:	3328      	adds	r3, #40	@ 0x28
 80052b2:	881b      	ldrh	r3, [r3, #0]
 80052b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80052b8:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	f003 0301 	and.w	r3, r3, #1
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	f000 813f 	beq.w	8005544 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80052c6:	78fa      	ldrb	r2, [r7, #3]
 80052c8:	6879      	ldr	r1, [r7, #4]
 80052ca:	4613      	mov	r3, r2
 80052cc:	011b      	lsls	r3, r3, #4
 80052ce:	1a9b      	subs	r3, r3, r2
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	440b      	add	r3, r1
 80052d4:	333d      	adds	r3, #61	@ 0x3d
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	78fa      	ldrb	r2, [r7, #3]
 80052da:	f083 0301 	eor.w	r3, r3, #1
 80052de:	b2d8      	uxtb	r0, r3
 80052e0:	6879      	ldr	r1, [r7, #4]
 80052e2:	4613      	mov	r3, r2
 80052e4:	011b      	lsls	r3, r3, #4
 80052e6:	1a9b      	subs	r3, r3, r2
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	440b      	add	r3, r1
 80052ec:	333d      	adds	r3, #61	@ 0x3d
 80052ee:	4602      	mov	r2, r0
 80052f0:	701a      	strb	r2, [r3, #0]
 80052f2:	e127      	b.n	8005544 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80052f4:	78fa      	ldrb	r2, [r7, #3]
 80052f6:	6879      	ldr	r1, [r7, #4]
 80052f8:	4613      	mov	r3, r2
 80052fa:	011b      	lsls	r3, r3, #4
 80052fc:	1a9b      	subs	r3, r3, r2
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	440b      	add	r3, r1
 8005302:	334d      	adds	r3, #77	@ 0x4d
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	2b03      	cmp	r3, #3
 8005308:	d120      	bne.n	800534c <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800530a:	78fa      	ldrb	r2, [r7, #3]
 800530c:	6879      	ldr	r1, [r7, #4]
 800530e:	4613      	mov	r3, r2
 8005310:	011b      	lsls	r3, r3, #4
 8005312:	1a9b      	subs	r3, r3, r2
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	440b      	add	r3, r1
 8005318:	334d      	adds	r3, #77	@ 0x4d
 800531a:	2202      	movs	r2, #2
 800531c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800531e:	78fa      	ldrb	r2, [r7, #3]
 8005320:	6879      	ldr	r1, [r7, #4]
 8005322:	4613      	mov	r3, r2
 8005324:	011b      	lsls	r3, r3, #4
 8005326:	1a9b      	subs	r3, r3, r2
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	440b      	add	r3, r1
 800532c:	331b      	adds	r3, #27
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	2b01      	cmp	r3, #1
 8005332:	f040 8107 	bne.w	8005544 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005336:	78fa      	ldrb	r2, [r7, #3]
 8005338:	6879      	ldr	r1, [r7, #4]
 800533a:	4613      	mov	r3, r2
 800533c:	011b      	lsls	r3, r3, #4
 800533e:	1a9b      	subs	r3, r3, r2
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	440b      	add	r3, r1
 8005344:	334c      	adds	r3, #76	@ 0x4c
 8005346:	2202      	movs	r2, #2
 8005348:	701a      	strb	r2, [r3, #0]
 800534a:	e0fb      	b.n	8005544 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800534c:	78fa      	ldrb	r2, [r7, #3]
 800534e:	6879      	ldr	r1, [r7, #4]
 8005350:	4613      	mov	r3, r2
 8005352:	011b      	lsls	r3, r3, #4
 8005354:	1a9b      	subs	r3, r3, r2
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	440b      	add	r3, r1
 800535a:	334d      	adds	r3, #77	@ 0x4d
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	2b04      	cmp	r3, #4
 8005360:	d13a      	bne.n	80053d8 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005362:	78fa      	ldrb	r2, [r7, #3]
 8005364:	6879      	ldr	r1, [r7, #4]
 8005366:	4613      	mov	r3, r2
 8005368:	011b      	lsls	r3, r3, #4
 800536a:	1a9b      	subs	r3, r3, r2
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	440b      	add	r3, r1
 8005370:	334d      	adds	r3, #77	@ 0x4d
 8005372:	2202      	movs	r2, #2
 8005374:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005376:	78fa      	ldrb	r2, [r7, #3]
 8005378:	6879      	ldr	r1, [r7, #4]
 800537a:	4613      	mov	r3, r2
 800537c:	011b      	lsls	r3, r3, #4
 800537e:	1a9b      	subs	r3, r3, r2
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	440b      	add	r3, r1
 8005384:	334c      	adds	r3, #76	@ 0x4c
 8005386:	2202      	movs	r2, #2
 8005388:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800538a:	78fa      	ldrb	r2, [r7, #3]
 800538c:	6879      	ldr	r1, [r7, #4]
 800538e:	4613      	mov	r3, r2
 8005390:	011b      	lsls	r3, r3, #4
 8005392:	1a9b      	subs	r3, r3, r2
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	440b      	add	r3, r1
 8005398:	331b      	adds	r3, #27
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	2b01      	cmp	r3, #1
 800539e:	f040 80d1 	bne.w	8005544 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80053a2:	78fa      	ldrb	r2, [r7, #3]
 80053a4:	6879      	ldr	r1, [r7, #4]
 80053a6:	4613      	mov	r3, r2
 80053a8:	011b      	lsls	r3, r3, #4
 80053aa:	1a9b      	subs	r3, r3, r2
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	440b      	add	r3, r1
 80053b0:	331b      	adds	r3, #27
 80053b2:	2200      	movs	r2, #0
 80053b4:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80053b6:	78fb      	ldrb	r3, [r7, #3]
 80053b8:	015a      	lsls	r2, r3, #5
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	4413      	add	r3, r2
 80053be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	78fa      	ldrb	r2, [r7, #3]
 80053c6:	0151      	lsls	r1, r2, #5
 80053c8:	693a      	ldr	r2, [r7, #16]
 80053ca:	440a      	add	r2, r1
 80053cc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80053d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053d4:	6053      	str	r3, [r2, #4]
 80053d6:	e0b5      	b.n	8005544 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80053d8:	78fa      	ldrb	r2, [r7, #3]
 80053da:	6879      	ldr	r1, [r7, #4]
 80053dc:	4613      	mov	r3, r2
 80053de:	011b      	lsls	r3, r3, #4
 80053e0:	1a9b      	subs	r3, r3, r2
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	440b      	add	r3, r1
 80053e6:	334d      	adds	r3, #77	@ 0x4d
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	2b05      	cmp	r3, #5
 80053ec:	d114      	bne.n	8005418 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80053ee:	78fa      	ldrb	r2, [r7, #3]
 80053f0:	6879      	ldr	r1, [r7, #4]
 80053f2:	4613      	mov	r3, r2
 80053f4:	011b      	lsls	r3, r3, #4
 80053f6:	1a9b      	subs	r3, r3, r2
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	440b      	add	r3, r1
 80053fc:	334d      	adds	r3, #77	@ 0x4d
 80053fe:	2202      	movs	r2, #2
 8005400:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8005402:	78fa      	ldrb	r2, [r7, #3]
 8005404:	6879      	ldr	r1, [r7, #4]
 8005406:	4613      	mov	r3, r2
 8005408:	011b      	lsls	r3, r3, #4
 800540a:	1a9b      	subs	r3, r3, r2
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	440b      	add	r3, r1
 8005410:	334c      	adds	r3, #76	@ 0x4c
 8005412:	2202      	movs	r2, #2
 8005414:	701a      	strb	r2, [r3, #0]
 8005416:	e095      	b.n	8005544 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8005418:	78fa      	ldrb	r2, [r7, #3]
 800541a:	6879      	ldr	r1, [r7, #4]
 800541c:	4613      	mov	r3, r2
 800541e:	011b      	lsls	r3, r3, #4
 8005420:	1a9b      	subs	r3, r3, r2
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	440b      	add	r3, r1
 8005426:	334d      	adds	r3, #77	@ 0x4d
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	2b06      	cmp	r3, #6
 800542c:	d114      	bne.n	8005458 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800542e:	78fa      	ldrb	r2, [r7, #3]
 8005430:	6879      	ldr	r1, [r7, #4]
 8005432:	4613      	mov	r3, r2
 8005434:	011b      	lsls	r3, r3, #4
 8005436:	1a9b      	subs	r3, r3, r2
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	440b      	add	r3, r1
 800543c:	334d      	adds	r3, #77	@ 0x4d
 800543e:	2202      	movs	r2, #2
 8005440:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8005442:	78fa      	ldrb	r2, [r7, #3]
 8005444:	6879      	ldr	r1, [r7, #4]
 8005446:	4613      	mov	r3, r2
 8005448:	011b      	lsls	r3, r3, #4
 800544a:	1a9b      	subs	r3, r3, r2
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	440b      	add	r3, r1
 8005450:	334c      	adds	r3, #76	@ 0x4c
 8005452:	2205      	movs	r2, #5
 8005454:	701a      	strb	r2, [r3, #0]
 8005456:	e075      	b.n	8005544 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005458:	78fa      	ldrb	r2, [r7, #3]
 800545a:	6879      	ldr	r1, [r7, #4]
 800545c:	4613      	mov	r3, r2
 800545e:	011b      	lsls	r3, r3, #4
 8005460:	1a9b      	subs	r3, r3, r2
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	440b      	add	r3, r1
 8005466:	334d      	adds	r3, #77	@ 0x4d
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	2b07      	cmp	r3, #7
 800546c:	d00a      	beq.n	8005484 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800546e:	78fa      	ldrb	r2, [r7, #3]
 8005470:	6879      	ldr	r1, [r7, #4]
 8005472:	4613      	mov	r3, r2
 8005474:	011b      	lsls	r3, r3, #4
 8005476:	1a9b      	subs	r3, r3, r2
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	440b      	add	r3, r1
 800547c:	334d      	adds	r3, #77	@ 0x4d
 800547e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005480:	2b09      	cmp	r3, #9
 8005482:	d170      	bne.n	8005566 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005484:	78fa      	ldrb	r2, [r7, #3]
 8005486:	6879      	ldr	r1, [r7, #4]
 8005488:	4613      	mov	r3, r2
 800548a:	011b      	lsls	r3, r3, #4
 800548c:	1a9b      	subs	r3, r3, r2
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	440b      	add	r3, r1
 8005492:	334d      	adds	r3, #77	@ 0x4d
 8005494:	2202      	movs	r2, #2
 8005496:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005498:	78fa      	ldrb	r2, [r7, #3]
 800549a:	6879      	ldr	r1, [r7, #4]
 800549c:	4613      	mov	r3, r2
 800549e:	011b      	lsls	r3, r3, #4
 80054a0:	1a9b      	subs	r3, r3, r2
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	440b      	add	r3, r1
 80054a6:	3344      	adds	r3, #68	@ 0x44
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	1c59      	adds	r1, r3, #1
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	4613      	mov	r3, r2
 80054b0:	011b      	lsls	r3, r3, #4
 80054b2:	1a9b      	subs	r3, r3, r2
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	4403      	add	r3, r0
 80054b8:	3344      	adds	r3, #68	@ 0x44
 80054ba:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80054bc:	78fa      	ldrb	r2, [r7, #3]
 80054be:	6879      	ldr	r1, [r7, #4]
 80054c0:	4613      	mov	r3, r2
 80054c2:	011b      	lsls	r3, r3, #4
 80054c4:	1a9b      	subs	r3, r3, r2
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	440b      	add	r3, r1
 80054ca:	3344      	adds	r3, #68	@ 0x44
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2b02      	cmp	r3, #2
 80054d0:	d914      	bls.n	80054fc <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80054d2:	78fa      	ldrb	r2, [r7, #3]
 80054d4:	6879      	ldr	r1, [r7, #4]
 80054d6:	4613      	mov	r3, r2
 80054d8:	011b      	lsls	r3, r3, #4
 80054da:	1a9b      	subs	r3, r3, r2
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	440b      	add	r3, r1
 80054e0:	3344      	adds	r3, #68	@ 0x44
 80054e2:	2200      	movs	r2, #0
 80054e4:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80054e6:	78fa      	ldrb	r2, [r7, #3]
 80054e8:	6879      	ldr	r1, [r7, #4]
 80054ea:	4613      	mov	r3, r2
 80054ec:	011b      	lsls	r3, r3, #4
 80054ee:	1a9b      	subs	r3, r3, r2
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	440b      	add	r3, r1
 80054f4:	334c      	adds	r3, #76	@ 0x4c
 80054f6:	2204      	movs	r2, #4
 80054f8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80054fa:	e022      	b.n	8005542 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80054fc:	78fa      	ldrb	r2, [r7, #3]
 80054fe:	6879      	ldr	r1, [r7, #4]
 8005500:	4613      	mov	r3, r2
 8005502:	011b      	lsls	r3, r3, #4
 8005504:	1a9b      	subs	r3, r3, r2
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	440b      	add	r3, r1
 800550a:	334c      	adds	r3, #76	@ 0x4c
 800550c:	2202      	movs	r2, #2
 800550e:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005510:	78fb      	ldrb	r3, [r7, #3]
 8005512:	015a      	lsls	r2, r3, #5
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	4413      	add	r3, r2
 8005518:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005526:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800552e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005530:	78fb      	ldrb	r3, [r7, #3]
 8005532:	015a      	lsls	r2, r3, #5
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	4413      	add	r3, r2
 8005538:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800553c:	461a      	mov	r2, r3
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005542:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005544:	78fa      	ldrb	r2, [r7, #3]
 8005546:	6879      	ldr	r1, [r7, #4]
 8005548:	4613      	mov	r3, r2
 800554a:	011b      	lsls	r3, r3, #4
 800554c:	1a9b      	subs	r3, r3, r2
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	440b      	add	r3, r1
 8005552:	334c      	adds	r3, #76	@ 0x4c
 8005554:	781a      	ldrb	r2, [r3, #0]
 8005556:	78fb      	ldrb	r3, [r7, #3]
 8005558:	4619      	mov	r1, r3
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f006 f8e4 	bl	800b728 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005560:	e002      	b.n	8005568 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8005562:	bf00      	nop
 8005564:	e000      	b.n	8005568 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8005566:	bf00      	nop
  }
}
 8005568:	3718      	adds	r7, #24
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}

0800556e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800556e:	b580      	push	{r7, lr}
 8005570:	b08a      	sub	sp, #40	@ 0x28
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800557c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800557e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	6a1b      	ldr	r3, [r3, #32]
 8005586:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	f003 030f 	and.w	r3, r3, #15
 800558e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	0c5b      	lsrs	r3, r3, #17
 8005594:	f003 030f 	and.w	r3, r3, #15
 8005598:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	091b      	lsrs	r3, r3, #4
 800559e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80055a2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d004      	beq.n	80055b4 <HCD_RXQLVL_IRQHandler+0x46>
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	2b05      	cmp	r3, #5
 80055ae:	f000 80b6 	beq.w	800571e <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80055b2:	e0b7      	b.n	8005724 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	f000 80b3 	beq.w	8005722 <HCD_RXQLVL_IRQHandler+0x1b4>
 80055bc:	6879      	ldr	r1, [r7, #4]
 80055be:	69ba      	ldr	r2, [r7, #24]
 80055c0:	4613      	mov	r3, r2
 80055c2:	011b      	lsls	r3, r3, #4
 80055c4:	1a9b      	subs	r3, r3, r2
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	440b      	add	r3, r1
 80055ca:	332c      	adds	r3, #44	@ 0x2c
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	f000 80a7 	beq.w	8005722 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80055d4:	6879      	ldr	r1, [r7, #4]
 80055d6:	69ba      	ldr	r2, [r7, #24]
 80055d8:	4613      	mov	r3, r2
 80055da:	011b      	lsls	r3, r3, #4
 80055dc:	1a9b      	subs	r3, r3, r2
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	440b      	add	r3, r1
 80055e2:	3338      	adds	r3, #56	@ 0x38
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	18d1      	adds	r1, r2, r3
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	69ba      	ldr	r2, [r7, #24]
 80055ee:	4613      	mov	r3, r2
 80055f0:	011b      	lsls	r3, r3, #4
 80055f2:	1a9b      	subs	r3, r3, r2
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	4403      	add	r3, r0
 80055f8:	3334      	adds	r3, #52	@ 0x34
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4299      	cmp	r1, r3
 80055fe:	f200 8083 	bhi.w	8005708 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6818      	ldr	r0, [r3, #0]
 8005606:	6879      	ldr	r1, [r7, #4]
 8005608:	69ba      	ldr	r2, [r7, #24]
 800560a:	4613      	mov	r3, r2
 800560c:	011b      	lsls	r3, r3, #4
 800560e:	1a9b      	subs	r3, r3, r2
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	440b      	add	r3, r1
 8005614:	332c      	adds	r3, #44	@ 0x2c
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	693a      	ldr	r2, [r7, #16]
 800561a:	b292      	uxth	r2, r2
 800561c:	4619      	mov	r1, r3
 800561e:	f002 ffad 	bl	800857c <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8005622:	6879      	ldr	r1, [r7, #4]
 8005624:	69ba      	ldr	r2, [r7, #24]
 8005626:	4613      	mov	r3, r2
 8005628:	011b      	lsls	r3, r3, #4
 800562a:	1a9b      	subs	r3, r3, r2
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	440b      	add	r3, r1
 8005630:	332c      	adds	r3, #44	@ 0x2c
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	18d1      	adds	r1, r2, r3
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	69ba      	ldr	r2, [r7, #24]
 800563c:	4613      	mov	r3, r2
 800563e:	011b      	lsls	r3, r3, #4
 8005640:	1a9b      	subs	r3, r3, r2
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	4403      	add	r3, r0
 8005646:	332c      	adds	r3, #44	@ 0x2c
 8005648:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800564a:	6879      	ldr	r1, [r7, #4]
 800564c:	69ba      	ldr	r2, [r7, #24]
 800564e:	4613      	mov	r3, r2
 8005650:	011b      	lsls	r3, r3, #4
 8005652:	1a9b      	subs	r3, r3, r2
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	440b      	add	r3, r1
 8005658:	3338      	adds	r3, #56	@ 0x38
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	18d1      	adds	r1, r2, r3
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	69ba      	ldr	r2, [r7, #24]
 8005664:	4613      	mov	r3, r2
 8005666:	011b      	lsls	r3, r3, #4
 8005668:	1a9b      	subs	r3, r3, r2
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	4403      	add	r3, r0
 800566e:	3338      	adds	r3, #56	@ 0x38
 8005670:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005672:	69bb      	ldr	r3, [r7, #24]
 8005674:	015a      	lsls	r2, r3, #5
 8005676:	6a3b      	ldr	r3, [r7, #32]
 8005678:	4413      	add	r3, r2
 800567a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800567e:	691b      	ldr	r3, [r3, #16]
 8005680:	0cdb      	lsrs	r3, r3, #19
 8005682:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005686:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005688:	6879      	ldr	r1, [r7, #4]
 800568a:	69ba      	ldr	r2, [r7, #24]
 800568c:	4613      	mov	r3, r2
 800568e:	011b      	lsls	r3, r3, #4
 8005690:	1a9b      	subs	r3, r3, r2
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	440b      	add	r3, r1
 8005696:	3328      	adds	r3, #40	@ 0x28
 8005698:	881b      	ldrh	r3, [r3, #0]
 800569a:	461a      	mov	r2, r3
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	4293      	cmp	r3, r2
 80056a0:	d13f      	bne.n	8005722 <HCD_RXQLVL_IRQHandler+0x1b4>
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d03c      	beq.n	8005722 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80056a8:	69bb      	ldr	r3, [r7, #24]
 80056aa:	015a      	lsls	r2, r3, #5
 80056ac:	6a3b      	ldr	r3, [r7, #32]
 80056ae:	4413      	add	r3, r2
 80056b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80056be:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80056c6:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80056c8:	69bb      	ldr	r3, [r7, #24]
 80056ca:	015a      	lsls	r2, r3, #5
 80056cc:	6a3b      	ldr	r3, [r7, #32]
 80056ce:	4413      	add	r3, r2
 80056d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056d4:	461a      	mov	r2, r3
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80056da:	6879      	ldr	r1, [r7, #4]
 80056dc:	69ba      	ldr	r2, [r7, #24]
 80056de:	4613      	mov	r3, r2
 80056e0:	011b      	lsls	r3, r3, #4
 80056e2:	1a9b      	subs	r3, r3, r2
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	440b      	add	r3, r1
 80056e8:	333c      	adds	r3, #60	@ 0x3c
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	f083 0301 	eor.w	r3, r3, #1
 80056f0:	b2d8      	uxtb	r0, r3
 80056f2:	6879      	ldr	r1, [r7, #4]
 80056f4:	69ba      	ldr	r2, [r7, #24]
 80056f6:	4613      	mov	r3, r2
 80056f8:	011b      	lsls	r3, r3, #4
 80056fa:	1a9b      	subs	r3, r3, r2
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	440b      	add	r3, r1
 8005700:	333c      	adds	r3, #60	@ 0x3c
 8005702:	4602      	mov	r2, r0
 8005704:	701a      	strb	r2, [r3, #0]
      break;
 8005706:	e00c      	b.n	8005722 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8005708:	6879      	ldr	r1, [r7, #4]
 800570a:	69ba      	ldr	r2, [r7, #24]
 800570c:	4613      	mov	r3, r2
 800570e:	011b      	lsls	r3, r3, #4
 8005710:	1a9b      	subs	r3, r3, r2
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	440b      	add	r3, r1
 8005716:	334c      	adds	r3, #76	@ 0x4c
 8005718:	2204      	movs	r2, #4
 800571a:	701a      	strb	r2, [r3, #0]
      break;
 800571c:	e001      	b.n	8005722 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800571e:	bf00      	nop
 8005720:	e000      	b.n	8005724 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8005722:	bf00      	nop
  }
}
 8005724:	bf00      	nop
 8005726:	3728      	adds	r7, #40	@ 0x28
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b086      	sub	sp, #24
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005758:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f003 0302 	and.w	r3, r3, #2
 8005760:	2b02      	cmp	r3, #2
 8005762:	d10b      	bne.n	800577c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f003 0301 	and.w	r3, r3, #1
 800576a:	2b01      	cmp	r3, #1
 800576c:	d102      	bne.n	8005774 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f005 ffbe 	bl	800b6f0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	f043 0302 	orr.w	r3, r3, #2
 800577a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f003 0308 	and.w	r3, r3, #8
 8005782:	2b08      	cmp	r3, #8
 8005784:	d132      	bne.n	80057ec <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	f043 0308 	orr.w	r3, r3, #8
 800578c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f003 0304 	and.w	r3, r3, #4
 8005794:	2b04      	cmp	r3, #4
 8005796:	d126      	bne.n	80057e6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	7a5b      	ldrb	r3, [r3, #9]
 800579c:	2b02      	cmp	r3, #2
 800579e:	d113      	bne.n	80057c8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80057a6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80057aa:	d106      	bne.n	80057ba <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2102      	movs	r1, #2
 80057b2:	4618      	mov	r0, r3
 80057b4:	f003 f862 	bl	800887c <USB_InitFSLSPClkSel>
 80057b8:	e011      	b.n	80057de <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2101      	movs	r1, #1
 80057c0:	4618      	mov	r0, r3
 80057c2:	f003 f85b 	bl	800887c <USB_InitFSLSPClkSel>
 80057c6:	e00a      	b.n	80057de <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	79db      	ldrb	r3, [r3, #7]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d106      	bne.n	80057de <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80057d6:	461a      	mov	r2, r3
 80057d8:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80057dc:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f005 ffb0 	bl	800b744 <HAL_HCD_PortEnabled_Callback>
 80057e4:	e002      	b.n	80057ec <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f005 ffba 	bl	800b760 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f003 0320 	and.w	r3, r3, #32
 80057f2:	2b20      	cmp	r3, #32
 80057f4:	d103      	bne.n	80057fe <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	f043 0320 	orr.w	r3, r3, #32
 80057fc:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005804:	461a      	mov	r2, r3
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	6013      	str	r3, [r2, #0]
}
 800580a:	bf00      	nop
 800580c:	3718      	adds	r7, #24
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
	...

08005814 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b084      	sub	sp, #16
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d101      	bne.n	8005826 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e12b      	b.n	8005a7e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800582c:	b2db      	uxtb	r3, r3
 800582e:	2b00      	cmp	r3, #0
 8005830:	d106      	bne.n	8005840 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f7fb ff5a 	bl	80016f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2224      	movs	r2, #36	@ 0x24
 8005844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f022 0201 	bic.w	r2, r2, #1
 8005856:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005866:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005876:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005878:	f001 fa20 	bl	8006cbc <HAL_RCC_GetPCLK1Freq>
 800587c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	4a81      	ldr	r2, [pc, #516]	@ (8005a88 <HAL_I2C_Init+0x274>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d807      	bhi.n	8005898 <HAL_I2C_Init+0x84>
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	4a80      	ldr	r2, [pc, #512]	@ (8005a8c <HAL_I2C_Init+0x278>)
 800588c:	4293      	cmp	r3, r2
 800588e:	bf94      	ite	ls
 8005890:	2301      	movls	r3, #1
 8005892:	2300      	movhi	r3, #0
 8005894:	b2db      	uxtb	r3, r3
 8005896:	e006      	b.n	80058a6 <HAL_I2C_Init+0x92>
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	4a7d      	ldr	r2, [pc, #500]	@ (8005a90 <HAL_I2C_Init+0x27c>)
 800589c:	4293      	cmp	r3, r2
 800589e:	bf94      	ite	ls
 80058a0:	2301      	movls	r3, #1
 80058a2:	2300      	movhi	r3, #0
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d001      	beq.n	80058ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e0e7      	b.n	8005a7e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	4a78      	ldr	r2, [pc, #480]	@ (8005a94 <HAL_I2C_Init+0x280>)
 80058b2:	fba2 2303 	umull	r2, r3, r2, r3
 80058b6:	0c9b      	lsrs	r3, r3, #18
 80058b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	68ba      	ldr	r2, [r7, #8]
 80058ca:	430a      	orrs	r2, r1
 80058cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	6a1b      	ldr	r3, [r3, #32]
 80058d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	4a6a      	ldr	r2, [pc, #424]	@ (8005a88 <HAL_I2C_Init+0x274>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d802      	bhi.n	80058e8 <HAL_I2C_Init+0xd4>
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	3301      	adds	r3, #1
 80058e6:	e009      	b.n	80058fc <HAL_I2C_Init+0xe8>
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80058ee:	fb02 f303 	mul.w	r3, r2, r3
 80058f2:	4a69      	ldr	r2, [pc, #420]	@ (8005a98 <HAL_I2C_Init+0x284>)
 80058f4:	fba2 2303 	umull	r2, r3, r2, r3
 80058f8:	099b      	lsrs	r3, r3, #6
 80058fa:	3301      	adds	r3, #1
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	6812      	ldr	r2, [r2, #0]
 8005900:	430b      	orrs	r3, r1
 8005902:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	69db      	ldr	r3, [r3, #28]
 800590a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800590e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	495c      	ldr	r1, [pc, #368]	@ (8005a88 <HAL_I2C_Init+0x274>)
 8005918:	428b      	cmp	r3, r1
 800591a:	d819      	bhi.n	8005950 <HAL_I2C_Init+0x13c>
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	1e59      	subs	r1, r3, #1
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	005b      	lsls	r3, r3, #1
 8005926:	fbb1 f3f3 	udiv	r3, r1, r3
 800592a:	1c59      	adds	r1, r3, #1
 800592c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005930:	400b      	ands	r3, r1
 8005932:	2b00      	cmp	r3, #0
 8005934:	d00a      	beq.n	800594c <HAL_I2C_Init+0x138>
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	1e59      	subs	r1, r3, #1
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	005b      	lsls	r3, r3, #1
 8005940:	fbb1 f3f3 	udiv	r3, r1, r3
 8005944:	3301      	adds	r3, #1
 8005946:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800594a:	e051      	b.n	80059f0 <HAL_I2C_Init+0x1dc>
 800594c:	2304      	movs	r3, #4
 800594e:	e04f      	b.n	80059f0 <HAL_I2C_Init+0x1dc>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d111      	bne.n	800597c <HAL_I2C_Init+0x168>
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	1e58      	subs	r0, r3, #1
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6859      	ldr	r1, [r3, #4]
 8005960:	460b      	mov	r3, r1
 8005962:	005b      	lsls	r3, r3, #1
 8005964:	440b      	add	r3, r1
 8005966:	fbb0 f3f3 	udiv	r3, r0, r3
 800596a:	3301      	adds	r3, #1
 800596c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005970:	2b00      	cmp	r3, #0
 8005972:	bf0c      	ite	eq
 8005974:	2301      	moveq	r3, #1
 8005976:	2300      	movne	r3, #0
 8005978:	b2db      	uxtb	r3, r3
 800597a:	e012      	b.n	80059a2 <HAL_I2C_Init+0x18e>
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	1e58      	subs	r0, r3, #1
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6859      	ldr	r1, [r3, #4]
 8005984:	460b      	mov	r3, r1
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	440b      	add	r3, r1
 800598a:	0099      	lsls	r1, r3, #2
 800598c:	440b      	add	r3, r1
 800598e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005992:	3301      	adds	r3, #1
 8005994:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005998:	2b00      	cmp	r3, #0
 800599a:	bf0c      	ite	eq
 800599c:	2301      	moveq	r3, #1
 800599e:	2300      	movne	r3, #0
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d001      	beq.n	80059aa <HAL_I2C_Init+0x196>
 80059a6:	2301      	movs	r3, #1
 80059a8:	e022      	b.n	80059f0 <HAL_I2C_Init+0x1dc>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d10e      	bne.n	80059d0 <HAL_I2C_Init+0x1bc>
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	1e58      	subs	r0, r3, #1
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6859      	ldr	r1, [r3, #4]
 80059ba:	460b      	mov	r3, r1
 80059bc:	005b      	lsls	r3, r3, #1
 80059be:	440b      	add	r3, r1
 80059c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80059c4:	3301      	adds	r3, #1
 80059c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059ce:	e00f      	b.n	80059f0 <HAL_I2C_Init+0x1dc>
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	1e58      	subs	r0, r3, #1
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6859      	ldr	r1, [r3, #4]
 80059d8:	460b      	mov	r3, r1
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	440b      	add	r3, r1
 80059de:	0099      	lsls	r1, r3, #2
 80059e0:	440b      	add	r3, r1
 80059e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80059e6:	3301      	adds	r3, #1
 80059e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80059f0:	6879      	ldr	r1, [r7, #4]
 80059f2:	6809      	ldr	r1, [r1, #0]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	69da      	ldr	r2, [r3, #28]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a1b      	ldr	r3, [r3, #32]
 8005a0a:	431a      	orrs	r2, r3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	430a      	orrs	r2, r1
 8005a12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005a1e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	6911      	ldr	r1, [r2, #16]
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	68d2      	ldr	r2, [r2, #12]
 8005a2a:	4311      	orrs	r1, r2
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	6812      	ldr	r2, [r2, #0]
 8005a30:	430b      	orrs	r3, r1
 8005a32:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	695a      	ldr	r2, [r3, #20]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	699b      	ldr	r3, [r3, #24]
 8005a46:	431a      	orrs	r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	430a      	orrs	r2, r1
 8005a4e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f042 0201 	orr.w	r2, r2, #1
 8005a5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2220      	movs	r2, #32
 8005a6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3710      	adds	r7, #16
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	000186a0 	.word	0x000186a0
 8005a8c:	001e847f 	.word	0x001e847f
 8005a90:	003d08ff 	.word	0x003d08ff
 8005a94:	431bde83 	.word	0x431bde83
 8005a98:	10624dd3 	.word	0x10624dd3

08005a9c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b088      	sub	sp, #32
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d101      	bne.n	8005aae <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e128      	b.n	8005d00 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d109      	bne.n	8005ace <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a90      	ldr	r2, [pc, #576]	@ (8005d08 <HAL_I2S_Init+0x26c>)
 8005ac6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f7fb fe5b 	bl	8001784 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2202      	movs	r2, #2
 8005ad2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	69db      	ldr	r3, [r3, #28]
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	6812      	ldr	r2, [r2, #0]
 8005ae0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005ae4:	f023 030f 	bic.w	r3, r3, #15
 8005ae8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	2202      	movs	r2, #2
 8005af0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	695b      	ldr	r3, [r3, #20]
 8005af6:	2b02      	cmp	r3, #2
 8005af8:	d060      	beq.n	8005bbc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d102      	bne.n	8005b08 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005b02:	2310      	movs	r3, #16
 8005b04:	617b      	str	r3, [r7, #20]
 8005b06:	e001      	b.n	8005b0c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005b08:	2320      	movs	r3, #32
 8005b0a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	2b20      	cmp	r3, #32
 8005b12:	d802      	bhi.n	8005b1a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	005b      	lsls	r3, r3, #1
 8005b18:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005b1a:	2001      	movs	r0, #1
 8005b1c:	f001 f9d2 	bl	8006ec4 <HAL_RCCEx_GetPeriphCLKFreq>
 8005b20:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b2a:	d125      	bne.n	8005b78 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d010      	beq.n	8005b56 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	68fa      	ldr	r2, [r7, #12]
 8005b3a:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b3e:	4613      	mov	r3, r2
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	4413      	add	r3, r2
 8005b44:	005b      	lsls	r3, r3, #1
 8005b46:	461a      	mov	r2, r3
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	695b      	ldr	r3, [r3, #20]
 8005b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b50:	3305      	adds	r3, #5
 8005b52:	613b      	str	r3, [r7, #16]
 8005b54:	e01f      	b.n	8005b96 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	00db      	lsls	r3, r3, #3
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b60:	4613      	mov	r3, r2
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	4413      	add	r3, r2
 8005b66:	005b      	lsls	r3, r3, #1
 8005b68:	461a      	mov	r2, r3
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	695b      	ldr	r3, [r3, #20]
 8005b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b72:	3305      	adds	r3, #5
 8005b74:	613b      	str	r3, [r7, #16]
 8005b76:	e00e      	b.n	8005b96 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005b78:	68fa      	ldr	r2, [r7, #12]
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b80:	4613      	mov	r3, r2
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	4413      	add	r3, r2
 8005b86:	005b      	lsls	r3, r3, #1
 8005b88:	461a      	mov	r2, r3
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	695b      	ldr	r3, [r3, #20]
 8005b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b92:	3305      	adds	r3, #5
 8005b94:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	4a5c      	ldr	r2, [pc, #368]	@ (8005d0c <HAL_I2S_Init+0x270>)
 8005b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b9e:	08db      	lsrs	r3, r3, #3
 8005ba0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	f003 0301 	and.w	r3, r3, #1
 8005ba8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005baa:	693a      	ldr	r2, [r7, #16]
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	1ad3      	subs	r3, r2, r3
 8005bb0:	085b      	lsrs	r3, r3, #1
 8005bb2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	021b      	lsls	r3, r3, #8
 8005bb8:	61bb      	str	r3, [r7, #24]
 8005bba:	e003      	b.n	8005bc4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005bbc:	2302      	movs	r3, #2
 8005bbe:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d902      	bls.n	8005bd0 <HAL_I2S_Init+0x134>
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	2bff      	cmp	r3, #255	@ 0xff
 8005bce:	d907      	bls.n	8005be0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bd4:	f043 0210 	orr.w	r2, r3, #16
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e08f      	b.n	8005d00 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	691a      	ldr	r2, [r3, #16]
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	ea42 0103 	orr.w	r1, r2, r3
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	69fa      	ldr	r2, [r7, #28]
 8005bf0:	430a      	orrs	r2, r1
 8005bf2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	69db      	ldr	r3, [r3, #28]
 8005bfa:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005bfe:	f023 030f 	bic.w	r3, r3, #15
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	6851      	ldr	r1, [r2, #4]
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	6892      	ldr	r2, [r2, #8]
 8005c0a:	4311      	orrs	r1, r2
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	68d2      	ldr	r2, [r2, #12]
 8005c10:	4311      	orrs	r1, r2
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	6992      	ldr	r2, [r2, #24]
 8005c16:	430a      	orrs	r2, r1
 8005c18:	431a      	orrs	r2, r3
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c22:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6a1b      	ldr	r3, [r3, #32]
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d161      	bne.n	8005cf0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a38      	ldr	r2, [pc, #224]	@ (8005d10 <HAL_I2S_Init+0x274>)
 8005c30:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a37      	ldr	r2, [pc, #220]	@ (8005d14 <HAL_I2S_Init+0x278>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d101      	bne.n	8005c40 <HAL_I2S_Init+0x1a4>
 8005c3c:	4b36      	ldr	r3, [pc, #216]	@ (8005d18 <HAL_I2S_Init+0x27c>)
 8005c3e:	e001      	b.n	8005c44 <HAL_I2S_Init+0x1a8>
 8005c40:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005c44:	69db      	ldr	r3, [r3, #28]
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	6812      	ldr	r2, [r2, #0]
 8005c4a:	4932      	ldr	r1, [pc, #200]	@ (8005d14 <HAL_I2S_Init+0x278>)
 8005c4c:	428a      	cmp	r2, r1
 8005c4e:	d101      	bne.n	8005c54 <HAL_I2S_Init+0x1b8>
 8005c50:	4a31      	ldr	r2, [pc, #196]	@ (8005d18 <HAL_I2S_Init+0x27c>)
 8005c52:	e001      	b.n	8005c58 <HAL_I2S_Init+0x1bc>
 8005c54:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8005c58:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005c5c:	f023 030f 	bic.w	r3, r3, #15
 8005c60:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a2b      	ldr	r2, [pc, #172]	@ (8005d14 <HAL_I2S_Init+0x278>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d101      	bne.n	8005c70 <HAL_I2S_Init+0x1d4>
 8005c6c:	4b2a      	ldr	r3, [pc, #168]	@ (8005d18 <HAL_I2S_Init+0x27c>)
 8005c6e:	e001      	b.n	8005c74 <HAL_I2S_Init+0x1d8>
 8005c70:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005c74:	2202      	movs	r2, #2
 8005c76:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a25      	ldr	r2, [pc, #148]	@ (8005d14 <HAL_I2S_Init+0x278>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d101      	bne.n	8005c86 <HAL_I2S_Init+0x1ea>
 8005c82:	4b25      	ldr	r3, [pc, #148]	@ (8005d18 <HAL_I2S_Init+0x27c>)
 8005c84:	e001      	b.n	8005c8a <HAL_I2S_Init+0x1ee>
 8005c86:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005c8a:	69db      	ldr	r3, [r3, #28]
 8005c8c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c96:	d003      	beq.n	8005ca0 <HAL_I2S_Init+0x204>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d103      	bne.n	8005ca8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005ca0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005ca4:	613b      	str	r3, [r7, #16]
 8005ca6:	e001      	b.n	8005cac <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	699b      	ldr	r3, [r3, #24]
 8005cc8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	b29a      	uxth	r2, r3
 8005cce:	897b      	ldrh	r3, [r7, #10]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005cd8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a0d      	ldr	r2, [pc, #52]	@ (8005d14 <HAL_I2S_Init+0x278>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d101      	bne.n	8005ce8 <HAL_I2S_Init+0x24c>
 8005ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8005d18 <HAL_I2S_Init+0x27c>)
 8005ce6:	e001      	b.n	8005cec <HAL_I2S_Init+0x250>
 8005ce8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005cec:	897a      	ldrh	r2, [r7, #10]
 8005cee:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8005cfe:	2300      	movs	r3, #0
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3720      	adds	r7, #32
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}
 8005d08:	08005e13 	.word	0x08005e13
 8005d0c:	cccccccd 	.word	0xcccccccd
 8005d10:	08005f29 	.word	0x08005f29
 8005d14:	40003800 	.word	0x40003800
 8005d18:	40003400 	.word	0x40003400

08005d1c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b083      	sub	sp, #12
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005d24:	bf00      	nop
 8005d26:	370c      	adds	r7, #12
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b083      	sub	sp, #12
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005d38:	bf00      	nop
 8005d3a:	370c      	adds	r7, #12
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005d4c:	bf00      	nop
 8005d4e:	370c      	adds	r7, #12
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr

08005d58 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b082      	sub	sp, #8
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d64:	881a      	ldrh	r2, [r3, #0]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d70:	1c9a      	adds	r2, r3, #2
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	3b01      	subs	r3, #1
 8005d7e:	b29a      	uxth	r2, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d10e      	bne.n	8005dac <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	685a      	ldr	r2, [r3, #4]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005d9c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2201      	movs	r2, #1
 8005da2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f7ff ffb8 	bl	8005d1c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005dac:	bf00      	nop
 8005dae:	3708      	adds	r7, #8
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b082      	sub	sp, #8
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68da      	ldr	r2, [r3, #12]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dc6:	b292      	uxth	r2, r2
 8005dc8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dce:	1c9a      	adds	r2, r3, #2
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	3b01      	subs	r3, #1
 8005ddc:	b29a      	uxth	r2, r3
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d10e      	bne.n	8005e0a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	685a      	ldr	r2, [r3, #4]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005dfa:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f7ff ff93 	bl	8005d30 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005e0a:	bf00      	nop
 8005e0c:	3708      	adds	r7, #8
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}

08005e12 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005e12:	b580      	push	{r7, lr}
 8005e14:	b086      	sub	sp, #24
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	2b04      	cmp	r3, #4
 8005e2c:	d13a      	bne.n	8005ea4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	f003 0301 	and.w	r3, r3, #1
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d109      	bne.n	8005e4c <I2S_IRQHandler+0x3a>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e42:	2b40      	cmp	r3, #64	@ 0x40
 8005e44:	d102      	bne.n	8005e4c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f7ff ffb4 	bl	8005db4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e52:	2b40      	cmp	r3, #64	@ 0x40
 8005e54:	d126      	bne.n	8005ea4 <I2S_IRQHandler+0x92>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	f003 0320 	and.w	r3, r3, #32
 8005e60:	2b20      	cmp	r3, #32
 8005e62:	d11f      	bne.n	8005ea4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	685a      	ldr	r2, [r3, #4]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005e72:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005e74:	2300      	movs	r3, #0
 8005e76:	613b      	str	r3, [r7, #16]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	613b      	str	r3, [r7, #16]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	613b      	str	r3, [r7, #16]
 8005e88:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e96:	f043 0202 	orr.w	r2, r3, #2
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f7ff ff50 	bl	8005d44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	2b03      	cmp	r3, #3
 8005eae:	d136      	bne.n	8005f1e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	f003 0302 	and.w	r3, r3, #2
 8005eb6:	2b02      	cmp	r3, #2
 8005eb8:	d109      	bne.n	8005ece <I2S_IRQHandler+0xbc>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ec4:	2b80      	cmp	r3, #128	@ 0x80
 8005ec6:	d102      	bne.n	8005ece <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f7ff ff45 	bl	8005d58 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	f003 0308 	and.w	r3, r3, #8
 8005ed4:	2b08      	cmp	r3, #8
 8005ed6:	d122      	bne.n	8005f1e <I2S_IRQHandler+0x10c>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	f003 0320 	and.w	r3, r3, #32
 8005ee2:	2b20      	cmp	r3, #32
 8005ee4:	d11b      	bne.n	8005f1e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	685a      	ldr	r2, [r3, #4]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005ef4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	60fb      	str	r3, [r7, #12]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	60fb      	str	r3, [r7, #12]
 8005f02:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f10:	f043 0204 	orr.w	r2, r3, #4
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f7ff ff13 	bl	8005d44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005f1e:	bf00      	nop
 8005f20:	3718      	adds	r7, #24
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
	...

08005f28 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b088      	sub	sp, #32
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a92      	ldr	r2, [pc, #584]	@ (8006188 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d101      	bne.n	8005f46 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005f42:	4b92      	ldr	r3, [pc, #584]	@ (800618c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005f44:	e001      	b.n	8005f4a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005f46:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a8b      	ldr	r2, [pc, #556]	@ (8006188 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d101      	bne.n	8005f64 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005f60:	4b8a      	ldr	r3, [pc, #552]	@ (800618c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005f62:	e001      	b.n	8005f68 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005f64:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f74:	d004      	beq.n	8005f80 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	f040 8099 	bne.w	80060b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	f003 0302 	and.w	r3, r3, #2
 8005f86:	2b02      	cmp	r3, #2
 8005f88:	d107      	bne.n	8005f9a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d002      	beq.n	8005f9a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f000 f925 	bl	80061e4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	f003 0301 	and.w	r3, r3, #1
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d107      	bne.n	8005fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d002      	beq.n	8005fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 f9c8 	bl	8006344 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fba:	2b40      	cmp	r3, #64	@ 0x40
 8005fbc:	d13a      	bne.n	8006034 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	f003 0320 	and.w	r3, r3, #32
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d035      	beq.n	8006034 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a6e      	ldr	r2, [pc, #440]	@ (8006188 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d101      	bne.n	8005fd6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005fd2:	4b6e      	ldr	r3, [pc, #440]	@ (800618c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005fd4:	e001      	b.n	8005fda <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005fd6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005fda:	685a      	ldr	r2, [r3, #4]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4969      	ldr	r1, [pc, #420]	@ (8006188 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005fe2:	428b      	cmp	r3, r1
 8005fe4:	d101      	bne.n	8005fea <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005fe6:	4b69      	ldr	r3, [pc, #420]	@ (800618c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005fe8:	e001      	b.n	8005fee <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005fea:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005fee:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005ff2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	685a      	ldr	r2, [r3, #4]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006002:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006004:	2300      	movs	r3, #0
 8006006:	60fb      	str	r3, [r7, #12]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	68db      	ldr	r3, [r3, #12]
 800600e:	60fb      	str	r3, [r7, #12]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	60fb      	str	r3, [r7, #12]
 8006018:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2201      	movs	r2, #1
 800601e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006026:	f043 0202 	orr.w	r2, r3, #2
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f7ff fe88 	bl	8005d44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	f003 0308 	and.w	r3, r3, #8
 800603a:	2b08      	cmp	r3, #8
 800603c:	f040 80c3 	bne.w	80061c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	f003 0320 	and.w	r3, r3, #32
 8006046:	2b00      	cmp	r3, #0
 8006048:	f000 80bd 	beq.w	80061c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	685a      	ldr	r2, [r3, #4]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800605a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a49      	ldr	r2, [pc, #292]	@ (8006188 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d101      	bne.n	800606a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8006066:	4b49      	ldr	r3, [pc, #292]	@ (800618c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006068:	e001      	b.n	800606e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800606a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800606e:	685a      	ldr	r2, [r3, #4]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4944      	ldr	r1, [pc, #272]	@ (8006188 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006076:	428b      	cmp	r3, r1
 8006078:	d101      	bne.n	800607e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800607a:	4b44      	ldr	r3, [pc, #272]	@ (800618c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800607c:	e001      	b.n	8006082 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800607e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006082:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006086:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006088:	2300      	movs	r3, #0
 800608a:	60bb      	str	r3, [r7, #8]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	60bb      	str	r3, [r7, #8]
 8006094:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2201      	movs	r2, #1
 800609a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060a2:	f043 0204 	orr.w	r2, r3, #4
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f7ff fe4a 	bl	8005d44 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80060b0:	e089      	b.n	80061c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80060b2:	69bb      	ldr	r3, [r7, #24]
 80060b4:	f003 0302 	and.w	r3, r3, #2
 80060b8:	2b02      	cmp	r3, #2
 80060ba:	d107      	bne.n	80060cc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d002      	beq.n	80060cc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 f8be 	bl	8006248 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	f003 0301 	and.w	r3, r3, #1
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d107      	bne.n	80060e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d002      	beq.n	80060e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f000 f8fd 	bl	80062e0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060ec:	2b40      	cmp	r3, #64	@ 0x40
 80060ee:	d12f      	bne.n	8006150 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	f003 0320 	and.w	r3, r3, #32
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d02a      	beq.n	8006150 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	685a      	ldr	r2, [r3, #4]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006108:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a1e      	ldr	r2, [pc, #120]	@ (8006188 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d101      	bne.n	8006118 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006114:	4b1d      	ldr	r3, [pc, #116]	@ (800618c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006116:	e001      	b.n	800611c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006118:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800611c:	685a      	ldr	r2, [r3, #4]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4919      	ldr	r1, [pc, #100]	@ (8006188 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006124:	428b      	cmp	r3, r1
 8006126:	d101      	bne.n	800612c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006128:	4b18      	ldr	r3, [pc, #96]	@ (800618c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800612a:	e001      	b.n	8006130 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800612c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006130:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006134:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2201      	movs	r2, #1
 800613a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006142:	f043 0202 	orr.w	r2, r3, #2
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f7ff fdfa 	bl	8005d44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006150:	69bb      	ldr	r3, [r7, #24]
 8006152:	f003 0308 	and.w	r3, r3, #8
 8006156:	2b08      	cmp	r3, #8
 8006158:	d136      	bne.n	80061c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	f003 0320 	and.w	r3, r3, #32
 8006160:	2b00      	cmp	r3, #0
 8006162:	d031      	beq.n	80061c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a07      	ldr	r2, [pc, #28]	@ (8006188 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d101      	bne.n	8006172 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800616e:	4b07      	ldr	r3, [pc, #28]	@ (800618c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006170:	e001      	b.n	8006176 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8006172:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006176:	685a      	ldr	r2, [r3, #4]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4902      	ldr	r1, [pc, #8]	@ (8006188 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800617e:	428b      	cmp	r3, r1
 8006180:	d106      	bne.n	8006190 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8006182:	4b02      	ldr	r3, [pc, #8]	@ (800618c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006184:	e006      	b.n	8006194 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8006186:	bf00      	nop
 8006188:	40003800 	.word	0x40003800
 800618c:	40003400 	.word	0x40003400
 8006190:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006194:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006198:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	685a      	ldr	r2, [r3, #4]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80061a8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2201      	movs	r2, #1
 80061ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061b6:	f043 0204 	orr.w	r2, r3, #4
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f7ff fdc0 	bl	8005d44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80061c4:	e000      	b.n	80061c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80061c6:	bf00      	nop
}
 80061c8:	bf00      	nop
 80061ca:	3720      	adds	r7, #32
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80061d8:	bf00      	nop
 80061da:	370c      	adds	r7, #12
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr

080061e4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b082      	sub	sp, #8
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f0:	1c99      	adds	r1, r3, #2
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	6251      	str	r1, [r2, #36]	@ 0x24
 80061f6:	881a      	ldrh	r2, [r3, #0]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006202:	b29b      	uxth	r3, r3
 8006204:	3b01      	subs	r3, #1
 8006206:	b29a      	uxth	r2, r3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006210:	b29b      	uxth	r3, r3
 8006212:	2b00      	cmp	r3, #0
 8006214:	d113      	bne.n	800623e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	685a      	ldr	r2, [r3, #4]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006224:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800622a:	b29b      	uxth	r3, r3
 800622c:	2b00      	cmp	r3, #0
 800622e:	d106      	bne.n	800623e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f7ff ffc9 	bl	80061d0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800623e:	bf00      	nop
 8006240:	3708      	adds	r7, #8
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
	...

08006248 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006254:	1c99      	adds	r1, r3, #2
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	6251      	str	r1, [r2, #36]	@ 0x24
 800625a:	8819      	ldrh	r1, [r3, #0]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a1d      	ldr	r2, [pc, #116]	@ (80062d8 <I2SEx_TxISR_I2SExt+0x90>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d101      	bne.n	800626a <I2SEx_TxISR_I2SExt+0x22>
 8006266:	4b1d      	ldr	r3, [pc, #116]	@ (80062dc <I2SEx_TxISR_I2SExt+0x94>)
 8006268:	e001      	b.n	800626e <I2SEx_TxISR_I2SExt+0x26>
 800626a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800626e:	460a      	mov	r2, r1
 8006270:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006276:	b29b      	uxth	r3, r3
 8006278:	3b01      	subs	r3, #1
 800627a:	b29a      	uxth	r2, r3
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006284:	b29b      	uxth	r3, r3
 8006286:	2b00      	cmp	r3, #0
 8006288:	d121      	bne.n	80062ce <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a12      	ldr	r2, [pc, #72]	@ (80062d8 <I2SEx_TxISR_I2SExt+0x90>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d101      	bne.n	8006298 <I2SEx_TxISR_I2SExt+0x50>
 8006294:	4b11      	ldr	r3, [pc, #68]	@ (80062dc <I2SEx_TxISR_I2SExt+0x94>)
 8006296:	e001      	b.n	800629c <I2SEx_TxISR_I2SExt+0x54>
 8006298:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800629c:	685a      	ldr	r2, [r3, #4]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	490d      	ldr	r1, [pc, #52]	@ (80062d8 <I2SEx_TxISR_I2SExt+0x90>)
 80062a4:	428b      	cmp	r3, r1
 80062a6:	d101      	bne.n	80062ac <I2SEx_TxISR_I2SExt+0x64>
 80062a8:	4b0c      	ldr	r3, [pc, #48]	@ (80062dc <I2SEx_TxISR_I2SExt+0x94>)
 80062aa:	e001      	b.n	80062b0 <I2SEx_TxISR_I2SExt+0x68>
 80062ac:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80062b0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80062b4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d106      	bne.n	80062ce <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f7ff ff81 	bl	80061d0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80062ce:	bf00      	nop
 80062d0:	3708      	adds	r7, #8
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	40003800 	.word	0x40003800
 80062dc:	40003400 	.word	0x40003400

080062e0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b082      	sub	sp, #8
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	68d8      	ldr	r0, [r3, #12]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062f2:	1c99      	adds	r1, r3, #2
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80062f8:	b282      	uxth	r2, r0
 80062fa:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006300:	b29b      	uxth	r3, r3
 8006302:	3b01      	subs	r3, #1
 8006304:	b29a      	uxth	r2, r3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800630e:	b29b      	uxth	r3, r3
 8006310:	2b00      	cmp	r3, #0
 8006312:	d113      	bne.n	800633c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	685a      	ldr	r2, [r3, #4]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006322:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006328:	b29b      	uxth	r3, r3
 800632a:	2b00      	cmp	r3, #0
 800632c:	d106      	bne.n	800633c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2201      	movs	r2, #1
 8006332:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f7ff ff4a 	bl	80061d0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800633c:	bf00      	nop
 800633e:	3708      	adds	r7, #8
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b082      	sub	sp, #8
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a20      	ldr	r2, [pc, #128]	@ (80063d4 <I2SEx_RxISR_I2SExt+0x90>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d101      	bne.n	800635a <I2SEx_RxISR_I2SExt+0x16>
 8006356:	4b20      	ldr	r3, [pc, #128]	@ (80063d8 <I2SEx_RxISR_I2SExt+0x94>)
 8006358:	e001      	b.n	800635e <I2SEx_RxISR_I2SExt+0x1a>
 800635a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800635e:	68d8      	ldr	r0, [r3, #12]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006364:	1c99      	adds	r1, r3, #2
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800636a:	b282      	uxth	r2, r0
 800636c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006372:	b29b      	uxth	r3, r3
 8006374:	3b01      	subs	r3, #1
 8006376:	b29a      	uxth	r2, r3
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006380:	b29b      	uxth	r3, r3
 8006382:	2b00      	cmp	r3, #0
 8006384:	d121      	bne.n	80063ca <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a12      	ldr	r2, [pc, #72]	@ (80063d4 <I2SEx_RxISR_I2SExt+0x90>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d101      	bne.n	8006394 <I2SEx_RxISR_I2SExt+0x50>
 8006390:	4b11      	ldr	r3, [pc, #68]	@ (80063d8 <I2SEx_RxISR_I2SExt+0x94>)
 8006392:	e001      	b.n	8006398 <I2SEx_RxISR_I2SExt+0x54>
 8006394:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006398:	685a      	ldr	r2, [r3, #4]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	490d      	ldr	r1, [pc, #52]	@ (80063d4 <I2SEx_RxISR_I2SExt+0x90>)
 80063a0:	428b      	cmp	r3, r1
 80063a2:	d101      	bne.n	80063a8 <I2SEx_RxISR_I2SExt+0x64>
 80063a4:	4b0c      	ldr	r3, [pc, #48]	@ (80063d8 <I2SEx_RxISR_I2SExt+0x94>)
 80063a6:	e001      	b.n	80063ac <I2SEx_RxISR_I2SExt+0x68>
 80063a8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80063ac:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80063b0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d106      	bne.n	80063ca <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f7ff ff03 	bl	80061d0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80063ca:	bf00      	nop
 80063cc:	3708      	adds	r7, #8
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
 80063d2:	bf00      	nop
 80063d4:	40003800 	.word	0x40003800
 80063d8:	40003400 	.word	0x40003400

080063dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b086      	sub	sp, #24
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d101      	bne.n	80063ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e267      	b.n	80068be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f003 0301 	and.w	r3, r3, #1
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d075      	beq.n	80064e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80063fa:	4b88      	ldr	r3, [pc, #544]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	f003 030c 	and.w	r3, r3, #12
 8006402:	2b04      	cmp	r3, #4
 8006404:	d00c      	beq.n	8006420 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006406:	4b85      	ldr	r3, [pc, #532]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800640e:	2b08      	cmp	r3, #8
 8006410:	d112      	bne.n	8006438 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006412:	4b82      	ldr	r3, [pc, #520]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800641a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800641e:	d10b      	bne.n	8006438 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006420:	4b7e      	ldr	r3, [pc, #504]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006428:	2b00      	cmp	r3, #0
 800642a:	d05b      	beq.n	80064e4 <HAL_RCC_OscConfig+0x108>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d157      	bne.n	80064e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	e242      	b.n	80068be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006440:	d106      	bne.n	8006450 <HAL_RCC_OscConfig+0x74>
 8006442:	4b76      	ldr	r3, [pc, #472]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a75      	ldr	r2, [pc, #468]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 8006448:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800644c:	6013      	str	r3, [r2, #0]
 800644e:	e01d      	b.n	800648c <HAL_RCC_OscConfig+0xb0>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006458:	d10c      	bne.n	8006474 <HAL_RCC_OscConfig+0x98>
 800645a:	4b70      	ldr	r3, [pc, #448]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a6f      	ldr	r2, [pc, #444]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 8006460:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006464:	6013      	str	r3, [r2, #0]
 8006466:	4b6d      	ldr	r3, [pc, #436]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a6c      	ldr	r2, [pc, #432]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 800646c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006470:	6013      	str	r3, [r2, #0]
 8006472:	e00b      	b.n	800648c <HAL_RCC_OscConfig+0xb0>
 8006474:	4b69      	ldr	r3, [pc, #420]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a68      	ldr	r2, [pc, #416]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 800647a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800647e:	6013      	str	r3, [r2, #0]
 8006480:	4b66      	ldr	r3, [pc, #408]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a65      	ldr	r2, [pc, #404]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 8006486:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800648a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d013      	beq.n	80064bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006494:	f7fc f9f4 	bl	8002880 <HAL_GetTick>
 8006498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800649a:	e008      	b.n	80064ae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800649c:	f7fc f9f0 	bl	8002880 <HAL_GetTick>
 80064a0:	4602      	mov	r2, r0
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	1ad3      	subs	r3, r2, r3
 80064a6:	2b64      	cmp	r3, #100	@ 0x64
 80064a8:	d901      	bls.n	80064ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80064aa:	2303      	movs	r3, #3
 80064ac:	e207      	b.n	80068be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064ae:	4b5b      	ldr	r3, [pc, #364]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d0f0      	beq.n	800649c <HAL_RCC_OscConfig+0xc0>
 80064ba:	e014      	b.n	80064e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064bc:	f7fc f9e0 	bl	8002880 <HAL_GetTick>
 80064c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064c2:	e008      	b.n	80064d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064c4:	f7fc f9dc 	bl	8002880 <HAL_GetTick>
 80064c8:	4602      	mov	r2, r0
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	1ad3      	subs	r3, r2, r3
 80064ce:	2b64      	cmp	r3, #100	@ 0x64
 80064d0:	d901      	bls.n	80064d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80064d2:	2303      	movs	r3, #3
 80064d4:	e1f3      	b.n	80068be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064d6:	4b51      	ldr	r3, [pc, #324]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d1f0      	bne.n	80064c4 <HAL_RCC_OscConfig+0xe8>
 80064e2:	e000      	b.n	80064e6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 0302 	and.w	r3, r3, #2
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d063      	beq.n	80065ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80064f2:	4b4a      	ldr	r3, [pc, #296]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	f003 030c 	and.w	r3, r3, #12
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d00b      	beq.n	8006516 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80064fe:	4b47      	ldr	r3, [pc, #284]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006506:	2b08      	cmp	r3, #8
 8006508:	d11c      	bne.n	8006544 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800650a:	4b44      	ldr	r3, [pc, #272]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006512:	2b00      	cmp	r3, #0
 8006514:	d116      	bne.n	8006544 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006516:	4b41      	ldr	r3, [pc, #260]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f003 0302 	and.w	r3, r3, #2
 800651e:	2b00      	cmp	r3, #0
 8006520:	d005      	beq.n	800652e <HAL_RCC_OscConfig+0x152>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	68db      	ldr	r3, [r3, #12]
 8006526:	2b01      	cmp	r3, #1
 8006528:	d001      	beq.n	800652e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e1c7      	b.n	80068be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800652e:	4b3b      	ldr	r3, [pc, #236]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	00db      	lsls	r3, r3, #3
 800653c:	4937      	ldr	r1, [pc, #220]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 800653e:	4313      	orrs	r3, r2
 8006540:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006542:	e03a      	b.n	80065ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d020      	beq.n	800658e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800654c:	4b34      	ldr	r3, [pc, #208]	@ (8006620 <HAL_RCC_OscConfig+0x244>)
 800654e:	2201      	movs	r2, #1
 8006550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006552:	f7fc f995 	bl	8002880 <HAL_GetTick>
 8006556:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006558:	e008      	b.n	800656c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800655a:	f7fc f991 	bl	8002880 <HAL_GetTick>
 800655e:	4602      	mov	r2, r0
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	1ad3      	subs	r3, r2, r3
 8006564:	2b02      	cmp	r3, #2
 8006566:	d901      	bls.n	800656c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006568:	2303      	movs	r3, #3
 800656a:	e1a8      	b.n	80068be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800656c:	4b2b      	ldr	r3, [pc, #172]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f003 0302 	and.w	r3, r3, #2
 8006574:	2b00      	cmp	r3, #0
 8006576:	d0f0      	beq.n	800655a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006578:	4b28      	ldr	r3, [pc, #160]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	691b      	ldr	r3, [r3, #16]
 8006584:	00db      	lsls	r3, r3, #3
 8006586:	4925      	ldr	r1, [pc, #148]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 8006588:	4313      	orrs	r3, r2
 800658a:	600b      	str	r3, [r1, #0]
 800658c:	e015      	b.n	80065ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800658e:	4b24      	ldr	r3, [pc, #144]	@ (8006620 <HAL_RCC_OscConfig+0x244>)
 8006590:	2200      	movs	r2, #0
 8006592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006594:	f7fc f974 	bl	8002880 <HAL_GetTick>
 8006598:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800659a:	e008      	b.n	80065ae <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800659c:	f7fc f970 	bl	8002880 <HAL_GetTick>
 80065a0:	4602      	mov	r2, r0
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	1ad3      	subs	r3, r2, r3
 80065a6:	2b02      	cmp	r3, #2
 80065a8:	d901      	bls.n	80065ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80065aa:	2303      	movs	r3, #3
 80065ac:	e187      	b.n	80068be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065ae:	4b1b      	ldr	r3, [pc, #108]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f003 0302 	and.w	r3, r3, #2
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d1f0      	bne.n	800659c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 0308 	and.w	r3, r3, #8
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d036      	beq.n	8006634 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	695b      	ldr	r3, [r3, #20]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d016      	beq.n	80065fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80065ce:	4b15      	ldr	r3, [pc, #84]	@ (8006624 <HAL_RCC_OscConfig+0x248>)
 80065d0:	2201      	movs	r2, #1
 80065d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065d4:	f7fc f954 	bl	8002880 <HAL_GetTick>
 80065d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065da:	e008      	b.n	80065ee <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065dc:	f7fc f950 	bl	8002880 <HAL_GetTick>
 80065e0:	4602      	mov	r2, r0
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	1ad3      	subs	r3, r2, r3
 80065e6:	2b02      	cmp	r3, #2
 80065e8:	d901      	bls.n	80065ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80065ea:	2303      	movs	r3, #3
 80065ec:	e167      	b.n	80068be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065ee:	4b0b      	ldr	r3, [pc, #44]	@ (800661c <HAL_RCC_OscConfig+0x240>)
 80065f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065f2:	f003 0302 	and.w	r3, r3, #2
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d0f0      	beq.n	80065dc <HAL_RCC_OscConfig+0x200>
 80065fa:	e01b      	b.n	8006634 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065fc:	4b09      	ldr	r3, [pc, #36]	@ (8006624 <HAL_RCC_OscConfig+0x248>)
 80065fe:	2200      	movs	r2, #0
 8006600:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006602:	f7fc f93d 	bl	8002880 <HAL_GetTick>
 8006606:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006608:	e00e      	b.n	8006628 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800660a:	f7fc f939 	bl	8002880 <HAL_GetTick>
 800660e:	4602      	mov	r2, r0
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	1ad3      	subs	r3, r2, r3
 8006614:	2b02      	cmp	r3, #2
 8006616:	d907      	bls.n	8006628 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006618:	2303      	movs	r3, #3
 800661a:	e150      	b.n	80068be <HAL_RCC_OscConfig+0x4e2>
 800661c:	40023800 	.word	0x40023800
 8006620:	42470000 	.word	0x42470000
 8006624:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006628:	4b88      	ldr	r3, [pc, #544]	@ (800684c <HAL_RCC_OscConfig+0x470>)
 800662a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800662c:	f003 0302 	and.w	r3, r3, #2
 8006630:	2b00      	cmp	r3, #0
 8006632:	d1ea      	bne.n	800660a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 0304 	and.w	r3, r3, #4
 800663c:	2b00      	cmp	r3, #0
 800663e:	f000 8097 	beq.w	8006770 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006642:	2300      	movs	r3, #0
 8006644:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006646:	4b81      	ldr	r3, [pc, #516]	@ (800684c <HAL_RCC_OscConfig+0x470>)
 8006648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800664a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800664e:	2b00      	cmp	r3, #0
 8006650:	d10f      	bne.n	8006672 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006652:	2300      	movs	r3, #0
 8006654:	60bb      	str	r3, [r7, #8]
 8006656:	4b7d      	ldr	r3, [pc, #500]	@ (800684c <HAL_RCC_OscConfig+0x470>)
 8006658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800665a:	4a7c      	ldr	r2, [pc, #496]	@ (800684c <HAL_RCC_OscConfig+0x470>)
 800665c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006660:	6413      	str	r3, [r2, #64]	@ 0x40
 8006662:	4b7a      	ldr	r3, [pc, #488]	@ (800684c <HAL_RCC_OscConfig+0x470>)
 8006664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006666:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800666a:	60bb      	str	r3, [r7, #8]
 800666c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800666e:	2301      	movs	r3, #1
 8006670:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006672:	4b77      	ldr	r3, [pc, #476]	@ (8006850 <HAL_RCC_OscConfig+0x474>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800667a:	2b00      	cmp	r3, #0
 800667c:	d118      	bne.n	80066b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800667e:	4b74      	ldr	r3, [pc, #464]	@ (8006850 <HAL_RCC_OscConfig+0x474>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a73      	ldr	r2, [pc, #460]	@ (8006850 <HAL_RCC_OscConfig+0x474>)
 8006684:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006688:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800668a:	f7fc f8f9 	bl	8002880 <HAL_GetTick>
 800668e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006690:	e008      	b.n	80066a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006692:	f7fc f8f5 	bl	8002880 <HAL_GetTick>
 8006696:	4602      	mov	r2, r0
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	1ad3      	subs	r3, r2, r3
 800669c:	2b02      	cmp	r3, #2
 800669e:	d901      	bls.n	80066a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80066a0:	2303      	movs	r3, #3
 80066a2:	e10c      	b.n	80068be <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066a4:	4b6a      	ldr	r3, [pc, #424]	@ (8006850 <HAL_RCC_OscConfig+0x474>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d0f0      	beq.n	8006692 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d106      	bne.n	80066c6 <HAL_RCC_OscConfig+0x2ea>
 80066b8:	4b64      	ldr	r3, [pc, #400]	@ (800684c <HAL_RCC_OscConfig+0x470>)
 80066ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066bc:	4a63      	ldr	r2, [pc, #396]	@ (800684c <HAL_RCC_OscConfig+0x470>)
 80066be:	f043 0301 	orr.w	r3, r3, #1
 80066c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80066c4:	e01c      	b.n	8006700 <HAL_RCC_OscConfig+0x324>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	2b05      	cmp	r3, #5
 80066cc:	d10c      	bne.n	80066e8 <HAL_RCC_OscConfig+0x30c>
 80066ce:	4b5f      	ldr	r3, [pc, #380]	@ (800684c <HAL_RCC_OscConfig+0x470>)
 80066d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066d2:	4a5e      	ldr	r2, [pc, #376]	@ (800684c <HAL_RCC_OscConfig+0x470>)
 80066d4:	f043 0304 	orr.w	r3, r3, #4
 80066d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80066da:	4b5c      	ldr	r3, [pc, #368]	@ (800684c <HAL_RCC_OscConfig+0x470>)
 80066dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066de:	4a5b      	ldr	r2, [pc, #364]	@ (800684c <HAL_RCC_OscConfig+0x470>)
 80066e0:	f043 0301 	orr.w	r3, r3, #1
 80066e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80066e6:	e00b      	b.n	8006700 <HAL_RCC_OscConfig+0x324>
 80066e8:	4b58      	ldr	r3, [pc, #352]	@ (800684c <HAL_RCC_OscConfig+0x470>)
 80066ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066ec:	4a57      	ldr	r2, [pc, #348]	@ (800684c <HAL_RCC_OscConfig+0x470>)
 80066ee:	f023 0301 	bic.w	r3, r3, #1
 80066f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80066f4:	4b55      	ldr	r3, [pc, #340]	@ (800684c <HAL_RCC_OscConfig+0x470>)
 80066f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066f8:	4a54      	ldr	r2, [pc, #336]	@ (800684c <HAL_RCC_OscConfig+0x470>)
 80066fa:	f023 0304 	bic.w	r3, r3, #4
 80066fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d015      	beq.n	8006734 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006708:	f7fc f8ba 	bl	8002880 <HAL_GetTick>
 800670c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800670e:	e00a      	b.n	8006726 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006710:	f7fc f8b6 	bl	8002880 <HAL_GetTick>
 8006714:	4602      	mov	r2, r0
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	1ad3      	subs	r3, r2, r3
 800671a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800671e:	4293      	cmp	r3, r2
 8006720:	d901      	bls.n	8006726 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006722:	2303      	movs	r3, #3
 8006724:	e0cb      	b.n	80068be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006726:	4b49      	ldr	r3, [pc, #292]	@ (800684c <HAL_RCC_OscConfig+0x470>)
 8006728:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800672a:	f003 0302 	and.w	r3, r3, #2
 800672e:	2b00      	cmp	r3, #0
 8006730:	d0ee      	beq.n	8006710 <HAL_RCC_OscConfig+0x334>
 8006732:	e014      	b.n	800675e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006734:	f7fc f8a4 	bl	8002880 <HAL_GetTick>
 8006738:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800673a:	e00a      	b.n	8006752 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800673c:	f7fc f8a0 	bl	8002880 <HAL_GetTick>
 8006740:	4602      	mov	r2, r0
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	1ad3      	subs	r3, r2, r3
 8006746:	f241 3288 	movw	r2, #5000	@ 0x1388
 800674a:	4293      	cmp	r3, r2
 800674c:	d901      	bls.n	8006752 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800674e:	2303      	movs	r3, #3
 8006750:	e0b5      	b.n	80068be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006752:	4b3e      	ldr	r3, [pc, #248]	@ (800684c <HAL_RCC_OscConfig+0x470>)
 8006754:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006756:	f003 0302 	and.w	r3, r3, #2
 800675a:	2b00      	cmp	r3, #0
 800675c:	d1ee      	bne.n	800673c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800675e:	7dfb      	ldrb	r3, [r7, #23]
 8006760:	2b01      	cmp	r3, #1
 8006762:	d105      	bne.n	8006770 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006764:	4b39      	ldr	r3, [pc, #228]	@ (800684c <HAL_RCC_OscConfig+0x470>)
 8006766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006768:	4a38      	ldr	r2, [pc, #224]	@ (800684c <HAL_RCC_OscConfig+0x470>)
 800676a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800676e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	699b      	ldr	r3, [r3, #24]
 8006774:	2b00      	cmp	r3, #0
 8006776:	f000 80a1 	beq.w	80068bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800677a:	4b34      	ldr	r3, [pc, #208]	@ (800684c <HAL_RCC_OscConfig+0x470>)
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	f003 030c 	and.w	r3, r3, #12
 8006782:	2b08      	cmp	r3, #8
 8006784:	d05c      	beq.n	8006840 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	699b      	ldr	r3, [r3, #24]
 800678a:	2b02      	cmp	r3, #2
 800678c:	d141      	bne.n	8006812 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800678e:	4b31      	ldr	r3, [pc, #196]	@ (8006854 <HAL_RCC_OscConfig+0x478>)
 8006790:	2200      	movs	r2, #0
 8006792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006794:	f7fc f874 	bl	8002880 <HAL_GetTick>
 8006798:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800679a:	e008      	b.n	80067ae <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800679c:	f7fc f870 	bl	8002880 <HAL_GetTick>
 80067a0:	4602      	mov	r2, r0
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	1ad3      	subs	r3, r2, r3
 80067a6:	2b02      	cmp	r3, #2
 80067a8:	d901      	bls.n	80067ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80067aa:	2303      	movs	r3, #3
 80067ac:	e087      	b.n	80068be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067ae:	4b27      	ldr	r3, [pc, #156]	@ (800684c <HAL_RCC_OscConfig+0x470>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d1f0      	bne.n	800679c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	69da      	ldr	r2, [r3, #28]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6a1b      	ldr	r3, [r3, #32]
 80067c2:	431a      	orrs	r2, r3
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067c8:	019b      	lsls	r3, r3, #6
 80067ca:	431a      	orrs	r2, r3
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067d0:	085b      	lsrs	r3, r3, #1
 80067d2:	3b01      	subs	r3, #1
 80067d4:	041b      	lsls	r3, r3, #16
 80067d6:	431a      	orrs	r2, r3
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067dc:	061b      	lsls	r3, r3, #24
 80067de:	491b      	ldr	r1, [pc, #108]	@ (800684c <HAL_RCC_OscConfig+0x470>)
 80067e0:	4313      	orrs	r3, r2
 80067e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80067e4:	4b1b      	ldr	r3, [pc, #108]	@ (8006854 <HAL_RCC_OscConfig+0x478>)
 80067e6:	2201      	movs	r2, #1
 80067e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067ea:	f7fc f849 	bl	8002880 <HAL_GetTick>
 80067ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067f0:	e008      	b.n	8006804 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067f2:	f7fc f845 	bl	8002880 <HAL_GetTick>
 80067f6:	4602      	mov	r2, r0
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	1ad3      	subs	r3, r2, r3
 80067fc:	2b02      	cmp	r3, #2
 80067fe:	d901      	bls.n	8006804 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006800:	2303      	movs	r3, #3
 8006802:	e05c      	b.n	80068be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006804:	4b11      	ldr	r3, [pc, #68]	@ (800684c <HAL_RCC_OscConfig+0x470>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800680c:	2b00      	cmp	r3, #0
 800680e:	d0f0      	beq.n	80067f2 <HAL_RCC_OscConfig+0x416>
 8006810:	e054      	b.n	80068bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006812:	4b10      	ldr	r3, [pc, #64]	@ (8006854 <HAL_RCC_OscConfig+0x478>)
 8006814:	2200      	movs	r2, #0
 8006816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006818:	f7fc f832 	bl	8002880 <HAL_GetTick>
 800681c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800681e:	e008      	b.n	8006832 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006820:	f7fc f82e 	bl	8002880 <HAL_GetTick>
 8006824:	4602      	mov	r2, r0
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	1ad3      	subs	r3, r2, r3
 800682a:	2b02      	cmp	r3, #2
 800682c:	d901      	bls.n	8006832 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800682e:	2303      	movs	r3, #3
 8006830:	e045      	b.n	80068be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006832:	4b06      	ldr	r3, [pc, #24]	@ (800684c <HAL_RCC_OscConfig+0x470>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800683a:	2b00      	cmp	r3, #0
 800683c:	d1f0      	bne.n	8006820 <HAL_RCC_OscConfig+0x444>
 800683e:	e03d      	b.n	80068bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	699b      	ldr	r3, [r3, #24]
 8006844:	2b01      	cmp	r3, #1
 8006846:	d107      	bne.n	8006858 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	e038      	b.n	80068be <HAL_RCC_OscConfig+0x4e2>
 800684c:	40023800 	.word	0x40023800
 8006850:	40007000 	.word	0x40007000
 8006854:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006858:	4b1b      	ldr	r3, [pc, #108]	@ (80068c8 <HAL_RCC_OscConfig+0x4ec>)
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	699b      	ldr	r3, [r3, #24]
 8006862:	2b01      	cmp	r3, #1
 8006864:	d028      	beq.n	80068b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006870:	429a      	cmp	r2, r3
 8006872:	d121      	bne.n	80068b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800687e:	429a      	cmp	r2, r3
 8006880:	d11a      	bne.n	80068b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006882:	68fa      	ldr	r2, [r7, #12]
 8006884:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006888:	4013      	ands	r3, r2
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800688e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006890:	4293      	cmp	r3, r2
 8006892:	d111      	bne.n	80068b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800689e:	085b      	lsrs	r3, r3, #1
 80068a0:	3b01      	subs	r3, #1
 80068a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d107      	bne.n	80068b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d001      	beq.n	80068bc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	e000      	b.n	80068be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80068bc:	2300      	movs	r3, #0
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3718      	adds	r7, #24
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	40023800 	.word	0x40023800

080068cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b084      	sub	sp, #16
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d101      	bne.n	80068e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	e0cc      	b.n	8006a7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80068e0:	4b68      	ldr	r3, [pc, #416]	@ (8006a84 <HAL_RCC_ClockConfig+0x1b8>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f003 0307 	and.w	r3, r3, #7
 80068e8:	683a      	ldr	r2, [r7, #0]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d90c      	bls.n	8006908 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068ee:	4b65      	ldr	r3, [pc, #404]	@ (8006a84 <HAL_RCC_ClockConfig+0x1b8>)
 80068f0:	683a      	ldr	r2, [r7, #0]
 80068f2:	b2d2      	uxtb	r2, r2
 80068f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068f6:	4b63      	ldr	r3, [pc, #396]	@ (8006a84 <HAL_RCC_ClockConfig+0x1b8>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f003 0307 	and.w	r3, r3, #7
 80068fe:	683a      	ldr	r2, [r7, #0]
 8006900:	429a      	cmp	r2, r3
 8006902:	d001      	beq.n	8006908 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	e0b8      	b.n	8006a7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f003 0302 	and.w	r3, r3, #2
 8006910:	2b00      	cmp	r3, #0
 8006912:	d020      	beq.n	8006956 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f003 0304 	and.w	r3, r3, #4
 800691c:	2b00      	cmp	r3, #0
 800691e:	d005      	beq.n	800692c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006920:	4b59      	ldr	r3, [pc, #356]	@ (8006a88 <HAL_RCC_ClockConfig+0x1bc>)
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	4a58      	ldr	r2, [pc, #352]	@ (8006a88 <HAL_RCC_ClockConfig+0x1bc>)
 8006926:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800692a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f003 0308 	and.w	r3, r3, #8
 8006934:	2b00      	cmp	r3, #0
 8006936:	d005      	beq.n	8006944 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006938:	4b53      	ldr	r3, [pc, #332]	@ (8006a88 <HAL_RCC_ClockConfig+0x1bc>)
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	4a52      	ldr	r2, [pc, #328]	@ (8006a88 <HAL_RCC_ClockConfig+0x1bc>)
 800693e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006942:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006944:	4b50      	ldr	r3, [pc, #320]	@ (8006a88 <HAL_RCC_ClockConfig+0x1bc>)
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	494d      	ldr	r1, [pc, #308]	@ (8006a88 <HAL_RCC_ClockConfig+0x1bc>)
 8006952:	4313      	orrs	r3, r2
 8006954:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f003 0301 	and.w	r3, r3, #1
 800695e:	2b00      	cmp	r3, #0
 8006960:	d044      	beq.n	80069ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	2b01      	cmp	r3, #1
 8006968:	d107      	bne.n	800697a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800696a:	4b47      	ldr	r3, [pc, #284]	@ (8006a88 <HAL_RCC_ClockConfig+0x1bc>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006972:	2b00      	cmp	r3, #0
 8006974:	d119      	bne.n	80069aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	e07f      	b.n	8006a7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	2b02      	cmp	r3, #2
 8006980:	d003      	beq.n	800698a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006986:	2b03      	cmp	r3, #3
 8006988:	d107      	bne.n	800699a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800698a:	4b3f      	ldr	r3, [pc, #252]	@ (8006a88 <HAL_RCC_ClockConfig+0x1bc>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006992:	2b00      	cmp	r3, #0
 8006994:	d109      	bne.n	80069aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	e06f      	b.n	8006a7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800699a:	4b3b      	ldr	r3, [pc, #236]	@ (8006a88 <HAL_RCC_ClockConfig+0x1bc>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f003 0302 	and.w	r3, r3, #2
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d101      	bne.n	80069aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	e067      	b.n	8006a7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80069aa:	4b37      	ldr	r3, [pc, #220]	@ (8006a88 <HAL_RCC_ClockConfig+0x1bc>)
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	f023 0203 	bic.w	r2, r3, #3
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	4934      	ldr	r1, [pc, #208]	@ (8006a88 <HAL_RCC_ClockConfig+0x1bc>)
 80069b8:	4313      	orrs	r3, r2
 80069ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80069bc:	f7fb ff60 	bl	8002880 <HAL_GetTick>
 80069c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069c2:	e00a      	b.n	80069da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069c4:	f7fb ff5c 	bl	8002880 <HAL_GetTick>
 80069c8:	4602      	mov	r2, r0
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	1ad3      	subs	r3, r2, r3
 80069ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d901      	bls.n	80069da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80069d6:	2303      	movs	r3, #3
 80069d8:	e04f      	b.n	8006a7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069da:	4b2b      	ldr	r3, [pc, #172]	@ (8006a88 <HAL_RCC_ClockConfig+0x1bc>)
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	f003 020c 	and.w	r2, r3, #12
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d1eb      	bne.n	80069c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80069ec:	4b25      	ldr	r3, [pc, #148]	@ (8006a84 <HAL_RCC_ClockConfig+0x1b8>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f003 0307 	and.w	r3, r3, #7
 80069f4:	683a      	ldr	r2, [r7, #0]
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d20c      	bcs.n	8006a14 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069fa:	4b22      	ldr	r3, [pc, #136]	@ (8006a84 <HAL_RCC_ClockConfig+0x1b8>)
 80069fc:	683a      	ldr	r2, [r7, #0]
 80069fe:	b2d2      	uxtb	r2, r2
 8006a00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a02:	4b20      	ldr	r3, [pc, #128]	@ (8006a84 <HAL_RCC_ClockConfig+0x1b8>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f003 0307 	and.w	r3, r3, #7
 8006a0a:	683a      	ldr	r2, [r7, #0]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d001      	beq.n	8006a14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	e032      	b.n	8006a7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f003 0304 	and.w	r3, r3, #4
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d008      	beq.n	8006a32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a20:	4b19      	ldr	r3, [pc, #100]	@ (8006a88 <HAL_RCC_ClockConfig+0x1bc>)
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	4916      	ldr	r1, [pc, #88]	@ (8006a88 <HAL_RCC_ClockConfig+0x1bc>)
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f003 0308 	and.w	r3, r3, #8
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d009      	beq.n	8006a52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006a3e:	4b12      	ldr	r3, [pc, #72]	@ (8006a88 <HAL_RCC_ClockConfig+0x1bc>)
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	691b      	ldr	r3, [r3, #16]
 8006a4a:	00db      	lsls	r3, r3, #3
 8006a4c:	490e      	ldr	r1, [pc, #56]	@ (8006a88 <HAL_RCC_ClockConfig+0x1bc>)
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006a52:	f000 f821 	bl	8006a98 <HAL_RCC_GetSysClockFreq>
 8006a56:	4602      	mov	r2, r0
 8006a58:	4b0b      	ldr	r3, [pc, #44]	@ (8006a88 <HAL_RCC_ClockConfig+0x1bc>)
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	091b      	lsrs	r3, r3, #4
 8006a5e:	f003 030f 	and.w	r3, r3, #15
 8006a62:	490a      	ldr	r1, [pc, #40]	@ (8006a8c <HAL_RCC_ClockConfig+0x1c0>)
 8006a64:	5ccb      	ldrb	r3, [r1, r3]
 8006a66:	fa22 f303 	lsr.w	r3, r2, r3
 8006a6a:	4a09      	ldr	r2, [pc, #36]	@ (8006a90 <HAL_RCC_ClockConfig+0x1c4>)
 8006a6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006a6e:	4b09      	ldr	r3, [pc, #36]	@ (8006a94 <HAL_RCC_ClockConfig+0x1c8>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4618      	mov	r0, r3
 8006a74:	f7fb fec0 	bl	80027f8 <HAL_InitTick>

  return HAL_OK;
 8006a78:	2300      	movs	r3, #0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3710      	adds	r7, #16
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
 8006a82:	bf00      	nop
 8006a84:	40023c00 	.word	0x40023c00
 8006a88:	40023800 	.word	0x40023800
 8006a8c:	0800f390 	.word	0x0800f390
 8006a90:	2000000c 	.word	0x2000000c
 8006a94:	2000001c 	.word	0x2000001c

08006a98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a9c:	b094      	sub	sp, #80	@ 0x50
 8006a9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006aac:	2300      	movs	r3, #0
 8006aae:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006ab0:	4b79      	ldr	r3, [pc, #484]	@ (8006c98 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	f003 030c 	and.w	r3, r3, #12
 8006ab8:	2b08      	cmp	r3, #8
 8006aba:	d00d      	beq.n	8006ad8 <HAL_RCC_GetSysClockFreq+0x40>
 8006abc:	2b08      	cmp	r3, #8
 8006abe:	f200 80e1 	bhi.w	8006c84 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d002      	beq.n	8006acc <HAL_RCC_GetSysClockFreq+0x34>
 8006ac6:	2b04      	cmp	r3, #4
 8006ac8:	d003      	beq.n	8006ad2 <HAL_RCC_GetSysClockFreq+0x3a>
 8006aca:	e0db      	b.n	8006c84 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006acc:	4b73      	ldr	r3, [pc, #460]	@ (8006c9c <HAL_RCC_GetSysClockFreq+0x204>)
 8006ace:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006ad0:	e0db      	b.n	8006c8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006ad2:	4b73      	ldr	r3, [pc, #460]	@ (8006ca0 <HAL_RCC_GetSysClockFreq+0x208>)
 8006ad4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006ad6:	e0d8      	b.n	8006c8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006ad8:	4b6f      	ldr	r3, [pc, #444]	@ (8006c98 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006ae0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006ae2:	4b6d      	ldr	r3, [pc, #436]	@ (8006c98 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d063      	beq.n	8006bb6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006aee:	4b6a      	ldr	r3, [pc, #424]	@ (8006c98 <HAL_RCC_GetSysClockFreq+0x200>)
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	099b      	lsrs	r3, r3, #6
 8006af4:	2200      	movs	r2, #0
 8006af6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006af8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006afc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b00:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b02:	2300      	movs	r3, #0
 8006b04:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b06:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006b0a:	4622      	mov	r2, r4
 8006b0c:	462b      	mov	r3, r5
 8006b0e:	f04f 0000 	mov.w	r0, #0
 8006b12:	f04f 0100 	mov.w	r1, #0
 8006b16:	0159      	lsls	r1, r3, #5
 8006b18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006b1c:	0150      	lsls	r0, r2, #5
 8006b1e:	4602      	mov	r2, r0
 8006b20:	460b      	mov	r3, r1
 8006b22:	4621      	mov	r1, r4
 8006b24:	1a51      	subs	r1, r2, r1
 8006b26:	6139      	str	r1, [r7, #16]
 8006b28:	4629      	mov	r1, r5
 8006b2a:	eb63 0301 	sbc.w	r3, r3, r1
 8006b2e:	617b      	str	r3, [r7, #20]
 8006b30:	f04f 0200 	mov.w	r2, #0
 8006b34:	f04f 0300 	mov.w	r3, #0
 8006b38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006b3c:	4659      	mov	r1, fp
 8006b3e:	018b      	lsls	r3, r1, #6
 8006b40:	4651      	mov	r1, sl
 8006b42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006b46:	4651      	mov	r1, sl
 8006b48:	018a      	lsls	r2, r1, #6
 8006b4a:	4651      	mov	r1, sl
 8006b4c:	ebb2 0801 	subs.w	r8, r2, r1
 8006b50:	4659      	mov	r1, fp
 8006b52:	eb63 0901 	sbc.w	r9, r3, r1
 8006b56:	f04f 0200 	mov.w	r2, #0
 8006b5a:	f04f 0300 	mov.w	r3, #0
 8006b5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006b62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006b66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006b6a:	4690      	mov	r8, r2
 8006b6c:	4699      	mov	r9, r3
 8006b6e:	4623      	mov	r3, r4
 8006b70:	eb18 0303 	adds.w	r3, r8, r3
 8006b74:	60bb      	str	r3, [r7, #8]
 8006b76:	462b      	mov	r3, r5
 8006b78:	eb49 0303 	adc.w	r3, r9, r3
 8006b7c:	60fb      	str	r3, [r7, #12]
 8006b7e:	f04f 0200 	mov.w	r2, #0
 8006b82:	f04f 0300 	mov.w	r3, #0
 8006b86:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006b8a:	4629      	mov	r1, r5
 8006b8c:	024b      	lsls	r3, r1, #9
 8006b8e:	4621      	mov	r1, r4
 8006b90:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006b94:	4621      	mov	r1, r4
 8006b96:	024a      	lsls	r2, r1, #9
 8006b98:	4610      	mov	r0, r2
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ba2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ba4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006ba8:	f7fa f806 	bl	8000bb8 <__aeabi_uldivmod>
 8006bac:	4602      	mov	r2, r0
 8006bae:	460b      	mov	r3, r1
 8006bb0:	4613      	mov	r3, r2
 8006bb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006bb4:	e058      	b.n	8006c68 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006bb6:	4b38      	ldr	r3, [pc, #224]	@ (8006c98 <HAL_RCC_GetSysClockFreq+0x200>)
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	099b      	lsrs	r3, r3, #6
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	4611      	mov	r1, r2
 8006bc2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006bc6:	623b      	str	r3, [r7, #32]
 8006bc8:	2300      	movs	r3, #0
 8006bca:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bcc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006bd0:	4642      	mov	r2, r8
 8006bd2:	464b      	mov	r3, r9
 8006bd4:	f04f 0000 	mov.w	r0, #0
 8006bd8:	f04f 0100 	mov.w	r1, #0
 8006bdc:	0159      	lsls	r1, r3, #5
 8006bde:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006be2:	0150      	lsls	r0, r2, #5
 8006be4:	4602      	mov	r2, r0
 8006be6:	460b      	mov	r3, r1
 8006be8:	4641      	mov	r1, r8
 8006bea:	ebb2 0a01 	subs.w	sl, r2, r1
 8006bee:	4649      	mov	r1, r9
 8006bf0:	eb63 0b01 	sbc.w	fp, r3, r1
 8006bf4:	f04f 0200 	mov.w	r2, #0
 8006bf8:	f04f 0300 	mov.w	r3, #0
 8006bfc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006c00:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006c04:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006c08:	ebb2 040a 	subs.w	r4, r2, sl
 8006c0c:	eb63 050b 	sbc.w	r5, r3, fp
 8006c10:	f04f 0200 	mov.w	r2, #0
 8006c14:	f04f 0300 	mov.w	r3, #0
 8006c18:	00eb      	lsls	r3, r5, #3
 8006c1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006c1e:	00e2      	lsls	r2, r4, #3
 8006c20:	4614      	mov	r4, r2
 8006c22:	461d      	mov	r5, r3
 8006c24:	4643      	mov	r3, r8
 8006c26:	18e3      	adds	r3, r4, r3
 8006c28:	603b      	str	r3, [r7, #0]
 8006c2a:	464b      	mov	r3, r9
 8006c2c:	eb45 0303 	adc.w	r3, r5, r3
 8006c30:	607b      	str	r3, [r7, #4]
 8006c32:	f04f 0200 	mov.w	r2, #0
 8006c36:	f04f 0300 	mov.w	r3, #0
 8006c3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006c3e:	4629      	mov	r1, r5
 8006c40:	028b      	lsls	r3, r1, #10
 8006c42:	4621      	mov	r1, r4
 8006c44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006c48:	4621      	mov	r1, r4
 8006c4a:	028a      	lsls	r2, r1, #10
 8006c4c:	4610      	mov	r0, r2
 8006c4e:	4619      	mov	r1, r3
 8006c50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c52:	2200      	movs	r2, #0
 8006c54:	61bb      	str	r3, [r7, #24]
 8006c56:	61fa      	str	r2, [r7, #28]
 8006c58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c5c:	f7f9 ffac 	bl	8000bb8 <__aeabi_uldivmod>
 8006c60:	4602      	mov	r2, r0
 8006c62:	460b      	mov	r3, r1
 8006c64:	4613      	mov	r3, r2
 8006c66:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006c68:	4b0b      	ldr	r3, [pc, #44]	@ (8006c98 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	0c1b      	lsrs	r3, r3, #16
 8006c6e:	f003 0303 	and.w	r3, r3, #3
 8006c72:	3301      	adds	r3, #1
 8006c74:	005b      	lsls	r3, r3, #1
 8006c76:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006c78:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006c7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c80:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006c82:	e002      	b.n	8006c8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006c84:	4b05      	ldr	r3, [pc, #20]	@ (8006c9c <HAL_RCC_GetSysClockFreq+0x204>)
 8006c86:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006c88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006c8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3750      	adds	r7, #80	@ 0x50
 8006c90:	46bd      	mov	sp, r7
 8006c92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c96:	bf00      	nop
 8006c98:	40023800 	.word	0x40023800
 8006c9c:	00f42400 	.word	0x00f42400
 8006ca0:	007a1200 	.word	0x007a1200

08006ca4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ca8:	4b03      	ldr	r3, [pc, #12]	@ (8006cb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8006caa:	681b      	ldr	r3, [r3, #0]
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr
 8006cb6:	bf00      	nop
 8006cb8:	2000000c 	.word	0x2000000c

08006cbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006cc0:	f7ff fff0 	bl	8006ca4 <HAL_RCC_GetHCLKFreq>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	4b05      	ldr	r3, [pc, #20]	@ (8006cdc <HAL_RCC_GetPCLK1Freq+0x20>)
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	0a9b      	lsrs	r3, r3, #10
 8006ccc:	f003 0307 	and.w	r3, r3, #7
 8006cd0:	4903      	ldr	r1, [pc, #12]	@ (8006ce0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006cd2:	5ccb      	ldrb	r3, [r1, r3]
 8006cd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	bd80      	pop	{r7, pc}
 8006cdc:	40023800 	.word	0x40023800
 8006ce0:	0800f3a0 	.word	0x0800f3a0

08006ce4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b086      	sub	sp, #24
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006cec:	2300      	movs	r3, #0
 8006cee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f003 0301 	and.w	r3, r3, #1
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d105      	bne.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d038      	beq.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006d0c:	4b68      	ldr	r3, [pc, #416]	@ (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006d0e:	2200      	movs	r2, #0
 8006d10:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006d12:	f7fb fdb5 	bl	8002880 <HAL_GetTick>
 8006d16:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006d18:	e008      	b.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006d1a:	f7fb fdb1 	bl	8002880 <HAL_GetTick>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	1ad3      	subs	r3, r2, r3
 8006d24:	2b02      	cmp	r3, #2
 8006d26:	d901      	bls.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d28:	2303      	movs	r3, #3
 8006d2a:	e0bd      	b.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006d2c:	4b61      	ldr	r3, [pc, #388]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d1f0      	bne.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	685a      	ldr	r2, [r3, #4]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	019b      	lsls	r3, r3, #6
 8006d42:	431a      	orrs	r2, r3
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	68db      	ldr	r3, [r3, #12]
 8006d48:	071b      	lsls	r3, r3, #28
 8006d4a:	495a      	ldr	r1, [pc, #360]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006d52:	4b57      	ldr	r3, [pc, #348]	@ (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006d54:	2201      	movs	r2, #1
 8006d56:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006d58:	f7fb fd92 	bl	8002880 <HAL_GetTick>
 8006d5c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006d5e:	e008      	b.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006d60:	f7fb fd8e 	bl	8002880 <HAL_GetTick>
 8006d64:	4602      	mov	r2, r0
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	1ad3      	subs	r3, r2, r3
 8006d6a:	2b02      	cmp	r3, #2
 8006d6c:	d901      	bls.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d6e:	2303      	movs	r3, #3
 8006d70:	e09a      	b.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006d72:	4b50      	ldr	r3, [pc, #320]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d0f0      	beq.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f003 0302 	and.w	r3, r3, #2
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	f000 8083 	beq.w	8006e92 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	60fb      	str	r3, [r7, #12]
 8006d90:	4b48      	ldr	r3, [pc, #288]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d94:	4a47      	ldr	r2, [pc, #284]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d9a:	6413      	str	r3, [r2, #64]	@ 0x40
 8006d9c:	4b45      	ldr	r3, [pc, #276]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006da0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006da4:	60fb      	str	r3, [r7, #12]
 8006da6:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006da8:	4b43      	ldr	r3, [pc, #268]	@ (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a42      	ldr	r2, [pc, #264]	@ (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006dae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006db2:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006db4:	f7fb fd64 	bl	8002880 <HAL_GetTick>
 8006db8:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006dba:	e008      	b.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006dbc:	f7fb fd60 	bl	8002880 <HAL_GetTick>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	1ad3      	subs	r3, r2, r3
 8006dc6:	2b02      	cmp	r3, #2
 8006dc8:	d901      	bls.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8006dca:	2303      	movs	r3, #3
 8006dcc:	e06c      	b.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006dce:	4b3a      	ldr	r3, [pc, #232]	@ (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d0f0      	beq.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006dda:	4b36      	ldr	r3, [pc, #216]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ddc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006de2:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d02f      	beq.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	691b      	ldr	r3, [r3, #16]
 8006dee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006df2:	693a      	ldr	r2, [r7, #16]
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d028      	beq.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006df8:	4b2e      	ldr	r3, [pc, #184]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006dfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dfc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e00:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006e02:	4b2e      	ldr	r3, [pc, #184]	@ (8006ebc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006e04:	2201      	movs	r2, #1
 8006e06:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006e08:	4b2c      	ldr	r3, [pc, #176]	@ (8006ebc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006e0e:	4a29      	ldr	r2, [pc, #164]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006e14:	4b27      	ldr	r3, [pc, #156]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e18:	f003 0301 	and.w	r3, r3, #1
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d114      	bne.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006e20:	f7fb fd2e 	bl	8002880 <HAL_GetTick>
 8006e24:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e26:	e00a      	b.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e28:	f7fb fd2a 	bl	8002880 <HAL_GetTick>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	1ad3      	subs	r3, r2, r3
 8006e32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d901      	bls.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8006e3a:	2303      	movs	r3, #3
 8006e3c:	e034      	b.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e3e:	4b1d      	ldr	r3, [pc, #116]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e42:	f003 0302 	and.w	r3, r3, #2
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d0ee      	beq.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	691b      	ldr	r3, [r3, #16]
 8006e4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e52:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e56:	d10d      	bne.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8006e58:	4b16      	ldr	r3, [pc, #88]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	691b      	ldr	r3, [r3, #16]
 8006e64:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006e68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e6c:	4911      	ldr	r1, [pc, #68]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	608b      	str	r3, [r1, #8]
 8006e72:	e005      	b.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8006e74:	4b0f      	ldr	r3, [pc, #60]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	4a0e      	ldr	r2, [pc, #56]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e7a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006e7e:	6093      	str	r3, [r2, #8]
 8006e80:	4b0c      	ldr	r3, [pc, #48]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e82:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	691b      	ldr	r3, [r3, #16]
 8006e88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e8c:	4909      	ldr	r1, [pc, #36]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f003 0308 	and.w	r3, r3, #8
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d003      	beq.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	7d1a      	ldrb	r2, [r3, #20]
 8006ea2:	4b07      	ldr	r3, [pc, #28]	@ (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8006ea4:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006ea6:	2300      	movs	r3, #0
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3718      	adds	r7, #24
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}
 8006eb0:	42470068 	.word	0x42470068
 8006eb4:	40023800 	.word	0x40023800
 8006eb8:	40007000 	.word	0x40007000
 8006ebc:	42470e40 	.word	0x42470e40
 8006ec0:	424711e0 	.word	0x424711e0

08006ec4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b087      	sub	sp, #28
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	d141      	bne.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006ee2:	4b25      	ldr	r3, [pc, #148]	@ (8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006eea:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d006      	beq.n	8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006ef8:	d131      	bne.n	8006f5e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006efa:	4b20      	ldr	r3, [pc, #128]	@ (8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006efc:	617b      	str	r3, [r7, #20]
          break;
 8006efe:	e031      	b.n	8006f64 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006f00:	4b1d      	ldr	r3, [pc, #116]	@ (8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f08:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f0c:	d109      	bne.n	8006f22 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8006f0e:	4b1a      	ldr	r3, [pc, #104]	@ (8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006f10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f18:	4a19      	ldr	r2, [pc, #100]	@ (8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8006f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f1e:	613b      	str	r3, [r7, #16]
 8006f20:	e008      	b.n	8006f34 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8006f22:	4b15      	ldr	r3, [pc, #84]	@ (8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006f24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f2c:	4a15      	ldr	r2, [pc, #84]	@ (8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8006f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f32:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006f34:	4b10      	ldr	r3, [pc, #64]	@ (8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006f36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f3a:	099b      	lsrs	r3, r3, #6
 8006f3c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	fb02 f303 	mul.w	r3, r2, r3
 8006f46:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006f48:	4b0b      	ldr	r3, [pc, #44]	@ (8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006f4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f4e:	0f1b      	lsrs	r3, r3, #28
 8006f50:	f003 0307 	and.w	r3, r3, #7
 8006f54:	68ba      	ldr	r2, [r7, #8]
 8006f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f5a:	617b      	str	r3, [r7, #20]
          break;
 8006f5c:	e002      	b.n	8006f64 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	617b      	str	r3, [r7, #20]
          break;
 8006f62:	bf00      	nop
        }
      }
      break;
 8006f64:	e000      	b.n	8006f68 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
    default:
    {
      break;
 8006f66:	bf00      	nop
    }
  }
  return frequency;
 8006f68:	697b      	ldr	r3, [r7, #20]
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	371c      	adds	r7, #28
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr
 8006f76:	bf00      	nop
 8006f78:	40023800 	.word	0x40023800
 8006f7c:	00bb8000 	.word	0x00bb8000
 8006f80:	007a1200 	.word	0x007a1200
 8006f84:	00f42400 	.word	0x00f42400

08006f88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b082      	sub	sp, #8
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d101      	bne.n	8006f9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	e07b      	b.n	8007092 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d108      	bne.n	8006fb4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006faa:	d009      	beq.n	8006fc0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	61da      	str	r2, [r3, #28]
 8006fb2:	e005      	b.n	8006fc0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d106      	bne.n	8006fe0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f7fa fca0 	bl	8001920 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2202      	movs	r2, #2
 8006fe4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ff6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007008:	431a      	orrs	r2, r3
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	68db      	ldr	r3, [r3, #12]
 800700e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007012:	431a      	orrs	r2, r3
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	691b      	ldr	r3, [r3, #16]
 8007018:	f003 0302 	and.w	r3, r3, #2
 800701c:	431a      	orrs	r2, r3
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	695b      	ldr	r3, [r3, #20]
 8007022:	f003 0301 	and.w	r3, r3, #1
 8007026:	431a      	orrs	r2, r3
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	699b      	ldr	r3, [r3, #24]
 800702c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007030:	431a      	orrs	r2, r3
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	69db      	ldr	r3, [r3, #28]
 8007036:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800703a:	431a      	orrs	r2, r3
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6a1b      	ldr	r3, [r3, #32]
 8007040:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007044:	ea42 0103 	orr.w	r1, r2, r3
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800704c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	430a      	orrs	r2, r1
 8007056:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	699b      	ldr	r3, [r3, #24]
 800705c:	0c1b      	lsrs	r3, r3, #16
 800705e:	f003 0104 	and.w	r1, r3, #4
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007066:	f003 0210 	and.w	r2, r3, #16
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	430a      	orrs	r2, r1
 8007070:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	69da      	ldr	r2, [r3, #28]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007080:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2200      	movs	r2, #0
 8007086:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2201      	movs	r2, #1
 800708c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007090:	2300      	movs	r3, #0
}
 8007092:	4618      	mov	r0, r3
 8007094:	3708      	adds	r7, #8
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}

0800709a <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800709a:	b580      	push	{r7, lr}
 800709c:	b088      	sub	sp, #32
 800709e:	af00      	add	r7, sp, #0
 80070a0:	60f8      	str	r0, [r7, #12]
 80070a2:	60b9      	str	r1, [r7, #8]
 80070a4:	603b      	str	r3, [r7, #0]
 80070a6:	4613      	mov	r3, r2
 80070a8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80070aa:	f7fb fbe9 	bl	8002880 <HAL_GetTick>
 80070ae:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80070b0:	88fb      	ldrh	r3, [r7, #6]
 80070b2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d001      	beq.n	80070c4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80070c0:	2302      	movs	r3, #2
 80070c2:	e12a      	b.n	800731a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d002      	beq.n	80070d0 <HAL_SPI_Transmit+0x36>
 80070ca:	88fb      	ldrh	r3, [r7, #6]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d101      	bne.n	80070d4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80070d0:	2301      	movs	r3, #1
 80070d2:	e122      	b.n	800731a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d101      	bne.n	80070e2 <HAL_SPI_Transmit+0x48>
 80070de:	2302      	movs	r3, #2
 80070e0:	e11b      	b.n	800731a <HAL_SPI_Transmit+0x280>
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2201      	movs	r2, #1
 80070e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2203      	movs	r2, #3
 80070ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2200      	movs	r2, #0
 80070f6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	68ba      	ldr	r2, [r7, #8]
 80070fc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	88fa      	ldrh	r2, [r7, #6]
 8007102:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	88fa      	ldrh	r2, [r7, #6]
 8007108:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2200      	movs	r2, #0
 800710e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2200      	movs	r2, #0
 8007114:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2200      	movs	r2, #0
 800711a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2200      	movs	r2, #0
 8007120:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2200      	movs	r2, #0
 8007126:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007130:	d10f      	bne.n	8007152 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007140:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	681a      	ldr	r2, [r3, #0]
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007150:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800715c:	2b40      	cmp	r3, #64	@ 0x40
 800715e:	d007      	beq.n	8007170 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800716e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	68db      	ldr	r3, [r3, #12]
 8007174:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007178:	d152      	bne.n	8007220 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d002      	beq.n	8007188 <HAL_SPI_Transmit+0xee>
 8007182:	8b7b      	ldrh	r3, [r7, #26]
 8007184:	2b01      	cmp	r3, #1
 8007186:	d145      	bne.n	8007214 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800718c:	881a      	ldrh	r2, [r3, #0]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007198:	1c9a      	adds	r2, r3, #2
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	3b01      	subs	r3, #1
 80071a6:	b29a      	uxth	r2, r3
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80071ac:	e032      	b.n	8007214 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	f003 0302 	and.w	r3, r3, #2
 80071b8:	2b02      	cmp	r3, #2
 80071ba:	d112      	bne.n	80071e2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071c0:	881a      	ldrh	r2, [r3, #0]
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071cc:	1c9a      	adds	r2, r3, #2
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	3b01      	subs	r3, #1
 80071da:	b29a      	uxth	r2, r3
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	86da      	strh	r2, [r3, #54]	@ 0x36
 80071e0:	e018      	b.n	8007214 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80071e2:	f7fb fb4d 	bl	8002880 <HAL_GetTick>
 80071e6:	4602      	mov	r2, r0
 80071e8:	69fb      	ldr	r3, [r7, #28]
 80071ea:	1ad3      	subs	r3, r2, r3
 80071ec:	683a      	ldr	r2, [r7, #0]
 80071ee:	429a      	cmp	r2, r3
 80071f0:	d803      	bhi.n	80071fa <HAL_SPI_Transmit+0x160>
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071f8:	d102      	bne.n	8007200 <HAL_SPI_Transmit+0x166>
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d109      	bne.n	8007214 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2201      	movs	r2, #1
 8007204:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2200      	movs	r2, #0
 800720c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007210:	2303      	movs	r3, #3
 8007212:	e082      	b.n	800731a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007218:	b29b      	uxth	r3, r3
 800721a:	2b00      	cmp	r3, #0
 800721c:	d1c7      	bne.n	80071ae <HAL_SPI_Transmit+0x114>
 800721e:	e053      	b.n	80072c8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d002      	beq.n	800722e <HAL_SPI_Transmit+0x194>
 8007228:	8b7b      	ldrh	r3, [r7, #26]
 800722a:	2b01      	cmp	r3, #1
 800722c:	d147      	bne.n	80072be <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	330c      	adds	r3, #12
 8007238:	7812      	ldrb	r2, [r2, #0]
 800723a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007240:	1c5a      	adds	r2, r3, #1
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800724a:	b29b      	uxth	r3, r3
 800724c:	3b01      	subs	r3, #1
 800724e:	b29a      	uxth	r2, r3
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007254:	e033      	b.n	80072be <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	f003 0302 	and.w	r3, r3, #2
 8007260:	2b02      	cmp	r3, #2
 8007262:	d113      	bne.n	800728c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	330c      	adds	r3, #12
 800726e:	7812      	ldrb	r2, [r2, #0]
 8007270:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007276:	1c5a      	adds	r2, r3, #1
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007280:	b29b      	uxth	r3, r3
 8007282:	3b01      	subs	r3, #1
 8007284:	b29a      	uxth	r2, r3
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	86da      	strh	r2, [r3, #54]	@ 0x36
 800728a:	e018      	b.n	80072be <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800728c:	f7fb faf8 	bl	8002880 <HAL_GetTick>
 8007290:	4602      	mov	r2, r0
 8007292:	69fb      	ldr	r3, [r7, #28]
 8007294:	1ad3      	subs	r3, r2, r3
 8007296:	683a      	ldr	r2, [r7, #0]
 8007298:	429a      	cmp	r2, r3
 800729a:	d803      	bhi.n	80072a4 <HAL_SPI_Transmit+0x20a>
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072a2:	d102      	bne.n	80072aa <HAL_SPI_Transmit+0x210>
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d109      	bne.n	80072be <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2201      	movs	r2, #1
 80072ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2200      	movs	r2, #0
 80072b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80072ba:	2303      	movs	r3, #3
 80072bc:	e02d      	b.n	800731a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d1c6      	bne.n	8007256 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80072c8:	69fa      	ldr	r2, [r7, #28]
 80072ca:	6839      	ldr	r1, [r7, #0]
 80072cc:	68f8      	ldr	r0, [r7, #12]
 80072ce:	f000 fced 	bl	8007cac <SPI_EndRxTxTransaction>
 80072d2:	4603      	mov	r3, r0
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d002      	beq.n	80072de <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2220      	movs	r2, #32
 80072dc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d10a      	bne.n	80072fc <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80072e6:	2300      	movs	r3, #0
 80072e8:	617b      	str	r3, [r7, #20]
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	68db      	ldr	r3, [r3, #12]
 80072f0:	617b      	str	r3, [r7, #20]
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	617b      	str	r3, [r7, #20]
 80072fa:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2201      	movs	r2, #1
 8007300:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2200      	movs	r2, #0
 8007308:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007310:	2b00      	cmp	r3, #0
 8007312:	d001      	beq.n	8007318 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8007314:	2301      	movs	r3, #1
 8007316:	e000      	b.n	800731a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8007318:	2300      	movs	r3, #0
  }
}
 800731a:	4618      	mov	r0, r3
 800731c:	3720      	adds	r7, #32
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}

08007322 <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007322:	b580      	push	{r7, lr}
 8007324:	b088      	sub	sp, #32
 8007326:	af02      	add	r7, sp, #8
 8007328:	60f8      	str	r0, [r7, #12]
 800732a:	60b9      	str	r1, [r7, #8]
 800732c:	603b      	str	r3, [r7, #0]
 800732e:	4613      	mov	r3, r2
 8007330:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007338:	b2db      	uxtb	r3, r3
 800733a:	2b01      	cmp	r3, #1
 800733c:	d001      	beq.n	8007342 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800733e:	2302      	movs	r3, #2
 8007340:	e104      	b.n	800754c <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d002      	beq.n	800734e <HAL_SPI_Receive+0x2c>
 8007348:	88fb      	ldrh	r3, [r7, #6]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d101      	bne.n	8007352 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 800734e:	2301      	movs	r3, #1
 8007350:	e0fc      	b.n	800754c <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800735a:	d112      	bne.n	8007382 <HAL_SPI_Receive+0x60>
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d10e      	bne.n	8007382 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2204      	movs	r2, #4
 8007368:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800736c:	88fa      	ldrh	r2, [r7, #6]
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	9300      	str	r3, [sp, #0]
 8007372:	4613      	mov	r3, r2
 8007374:	68ba      	ldr	r2, [r7, #8]
 8007376:	68b9      	ldr	r1, [r7, #8]
 8007378:	68f8      	ldr	r0, [r7, #12]
 800737a:	f000 f8eb 	bl	8007554 <HAL_SPI_TransmitReceive>
 800737e:	4603      	mov	r3, r0
 8007380:	e0e4      	b.n	800754c <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007382:	f7fb fa7d 	bl	8002880 <HAL_GetTick>
 8007386:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800738e:	2b01      	cmp	r3, #1
 8007390:	d101      	bne.n	8007396 <HAL_SPI_Receive+0x74>
 8007392:	2302      	movs	r3, #2
 8007394:	e0da      	b.n	800754c <HAL_SPI_Receive+0x22a>
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2201      	movs	r2, #1
 800739a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2204      	movs	r2, #4
 80073a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2200      	movs	r2, #0
 80073aa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	68ba      	ldr	r2, [r7, #8]
 80073b0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	88fa      	ldrh	r2, [r7, #6]
 80073b6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	88fa      	ldrh	r2, [r7, #6]
 80073bc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2200      	movs	r2, #0
 80073c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2200      	movs	r2, #0
 80073c8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2200      	movs	r2, #0
 80073ce:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2200      	movs	r2, #0
 80073d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2200      	movs	r2, #0
 80073da:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073e4:	d10f      	bne.n	8007406 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80073f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007404:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007410:	2b40      	cmp	r3, #64	@ 0x40
 8007412:	d007      	beq.n	8007424 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007422:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	68db      	ldr	r3, [r3, #12]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d170      	bne.n	800750e <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800742c:	e035      	b.n	800749a <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	f003 0301 	and.w	r3, r3, #1
 8007438:	2b01      	cmp	r3, #1
 800743a:	d115      	bne.n	8007468 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f103 020c 	add.w	r2, r3, #12
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007448:	7812      	ldrb	r2, [r2, #0]
 800744a:	b2d2      	uxtb	r2, r2
 800744c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007452:	1c5a      	adds	r2, r3, #1
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800745c:	b29b      	uxth	r3, r3
 800745e:	3b01      	subs	r3, #1
 8007460:	b29a      	uxth	r2, r3
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007466:	e018      	b.n	800749a <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007468:	f7fb fa0a 	bl	8002880 <HAL_GetTick>
 800746c:	4602      	mov	r2, r0
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	1ad3      	subs	r3, r2, r3
 8007472:	683a      	ldr	r2, [r7, #0]
 8007474:	429a      	cmp	r2, r3
 8007476:	d803      	bhi.n	8007480 <HAL_SPI_Receive+0x15e>
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800747e:	d102      	bne.n	8007486 <HAL_SPI_Receive+0x164>
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d109      	bne.n	800749a <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2201      	movs	r2, #1
 800748a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2200      	movs	r2, #0
 8007492:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007496:	2303      	movs	r3, #3
 8007498:	e058      	b.n	800754c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800749e:	b29b      	uxth	r3, r3
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d1c4      	bne.n	800742e <HAL_SPI_Receive+0x10c>
 80074a4:	e038      	b.n	8007518 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	689b      	ldr	r3, [r3, #8]
 80074ac:	f003 0301 	and.w	r3, r3, #1
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d113      	bne.n	80074dc <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	68da      	ldr	r2, [r3, #12]
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074be:	b292      	uxth	r2, r2
 80074c0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074c6:	1c9a      	adds	r2, r3, #2
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	3b01      	subs	r3, #1
 80074d4:	b29a      	uxth	r2, r3
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80074da:	e018      	b.n	800750e <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80074dc:	f7fb f9d0 	bl	8002880 <HAL_GetTick>
 80074e0:	4602      	mov	r2, r0
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	1ad3      	subs	r3, r2, r3
 80074e6:	683a      	ldr	r2, [r7, #0]
 80074e8:	429a      	cmp	r2, r3
 80074ea:	d803      	bhi.n	80074f4 <HAL_SPI_Receive+0x1d2>
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074f2:	d102      	bne.n	80074fa <HAL_SPI_Receive+0x1d8>
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d109      	bne.n	800750e <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2201      	movs	r2, #1
 80074fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2200      	movs	r2, #0
 8007506:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800750a:	2303      	movs	r3, #3
 800750c:	e01e      	b.n	800754c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007512:	b29b      	uxth	r3, r3
 8007514:	2b00      	cmp	r3, #0
 8007516:	d1c6      	bne.n	80074a6 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007518:	697a      	ldr	r2, [r7, #20]
 800751a:	6839      	ldr	r1, [r7, #0]
 800751c:	68f8      	ldr	r0, [r7, #12]
 800751e:	f000 fb5f 	bl	8007be0 <SPI_EndRxTransaction>
 8007522:	4603      	mov	r3, r0
 8007524:	2b00      	cmp	r3, #0
 8007526:	d002      	beq.n	800752e <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2220      	movs	r2, #32
 800752c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2201      	movs	r2, #1
 8007532:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2200      	movs	r2, #0
 800753a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007542:	2b00      	cmp	r3, #0
 8007544:	d001      	beq.n	800754a <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8007546:	2301      	movs	r3, #1
 8007548:	e000      	b.n	800754c <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800754a:	2300      	movs	r3, #0
  }
}
 800754c:	4618      	mov	r0, r3
 800754e:	3718      	adds	r7, #24
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b08a      	sub	sp, #40	@ 0x28
 8007558:	af00      	add	r7, sp, #0
 800755a:	60f8      	str	r0, [r7, #12]
 800755c:	60b9      	str	r1, [r7, #8]
 800755e:	607a      	str	r2, [r7, #4]
 8007560:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007562:	2301      	movs	r3, #1
 8007564:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007566:	f7fb f98b 	bl	8002880 <HAL_GetTick>
 800756a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007572:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800757a:	887b      	ldrh	r3, [r7, #2]
 800757c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800757e:	7ffb      	ldrb	r3, [r7, #31]
 8007580:	2b01      	cmp	r3, #1
 8007582:	d00c      	beq.n	800759e <HAL_SPI_TransmitReceive+0x4a>
 8007584:	69bb      	ldr	r3, [r7, #24]
 8007586:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800758a:	d106      	bne.n	800759a <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d102      	bne.n	800759a <HAL_SPI_TransmitReceive+0x46>
 8007594:	7ffb      	ldrb	r3, [r7, #31]
 8007596:	2b04      	cmp	r3, #4
 8007598:	d001      	beq.n	800759e <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800759a:	2302      	movs	r3, #2
 800759c:	e17f      	b.n	800789e <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d005      	beq.n	80075b0 <HAL_SPI_TransmitReceive+0x5c>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d002      	beq.n	80075b0 <HAL_SPI_TransmitReceive+0x5c>
 80075aa:	887b      	ldrh	r3, [r7, #2]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d101      	bne.n	80075b4 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80075b0:	2301      	movs	r3, #1
 80075b2:	e174      	b.n	800789e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d101      	bne.n	80075c2 <HAL_SPI_TransmitReceive+0x6e>
 80075be:	2302      	movs	r3, #2
 80075c0:	e16d      	b.n	800789e <HAL_SPI_TransmitReceive+0x34a>
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2201      	movs	r2, #1
 80075c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80075d0:	b2db      	uxtb	r3, r3
 80075d2:	2b04      	cmp	r3, #4
 80075d4:	d003      	beq.n	80075de <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2205      	movs	r2, #5
 80075da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2200      	movs	r2, #0
 80075e2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	887a      	ldrh	r2, [r7, #2]
 80075ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	887a      	ldrh	r2, [r7, #2]
 80075f4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	68ba      	ldr	r2, [r7, #8]
 80075fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	887a      	ldrh	r2, [r7, #2]
 8007600:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	887a      	ldrh	r2, [r7, #2]
 8007606:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2200      	movs	r2, #0
 800760c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2200      	movs	r2, #0
 8007612:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800761e:	2b40      	cmp	r3, #64	@ 0x40
 8007620:	d007      	beq.n	8007632 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007630:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	68db      	ldr	r3, [r3, #12]
 8007636:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800763a:	d17e      	bne.n	800773a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d002      	beq.n	800764a <HAL_SPI_TransmitReceive+0xf6>
 8007644:	8afb      	ldrh	r3, [r7, #22]
 8007646:	2b01      	cmp	r3, #1
 8007648:	d16c      	bne.n	8007724 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800764e:	881a      	ldrh	r2, [r3, #0]
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800765a:	1c9a      	adds	r2, r3, #2
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007664:	b29b      	uxth	r3, r3
 8007666:	3b01      	subs	r3, #1
 8007668:	b29a      	uxth	r2, r3
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800766e:	e059      	b.n	8007724 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	689b      	ldr	r3, [r3, #8]
 8007676:	f003 0302 	and.w	r3, r3, #2
 800767a:	2b02      	cmp	r3, #2
 800767c:	d11b      	bne.n	80076b6 <HAL_SPI_TransmitReceive+0x162>
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007682:	b29b      	uxth	r3, r3
 8007684:	2b00      	cmp	r3, #0
 8007686:	d016      	beq.n	80076b6 <HAL_SPI_TransmitReceive+0x162>
 8007688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800768a:	2b01      	cmp	r3, #1
 800768c:	d113      	bne.n	80076b6 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007692:	881a      	ldrh	r2, [r3, #0]
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800769e:	1c9a      	adds	r2, r3, #2
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	3b01      	subs	r3, #1
 80076ac:	b29a      	uxth	r2, r3
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80076b2:	2300      	movs	r3, #0
 80076b4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	f003 0301 	and.w	r3, r3, #1
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d119      	bne.n	80076f8 <HAL_SPI_TransmitReceive+0x1a4>
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d014      	beq.n	80076f8 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	68da      	ldr	r2, [r3, #12]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076d8:	b292      	uxth	r2, r2
 80076da:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076e0:	1c9a      	adds	r2, r3, #2
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076ea:	b29b      	uxth	r3, r3
 80076ec:	3b01      	subs	r3, #1
 80076ee:	b29a      	uxth	r2, r3
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80076f4:	2301      	movs	r3, #1
 80076f6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80076f8:	f7fb f8c2 	bl	8002880 <HAL_GetTick>
 80076fc:	4602      	mov	r2, r0
 80076fe:	6a3b      	ldr	r3, [r7, #32]
 8007700:	1ad3      	subs	r3, r2, r3
 8007702:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007704:	429a      	cmp	r2, r3
 8007706:	d80d      	bhi.n	8007724 <HAL_SPI_TransmitReceive+0x1d0>
 8007708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800770a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800770e:	d009      	beq.n	8007724 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2201      	movs	r2, #1
 8007714:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2200      	movs	r2, #0
 800771c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007720:	2303      	movs	r3, #3
 8007722:	e0bc      	b.n	800789e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007728:	b29b      	uxth	r3, r3
 800772a:	2b00      	cmp	r3, #0
 800772c:	d1a0      	bne.n	8007670 <HAL_SPI_TransmitReceive+0x11c>
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007732:	b29b      	uxth	r3, r3
 8007734:	2b00      	cmp	r3, #0
 8007736:	d19b      	bne.n	8007670 <HAL_SPI_TransmitReceive+0x11c>
 8007738:	e082      	b.n	8007840 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d002      	beq.n	8007748 <HAL_SPI_TransmitReceive+0x1f4>
 8007742:	8afb      	ldrh	r3, [r7, #22]
 8007744:	2b01      	cmp	r3, #1
 8007746:	d171      	bne.n	800782c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	330c      	adds	r3, #12
 8007752:	7812      	ldrb	r2, [r2, #0]
 8007754:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800775a:	1c5a      	adds	r2, r3, #1
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007764:	b29b      	uxth	r3, r3
 8007766:	3b01      	subs	r3, #1
 8007768:	b29a      	uxth	r2, r3
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800776e:	e05d      	b.n	800782c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	f003 0302 	and.w	r3, r3, #2
 800777a:	2b02      	cmp	r3, #2
 800777c:	d11c      	bne.n	80077b8 <HAL_SPI_TransmitReceive+0x264>
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007782:	b29b      	uxth	r3, r3
 8007784:	2b00      	cmp	r3, #0
 8007786:	d017      	beq.n	80077b8 <HAL_SPI_TransmitReceive+0x264>
 8007788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800778a:	2b01      	cmp	r3, #1
 800778c:	d114      	bne.n	80077b8 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	330c      	adds	r3, #12
 8007798:	7812      	ldrb	r2, [r2, #0]
 800779a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077a0:	1c5a      	adds	r2, r3, #1
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	3b01      	subs	r3, #1
 80077ae:	b29a      	uxth	r2, r3
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80077b4:	2300      	movs	r3, #0
 80077b6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	f003 0301 	and.w	r3, r3, #1
 80077c2:	2b01      	cmp	r3, #1
 80077c4:	d119      	bne.n	80077fa <HAL_SPI_TransmitReceive+0x2a6>
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d014      	beq.n	80077fa <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	68da      	ldr	r2, [r3, #12]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077da:	b2d2      	uxtb	r2, r2
 80077dc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077e2:	1c5a      	adds	r2, r3, #1
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	3b01      	subs	r3, #1
 80077f0:	b29a      	uxth	r2, r3
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80077f6:	2301      	movs	r3, #1
 80077f8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80077fa:	f7fb f841 	bl	8002880 <HAL_GetTick>
 80077fe:	4602      	mov	r2, r0
 8007800:	6a3b      	ldr	r3, [r7, #32]
 8007802:	1ad3      	subs	r3, r2, r3
 8007804:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007806:	429a      	cmp	r2, r3
 8007808:	d803      	bhi.n	8007812 <HAL_SPI_TransmitReceive+0x2be>
 800780a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800780c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007810:	d102      	bne.n	8007818 <HAL_SPI_TransmitReceive+0x2c4>
 8007812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007814:	2b00      	cmp	r3, #0
 8007816:	d109      	bne.n	800782c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2201      	movs	r2, #1
 800781c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2200      	movs	r2, #0
 8007824:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007828:	2303      	movs	r3, #3
 800782a:	e038      	b.n	800789e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007830:	b29b      	uxth	r3, r3
 8007832:	2b00      	cmp	r3, #0
 8007834:	d19c      	bne.n	8007770 <HAL_SPI_TransmitReceive+0x21c>
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800783a:	b29b      	uxth	r3, r3
 800783c:	2b00      	cmp	r3, #0
 800783e:	d197      	bne.n	8007770 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007840:	6a3a      	ldr	r2, [r7, #32]
 8007842:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007844:	68f8      	ldr	r0, [r7, #12]
 8007846:	f000 fa31 	bl	8007cac <SPI_EndRxTxTransaction>
 800784a:	4603      	mov	r3, r0
 800784c:	2b00      	cmp	r3, #0
 800784e:	d008      	beq.n	8007862 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2220      	movs	r2, #32
 8007854:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2200      	movs	r2, #0
 800785a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800785e:	2301      	movs	r3, #1
 8007860:	e01d      	b.n	800789e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d10a      	bne.n	8007880 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800786a:	2300      	movs	r3, #0
 800786c:	613b      	str	r3, [r7, #16]
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	68db      	ldr	r3, [r3, #12]
 8007874:	613b      	str	r3, [r7, #16]
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	689b      	ldr	r3, [r3, #8]
 800787c:	613b      	str	r3, [r7, #16]
 800787e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2201      	movs	r2, #1
 8007884:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2200      	movs	r2, #0
 800788c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007894:	2b00      	cmp	r3, #0
 8007896:	d001      	beq.n	800789c <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8007898:	2301      	movs	r3, #1
 800789a:	e000      	b.n	800789e <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800789c:	2300      	movs	r3, #0
  }
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3728      	adds	r7, #40	@ 0x28
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
	...

080078a8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b088      	sub	sp, #32
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	689b      	ldr	r3, [r3, #8]
 80078be:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80078c0:	69bb      	ldr	r3, [r7, #24]
 80078c2:	099b      	lsrs	r3, r3, #6
 80078c4:	f003 0301 	and.w	r3, r3, #1
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d10f      	bne.n	80078ec <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80078cc:	69bb      	ldr	r3, [r7, #24]
 80078ce:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d00a      	beq.n	80078ec <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80078d6:	69fb      	ldr	r3, [r7, #28]
 80078d8:	099b      	lsrs	r3, r3, #6
 80078da:	f003 0301 	and.w	r3, r3, #1
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d004      	beq.n	80078ec <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	4798      	blx	r3
    return;
 80078ea:	e0d7      	b.n	8007a9c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80078ec:	69bb      	ldr	r3, [r7, #24]
 80078ee:	085b      	lsrs	r3, r3, #1
 80078f0:	f003 0301 	and.w	r3, r3, #1
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d00a      	beq.n	800790e <HAL_SPI_IRQHandler+0x66>
 80078f8:	69fb      	ldr	r3, [r7, #28]
 80078fa:	09db      	lsrs	r3, r3, #7
 80078fc:	f003 0301 	and.w	r3, r3, #1
 8007900:	2b00      	cmp	r3, #0
 8007902:	d004      	beq.n	800790e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	4798      	blx	r3
    return;
 800790c:	e0c6      	b.n	8007a9c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800790e:	69bb      	ldr	r3, [r7, #24]
 8007910:	095b      	lsrs	r3, r3, #5
 8007912:	f003 0301 	and.w	r3, r3, #1
 8007916:	2b00      	cmp	r3, #0
 8007918:	d10c      	bne.n	8007934 <HAL_SPI_IRQHandler+0x8c>
 800791a:	69bb      	ldr	r3, [r7, #24]
 800791c:	099b      	lsrs	r3, r3, #6
 800791e:	f003 0301 	and.w	r3, r3, #1
 8007922:	2b00      	cmp	r3, #0
 8007924:	d106      	bne.n	8007934 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007926:	69bb      	ldr	r3, [r7, #24]
 8007928:	0a1b      	lsrs	r3, r3, #8
 800792a:	f003 0301 	and.w	r3, r3, #1
 800792e:	2b00      	cmp	r3, #0
 8007930:	f000 80b4 	beq.w	8007a9c <HAL_SPI_IRQHandler+0x1f4>
 8007934:	69fb      	ldr	r3, [r7, #28]
 8007936:	095b      	lsrs	r3, r3, #5
 8007938:	f003 0301 	and.w	r3, r3, #1
 800793c:	2b00      	cmp	r3, #0
 800793e:	f000 80ad 	beq.w	8007a9c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007942:	69bb      	ldr	r3, [r7, #24]
 8007944:	099b      	lsrs	r3, r3, #6
 8007946:	f003 0301 	and.w	r3, r3, #1
 800794a:	2b00      	cmp	r3, #0
 800794c:	d023      	beq.n	8007996 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007954:	b2db      	uxtb	r3, r3
 8007956:	2b03      	cmp	r3, #3
 8007958:	d011      	beq.n	800797e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800795e:	f043 0204 	orr.w	r2, r3, #4
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007966:	2300      	movs	r3, #0
 8007968:	617b      	str	r3, [r7, #20]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	68db      	ldr	r3, [r3, #12]
 8007970:	617b      	str	r3, [r7, #20]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	617b      	str	r3, [r7, #20]
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	e00b      	b.n	8007996 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800797e:	2300      	movs	r3, #0
 8007980:	613b      	str	r3, [r7, #16]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	68db      	ldr	r3, [r3, #12]
 8007988:	613b      	str	r3, [r7, #16]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	613b      	str	r3, [r7, #16]
 8007992:	693b      	ldr	r3, [r7, #16]
        return;
 8007994:	e082      	b.n	8007a9c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007996:	69bb      	ldr	r3, [r7, #24]
 8007998:	095b      	lsrs	r3, r3, #5
 800799a:	f003 0301 	and.w	r3, r3, #1
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d014      	beq.n	80079cc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079a6:	f043 0201 	orr.w	r2, r3, #1
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80079ae:	2300      	movs	r3, #0
 80079b0:	60fb      	str	r3, [r7, #12]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	60fb      	str	r3, [r7, #12]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	681a      	ldr	r2, [r3, #0]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80079c8:	601a      	str	r2, [r3, #0]
 80079ca:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80079cc:	69bb      	ldr	r3, [r7, #24]
 80079ce:	0a1b      	lsrs	r3, r3, #8
 80079d0:	f003 0301 	and.w	r3, r3, #1
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d00c      	beq.n	80079f2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079dc:	f043 0208 	orr.w	r2, r3, #8
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80079e4:	2300      	movs	r3, #0
 80079e6:	60bb      	str	r3, [r7, #8]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	689b      	ldr	r3, [r3, #8]
 80079ee:	60bb      	str	r3, [r7, #8]
 80079f0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d04f      	beq.n	8007a9a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	685a      	ldr	r2, [r3, #4]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007a08:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2201      	movs	r2, #1
 8007a0e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007a12:	69fb      	ldr	r3, [r7, #28]
 8007a14:	f003 0302 	and.w	r3, r3, #2
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d104      	bne.n	8007a26 <HAL_SPI_IRQHandler+0x17e>
 8007a1c:	69fb      	ldr	r3, [r7, #28]
 8007a1e:	f003 0301 	and.w	r3, r3, #1
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d034      	beq.n	8007a90 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	685a      	ldr	r2, [r3, #4]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f022 0203 	bic.w	r2, r2, #3
 8007a34:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d011      	beq.n	8007a62 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a42:	4a18      	ldr	r2, [pc, #96]	@ (8007aa4 <HAL_SPI_IRQHandler+0x1fc>)
 8007a44:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f7fb f982 	bl	8002d54 <HAL_DMA_Abort_IT>
 8007a50:	4603      	mov	r3, r0
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d005      	beq.n	8007a62 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a5a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d016      	beq.n	8007a98 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a6e:	4a0d      	ldr	r2, [pc, #52]	@ (8007aa4 <HAL_SPI_IRQHandler+0x1fc>)
 8007a70:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a76:	4618      	mov	r0, r3
 8007a78:	f7fb f96c 	bl	8002d54 <HAL_DMA_Abort_IT>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d00a      	beq.n	8007a98 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a86:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8007a8e:	e003      	b.n	8007a98 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f7fa fae7 	bl	8002064 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007a96:	e000      	b.n	8007a9a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007a98:	bf00      	nop
    return;
 8007a9a:	bf00      	nop
  }
}
 8007a9c:	3720      	adds	r7, #32
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}
 8007aa2:	bf00      	nop
 8007aa4:	08007aa9 	.word	0x08007aa9

08007aa8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b084      	sub	sp, #16
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ab4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007ac2:	68f8      	ldr	r0, [r7, #12]
 8007ac4:	f7fa face 	bl	8002064 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007ac8:	bf00      	nop
 8007aca:	3710      	adds	r7, #16
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}

08007ad0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b088      	sub	sp, #32
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	60b9      	str	r1, [r7, #8]
 8007ada:	603b      	str	r3, [r7, #0]
 8007adc:	4613      	mov	r3, r2
 8007ade:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007ae0:	f7fa fece 	bl	8002880 <HAL_GetTick>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ae8:	1a9b      	subs	r3, r3, r2
 8007aea:	683a      	ldr	r2, [r7, #0]
 8007aec:	4413      	add	r3, r2
 8007aee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007af0:	f7fa fec6 	bl	8002880 <HAL_GetTick>
 8007af4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007af6:	4b39      	ldr	r3, [pc, #228]	@ (8007bdc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	015b      	lsls	r3, r3, #5
 8007afc:	0d1b      	lsrs	r3, r3, #20
 8007afe:	69fa      	ldr	r2, [r7, #28]
 8007b00:	fb02 f303 	mul.w	r3, r2, r3
 8007b04:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b06:	e055      	b.n	8007bb4 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b0e:	d051      	beq.n	8007bb4 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007b10:	f7fa feb6 	bl	8002880 <HAL_GetTick>
 8007b14:	4602      	mov	r2, r0
 8007b16:	69bb      	ldr	r3, [r7, #24]
 8007b18:	1ad3      	subs	r3, r2, r3
 8007b1a:	69fa      	ldr	r2, [r7, #28]
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d902      	bls.n	8007b26 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007b20:	69fb      	ldr	r3, [r7, #28]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d13d      	bne.n	8007ba2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	685a      	ldr	r2, [r3, #4]
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007b34:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007b3e:	d111      	bne.n	8007b64 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	689b      	ldr	r3, [r3, #8]
 8007b44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b48:	d004      	beq.n	8007b54 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	689b      	ldr	r3, [r3, #8]
 8007b4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b52:	d107      	bne.n	8007b64 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	681a      	ldr	r2, [r3, #0]
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007b62:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b6c:	d10f      	bne.n	8007b8e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	681a      	ldr	r2, [r3, #0]
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007b7c:	601a      	str	r2, [r3, #0]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007b8c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2201      	movs	r2, #1
 8007b92:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007b9e:	2303      	movs	r3, #3
 8007ba0:	e018      	b.n	8007bd4 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d102      	bne.n	8007bae <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	61fb      	str	r3, [r7, #28]
 8007bac:	e002      	b.n	8007bb4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	3b01      	subs	r3, #1
 8007bb2:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	689a      	ldr	r2, [r3, #8]
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	4013      	ands	r3, r2
 8007bbe:	68ba      	ldr	r2, [r7, #8]
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	bf0c      	ite	eq
 8007bc4:	2301      	moveq	r3, #1
 8007bc6:	2300      	movne	r3, #0
 8007bc8:	b2db      	uxtb	r3, r3
 8007bca:	461a      	mov	r2, r3
 8007bcc:	79fb      	ldrb	r3, [r7, #7]
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	d19a      	bne.n	8007b08 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8007bd2:	2300      	movs	r3, #0
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3720      	adds	r7, #32
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}
 8007bdc:	2000000c 	.word	0x2000000c

08007be0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b086      	sub	sp, #24
 8007be4:	af02      	add	r7, sp, #8
 8007be6:	60f8      	str	r0, [r7, #12]
 8007be8:	60b9      	str	r1, [r7, #8]
 8007bea:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007bf4:	d111      	bne.n	8007c1a <SPI_EndRxTransaction+0x3a>
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	689b      	ldr	r3, [r3, #8]
 8007bfa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007bfe:	d004      	beq.n	8007c0a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c08:	d107      	bne.n	8007c1a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007c18:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007c22:	d12a      	bne.n	8007c7a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c2c:	d012      	beq.n	8007c54 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	9300      	str	r3, [sp, #0]
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	2200      	movs	r2, #0
 8007c36:	2180      	movs	r1, #128	@ 0x80
 8007c38:	68f8      	ldr	r0, [r7, #12]
 8007c3a:	f7ff ff49 	bl	8007ad0 <SPI_WaitFlagStateUntilTimeout>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d02d      	beq.n	8007ca0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c48:	f043 0220 	orr.w	r2, r3, #32
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007c50:	2303      	movs	r3, #3
 8007c52:	e026      	b.n	8007ca2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	9300      	str	r3, [sp, #0]
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	2101      	movs	r1, #1
 8007c5e:	68f8      	ldr	r0, [r7, #12]
 8007c60:	f7ff ff36 	bl	8007ad0 <SPI_WaitFlagStateUntilTimeout>
 8007c64:	4603      	mov	r3, r0
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d01a      	beq.n	8007ca0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c6e:	f043 0220 	orr.w	r2, r3, #32
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007c76:	2303      	movs	r3, #3
 8007c78:	e013      	b.n	8007ca2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	9300      	str	r3, [sp, #0]
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	2200      	movs	r2, #0
 8007c82:	2101      	movs	r1, #1
 8007c84:	68f8      	ldr	r0, [r7, #12]
 8007c86:	f7ff ff23 	bl	8007ad0 <SPI_WaitFlagStateUntilTimeout>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d007      	beq.n	8007ca0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c94:	f043 0220 	orr.w	r2, r3, #32
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007c9c:	2303      	movs	r3, #3
 8007c9e:	e000      	b.n	8007ca2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007ca0:	2300      	movs	r3, #0
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3710      	adds	r7, #16
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}
	...

08007cac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b088      	sub	sp, #32
 8007cb0:	af02      	add	r7, sp, #8
 8007cb2:	60f8      	str	r0, [r7, #12]
 8007cb4:	60b9      	str	r1, [r7, #8]
 8007cb6:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	9300      	str	r3, [sp, #0]
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	2102      	movs	r1, #2
 8007cc2:	68f8      	ldr	r0, [r7, #12]
 8007cc4:	f7ff ff04 	bl	8007ad0 <SPI_WaitFlagStateUntilTimeout>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d007      	beq.n	8007cde <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cd2:	f043 0220 	orr.w	r2, r3, #32
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007cda:	2303      	movs	r3, #3
 8007cdc:	e032      	b.n	8007d44 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007cde:	4b1b      	ldr	r3, [pc, #108]	@ (8007d4c <SPI_EndRxTxTransaction+0xa0>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a1b      	ldr	r2, [pc, #108]	@ (8007d50 <SPI_EndRxTxTransaction+0xa4>)
 8007ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ce8:	0d5b      	lsrs	r3, r3, #21
 8007cea:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007cee:	fb02 f303 	mul.w	r3, r2, r3
 8007cf2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007cfc:	d112      	bne.n	8007d24 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	9300      	str	r3, [sp, #0]
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	2200      	movs	r2, #0
 8007d06:	2180      	movs	r1, #128	@ 0x80
 8007d08:	68f8      	ldr	r0, [r7, #12]
 8007d0a:	f7ff fee1 	bl	8007ad0 <SPI_WaitFlagStateUntilTimeout>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d016      	beq.n	8007d42 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d18:	f043 0220 	orr.w	r2, r3, #32
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007d20:	2303      	movs	r3, #3
 8007d22:	e00f      	b.n	8007d44 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d00a      	beq.n	8007d40 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	3b01      	subs	r3, #1
 8007d2e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	689b      	ldr	r3, [r3, #8]
 8007d36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d3a:	2b80      	cmp	r3, #128	@ 0x80
 8007d3c:	d0f2      	beq.n	8007d24 <SPI_EndRxTxTransaction+0x78>
 8007d3e:	e000      	b.n	8007d42 <SPI_EndRxTxTransaction+0x96>
        break;
 8007d40:	bf00      	nop
  }

  return HAL_OK;
 8007d42:	2300      	movs	r3, #0
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3718      	adds	r7, #24
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}
 8007d4c:	2000000c 	.word	0x2000000c
 8007d50:	165e9f81 	.word	0x165e9f81

08007d54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b082      	sub	sp, #8
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d101      	bne.n	8007d66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007d62:	2301      	movs	r3, #1
 8007d64:	e041      	b.n	8007dea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d6c:	b2db      	uxtb	r3, r3
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d106      	bne.n	8007d80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2200      	movs	r2, #0
 8007d76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f7f9 fe88 	bl	8001a90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2202      	movs	r2, #2
 8007d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681a      	ldr	r2, [r3, #0]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	3304      	adds	r3, #4
 8007d90:	4619      	mov	r1, r3
 8007d92:	4610      	mov	r0, r2
 8007d94:	f000 f8f4 	bl	8007f80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2201      	movs	r2, #1
 8007da4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2201      	movs	r2, #1
 8007dac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2201      	movs	r2, #1
 8007db4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2201      	movs	r2, #1
 8007ddc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2201      	movs	r2, #1
 8007de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007de8:	2300      	movs	r3, #0
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3708      	adds	r7, #8
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}

08007df2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007df2:	b580      	push	{r7, lr}
 8007df4:	b084      	sub	sp, #16
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
 8007dfa:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e06:	2b01      	cmp	r3, #1
 8007e08:	d101      	bne.n	8007e0e <HAL_TIM_ConfigClockSource+0x1c>
 8007e0a:	2302      	movs	r3, #2
 8007e0c:	e0b4      	b.n	8007f78 <HAL_TIM_ConfigClockSource+0x186>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2201      	movs	r2, #1
 8007e12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2202      	movs	r2, #2
 8007e1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	689b      	ldr	r3, [r3, #8]
 8007e24:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007e2c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007e34:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	68ba      	ldr	r2, [r7, #8]
 8007e3c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e46:	d03e      	beq.n	8007ec6 <HAL_TIM_ConfigClockSource+0xd4>
 8007e48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e4c:	f200 8087 	bhi.w	8007f5e <HAL_TIM_ConfigClockSource+0x16c>
 8007e50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e54:	f000 8086 	beq.w	8007f64 <HAL_TIM_ConfigClockSource+0x172>
 8007e58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e5c:	d87f      	bhi.n	8007f5e <HAL_TIM_ConfigClockSource+0x16c>
 8007e5e:	2b70      	cmp	r3, #112	@ 0x70
 8007e60:	d01a      	beq.n	8007e98 <HAL_TIM_ConfigClockSource+0xa6>
 8007e62:	2b70      	cmp	r3, #112	@ 0x70
 8007e64:	d87b      	bhi.n	8007f5e <HAL_TIM_ConfigClockSource+0x16c>
 8007e66:	2b60      	cmp	r3, #96	@ 0x60
 8007e68:	d050      	beq.n	8007f0c <HAL_TIM_ConfigClockSource+0x11a>
 8007e6a:	2b60      	cmp	r3, #96	@ 0x60
 8007e6c:	d877      	bhi.n	8007f5e <HAL_TIM_ConfigClockSource+0x16c>
 8007e6e:	2b50      	cmp	r3, #80	@ 0x50
 8007e70:	d03c      	beq.n	8007eec <HAL_TIM_ConfigClockSource+0xfa>
 8007e72:	2b50      	cmp	r3, #80	@ 0x50
 8007e74:	d873      	bhi.n	8007f5e <HAL_TIM_ConfigClockSource+0x16c>
 8007e76:	2b40      	cmp	r3, #64	@ 0x40
 8007e78:	d058      	beq.n	8007f2c <HAL_TIM_ConfigClockSource+0x13a>
 8007e7a:	2b40      	cmp	r3, #64	@ 0x40
 8007e7c:	d86f      	bhi.n	8007f5e <HAL_TIM_ConfigClockSource+0x16c>
 8007e7e:	2b30      	cmp	r3, #48	@ 0x30
 8007e80:	d064      	beq.n	8007f4c <HAL_TIM_ConfigClockSource+0x15a>
 8007e82:	2b30      	cmp	r3, #48	@ 0x30
 8007e84:	d86b      	bhi.n	8007f5e <HAL_TIM_ConfigClockSource+0x16c>
 8007e86:	2b20      	cmp	r3, #32
 8007e88:	d060      	beq.n	8007f4c <HAL_TIM_ConfigClockSource+0x15a>
 8007e8a:	2b20      	cmp	r3, #32
 8007e8c:	d867      	bhi.n	8007f5e <HAL_TIM_ConfigClockSource+0x16c>
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d05c      	beq.n	8007f4c <HAL_TIM_ConfigClockSource+0x15a>
 8007e92:	2b10      	cmp	r3, #16
 8007e94:	d05a      	beq.n	8007f4c <HAL_TIM_ConfigClockSource+0x15a>
 8007e96:	e062      	b.n	8007f5e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007ea8:	f000 f96a 	bl	8008180 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	689b      	ldr	r3, [r3, #8]
 8007eb2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007eba:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	68ba      	ldr	r2, [r7, #8]
 8007ec2:	609a      	str	r2, [r3, #8]
      break;
 8007ec4:	e04f      	b.n	8007f66 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007ed6:	f000 f953 	bl	8008180 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	689a      	ldr	r2, [r3, #8]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007ee8:	609a      	str	r2, [r3, #8]
      break;
 8007eea:	e03c      	b.n	8007f66 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ef8:	461a      	mov	r2, r3
 8007efa:	f000 f8c7 	bl	800808c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	2150      	movs	r1, #80	@ 0x50
 8007f04:	4618      	mov	r0, r3
 8007f06:	f000 f920 	bl	800814a <TIM_ITRx_SetConfig>
      break;
 8007f0a:	e02c      	b.n	8007f66 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f18:	461a      	mov	r2, r3
 8007f1a:	f000 f8e6 	bl	80080ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	2160      	movs	r1, #96	@ 0x60
 8007f24:	4618      	mov	r0, r3
 8007f26:	f000 f910 	bl	800814a <TIM_ITRx_SetConfig>
      break;
 8007f2a:	e01c      	b.n	8007f66 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f38:	461a      	mov	r2, r3
 8007f3a:	f000 f8a7 	bl	800808c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	2140      	movs	r1, #64	@ 0x40
 8007f44:	4618      	mov	r0, r3
 8007f46:	f000 f900 	bl	800814a <TIM_ITRx_SetConfig>
      break;
 8007f4a:	e00c      	b.n	8007f66 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681a      	ldr	r2, [r3, #0]
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4619      	mov	r1, r3
 8007f56:	4610      	mov	r0, r2
 8007f58:	f000 f8f7 	bl	800814a <TIM_ITRx_SetConfig>
      break;
 8007f5c:	e003      	b.n	8007f66 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007f5e:	2301      	movs	r3, #1
 8007f60:	73fb      	strb	r3, [r7, #15]
      break;
 8007f62:	e000      	b.n	8007f66 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007f64:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2201      	movs	r2, #1
 8007f6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2200      	movs	r2, #0
 8007f72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3710      	adds	r7, #16
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b085      	sub	sp, #20
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	4a37      	ldr	r2, [pc, #220]	@ (8008070 <TIM_Base_SetConfig+0xf0>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d00f      	beq.n	8007fb8 <TIM_Base_SetConfig+0x38>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f9e:	d00b      	beq.n	8007fb8 <TIM_Base_SetConfig+0x38>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	4a34      	ldr	r2, [pc, #208]	@ (8008074 <TIM_Base_SetConfig+0xf4>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d007      	beq.n	8007fb8 <TIM_Base_SetConfig+0x38>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	4a33      	ldr	r2, [pc, #204]	@ (8008078 <TIM_Base_SetConfig+0xf8>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d003      	beq.n	8007fb8 <TIM_Base_SetConfig+0x38>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	4a32      	ldr	r2, [pc, #200]	@ (800807c <TIM_Base_SetConfig+0xfc>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d108      	bne.n	8007fca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	68fa      	ldr	r2, [r7, #12]
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	4a28      	ldr	r2, [pc, #160]	@ (8008070 <TIM_Base_SetConfig+0xf0>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d01b      	beq.n	800800a <TIM_Base_SetConfig+0x8a>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fd8:	d017      	beq.n	800800a <TIM_Base_SetConfig+0x8a>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	4a25      	ldr	r2, [pc, #148]	@ (8008074 <TIM_Base_SetConfig+0xf4>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d013      	beq.n	800800a <TIM_Base_SetConfig+0x8a>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	4a24      	ldr	r2, [pc, #144]	@ (8008078 <TIM_Base_SetConfig+0xf8>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d00f      	beq.n	800800a <TIM_Base_SetConfig+0x8a>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	4a23      	ldr	r2, [pc, #140]	@ (800807c <TIM_Base_SetConfig+0xfc>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d00b      	beq.n	800800a <TIM_Base_SetConfig+0x8a>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	4a22      	ldr	r2, [pc, #136]	@ (8008080 <TIM_Base_SetConfig+0x100>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d007      	beq.n	800800a <TIM_Base_SetConfig+0x8a>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	4a21      	ldr	r2, [pc, #132]	@ (8008084 <TIM_Base_SetConfig+0x104>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d003      	beq.n	800800a <TIM_Base_SetConfig+0x8a>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	4a20      	ldr	r2, [pc, #128]	@ (8008088 <TIM_Base_SetConfig+0x108>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d108      	bne.n	800801c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008010:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	68db      	ldr	r3, [r3, #12]
 8008016:	68fa      	ldr	r2, [r7, #12]
 8008018:	4313      	orrs	r3, r2
 800801a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	695b      	ldr	r3, [r3, #20]
 8008026:	4313      	orrs	r3, r2
 8008028:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	689a      	ldr	r2, [r3, #8]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	681a      	ldr	r2, [r3, #0]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	4a0c      	ldr	r2, [pc, #48]	@ (8008070 <TIM_Base_SetConfig+0xf0>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d103      	bne.n	800804a <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	691a      	ldr	r2, [r3, #16]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f043 0204 	orr.w	r2, r3, #4
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2201      	movs	r2, #1
 800805a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	68fa      	ldr	r2, [r7, #12]
 8008060:	601a      	str	r2, [r3, #0]
}
 8008062:	bf00      	nop
 8008064:	3714      	adds	r7, #20
 8008066:	46bd      	mov	sp, r7
 8008068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806c:	4770      	bx	lr
 800806e:	bf00      	nop
 8008070:	40010000 	.word	0x40010000
 8008074:	40000400 	.word	0x40000400
 8008078:	40000800 	.word	0x40000800
 800807c:	40000c00 	.word	0x40000c00
 8008080:	40014000 	.word	0x40014000
 8008084:	40014400 	.word	0x40014400
 8008088:	40014800 	.word	0x40014800

0800808c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800808c:	b480      	push	{r7}
 800808e:	b087      	sub	sp, #28
 8008090:	af00      	add	r7, sp, #0
 8008092:	60f8      	str	r0, [r7, #12]
 8008094:	60b9      	str	r1, [r7, #8]
 8008096:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	6a1b      	ldr	r3, [r3, #32]
 800809c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	6a1b      	ldr	r3, [r3, #32]
 80080a2:	f023 0201 	bic.w	r2, r3, #1
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	699b      	ldr	r3, [r3, #24]
 80080ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80080b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	011b      	lsls	r3, r3, #4
 80080bc:	693a      	ldr	r2, [r7, #16]
 80080be:	4313      	orrs	r3, r2
 80080c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	f023 030a 	bic.w	r3, r3, #10
 80080c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80080ca:	697a      	ldr	r2, [r7, #20]
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	4313      	orrs	r3, r2
 80080d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	693a      	ldr	r2, [r7, #16]
 80080d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	697a      	ldr	r2, [r7, #20]
 80080dc:	621a      	str	r2, [r3, #32]
}
 80080de:	bf00      	nop
 80080e0:	371c      	adds	r7, #28
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr

080080ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080ea:	b480      	push	{r7}
 80080ec:	b087      	sub	sp, #28
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	60f8      	str	r0, [r7, #12]
 80080f2:	60b9      	str	r1, [r7, #8]
 80080f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	6a1b      	ldr	r3, [r3, #32]
 80080fa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	6a1b      	ldr	r3, [r3, #32]
 8008100:	f023 0210 	bic.w	r2, r3, #16
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	699b      	ldr	r3, [r3, #24]
 800810c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008114:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	031b      	lsls	r3, r3, #12
 800811a:	693a      	ldr	r2, [r7, #16]
 800811c:	4313      	orrs	r3, r2
 800811e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008126:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	011b      	lsls	r3, r3, #4
 800812c:	697a      	ldr	r2, [r7, #20]
 800812e:	4313      	orrs	r3, r2
 8008130:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	693a      	ldr	r2, [r7, #16]
 8008136:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	697a      	ldr	r2, [r7, #20]
 800813c:	621a      	str	r2, [r3, #32]
}
 800813e:	bf00      	nop
 8008140:	371c      	adds	r7, #28
 8008142:	46bd      	mov	sp, r7
 8008144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008148:	4770      	bx	lr

0800814a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800814a:	b480      	push	{r7}
 800814c:	b085      	sub	sp, #20
 800814e:	af00      	add	r7, sp, #0
 8008150:	6078      	str	r0, [r7, #4]
 8008152:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	689b      	ldr	r3, [r3, #8]
 8008158:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008160:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008162:	683a      	ldr	r2, [r7, #0]
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	4313      	orrs	r3, r2
 8008168:	f043 0307 	orr.w	r3, r3, #7
 800816c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	68fa      	ldr	r2, [r7, #12]
 8008172:	609a      	str	r2, [r3, #8]
}
 8008174:	bf00      	nop
 8008176:	3714      	adds	r7, #20
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr

08008180 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008180:	b480      	push	{r7}
 8008182:	b087      	sub	sp, #28
 8008184:	af00      	add	r7, sp, #0
 8008186:	60f8      	str	r0, [r7, #12]
 8008188:	60b9      	str	r1, [r7, #8]
 800818a:	607a      	str	r2, [r7, #4]
 800818c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	689b      	ldr	r3, [r3, #8]
 8008192:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800819a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	021a      	lsls	r2, r3, #8
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	431a      	orrs	r2, r3
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	4313      	orrs	r3, r2
 80081a8:	697a      	ldr	r2, [r7, #20]
 80081aa:	4313      	orrs	r3, r2
 80081ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	697a      	ldr	r2, [r7, #20]
 80081b2:	609a      	str	r2, [r3, #8]
}
 80081b4:	bf00      	nop
 80081b6:	371c      	adds	r7, #28
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr

080081c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b085      	sub	sp, #20
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	d101      	bne.n	80081d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80081d4:	2302      	movs	r3, #2
 80081d6:	e050      	b.n	800827a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2201      	movs	r2, #1
 80081dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2202      	movs	r2, #2
 80081e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	685b      	ldr	r3, [r3, #4]
 80081ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	689b      	ldr	r3, [r3, #8]
 80081f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	68fa      	ldr	r2, [r7, #12]
 8008206:	4313      	orrs	r3, r2
 8008208:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	68fa      	ldr	r2, [r7, #12]
 8008210:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a1c      	ldr	r2, [pc, #112]	@ (8008288 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d018      	beq.n	800824e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008224:	d013      	beq.n	800824e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a18      	ldr	r2, [pc, #96]	@ (800828c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d00e      	beq.n	800824e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a16      	ldr	r2, [pc, #88]	@ (8008290 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d009      	beq.n	800824e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4a15      	ldr	r2, [pc, #84]	@ (8008294 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d004      	beq.n	800824e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4a13      	ldr	r2, [pc, #76]	@ (8008298 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d10c      	bne.n	8008268 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008254:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	685b      	ldr	r3, [r3, #4]
 800825a:	68ba      	ldr	r2, [r7, #8]
 800825c:	4313      	orrs	r3, r2
 800825e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	68ba      	ldr	r2, [r7, #8]
 8008266:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2201      	movs	r2, #1
 800826c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2200      	movs	r2, #0
 8008274:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008278:	2300      	movs	r3, #0
}
 800827a:	4618      	mov	r0, r3
 800827c:	3714      	adds	r7, #20
 800827e:	46bd      	mov	sp, r7
 8008280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008284:	4770      	bx	lr
 8008286:	bf00      	nop
 8008288:	40010000 	.word	0x40010000
 800828c:	40000400 	.word	0x40000400
 8008290:	40000800 	.word	0x40000800
 8008294:	40000c00 	.word	0x40000c00
 8008298:	40014000 	.word	0x40014000

0800829c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800829c:	b084      	sub	sp, #16
 800829e:	b580      	push	{r7, lr}
 80082a0:	b084      	sub	sp, #16
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	6078      	str	r0, [r7, #4]
 80082a6:	f107 001c 	add.w	r0, r7, #28
 80082aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80082ae:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80082b2:	2b01      	cmp	r3, #1
 80082b4:	d123      	bne.n	80082fe <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082ba:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	68db      	ldr	r3, [r3, #12]
 80082c6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80082ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80082ce:	687a      	ldr	r2, [r7, #4]
 80082d0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	68db      	ldr	r3, [r3, #12]
 80082d6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80082de:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	d105      	bne.n	80082f2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	68db      	ldr	r3, [r3, #12]
 80082ea:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 f9dc 	bl	80086b0 <USB_CoreReset>
 80082f8:	4603      	mov	r3, r0
 80082fa:	73fb      	strb	r3, [r7, #15]
 80082fc:	e01b      	b.n	8008336 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	68db      	ldr	r3, [r3, #12]
 8008302:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 f9d0 	bl	80086b0 <USB_CoreReset>
 8008310:	4603      	mov	r3, r0
 8008312:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008314:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008318:	2b00      	cmp	r3, #0
 800831a:	d106      	bne.n	800832a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008320:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	639a      	str	r2, [r3, #56]	@ 0x38
 8008328:	e005      	b.n	8008336 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800832e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008336:	7fbb      	ldrb	r3, [r7, #30]
 8008338:	2b01      	cmp	r3, #1
 800833a:	d10b      	bne.n	8008354 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	689b      	ldr	r3, [r3, #8]
 8008340:	f043 0206 	orr.w	r2, r3, #6
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	689b      	ldr	r3, [r3, #8]
 800834c:	f043 0220 	orr.w	r2, r3, #32
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008354:	7bfb      	ldrb	r3, [r7, #15]
}
 8008356:	4618      	mov	r0, r3
 8008358:	3710      	adds	r7, #16
 800835a:	46bd      	mov	sp, r7
 800835c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008360:	b004      	add	sp, #16
 8008362:	4770      	bx	lr

08008364 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008364:	b480      	push	{r7}
 8008366:	b083      	sub	sp, #12
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	689b      	ldr	r3, [r3, #8]
 8008370:	f043 0201 	orr.w	r2, r3, #1
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008378:	2300      	movs	r3, #0
}
 800837a:	4618      	mov	r0, r3
 800837c:	370c      	adds	r7, #12
 800837e:	46bd      	mov	sp, r7
 8008380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008384:	4770      	bx	lr

08008386 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008386:	b480      	push	{r7}
 8008388:	b083      	sub	sp, #12
 800838a:	af00      	add	r7, sp, #0
 800838c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	689b      	ldr	r3, [r3, #8]
 8008392:	f023 0201 	bic.w	r2, r3, #1
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800839a:	2300      	movs	r3, #0
}
 800839c:	4618      	mov	r0, r3
 800839e:	370c      	adds	r7, #12
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr

080083a8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b084      	sub	sp, #16
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	460b      	mov	r3, r1
 80083b2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80083b4:	2300      	movs	r3, #0
 80083b6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	68db      	ldr	r3, [r3, #12]
 80083bc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80083c4:	78fb      	ldrb	r3, [r7, #3]
 80083c6:	2b01      	cmp	r3, #1
 80083c8:	d115      	bne.n	80083f6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	68db      	ldr	r3, [r3, #12]
 80083ce:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80083d6:	200a      	movs	r0, #10
 80083d8:	f7fa fa5e 	bl	8002898 <HAL_Delay>
      ms += 10U;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	330a      	adds	r3, #10
 80083e0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 f956 	bl	8008694 <USB_GetMode>
 80083e8:	4603      	mov	r3, r0
 80083ea:	2b01      	cmp	r3, #1
 80083ec:	d01e      	beq.n	800842c <USB_SetCurrentMode+0x84>
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	2bc7      	cmp	r3, #199	@ 0xc7
 80083f2:	d9f0      	bls.n	80083d6 <USB_SetCurrentMode+0x2e>
 80083f4:	e01a      	b.n	800842c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80083f6:	78fb      	ldrb	r3, [r7, #3]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d115      	bne.n	8008428 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	68db      	ldr	r3, [r3, #12]
 8008400:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008408:	200a      	movs	r0, #10
 800840a:	f7fa fa45 	bl	8002898 <HAL_Delay>
      ms += 10U;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	330a      	adds	r3, #10
 8008412:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 f93d 	bl	8008694 <USB_GetMode>
 800841a:	4603      	mov	r3, r0
 800841c:	2b00      	cmp	r3, #0
 800841e:	d005      	beq.n	800842c <USB_SetCurrentMode+0x84>
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2bc7      	cmp	r3, #199	@ 0xc7
 8008424:	d9f0      	bls.n	8008408 <USB_SetCurrentMode+0x60>
 8008426:	e001      	b.n	800842c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008428:	2301      	movs	r3, #1
 800842a:	e005      	b.n	8008438 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2bc8      	cmp	r3, #200	@ 0xc8
 8008430:	d101      	bne.n	8008436 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008432:	2301      	movs	r3, #1
 8008434:	e000      	b.n	8008438 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008436:	2300      	movs	r3, #0
}
 8008438:	4618      	mov	r0, r3
 800843a:	3710      	adds	r7, #16
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}

08008440 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008440:	b480      	push	{r7}
 8008442:	b085      	sub	sp, #20
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
 8008448:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800844a:	2300      	movs	r3, #0
 800844c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	3301      	adds	r3, #1
 8008452:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800845a:	d901      	bls.n	8008460 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800845c:	2303      	movs	r3, #3
 800845e:	e01b      	b.n	8008498 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	691b      	ldr	r3, [r3, #16]
 8008464:	2b00      	cmp	r3, #0
 8008466:	daf2      	bge.n	800844e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008468:	2300      	movs	r3, #0
 800846a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	019b      	lsls	r3, r3, #6
 8008470:	f043 0220 	orr.w	r2, r3, #32
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	3301      	adds	r3, #1
 800847c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008484:	d901      	bls.n	800848a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008486:	2303      	movs	r3, #3
 8008488:	e006      	b.n	8008498 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	691b      	ldr	r3, [r3, #16]
 800848e:	f003 0320 	and.w	r3, r3, #32
 8008492:	2b20      	cmp	r3, #32
 8008494:	d0f0      	beq.n	8008478 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008496:	2300      	movs	r3, #0
}
 8008498:	4618      	mov	r0, r3
 800849a:	3714      	adds	r7, #20
 800849c:	46bd      	mov	sp, r7
 800849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a2:	4770      	bx	lr

080084a4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b085      	sub	sp, #20
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80084ac:	2300      	movs	r3, #0
 80084ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	3301      	adds	r3, #1
 80084b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80084bc:	d901      	bls.n	80084c2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80084be:	2303      	movs	r3, #3
 80084c0:	e018      	b.n	80084f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	691b      	ldr	r3, [r3, #16]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	daf2      	bge.n	80084b0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80084ca:	2300      	movs	r3, #0
 80084cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2210      	movs	r2, #16
 80084d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	3301      	adds	r3, #1
 80084d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80084e0:	d901      	bls.n	80084e6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80084e2:	2303      	movs	r3, #3
 80084e4:	e006      	b.n	80084f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	691b      	ldr	r3, [r3, #16]
 80084ea:	f003 0310 	and.w	r3, r3, #16
 80084ee:	2b10      	cmp	r3, #16
 80084f0:	d0f0      	beq.n	80084d4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80084f2:	2300      	movs	r3, #0
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3714      	adds	r7, #20
 80084f8:	46bd      	mov	sp, r7
 80084fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fe:	4770      	bx	lr

08008500 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008500:	b480      	push	{r7}
 8008502:	b089      	sub	sp, #36	@ 0x24
 8008504:	af00      	add	r7, sp, #0
 8008506:	60f8      	str	r0, [r7, #12]
 8008508:	60b9      	str	r1, [r7, #8]
 800850a:	4611      	mov	r1, r2
 800850c:	461a      	mov	r2, r3
 800850e:	460b      	mov	r3, r1
 8008510:	71fb      	strb	r3, [r7, #7]
 8008512:	4613      	mov	r3, r2
 8008514:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800851e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008522:	2b00      	cmp	r3, #0
 8008524:	d123      	bne.n	800856e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008526:	88bb      	ldrh	r3, [r7, #4]
 8008528:	3303      	adds	r3, #3
 800852a:	089b      	lsrs	r3, r3, #2
 800852c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800852e:	2300      	movs	r3, #0
 8008530:	61bb      	str	r3, [r7, #24]
 8008532:	e018      	b.n	8008566 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008534:	79fb      	ldrb	r3, [r7, #7]
 8008536:	031a      	lsls	r2, r3, #12
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	4413      	add	r3, r2
 800853c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008540:	461a      	mov	r2, r3
 8008542:	69fb      	ldr	r3, [r7, #28]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008548:	69fb      	ldr	r3, [r7, #28]
 800854a:	3301      	adds	r3, #1
 800854c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800854e:	69fb      	ldr	r3, [r7, #28]
 8008550:	3301      	adds	r3, #1
 8008552:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008554:	69fb      	ldr	r3, [r7, #28]
 8008556:	3301      	adds	r3, #1
 8008558:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800855a:	69fb      	ldr	r3, [r7, #28]
 800855c:	3301      	adds	r3, #1
 800855e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008560:	69bb      	ldr	r3, [r7, #24]
 8008562:	3301      	adds	r3, #1
 8008564:	61bb      	str	r3, [r7, #24]
 8008566:	69ba      	ldr	r2, [r7, #24]
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	429a      	cmp	r2, r3
 800856c:	d3e2      	bcc.n	8008534 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800856e:	2300      	movs	r3, #0
}
 8008570:	4618      	mov	r0, r3
 8008572:	3724      	adds	r7, #36	@ 0x24
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr

0800857c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800857c:	b480      	push	{r7}
 800857e:	b08b      	sub	sp, #44	@ 0x2c
 8008580:	af00      	add	r7, sp, #0
 8008582:	60f8      	str	r0, [r7, #12]
 8008584:	60b9      	str	r1, [r7, #8]
 8008586:	4613      	mov	r3, r2
 8008588:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008592:	88fb      	ldrh	r3, [r7, #6]
 8008594:	089b      	lsrs	r3, r3, #2
 8008596:	b29b      	uxth	r3, r3
 8008598:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800859a:	88fb      	ldrh	r3, [r7, #6]
 800859c:	f003 0303 	and.w	r3, r3, #3
 80085a0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80085a2:	2300      	movs	r3, #0
 80085a4:	623b      	str	r3, [r7, #32]
 80085a6:	e014      	b.n	80085d2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80085a8:	69bb      	ldr	r3, [r7, #24]
 80085aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80085ae:	681a      	ldr	r2, [r3, #0]
 80085b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085b2:	601a      	str	r2, [r3, #0]
    pDest++;
 80085b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085b6:	3301      	adds	r3, #1
 80085b8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80085ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085bc:	3301      	adds	r3, #1
 80085be:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80085c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085c2:	3301      	adds	r3, #1
 80085c4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80085c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085c8:	3301      	adds	r3, #1
 80085ca:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80085cc:	6a3b      	ldr	r3, [r7, #32]
 80085ce:	3301      	adds	r3, #1
 80085d0:	623b      	str	r3, [r7, #32]
 80085d2:	6a3a      	ldr	r2, [r7, #32]
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	429a      	cmp	r2, r3
 80085d8:	d3e6      	bcc.n	80085a8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80085da:	8bfb      	ldrh	r3, [r7, #30]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d01e      	beq.n	800861e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80085e0:	2300      	movs	r3, #0
 80085e2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80085e4:	69bb      	ldr	r3, [r7, #24]
 80085e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80085ea:	461a      	mov	r2, r3
 80085ec:	f107 0310 	add.w	r3, r7, #16
 80085f0:	6812      	ldr	r2, [r2, #0]
 80085f2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80085f4:	693a      	ldr	r2, [r7, #16]
 80085f6:	6a3b      	ldr	r3, [r7, #32]
 80085f8:	b2db      	uxtb	r3, r3
 80085fa:	00db      	lsls	r3, r3, #3
 80085fc:	fa22 f303 	lsr.w	r3, r2, r3
 8008600:	b2da      	uxtb	r2, r3
 8008602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008604:	701a      	strb	r2, [r3, #0]
      i++;
 8008606:	6a3b      	ldr	r3, [r7, #32]
 8008608:	3301      	adds	r3, #1
 800860a:	623b      	str	r3, [r7, #32]
      pDest++;
 800860c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800860e:	3301      	adds	r3, #1
 8008610:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008612:	8bfb      	ldrh	r3, [r7, #30]
 8008614:	3b01      	subs	r3, #1
 8008616:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008618:	8bfb      	ldrh	r3, [r7, #30]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d1ea      	bne.n	80085f4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800861e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008620:	4618      	mov	r0, r3
 8008622:	372c      	adds	r7, #44	@ 0x2c
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr

0800862c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800862c:	b480      	push	{r7}
 800862e:	b085      	sub	sp, #20
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	695b      	ldr	r3, [r3, #20]
 8008638:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	699b      	ldr	r3, [r3, #24]
 800863e:	68fa      	ldr	r2, [r7, #12]
 8008640:	4013      	ands	r3, r2
 8008642:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008644:	68fb      	ldr	r3, [r7, #12]
}
 8008646:	4618      	mov	r0, r3
 8008648:	3714      	adds	r7, #20
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr

08008652 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8008652:	b480      	push	{r7}
 8008654:	b085      	sub	sp, #20
 8008656:	af00      	add	r7, sp, #0
 8008658:	6078      	str	r0, [r7, #4]
 800865a:	460b      	mov	r3, r1
 800865c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8008662:	78fb      	ldrb	r3, [r7, #3]
 8008664:	015a      	lsls	r2, r3, #5
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	4413      	add	r3, r2
 800866a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800866e:	689b      	ldr	r3, [r3, #8]
 8008670:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8008672:	78fb      	ldrb	r3, [r7, #3]
 8008674:	015a      	lsls	r2, r3, #5
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	4413      	add	r3, r2
 800867a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800867e:	68db      	ldr	r3, [r3, #12]
 8008680:	68ba      	ldr	r2, [r7, #8]
 8008682:	4013      	ands	r3, r2
 8008684:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008686:	68bb      	ldr	r3, [r7, #8]
}
 8008688:	4618      	mov	r0, r3
 800868a:	3714      	adds	r7, #20
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr

08008694 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008694:	b480      	push	{r7}
 8008696:	b083      	sub	sp, #12
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	695b      	ldr	r3, [r3, #20]
 80086a0:	f003 0301 	and.w	r3, r3, #1
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	370c      	adds	r7, #12
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr

080086b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b085      	sub	sp, #20
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80086b8:	2300      	movs	r3, #0
 80086ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	3301      	adds	r3, #1
 80086c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80086c8:	d901      	bls.n	80086ce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80086ca:	2303      	movs	r3, #3
 80086cc:	e022      	b.n	8008714 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	691b      	ldr	r3, [r3, #16]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	daf2      	bge.n	80086bc <USB_CoreReset+0xc>

  count = 10U;
 80086d6:	230a      	movs	r3, #10
 80086d8:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80086da:	e002      	b.n	80086e2 <USB_CoreReset+0x32>
  {
    count--;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	3b01      	subs	r3, #1
 80086e0:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d1f9      	bne.n	80086dc <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	691b      	ldr	r3, [r3, #16]
 80086ec:	f043 0201 	orr.w	r2, r3, #1
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	3301      	adds	r3, #1
 80086f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008700:	d901      	bls.n	8008706 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8008702:	2303      	movs	r3, #3
 8008704:	e006      	b.n	8008714 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	691b      	ldr	r3, [r3, #16]
 800870a:	f003 0301 	and.w	r3, r3, #1
 800870e:	2b01      	cmp	r3, #1
 8008710:	d0f0      	beq.n	80086f4 <USB_CoreReset+0x44>

  return HAL_OK;
 8008712:	2300      	movs	r3, #0
}
 8008714:	4618      	mov	r0, r3
 8008716:	3714      	adds	r7, #20
 8008718:	46bd      	mov	sp, r7
 800871a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871e:	4770      	bx	lr

08008720 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008720:	b084      	sub	sp, #16
 8008722:	b580      	push	{r7, lr}
 8008724:	b086      	sub	sp, #24
 8008726:	af00      	add	r7, sp, #0
 8008728:	6078      	str	r0, [r7, #4]
 800872a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800872e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008732:	2300      	movs	r3, #0
 8008734:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008740:	461a      	mov	r2, r3
 8008742:	2300      	movs	r3, #0
 8008744:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800874a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008756:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008762:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	68db      	ldr	r3, [r3, #12]
 800876e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008772:	2b00      	cmp	r3, #0
 8008774:	d119      	bne.n	80087aa <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008776:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800877a:	2b01      	cmp	r3, #1
 800877c:	d10a      	bne.n	8008794 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	68fa      	ldr	r2, [r7, #12]
 8008788:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800878c:	f043 0304 	orr.w	r3, r3, #4
 8008790:	6013      	str	r3, [r2, #0]
 8008792:	e014      	b.n	80087be <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	68fa      	ldr	r2, [r7, #12]
 800879e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80087a2:	f023 0304 	bic.w	r3, r3, #4
 80087a6:	6013      	str	r3, [r2, #0]
 80087a8:	e009      	b.n	80087be <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	68fa      	ldr	r2, [r7, #12]
 80087b4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80087b8:	f023 0304 	bic.w	r3, r3, #4
 80087bc:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80087be:	2110      	movs	r1, #16
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f7ff fe3d 	bl	8008440 <USB_FlushTxFifo>
 80087c6:	4603      	mov	r3, r0
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d001      	beq.n	80087d0 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80087cc:	2301      	movs	r3, #1
 80087ce:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f7ff fe67 	bl	80084a4 <USB_FlushRxFifo>
 80087d6:	4603      	mov	r3, r0
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d001      	beq.n	80087e0 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80087dc:	2301      	movs	r3, #1
 80087de:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80087e0:	2300      	movs	r3, #0
 80087e2:	613b      	str	r3, [r7, #16]
 80087e4:	e015      	b.n	8008812 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	015a      	lsls	r2, r3, #5
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	4413      	add	r3, r2
 80087ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80087f2:	461a      	mov	r2, r3
 80087f4:	f04f 33ff 	mov.w	r3, #4294967295
 80087f8:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	015a      	lsls	r2, r3, #5
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	4413      	add	r3, r2
 8008802:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008806:	461a      	mov	r2, r3
 8008808:	2300      	movs	r3, #0
 800880a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	3301      	adds	r3, #1
 8008810:	613b      	str	r3, [r7, #16]
 8008812:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008816:	461a      	mov	r2, r3
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	4293      	cmp	r3, r2
 800881c:	d3e3      	bcc.n	80087e6 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2200      	movs	r2, #0
 8008822:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f04f 32ff 	mov.w	r2, #4294967295
 800882a:	615a      	str	r2, [r3, #20]
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2280      	movs	r2, #128	@ 0x80
 8008830:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	4a0e      	ldr	r2, [pc, #56]	@ (8008870 <USB_HostInit+0x150>)
 8008836:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	4a0e      	ldr	r2, [pc, #56]	@ (8008874 <USB_HostInit+0x154>)
 800883c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008840:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008844:	2b00      	cmp	r3, #0
 8008846:	d105      	bne.n	8008854 <USB_HostInit+0x134>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	699b      	ldr	r3, [r3, #24]
 800884c:	f043 0210 	orr.w	r2, r3, #16
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	699a      	ldr	r2, [r3, #24]
 8008858:	4b07      	ldr	r3, [pc, #28]	@ (8008878 <USB_HostInit+0x158>)
 800885a:	4313      	orrs	r3, r2
 800885c:	687a      	ldr	r2, [r7, #4]
 800885e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8008860:	7dfb      	ldrb	r3, [r7, #23]
}
 8008862:	4618      	mov	r0, r3
 8008864:	3718      	adds	r7, #24
 8008866:	46bd      	mov	sp, r7
 8008868:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800886c:	b004      	add	sp, #16
 800886e:	4770      	bx	lr
 8008870:	00600080 	.word	0x00600080
 8008874:	004000e0 	.word	0x004000e0
 8008878:	a3200008 	.word	0xa3200008

0800887c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800887c:	b480      	push	{r7}
 800887e:	b085      	sub	sp, #20
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
 8008884:	460b      	mov	r3, r1
 8008886:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	68fa      	ldr	r2, [r7, #12]
 8008896:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800889a:	f023 0303 	bic.w	r3, r3, #3
 800889e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80088a6:	681a      	ldr	r2, [r3, #0]
 80088a8:	78fb      	ldrb	r3, [r7, #3]
 80088aa:	f003 0303 	and.w	r3, r3, #3
 80088ae:	68f9      	ldr	r1, [r7, #12]
 80088b0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80088b4:	4313      	orrs	r3, r2
 80088b6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80088b8:	78fb      	ldrb	r3, [r7, #3]
 80088ba:	2b01      	cmp	r3, #1
 80088bc:	d107      	bne.n	80088ce <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80088c4:	461a      	mov	r2, r3
 80088c6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80088ca:	6053      	str	r3, [r2, #4]
 80088cc:	e00c      	b.n	80088e8 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80088ce:	78fb      	ldrb	r3, [r7, #3]
 80088d0:	2b02      	cmp	r3, #2
 80088d2:	d107      	bne.n	80088e4 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80088da:	461a      	mov	r2, r3
 80088dc:	f241 7370 	movw	r3, #6000	@ 0x1770
 80088e0:	6053      	str	r3, [r2, #4]
 80088e2:	e001      	b.n	80088e8 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80088e4:	2301      	movs	r3, #1
 80088e6:	e000      	b.n	80088ea <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80088e8:	2300      	movs	r3, #0
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3714      	adds	r7, #20
 80088ee:	46bd      	mov	sp, r7
 80088f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f4:	4770      	bx	lr

080088f6 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80088f6:	b580      	push	{r7, lr}
 80088f8:	b084      	sub	sp, #16
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008902:	2300      	movs	r3, #0
 8008904:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8008916:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	68fa      	ldr	r2, [r7, #12]
 800891c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008920:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008924:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008926:	2064      	movs	r0, #100	@ 0x64
 8008928:	f7f9 ffb6 	bl	8002898 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	68fa      	ldr	r2, [r7, #12]
 8008930:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008934:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008938:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800893a:	200a      	movs	r0, #10
 800893c:	f7f9 ffac 	bl	8002898 <HAL_Delay>

  return HAL_OK;
 8008940:	2300      	movs	r3, #0
}
 8008942:	4618      	mov	r0, r3
 8008944:	3710      	adds	r7, #16
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}

0800894a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800894a:	b480      	push	{r7}
 800894c:	b085      	sub	sp, #20
 800894e:	af00      	add	r7, sp, #0
 8008950:	6078      	str	r0, [r7, #4]
 8008952:	460b      	mov	r3, r1
 8008954:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800895a:	2300      	movs	r3, #0
 800895c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800896e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008976:	2b00      	cmp	r3, #0
 8008978:	d109      	bne.n	800898e <USB_DriveVbus+0x44>
 800897a:	78fb      	ldrb	r3, [r7, #3]
 800897c:	2b01      	cmp	r3, #1
 800897e:	d106      	bne.n	800898e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	68fa      	ldr	r2, [r7, #12]
 8008984:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008988:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800898c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008994:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008998:	d109      	bne.n	80089ae <USB_DriveVbus+0x64>
 800899a:	78fb      	ldrb	r3, [r7, #3]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d106      	bne.n	80089ae <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	68fa      	ldr	r2, [r7, #12]
 80089a4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80089a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80089ac:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80089ae:	2300      	movs	r3, #0
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	3714      	adds	r7, #20
 80089b4:	46bd      	mov	sp, r7
 80089b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ba:	4770      	bx	lr

080089bc <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80089bc:	b480      	push	{r7}
 80089be:	b085      	sub	sp, #20
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80089c8:	2300      	movs	r3, #0
 80089ca:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	0c5b      	lsrs	r3, r3, #17
 80089da:	f003 0303 	and.w	r3, r3, #3
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3714      	adds	r7, #20
 80089e2:	46bd      	mov	sp, r7
 80089e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e8:	4770      	bx	lr

080089ea <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80089ea:	b480      	push	{r7}
 80089ec:	b085      	sub	sp, #20
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80089fc:	689b      	ldr	r3, [r3, #8]
 80089fe:	b29b      	uxth	r3, r3
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3714      	adds	r7, #20
 8008a04:	46bd      	mov	sp, r7
 8008a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0a:	4770      	bx	lr

08008a0c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b088      	sub	sp, #32
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
 8008a14:	4608      	mov	r0, r1
 8008a16:	4611      	mov	r1, r2
 8008a18:	461a      	mov	r2, r3
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	70fb      	strb	r3, [r7, #3]
 8008a1e:	460b      	mov	r3, r1
 8008a20:	70bb      	strb	r3, [r7, #2]
 8008a22:	4613      	mov	r3, r2
 8008a24:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008a26:	2300      	movs	r3, #0
 8008a28:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8008a2e:	78fb      	ldrb	r3, [r7, #3]
 8008a30:	015a      	lsls	r2, r3, #5
 8008a32:	693b      	ldr	r3, [r7, #16]
 8008a34:	4413      	add	r3, r2
 8008a36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8008a40:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008a42:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008a46:	2b03      	cmp	r3, #3
 8008a48:	d867      	bhi.n	8008b1a <USB_HC_Init+0x10e>
 8008a4a:	a201      	add	r2, pc, #4	@ (adr r2, 8008a50 <USB_HC_Init+0x44>)
 8008a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a50:	08008a61 	.word	0x08008a61
 8008a54:	08008add 	.word	0x08008add
 8008a58:	08008a61 	.word	0x08008a61
 8008a5c:	08008a9f 	.word	0x08008a9f
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008a60:	78fb      	ldrb	r3, [r7, #3]
 8008a62:	015a      	lsls	r2, r3, #5
 8008a64:	693b      	ldr	r3, [r7, #16]
 8008a66:	4413      	add	r3, r2
 8008a68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a6c:	461a      	mov	r2, r3
 8008a6e:	f240 439d 	movw	r3, #1181	@ 0x49d
 8008a72:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008a74:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	da51      	bge.n	8008b20 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008a7c:	78fb      	ldrb	r3, [r7, #3]
 8008a7e:	015a      	lsls	r2, r3, #5
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	4413      	add	r3, r2
 8008a84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a88:	68db      	ldr	r3, [r3, #12]
 8008a8a:	78fa      	ldrb	r2, [r7, #3]
 8008a8c:	0151      	lsls	r1, r2, #5
 8008a8e:	693a      	ldr	r2, [r7, #16]
 8008a90:	440a      	add	r2, r1
 8008a92:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008a96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008a9a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8008a9c:	e040      	b.n	8008b20 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008a9e:	78fb      	ldrb	r3, [r7, #3]
 8008aa0:	015a      	lsls	r2, r3, #5
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	4413      	add	r3, r2
 8008aa6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008aaa:	461a      	mov	r2, r3
 8008aac:	f240 639d 	movw	r3, #1693	@ 0x69d
 8008ab0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008ab2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	da34      	bge.n	8008b24 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008aba:	78fb      	ldrb	r3, [r7, #3]
 8008abc:	015a      	lsls	r2, r3, #5
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	4413      	add	r3, r2
 8008ac2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ac6:	68db      	ldr	r3, [r3, #12]
 8008ac8:	78fa      	ldrb	r2, [r7, #3]
 8008aca:	0151      	lsls	r1, r2, #5
 8008acc:	693a      	ldr	r2, [r7, #16]
 8008ace:	440a      	add	r2, r1
 8008ad0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008ad4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008ad8:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008ada:	e023      	b.n	8008b24 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008adc:	78fb      	ldrb	r3, [r7, #3]
 8008ade:	015a      	lsls	r2, r3, #5
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	4413      	add	r3, r2
 8008ae4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ae8:	461a      	mov	r2, r3
 8008aea:	f240 2325 	movw	r3, #549	@ 0x225
 8008aee:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008af0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	da17      	bge.n	8008b28 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008af8:	78fb      	ldrb	r3, [r7, #3]
 8008afa:	015a      	lsls	r2, r3, #5
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	4413      	add	r3, r2
 8008b00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b04:	68db      	ldr	r3, [r3, #12]
 8008b06:	78fa      	ldrb	r2, [r7, #3]
 8008b08:	0151      	lsls	r1, r2, #5
 8008b0a:	693a      	ldr	r2, [r7, #16]
 8008b0c:	440a      	add	r2, r1
 8008b0e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008b12:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8008b16:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008b18:	e006      	b.n	8008b28 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	77fb      	strb	r3, [r7, #31]
      break;
 8008b1e:	e004      	b.n	8008b2a <USB_HC_Init+0x11e>
      break;
 8008b20:	bf00      	nop
 8008b22:	e002      	b.n	8008b2a <USB_HC_Init+0x11e>
      break;
 8008b24:	bf00      	nop
 8008b26:	e000      	b.n	8008b2a <USB_HC_Init+0x11e>
      break;
 8008b28:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8008b2a:	78fb      	ldrb	r3, [r7, #3]
 8008b2c:	015a      	lsls	r2, r3, #5
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	4413      	add	r3, r2
 8008b32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b36:	461a      	mov	r2, r3
 8008b38:	2300      	movs	r3, #0
 8008b3a:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8008b3c:	78fb      	ldrb	r3, [r7, #3]
 8008b3e:	015a      	lsls	r2, r3, #5
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	4413      	add	r3, r2
 8008b44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b48:	68db      	ldr	r3, [r3, #12]
 8008b4a:	78fa      	ldrb	r2, [r7, #3]
 8008b4c:	0151      	lsls	r1, r2, #5
 8008b4e:	693a      	ldr	r2, [r7, #16]
 8008b50:	440a      	add	r2, r1
 8008b52:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008b56:	f043 0302 	orr.w	r3, r3, #2
 8008b5a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008b62:	699a      	ldr	r2, [r3, #24]
 8008b64:	78fb      	ldrb	r3, [r7, #3]
 8008b66:	f003 030f 	and.w	r3, r3, #15
 8008b6a:	2101      	movs	r1, #1
 8008b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8008b70:	6939      	ldr	r1, [r7, #16]
 8008b72:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8008b76:	4313      	orrs	r3, r2
 8008b78:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	699b      	ldr	r3, [r3, #24]
 8008b7e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008b86:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	da03      	bge.n	8008b96 <USB_HC_Init+0x18a>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008b8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b92:	61bb      	str	r3, [r7, #24]
 8008b94:	e001      	b.n	8008b9a <USB_HC_Init+0x18e>
  }
  else
  {
    HCcharEpDir = 0U;
 8008b96:	2300      	movs	r3, #0
 8008b98:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f7ff ff0e 	bl	80089bc <USB_GetHostSpeed>
 8008ba0:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008ba2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008ba6:	2b02      	cmp	r3, #2
 8008ba8:	d106      	bne.n	8008bb8 <USB_HC_Init+0x1ac>
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	2b02      	cmp	r3, #2
 8008bae:	d003      	beq.n	8008bb8 <USB_HC_Init+0x1ac>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008bb0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8008bb4:	617b      	str	r3, [r7, #20]
 8008bb6:	e001      	b.n	8008bbc <USB_HC_Init+0x1b0>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008bbc:	787b      	ldrb	r3, [r7, #1]
 8008bbe:	059b      	lsls	r3, r3, #22
 8008bc0:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008bc4:	78bb      	ldrb	r3, [r7, #2]
 8008bc6:	02db      	lsls	r3, r3, #11
 8008bc8:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008bcc:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008bce:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008bd2:	049b      	lsls	r3, r3, #18
 8008bd4:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008bd8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8008bda:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8008bdc:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008be0:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8008be2:	69bb      	ldr	r3, [r7, #24]
 8008be4:	431a      	orrs	r2, r3
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008bea:	78fa      	ldrb	r2, [r7, #3]
 8008bec:	0151      	lsls	r1, r2, #5
 8008bee:	693a      	ldr	r2, [r7, #16]
 8008bf0:	440a      	add	r2, r1
 8008bf2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8008bf6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008bfa:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8008bfc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008c00:	2b03      	cmp	r3, #3
 8008c02:	d003      	beq.n	8008c0c <USB_HC_Init+0x200>
 8008c04:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	d10f      	bne.n	8008c2c <USB_HC_Init+0x220>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8008c0c:	78fb      	ldrb	r3, [r7, #3]
 8008c0e:	015a      	lsls	r2, r3, #5
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	4413      	add	r3, r2
 8008c14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	78fa      	ldrb	r2, [r7, #3]
 8008c1c:	0151      	lsls	r1, r2, #5
 8008c1e:	693a      	ldr	r2, [r7, #16]
 8008c20:	440a      	add	r2, r1
 8008c22:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008c26:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008c2a:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008c2c:	7ffb      	ldrb	r3, [r7, #31]
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3720      	adds	r7, #32
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}
 8008c36:	bf00      	nop

08008c38 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b08c      	sub	sp, #48	@ 0x30
 8008c3c:	af02      	add	r7, sp, #8
 8008c3e:	60f8      	str	r0, [r7, #12]
 8008c40:	60b9      	str	r1, [r7, #8]
 8008c42:	4613      	mov	r3, r2
 8008c44:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	785b      	ldrb	r3, [r3, #1]
 8008c4e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8008c50:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008c54:	837b      	strh	r3, [r7, #26]
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	799b      	ldrb	r3, [r3, #6]
 8008c5a:	2b01      	cmp	r3, #1
 8008c5c:	d158      	bne.n	8008d10 <USB_HC_StartXfer+0xd8>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8008c5e:	2301      	movs	r3, #1
 8008c60:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	78db      	ldrb	r3, [r3, #3]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d007      	beq.n	8008c7a <USB_HC_StartXfer+0x42>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008c6a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008c6c:	68ba      	ldr	r2, [r7, #8]
 8008c6e:	8a92      	ldrh	r2, [r2, #20]
 8008c70:	fb03 f202 	mul.w	r2, r3, r2
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	61da      	str	r2, [r3, #28]
 8008c78:	e079      	b.n	8008d6e <USB_HC_StartXfer+0x136>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	7c9b      	ldrb	r3, [r3, #18]
 8008c7e:	2b01      	cmp	r3, #1
 8008c80:	d130      	bne.n	8008ce4 <USB_HC_StartXfer+0xac>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	6a1b      	ldr	r3, [r3, #32]
 8008c86:	2bbc      	cmp	r3, #188	@ 0xbc
 8008c88:	d918      	bls.n	8008cbc <USB_HC_StartXfer+0x84>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	8a9b      	ldrh	r3, [r3, #20]
 8008c8e:	461a      	mov	r2, r3
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	69da      	ldr	r2, [r3, #28]
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	68db      	ldr	r3, [r3, #12]
 8008ca0:	2b01      	cmp	r3, #1
 8008ca2:	d003      	beq.n	8008cac <USB_HC_StartXfer+0x74>
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	68db      	ldr	r3, [r3, #12]
 8008ca8:	2b02      	cmp	r3, #2
 8008caa:	d103      	bne.n	8008cb4 <USB_HC_StartXfer+0x7c>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	2202      	movs	r2, #2
 8008cb0:	60da      	str	r2, [r3, #12]
 8008cb2:	e05c      	b.n	8008d6e <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	60da      	str	r2, [r3, #12]
 8008cba:	e058      	b.n	8008d6e <USB_HC_StartXfer+0x136>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	6a1a      	ldr	r2, [r3, #32]
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	68db      	ldr	r3, [r3, #12]
 8008cc8:	2b01      	cmp	r3, #1
 8008cca:	d007      	beq.n	8008cdc <USB_HC_StartXfer+0xa4>
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	68db      	ldr	r3, [r3, #12]
 8008cd0:	2b02      	cmp	r3, #2
 8008cd2:	d003      	beq.n	8008cdc <USB_HC_StartXfer+0xa4>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	2204      	movs	r2, #4
 8008cd8:	60da      	str	r2, [r3, #12]
 8008cda:	e048      	b.n	8008d6e <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	2203      	movs	r2, #3
 8008ce0:	60da      	str	r2, [r3, #12]
 8008ce2:	e044      	b.n	8008d6e <USB_HC_StartXfer+0x136>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8008ce4:	79fb      	ldrb	r3, [r7, #7]
 8008ce6:	2b01      	cmp	r3, #1
 8008ce8:	d10d      	bne.n	8008d06 <USB_HC_StartXfer+0xce>
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	6a1b      	ldr	r3, [r3, #32]
 8008cee:	68ba      	ldr	r2, [r7, #8]
 8008cf0:	8a92      	ldrh	r2, [r2, #20]
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d907      	bls.n	8008d06 <USB_HC_StartXfer+0xce>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008cf6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008cf8:	68ba      	ldr	r2, [r7, #8]
 8008cfa:	8a92      	ldrh	r2, [r2, #20]
 8008cfc:	fb03 f202 	mul.w	r2, r3, r2
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	61da      	str	r2, [r3, #28]
 8008d04:	e033      	b.n	8008d6e <USB_HC_StartXfer+0x136>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	6a1a      	ldr	r2, [r3, #32]
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	61da      	str	r2, [r3, #28]
 8008d0e:	e02e      	b.n	8008d6e <USB_HC_StartXfer+0x136>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	6a1b      	ldr	r3, [r3, #32]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d018      	beq.n	8008d4a <USB_HC_StartXfer+0x112>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	6a1b      	ldr	r3, [r3, #32]
 8008d1c:	68ba      	ldr	r2, [r7, #8]
 8008d1e:	8a92      	ldrh	r2, [r2, #20]
 8008d20:	4413      	add	r3, r2
 8008d22:	3b01      	subs	r3, #1
 8008d24:	68ba      	ldr	r2, [r7, #8]
 8008d26:	8a92      	ldrh	r2, [r2, #20]
 8008d28:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d2c:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8008d2e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8008d30:	8b7b      	ldrh	r3, [r7, #26]
 8008d32:	429a      	cmp	r2, r3
 8008d34:	d90b      	bls.n	8008d4e <USB_HC_StartXfer+0x116>
      {
        num_packets = max_hc_pkt_count;
 8008d36:	8b7b      	ldrh	r3, [r7, #26]
 8008d38:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008d3a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008d3c:	68ba      	ldr	r2, [r7, #8]
 8008d3e:	8a92      	ldrh	r2, [r2, #20]
 8008d40:	fb03 f202 	mul.w	r2, r3, r2
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	61da      	str	r2, [r3, #28]
 8008d48:	e001      	b.n	8008d4e <USB_HC_StartXfer+0x116>
      }
    }
    else
    {
      num_packets = 1U;
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	78db      	ldrb	r3, [r3, #3]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d007      	beq.n	8008d66 <USB_HC_StartXfer+0x12e>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008d56:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008d58:	68ba      	ldr	r2, [r7, #8]
 8008d5a:	8a92      	ldrh	r2, [r2, #20]
 8008d5c:	fb03 f202 	mul.w	r2, r3, r2
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	61da      	str	r2, [r3, #28]
 8008d64:	e003      	b.n	8008d6e <USB_HC_StartXfer+0x136>
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	6a1a      	ldr	r2, [r3, #32]
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	69db      	ldr	r3, [r3, #28]
 8008d72:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008d76:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008d78:	04d9      	lsls	r1, r3, #19
 8008d7a:	4ba4      	ldr	r3, [pc, #656]	@ (800900c <USB_HC_StartXfer+0x3d4>)
 8008d7c:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008d7e:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	7d9b      	ldrb	r3, [r3, #22]
 8008d84:	075b      	lsls	r3, r3, #29
 8008d86:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008d8a:	69f9      	ldr	r1, [r7, #28]
 8008d8c:	0148      	lsls	r0, r1, #5
 8008d8e:	6a39      	ldr	r1, [r7, #32]
 8008d90:	4401      	add	r1, r0
 8008d92:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008d96:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008d98:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008d9a:	79fb      	ldrb	r3, [r7, #7]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d009      	beq.n	8008db4 <USB_HC_StartXfer+0x17c>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	6999      	ldr	r1, [r3, #24]
 8008da4:	69fb      	ldr	r3, [r7, #28]
 8008da6:	015a      	lsls	r2, r3, #5
 8008da8:	6a3b      	ldr	r3, [r7, #32]
 8008daa:	4413      	add	r3, r2
 8008dac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008db0:	460a      	mov	r2, r1
 8008db2:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008db4:	6a3b      	ldr	r3, [r7, #32]
 8008db6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008dba:	689b      	ldr	r3, [r3, #8]
 8008dbc:	f003 0301 	and.w	r3, r3, #1
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	bf0c      	ite	eq
 8008dc4:	2301      	moveq	r3, #1
 8008dc6:	2300      	movne	r3, #0
 8008dc8:	b2db      	uxtb	r3, r3
 8008dca:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008dcc:	69fb      	ldr	r3, [r7, #28]
 8008dce:	015a      	lsls	r2, r3, #5
 8008dd0:	6a3b      	ldr	r3, [r7, #32]
 8008dd2:	4413      	add	r3, r2
 8008dd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	69fa      	ldr	r2, [r7, #28]
 8008ddc:	0151      	lsls	r1, r2, #5
 8008dde:	6a3a      	ldr	r2, [r7, #32]
 8008de0:	440a      	add	r2, r1
 8008de2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008de6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008dea:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008dec:	69fb      	ldr	r3, [r7, #28]
 8008dee:	015a      	lsls	r2, r3, #5
 8008df0:	6a3b      	ldr	r3, [r7, #32]
 8008df2:	4413      	add	r3, r2
 8008df4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008df8:	681a      	ldr	r2, [r3, #0]
 8008dfa:	7e7b      	ldrb	r3, [r7, #25]
 8008dfc:	075b      	lsls	r3, r3, #29
 8008dfe:	69f9      	ldr	r1, [r7, #28]
 8008e00:	0148      	lsls	r0, r1, #5
 8008e02:	6a39      	ldr	r1, [r7, #32]
 8008e04:	4401      	add	r1, r0
 8008e06:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8008e0a:	4313      	orrs	r3, r2
 8008e0c:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	799b      	ldrb	r3, [r3, #6]
 8008e12:	2b01      	cmp	r3, #1
 8008e14:	f040 80c4 	bne.w	8008fa0 <USB_HC_StartXfer+0x368>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	7c5b      	ldrb	r3, [r3, #17]
 8008e1c:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8008e1e:	68ba      	ldr	r2, [r7, #8]
 8008e20:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008e22:	4313      	orrs	r3, r2
 8008e24:	69fa      	ldr	r2, [r7, #28]
 8008e26:	0151      	lsls	r1, r2, #5
 8008e28:	6a3a      	ldr	r2, [r7, #32]
 8008e2a:	440a      	add	r2, r1
 8008e2c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8008e30:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008e34:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8008e36:	69fb      	ldr	r3, [r7, #28]
 8008e38:	015a      	lsls	r2, r3, #5
 8008e3a:	6a3b      	ldr	r3, [r7, #32]
 8008e3c:	4413      	add	r3, r2
 8008e3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e42:	68db      	ldr	r3, [r3, #12]
 8008e44:	69fa      	ldr	r2, [r7, #28]
 8008e46:	0151      	lsls	r1, r2, #5
 8008e48:	6a3a      	ldr	r2, [r7, #32]
 8008e4a:	440a      	add	r2, r1
 8008e4c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008e50:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008e54:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	79db      	ldrb	r3, [r3, #7]
 8008e5a:	2b01      	cmp	r3, #1
 8008e5c:	d123      	bne.n	8008ea6 <USB_HC_StartXfer+0x26e>
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	78db      	ldrb	r3, [r3, #3]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d11f      	bne.n	8008ea6 <USB_HC_StartXfer+0x26e>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008e66:	69fb      	ldr	r3, [r7, #28]
 8008e68:	015a      	lsls	r2, r3, #5
 8008e6a:	6a3b      	ldr	r3, [r7, #32]
 8008e6c:	4413      	add	r3, r2
 8008e6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e72:	685b      	ldr	r3, [r3, #4]
 8008e74:	69fa      	ldr	r2, [r7, #28]
 8008e76:	0151      	lsls	r1, r2, #5
 8008e78:	6a3a      	ldr	r2, [r7, #32]
 8008e7a:	440a      	add	r2, r1
 8008e7c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008e80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008e84:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8008e86:	69fb      	ldr	r3, [r7, #28]
 8008e88:	015a      	lsls	r2, r3, #5
 8008e8a:	6a3b      	ldr	r3, [r7, #32]
 8008e8c:	4413      	add	r3, r2
 8008e8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e92:	68db      	ldr	r3, [r3, #12]
 8008e94:	69fa      	ldr	r2, [r7, #28]
 8008e96:	0151      	lsls	r1, r2, #5
 8008e98:	6a3a      	ldr	r2, [r7, #32]
 8008e9a:	440a      	add	r2, r1
 8008e9c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008ea0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ea4:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	7c9b      	ldrb	r3, [r3, #18]
 8008eaa:	2b01      	cmp	r3, #1
 8008eac:	d003      	beq.n	8008eb6 <USB_HC_StartXfer+0x27e>
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	7c9b      	ldrb	r3, [r3, #18]
 8008eb2:	2b03      	cmp	r3, #3
 8008eb4:	d117      	bne.n	8008ee6 <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8008eba:	2b01      	cmp	r3, #1
 8008ebc:	d113      	bne.n	8008ee6 <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	78db      	ldrb	r3, [r3, #3]
 8008ec2:	2b01      	cmp	r3, #1
 8008ec4:	d10f      	bne.n	8008ee6 <USB_HC_StartXfer+0x2ae>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008ec6:	69fb      	ldr	r3, [r7, #28]
 8008ec8:	015a      	lsls	r2, r3, #5
 8008eca:	6a3b      	ldr	r3, [r7, #32]
 8008ecc:	4413      	add	r3, r2
 8008ece:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	69fa      	ldr	r2, [r7, #28]
 8008ed6:	0151      	lsls	r1, r2, #5
 8008ed8:	6a3a      	ldr	r2, [r7, #32]
 8008eda:	440a      	add	r2, r1
 8008edc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008ee0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008ee4:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	7c9b      	ldrb	r3, [r3, #18]
 8008eea:	2b01      	cmp	r3, #1
 8008eec:	d163      	bne.n	8008fb6 <USB_HC_StartXfer+0x37e>
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	78db      	ldrb	r3, [r3, #3]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d15f      	bne.n	8008fb6 <USB_HC_StartXfer+0x37e>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	68db      	ldr	r3, [r3, #12]
 8008efa:	3b01      	subs	r3, #1
 8008efc:	2b03      	cmp	r3, #3
 8008efe:	d859      	bhi.n	8008fb4 <USB_HC_StartXfer+0x37c>
 8008f00:	a201      	add	r2, pc, #4	@ (adr r2, 8008f08 <USB_HC_StartXfer+0x2d0>)
 8008f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f06:	bf00      	nop
 8008f08:	08008f19 	.word	0x08008f19
 8008f0c:	08008f3b 	.word	0x08008f3b
 8008f10:	08008f5d 	.word	0x08008f5d
 8008f14:	08008f7f 	.word	0x08008f7f
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8008f18:	69fb      	ldr	r3, [r7, #28]
 8008f1a:	015a      	lsls	r2, r3, #5
 8008f1c:	6a3b      	ldr	r3, [r7, #32]
 8008f1e:	4413      	add	r3, r2
 8008f20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	69fa      	ldr	r2, [r7, #28]
 8008f28:	0151      	lsls	r1, r2, #5
 8008f2a:	6a3a      	ldr	r2, [r7, #32]
 8008f2c:	440a      	add	r2, r1
 8008f2e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008f32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f36:	6053      	str	r3, [r2, #4]
          break;
 8008f38:	e03d      	b.n	8008fb6 <USB_HC_StartXfer+0x37e>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8008f3a:	69fb      	ldr	r3, [r7, #28]
 8008f3c:	015a      	lsls	r2, r3, #5
 8008f3e:	6a3b      	ldr	r3, [r7, #32]
 8008f40:	4413      	add	r3, r2
 8008f42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f46:	685b      	ldr	r3, [r3, #4]
 8008f48:	69fa      	ldr	r2, [r7, #28]
 8008f4a:	0151      	lsls	r1, r2, #5
 8008f4c:	6a3a      	ldr	r2, [r7, #32]
 8008f4e:	440a      	add	r2, r1
 8008f50:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008f54:	f043 030e 	orr.w	r3, r3, #14
 8008f58:	6053      	str	r3, [r2, #4]
          break;
 8008f5a:	e02c      	b.n	8008fb6 <USB_HC_StartXfer+0x37e>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8008f5c:	69fb      	ldr	r3, [r7, #28]
 8008f5e:	015a      	lsls	r2, r3, #5
 8008f60:	6a3b      	ldr	r3, [r7, #32]
 8008f62:	4413      	add	r3, r2
 8008f64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f68:	685b      	ldr	r3, [r3, #4]
 8008f6a:	69fa      	ldr	r2, [r7, #28]
 8008f6c:	0151      	lsls	r1, r2, #5
 8008f6e:	6a3a      	ldr	r2, [r7, #32]
 8008f70:	440a      	add	r2, r1
 8008f72:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008f76:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008f7a:	6053      	str	r3, [r2, #4]
          break;
 8008f7c:	e01b      	b.n	8008fb6 <USB_HC_StartXfer+0x37e>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8008f7e:	69fb      	ldr	r3, [r7, #28]
 8008f80:	015a      	lsls	r2, r3, #5
 8008f82:	6a3b      	ldr	r3, [r7, #32]
 8008f84:	4413      	add	r3, r2
 8008f86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	69fa      	ldr	r2, [r7, #28]
 8008f8e:	0151      	lsls	r1, r2, #5
 8008f90:	6a3a      	ldr	r2, [r7, #32]
 8008f92:	440a      	add	r2, r1
 8008f94:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008f98:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008f9c:	6053      	str	r3, [r2, #4]
          break;
 8008f9e:	e00a      	b.n	8008fb6 <USB_HC_StartXfer+0x37e>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8008fa0:	69fb      	ldr	r3, [r7, #28]
 8008fa2:	015a      	lsls	r2, r3, #5
 8008fa4:	6a3b      	ldr	r3, [r7, #32]
 8008fa6:	4413      	add	r3, r2
 8008fa8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008fac:	461a      	mov	r2, r3
 8008fae:	2300      	movs	r3, #0
 8008fb0:	6053      	str	r3, [r2, #4]
 8008fb2:	e000      	b.n	8008fb6 <USB_HC_StartXfer+0x37e>
          break;
 8008fb4:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008fb6:	69fb      	ldr	r3, [r7, #28]
 8008fb8:	015a      	lsls	r2, r3, #5
 8008fba:	6a3b      	ldr	r3, [r7, #32]
 8008fbc:	4413      	add	r3, r2
 8008fbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008fcc:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	78db      	ldrb	r3, [r3, #3]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d004      	beq.n	8008fe0 <USB_HC_StartXfer+0x3a8>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008fd6:	693b      	ldr	r3, [r7, #16]
 8008fd8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008fdc:	613b      	str	r3, [r7, #16]
 8008fde:	e003      	b.n	8008fe8 <USB_HC_StartXfer+0x3b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008fe6:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008fee:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008ff0:	69fb      	ldr	r3, [r7, #28]
 8008ff2:	015a      	lsls	r2, r3, #5
 8008ff4:	6a3b      	ldr	r3, [r7, #32]
 8008ff6:	4413      	add	r3, r2
 8008ff8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ffc:	461a      	mov	r2, r3
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8009002:	79fb      	ldrb	r3, [r7, #7]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d003      	beq.n	8009010 <USB_HC_StartXfer+0x3d8>
  {
    return HAL_OK;
 8009008:	2300      	movs	r3, #0
 800900a:	e055      	b.n	80090b8 <USB_HC_StartXfer+0x480>
 800900c:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	78db      	ldrb	r3, [r3, #3]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d14e      	bne.n	80090b6 <USB_HC_StartXfer+0x47e>
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	6a1b      	ldr	r3, [r3, #32]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d04a      	beq.n	80090b6 <USB_HC_StartXfer+0x47e>
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	79db      	ldrb	r3, [r3, #7]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d146      	bne.n	80090b6 <USB_HC_StartXfer+0x47e>
  {
    switch (hc->ep_type)
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	7c9b      	ldrb	r3, [r3, #18]
 800902c:	2b03      	cmp	r3, #3
 800902e:	d831      	bhi.n	8009094 <USB_HC_StartXfer+0x45c>
 8009030:	a201      	add	r2, pc, #4	@ (adr r2, 8009038 <USB_HC_StartXfer+0x400>)
 8009032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009036:	bf00      	nop
 8009038:	08009049 	.word	0x08009049
 800903c:	0800906d 	.word	0x0800906d
 8009040:	08009049 	.word	0x08009049
 8009044:	0800906d 	.word	0x0800906d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	6a1b      	ldr	r3, [r3, #32]
 800904c:	3303      	adds	r3, #3
 800904e:	089b      	lsrs	r3, r3, #2
 8009050:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8009052:	8afa      	ldrh	r2, [r7, #22]
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009058:	b29b      	uxth	r3, r3
 800905a:	429a      	cmp	r2, r3
 800905c:	d91c      	bls.n	8009098 <USB_HC_StartXfer+0x460>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	699b      	ldr	r3, [r3, #24]
 8009062:	f043 0220 	orr.w	r2, r3, #32
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	619a      	str	r2, [r3, #24]
        }
        break;
 800906a:	e015      	b.n	8009098 <USB_HC_StartXfer+0x460>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	6a1b      	ldr	r3, [r3, #32]
 8009070:	3303      	adds	r3, #3
 8009072:	089b      	lsrs	r3, r3, #2
 8009074:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8009076:	8afa      	ldrh	r2, [r7, #22]
 8009078:	6a3b      	ldr	r3, [r7, #32]
 800907a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800907e:	691b      	ldr	r3, [r3, #16]
 8009080:	b29b      	uxth	r3, r3
 8009082:	429a      	cmp	r2, r3
 8009084:	d90a      	bls.n	800909c <USB_HC_StartXfer+0x464>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	699b      	ldr	r3, [r3, #24]
 800908a:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	619a      	str	r2, [r3, #24]
        }
        break;
 8009092:	e003      	b.n	800909c <USB_HC_StartXfer+0x464>

      default:
        break;
 8009094:	bf00      	nop
 8009096:	e002      	b.n	800909e <USB_HC_StartXfer+0x466>
        break;
 8009098:	bf00      	nop
 800909a:	e000      	b.n	800909e <USB_HC_StartXfer+0x466>
        break;
 800909c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	6999      	ldr	r1, [r3, #24]
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	785a      	ldrb	r2, [r3, #1]
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	6a1b      	ldr	r3, [r3, #32]
 80090aa:	b29b      	uxth	r3, r3
 80090ac:	2000      	movs	r0, #0
 80090ae:	9000      	str	r0, [sp, #0]
 80090b0:	68f8      	ldr	r0, [r7, #12]
 80090b2:	f7ff fa25 	bl	8008500 <USB_WritePacket>
  }

  return HAL_OK;
 80090b6:	2300      	movs	r3, #0
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	3728      	adds	r7, #40	@ 0x28
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}

080090c0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b085      	sub	sp, #20
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80090d2:	695b      	ldr	r3, [r3, #20]
 80090d4:	b29b      	uxth	r3, r3
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3714      	adds	r7, #20
 80090da:	46bd      	mov	sp, r7
 80090dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e0:	4770      	bx	lr

080090e2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80090e2:	b480      	push	{r7}
 80090e4:	b089      	sub	sp, #36	@ 0x24
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	6078      	str	r0, [r7, #4]
 80090ea:	460b      	mov	r3, r1
 80090ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80090f2:	78fb      	ldrb	r3, [r7, #3]
 80090f4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80090f6:	2300      	movs	r3, #0
 80090f8:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80090fa:	69bb      	ldr	r3, [r7, #24]
 80090fc:	015a      	lsls	r2, r3, #5
 80090fe:	69fb      	ldr	r3, [r7, #28]
 8009100:	4413      	add	r3, r2
 8009102:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	0c9b      	lsrs	r3, r3, #18
 800910a:	f003 0303 	and.w	r3, r3, #3
 800910e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8009110:	69bb      	ldr	r3, [r7, #24]
 8009112:	015a      	lsls	r2, r3, #5
 8009114:	69fb      	ldr	r3, [r7, #28]
 8009116:	4413      	add	r3, r2
 8009118:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	0fdb      	lsrs	r3, r3, #31
 8009120:	f003 0301 	and.w	r3, r3, #1
 8009124:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8009126:	69bb      	ldr	r3, [r7, #24]
 8009128:	015a      	lsls	r2, r3, #5
 800912a:	69fb      	ldr	r3, [r7, #28]
 800912c:	4413      	add	r3, r2
 800912e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009132:	685b      	ldr	r3, [r3, #4]
 8009134:	0fdb      	lsrs	r3, r3, #31
 8009136:	f003 0301 	and.w	r3, r3, #1
 800913a:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	689b      	ldr	r3, [r3, #8]
 8009140:	f003 0320 	and.w	r3, r3, #32
 8009144:	2b20      	cmp	r3, #32
 8009146:	d10d      	bne.n	8009164 <USB_HC_Halt+0x82>
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d10a      	bne.n	8009164 <USB_HC_Halt+0x82>
 800914e:	693b      	ldr	r3, [r7, #16]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d005      	beq.n	8009160 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	2b01      	cmp	r3, #1
 8009158:	d002      	beq.n	8009160 <USB_HC_Halt+0x7e>
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	2b03      	cmp	r3, #3
 800915e:	d101      	bne.n	8009164 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8009160:	2300      	movs	r3, #0
 8009162:	e0d8      	b.n	8009316 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d002      	beq.n	8009170 <USB_HC_Halt+0x8e>
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	2b02      	cmp	r3, #2
 800916e:	d173      	bne.n	8009258 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009170:	69bb      	ldr	r3, [r7, #24]
 8009172:	015a      	lsls	r2, r3, #5
 8009174:	69fb      	ldr	r3, [r7, #28]
 8009176:	4413      	add	r3, r2
 8009178:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	69ba      	ldr	r2, [r7, #24]
 8009180:	0151      	lsls	r1, r2, #5
 8009182:	69fa      	ldr	r2, [r7, #28]
 8009184:	440a      	add	r2, r1
 8009186:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800918a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800918e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	689b      	ldr	r3, [r3, #8]
 8009194:	f003 0320 	and.w	r3, r3, #32
 8009198:	2b00      	cmp	r3, #0
 800919a:	d14a      	bne.n	8009232 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091a0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d133      	bne.n	8009210 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80091a8:	69bb      	ldr	r3, [r7, #24]
 80091aa:	015a      	lsls	r2, r3, #5
 80091ac:	69fb      	ldr	r3, [r7, #28]
 80091ae:	4413      	add	r3, r2
 80091b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	69ba      	ldr	r2, [r7, #24]
 80091b8:	0151      	lsls	r1, r2, #5
 80091ba:	69fa      	ldr	r2, [r7, #28]
 80091bc:	440a      	add	r2, r1
 80091be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80091c2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80091c6:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80091c8:	69bb      	ldr	r3, [r7, #24]
 80091ca:	015a      	lsls	r2, r3, #5
 80091cc:	69fb      	ldr	r3, [r7, #28]
 80091ce:	4413      	add	r3, r2
 80091d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	69ba      	ldr	r2, [r7, #24]
 80091d8:	0151      	lsls	r1, r2, #5
 80091da:	69fa      	ldr	r2, [r7, #28]
 80091dc:	440a      	add	r2, r1
 80091de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80091e2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80091e6:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	3301      	adds	r3, #1
 80091ec:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80091f4:	d82e      	bhi.n	8009254 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80091f6:	69bb      	ldr	r3, [r7, #24]
 80091f8:	015a      	lsls	r2, r3, #5
 80091fa:	69fb      	ldr	r3, [r7, #28]
 80091fc:	4413      	add	r3, r2
 80091fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009208:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800920c:	d0ec      	beq.n	80091e8 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800920e:	e081      	b.n	8009314 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009210:	69bb      	ldr	r3, [r7, #24]
 8009212:	015a      	lsls	r2, r3, #5
 8009214:	69fb      	ldr	r3, [r7, #28]
 8009216:	4413      	add	r3, r2
 8009218:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	69ba      	ldr	r2, [r7, #24]
 8009220:	0151      	lsls	r1, r2, #5
 8009222:	69fa      	ldr	r2, [r7, #28]
 8009224:	440a      	add	r2, r1
 8009226:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800922a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800922e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009230:	e070      	b.n	8009314 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009232:	69bb      	ldr	r3, [r7, #24]
 8009234:	015a      	lsls	r2, r3, #5
 8009236:	69fb      	ldr	r3, [r7, #28]
 8009238:	4413      	add	r3, r2
 800923a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	69ba      	ldr	r2, [r7, #24]
 8009242:	0151      	lsls	r1, r2, #5
 8009244:	69fa      	ldr	r2, [r7, #28]
 8009246:	440a      	add	r2, r1
 8009248:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800924c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009250:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009252:	e05f      	b.n	8009314 <USB_HC_Halt+0x232>
            break;
 8009254:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009256:	e05d      	b.n	8009314 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009258:	69bb      	ldr	r3, [r7, #24]
 800925a:	015a      	lsls	r2, r3, #5
 800925c:	69fb      	ldr	r3, [r7, #28]
 800925e:	4413      	add	r3, r2
 8009260:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	69ba      	ldr	r2, [r7, #24]
 8009268:	0151      	lsls	r1, r2, #5
 800926a:	69fa      	ldr	r2, [r7, #28]
 800926c:	440a      	add	r2, r1
 800926e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009272:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009276:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009278:	69fb      	ldr	r3, [r7, #28]
 800927a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800927e:	691b      	ldr	r3, [r3, #16]
 8009280:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009284:	2b00      	cmp	r3, #0
 8009286:	d133      	bne.n	80092f0 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009288:	69bb      	ldr	r3, [r7, #24]
 800928a:	015a      	lsls	r2, r3, #5
 800928c:	69fb      	ldr	r3, [r7, #28]
 800928e:	4413      	add	r3, r2
 8009290:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	69ba      	ldr	r2, [r7, #24]
 8009298:	0151      	lsls	r1, r2, #5
 800929a:	69fa      	ldr	r2, [r7, #28]
 800929c:	440a      	add	r2, r1
 800929e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80092a2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80092a6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80092a8:	69bb      	ldr	r3, [r7, #24]
 80092aa:	015a      	lsls	r2, r3, #5
 80092ac:	69fb      	ldr	r3, [r7, #28]
 80092ae:	4413      	add	r3, r2
 80092b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	69ba      	ldr	r2, [r7, #24]
 80092b8:	0151      	lsls	r1, r2, #5
 80092ba:	69fa      	ldr	r2, [r7, #28]
 80092bc:	440a      	add	r2, r1
 80092be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80092c2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80092c6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	3301      	adds	r3, #1
 80092cc:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80092d4:	d81d      	bhi.n	8009312 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80092d6:	69bb      	ldr	r3, [r7, #24]
 80092d8:	015a      	lsls	r2, r3, #5
 80092da:	69fb      	ldr	r3, [r7, #28]
 80092dc:	4413      	add	r3, r2
 80092de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80092e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80092ec:	d0ec      	beq.n	80092c8 <USB_HC_Halt+0x1e6>
 80092ee:	e011      	b.n	8009314 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80092f0:	69bb      	ldr	r3, [r7, #24]
 80092f2:	015a      	lsls	r2, r3, #5
 80092f4:	69fb      	ldr	r3, [r7, #28]
 80092f6:	4413      	add	r3, r2
 80092f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	69ba      	ldr	r2, [r7, #24]
 8009300:	0151      	lsls	r1, r2, #5
 8009302:	69fa      	ldr	r2, [r7, #28]
 8009304:	440a      	add	r2, r1
 8009306:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800930a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800930e:	6013      	str	r3, [r2, #0]
 8009310:	e000      	b.n	8009314 <USB_HC_Halt+0x232>
          break;
 8009312:	bf00      	nop
    }
  }

  return HAL_OK;
 8009314:	2300      	movs	r3, #0
}
 8009316:	4618      	mov	r0, r3
 8009318:	3724      	adds	r7, #36	@ 0x24
 800931a:	46bd      	mov	sp, r7
 800931c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009320:	4770      	bx	lr

08009322 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009322:	b580      	push	{r7, lr}
 8009324:	b088      	sub	sp, #32
 8009326:	af00      	add	r7, sp, #0
 8009328:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800932a:	2300      	movs	r3, #0
 800932c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8009332:	2300      	movs	r3, #0
 8009334:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f7ff f825 	bl	8008386 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800933c:	2110      	movs	r1, #16
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f7ff f87e 	bl	8008440 <USB_FlushTxFifo>
 8009344:	4603      	mov	r3, r0
 8009346:	2b00      	cmp	r3, #0
 8009348:	d001      	beq.n	800934e <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800934a:	2301      	movs	r3, #1
 800934c:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f7ff f8a8 	bl	80084a4 <USB_FlushRxFifo>
 8009354:	4603      	mov	r3, r0
 8009356:	2b00      	cmp	r3, #0
 8009358:	d001      	beq.n	800935e <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800935a:	2301      	movs	r3, #1
 800935c:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800935e:	2300      	movs	r3, #0
 8009360:	61bb      	str	r3, [r7, #24]
 8009362:	e01f      	b.n	80093a4 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8009364:	69bb      	ldr	r3, [r7, #24]
 8009366:	015a      	lsls	r2, r3, #5
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	4413      	add	r3, r2
 800936c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800937a:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800937c:	693b      	ldr	r3, [r7, #16]
 800937e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009382:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009384:	693b      	ldr	r3, [r7, #16]
 8009386:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800938a:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800938c:	69bb      	ldr	r3, [r7, #24]
 800938e:	015a      	lsls	r2, r3, #5
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	4413      	add	r3, r2
 8009394:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009398:	461a      	mov	r2, r3
 800939a:	693b      	ldr	r3, [r7, #16]
 800939c:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800939e:	69bb      	ldr	r3, [r7, #24]
 80093a0:	3301      	adds	r3, #1
 80093a2:	61bb      	str	r3, [r7, #24]
 80093a4:	69bb      	ldr	r3, [r7, #24]
 80093a6:	2b0f      	cmp	r3, #15
 80093a8:	d9dc      	bls.n	8009364 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80093aa:	2300      	movs	r3, #0
 80093ac:	61bb      	str	r3, [r7, #24]
 80093ae:	e034      	b.n	800941a <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80093b0:	69bb      	ldr	r3, [r7, #24]
 80093b2:	015a      	lsls	r2, r3, #5
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	4413      	add	r3, r2
 80093b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80093c0:	693b      	ldr	r3, [r7, #16]
 80093c2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80093c6:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80093ce:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80093d0:	693b      	ldr	r3, [r7, #16]
 80093d2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80093d6:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80093d8:	69bb      	ldr	r3, [r7, #24]
 80093da:	015a      	lsls	r2, r3, #5
 80093dc:	697b      	ldr	r3, [r7, #20]
 80093de:	4413      	add	r3, r2
 80093e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80093e4:	461a      	mov	r2, r3
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	3301      	adds	r3, #1
 80093ee:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80093f6:	d80c      	bhi.n	8009412 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80093f8:	69bb      	ldr	r3, [r7, #24]
 80093fa:	015a      	lsls	r2, r3, #5
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	4413      	add	r3, r2
 8009400:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800940a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800940e:	d0ec      	beq.n	80093ea <USB_StopHost+0xc8>
 8009410:	e000      	b.n	8009414 <USB_StopHost+0xf2>
        break;
 8009412:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009414:	69bb      	ldr	r3, [r7, #24]
 8009416:	3301      	adds	r3, #1
 8009418:	61bb      	str	r3, [r7, #24]
 800941a:	69bb      	ldr	r3, [r7, #24]
 800941c:	2b0f      	cmp	r3, #15
 800941e:	d9c7      	bls.n	80093b0 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009426:	461a      	mov	r2, r3
 8009428:	f04f 33ff 	mov.w	r3, #4294967295
 800942c:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f04f 32ff 	mov.w	r2, #4294967295
 8009434:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f7fe ff94 	bl	8008364 <USB_EnableGlobalInt>

  return ret;
 800943c:	7ffb      	ldrb	r3, [r7, #31]
}
 800943e:	4618      	mov	r0, r3
 8009440:	3720      	adds	r7, #32
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}

08009446 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009446:	b590      	push	{r4, r7, lr}
 8009448:	b089      	sub	sp, #36	@ 0x24
 800944a:	af04      	add	r7, sp, #16
 800944c:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800944e:	2301      	movs	r3, #1
 8009450:	2202      	movs	r2, #2
 8009452:	2102      	movs	r1, #2
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f000 fc84 	bl	8009d62 <USBH_FindInterface>
 800945a:	4603      	mov	r3, r0
 800945c:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800945e:	7bfb      	ldrb	r3, [r7, #15]
 8009460:	2bff      	cmp	r3, #255	@ 0xff
 8009462:	d002      	beq.n	800946a <USBH_CDC_InterfaceInit+0x24>
 8009464:	7bfb      	ldrb	r3, [r7, #15]
 8009466:	2b01      	cmp	r3, #1
 8009468:	d901      	bls.n	800946e <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800946a:	2302      	movs	r3, #2
 800946c:	e13d      	b.n	80096ea <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800946e:	7bfb      	ldrb	r3, [r7, #15]
 8009470:	4619      	mov	r1, r3
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f000 fc59 	bl	8009d2a <USBH_SelectInterface>
 8009478:	4603      	mov	r3, r0
 800947a:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800947c:	7bbb      	ldrb	r3, [r7, #14]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d001      	beq.n	8009486 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8009482:	2302      	movs	r3, #2
 8009484:	e131      	b.n	80096ea <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800948c:	2050      	movs	r0, #80	@ 0x50
 800948e:	f002 fb6b 	bl	800bb68 <malloc>
 8009492:	4603      	mov	r3, r0
 8009494:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800949c:	69db      	ldr	r3, [r3, #28]
 800949e:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d101      	bne.n	80094aa <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80094a6:	2302      	movs	r3, #2
 80094a8:	e11f      	b.n	80096ea <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80094aa:	2250      	movs	r2, #80	@ 0x50
 80094ac:	2100      	movs	r1, #0
 80094ae:	68b8      	ldr	r0, [r7, #8]
 80094b0:	f003 f973 	bl	800c79a <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80094b4:	7bfb      	ldrb	r3, [r7, #15]
 80094b6:	687a      	ldr	r2, [r7, #4]
 80094b8:	211a      	movs	r1, #26
 80094ba:	fb01 f303 	mul.w	r3, r1, r3
 80094be:	4413      	add	r3, r2
 80094c0:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80094c4:	781b      	ldrb	r3, [r3, #0]
 80094c6:	b25b      	sxtb	r3, r3
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	da15      	bge.n	80094f8 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80094cc:	7bfb      	ldrb	r3, [r7, #15]
 80094ce:	687a      	ldr	r2, [r7, #4]
 80094d0:	211a      	movs	r1, #26
 80094d2:	fb01 f303 	mul.w	r3, r1, r3
 80094d6:	4413      	add	r3, r2
 80094d8:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80094dc:	781a      	ldrb	r2, [r3, #0]
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80094e2:	7bfb      	ldrb	r3, [r7, #15]
 80094e4:	687a      	ldr	r2, [r7, #4]
 80094e6:	211a      	movs	r1, #26
 80094e8:	fb01 f303 	mul.w	r3, r1, r3
 80094ec:	4413      	add	r3, r2
 80094ee:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80094f2:	881a      	ldrh	r2, [r3, #0]
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	785b      	ldrb	r3, [r3, #1]
 80094fc:	4619      	mov	r1, r3
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f001 ffc5 	bl	800b48e <USBH_AllocPipe>
 8009504:	4603      	mov	r3, r0
 8009506:	461a      	mov	r2, r3
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	7819      	ldrb	r1, [r3, #0]
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	7858      	ldrb	r0, [r3, #1]
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009520:	68ba      	ldr	r2, [r7, #8]
 8009522:	8952      	ldrh	r2, [r2, #10]
 8009524:	9202      	str	r2, [sp, #8]
 8009526:	2203      	movs	r2, #3
 8009528:	9201      	str	r2, [sp, #4]
 800952a:	9300      	str	r3, [sp, #0]
 800952c:	4623      	mov	r3, r4
 800952e:	4602      	mov	r2, r0
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f001 ff7d 	bl	800b430 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	781b      	ldrb	r3, [r3, #0]
 800953a:	2200      	movs	r2, #0
 800953c:	4619      	mov	r1, r3
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f002 fa8c 	bl	800ba5c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8009544:	2300      	movs	r3, #0
 8009546:	2200      	movs	r2, #0
 8009548:	210a      	movs	r1, #10
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f000 fc09 	bl	8009d62 <USBH_FindInterface>
 8009550:	4603      	mov	r3, r0
 8009552:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009554:	7bfb      	ldrb	r3, [r7, #15]
 8009556:	2bff      	cmp	r3, #255	@ 0xff
 8009558:	d002      	beq.n	8009560 <USBH_CDC_InterfaceInit+0x11a>
 800955a:	7bfb      	ldrb	r3, [r7, #15]
 800955c:	2b01      	cmp	r3, #1
 800955e:	d901      	bls.n	8009564 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009560:	2302      	movs	r3, #2
 8009562:	e0c2      	b.n	80096ea <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009564:	7bfb      	ldrb	r3, [r7, #15]
 8009566:	687a      	ldr	r2, [r7, #4]
 8009568:	211a      	movs	r1, #26
 800956a:	fb01 f303 	mul.w	r3, r1, r3
 800956e:	4413      	add	r3, r2
 8009570:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009574:	781b      	ldrb	r3, [r3, #0]
 8009576:	b25b      	sxtb	r3, r3
 8009578:	2b00      	cmp	r3, #0
 800957a:	da16      	bge.n	80095aa <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800957c:	7bfb      	ldrb	r3, [r7, #15]
 800957e:	687a      	ldr	r2, [r7, #4]
 8009580:	211a      	movs	r1, #26
 8009582:	fb01 f303 	mul.w	r3, r1, r3
 8009586:	4413      	add	r3, r2
 8009588:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800958c:	781a      	ldrb	r2, [r3, #0]
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009592:	7bfb      	ldrb	r3, [r7, #15]
 8009594:	687a      	ldr	r2, [r7, #4]
 8009596:	211a      	movs	r1, #26
 8009598:	fb01 f303 	mul.w	r3, r1, r3
 800959c:	4413      	add	r3, r2
 800959e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80095a2:	881a      	ldrh	r2, [r3, #0]
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	835a      	strh	r2, [r3, #26]
 80095a8:	e015      	b.n	80095d6 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80095aa:	7bfb      	ldrb	r3, [r7, #15]
 80095ac:	687a      	ldr	r2, [r7, #4]
 80095ae:	211a      	movs	r1, #26
 80095b0:	fb01 f303 	mul.w	r3, r1, r3
 80095b4:	4413      	add	r3, r2
 80095b6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80095ba:	781a      	ldrb	r2, [r3, #0]
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80095c0:	7bfb      	ldrb	r3, [r7, #15]
 80095c2:	687a      	ldr	r2, [r7, #4]
 80095c4:	211a      	movs	r1, #26
 80095c6:	fb01 f303 	mul.w	r3, r1, r3
 80095ca:	4413      	add	r3, r2
 80095cc:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80095d0:	881a      	ldrh	r2, [r3, #0]
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80095d6:	7bfb      	ldrb	r3, [r7, #15]
 80095d8:	687a      	ldr	r2, [r7, #4]
 80095da:	211a      	movs	r1, #26
 80095dc:	fb01 f303 	mul.w	r3, r1, r3
 80095e0:	4413      	add	r3, r2
 80095e2:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80095e6:	781b      	ldrb	r3, [r3, #0]
 80095e8:	b25b      	sxtb	r3, r3
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	da16      	bge.n	800961c <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80095ee:	7bfb      	ldrb	r3, [r7, #15]
 80095f0:	687a      	ldr	r2, [r7, #4]
 80095f2:	211a      	movs	r1, #26
 80095f4:	fb01 f303 	mul.w	r3, r1, r3
 80095f8:	4413      	add	r3, r2
 80095fa:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80095fe:	781a      	ldrb	r2, [r3, #0]
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009604:	7bfb      	ldrb	r3, [r7, #15]
 8009606:	687a      	ldr	r2, [r7, #4]
 8009608:	211a      	movs	r1, #26
 800960a:	fb01 f303 	mul.w	r3, r1, r3
 800960e:	4413      	add	r3, r2
 8009610:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8009614:	881a      	ldrh	r2, [r3, #0]
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	835a      	strh	r2, [r3, #26]
 800961a:	e015      	b.n	8009648 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800961c:	7bfb      	ldrb	r3, [r7, #15]
 800961e:	687a      	ldr	r2, [r7, #4]
 8009620:	211a      	movs	r1, #26
 8009622:	fb01 f303 	mul.w	r3, r1, r3
 8009626:	4413      	add	r3, r2
 8009628:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800962c:	781a      	ldrb	r2, [r3, #0]
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009632:	7bfb      	ldrb	r3, [r7, #15]
 8009634:	687a      	ldr	r2, [r7, #4]
 8009636:	211a      	movs	r1, #26
 8009638:	fb01 f303 	mul.w	r3, r1, r3
 800963c:	4413      	add	r3, r2
 800963e:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8009642:	881a      	ldrh	r2, [r3, #0]
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	7b9b      	ldrb	r3, [r3, #14]
 800964c:	4619      	mov	r1, r3
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f001 ff1d 	bl	800b48e <USBH_AllocPipe>
 8009654:	4603      	mov	r3, r0
 8009656:	461a      	mov	r2, r3
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	7bdb      	ldrb	r3, [r3, #15]
 8009660:	4619      	mov	r1, r3
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f001 ff13 	bl	800b48e <USBH_AllocPipe>
 8009668:	4603      	mov	r3, r0
 800966a:	461a      	mov	r2, r3
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	7b59      	ldrb	r1, [r3, #13]
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	7b98      	ldrb	r0, [r3, #14]
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009684:	68ba      	ldr	r2, [r7, #8]
 8009686:	8b12      	ldrh	r2, [r2, #24]
 8009688:	9202      	str	r2, [sp, #8]
 800968a:	2202      	movs	r2, #2
 800968c:	9201      	str	r2, [sp, #4]
 800968e:	9300      	str	r3, [sp, #0]
 8009690:	4623      	mov	r3, r4
 8009692:	4602      	mov	r2, r0
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f001 fecb 	bl	800b430 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	7b19      	ldrb	r1, [r3, #12]
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	7bd8      	ldrb	r0, [r3, #15]
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80096ae:	68ba      	ldr	r2, [r7, #8]
 80096b0:	8b52      	ldrh	r2, [r2, #26]
 80096b2:	9202      	str	r2, [sp, #8]
 80096b4:	2202      	movs	r2, #2
 80096b6:	9201      	str	r2, [sp, #4]
 80096b8:	9300      	str	r3, [sp, #0]
 80096ba:	4623      	mov	r3, r4
 80096bc:	4602      	mov	r2, r0
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f001 feb6 	bl	800b430 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	2200      	movs	r2, #0
 80096c8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	7b5b      	ldrb	r3, [r3, #13]
 80096d0:	2200      	movs	r2, #0
 80096d2:	4619      	mov	r1, r3
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f002 f9c1 	bl	800ba5c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	7b1b      	ldrb	r3, [r3, #12]
 80096de:	2200      	movs	r2, #0
 80096e0:	4619      	mov	r1, r3
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f002 f9ba 	bl	800ba5c <USBH_LL_SetToggle>

  return USBH_OK;
 80096e8:	2300      	movs	r3, #0
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	3714      	adds	r7, #20
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd90      	pop	{r4, r7, pc}

080096f2 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80096f2:	b580      	push	{r7, lr}
 80096f4:	b084      	sub	sp, #16
 80096f6:	af00      	add	r7, sp, #0
 80096f8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009700:	69db      	ldr	r3, [r3, #28]
 8009702:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	781b      	ldrb	r3, [r3, #0]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d00e      	beq.n	800972a <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	781b      	ldrb	r3, [r3, #0]
 8009710:	4619      	mov	r1, r3
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f001 feab 	bl	800b46e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	781b      	ldrb	r3, [r3, #0]
 800971c:	4619      	mov	r1, r3
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f001 fed6 	bl	800b4d0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	2200      	movs	r2, #0
 8009728:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	7b1b      	ldrb	r3, [r3, #12]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d00e      	beq.n	8009750 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	7b1b      	ldrb	r3, [r3, #12]
 8009736:	4619      	mov	r1, r3
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f001 fe98 	bl	800b46e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	7b1b      	ldrb	r3, [r3, #12]
 8009742:	4619      	mov	r1, r3
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f001 fec3 	bl	800b4d0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	2200      	movs	r2, #0
 800974e:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	7b5b      	ldrb	r3, [r3, #13]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d00e      	beq.n	8009776 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	7b5b      	ldrb	r3, [r3, #13]
 800975c:	4619      	mov	r1, r3
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f001 fe85 	bl	800b46e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	7b5b      	ldrb	r3, [r3, #13]
 8009768:	4619      	mov	r1, r3
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f001 feb0 	bl	800b4d0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	2200      	movs	r2, #0
 8009774:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800977c:	69db      	ldr	r3, [r3, #28]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d00b      	beq.n	800979a <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009788:	69db      	ldr	r3, [r3, #28]
 800978a:	4618      	mov	r0, r3
 800978c:	f002 f9f4 	bl	800bb78 <free>
    phost->pActiveClass->pData = 0U;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009796:	2200      	movs	r2, #0
 8009798:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800979a:	2300      	movs	r3, #0
}
 800979c:	4618      	mov	r0, r3
 800979e:	3710      	adds	r7, #16
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}

080097a4 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b084      	sub	sp, #16
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80097b2:	69db      	ldr	r3, [r3, #28]
 80097b4:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	3340      	adds	r3, #64	@ 0x40
 80097ba:	4619      	mov	r1, r3
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f000 f8b2 	bl	8009926 <GetLineCoding>
 80097c2:	4603      	mov	r3, r0
 80097c4:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80097c6:	7afb      	ldrb	r3, [r7, #11]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d105      	bne.n	80097d8 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80097d2:	2102      	movs	r1, #2
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80097d8:	7afb      	ldrb	r3, [r7, #11]
}
 80097da:	4618      	mov	r0, r3
 80097dc:	3710      	adds	r7, #16
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}
	...

080097e4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b084      	sub	sp, #16
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80097ec:	2301      	movs	r3, #1
 80097ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80097f0:	2300      	movs	r3, #0
 80097f2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80097fa:	69db      	ldr	r3, [r3, #28]
 80097fc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8009804:	2b04      	cmp	r3, #4
 8009806:	d877      	bhi.n	80098f8 <USBH_CDC_Process+0x114>
 8009808:	a201      	add	r2, pc, #4	@ (adr r2, 8009810 <USBH_CDC_Process+0x2c>)
 800980a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800980e:	bf00      	nop
 8009810:	08009825 	.word	0x08009825
 8009814:	0800982b 	.word	0x0800982b
 8009818:	0800985b 	.word	0x0800985b
 800981c:	080098cf 	.word	0x080098cf
 8009820:	080098dd 	.word	0x080098dd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8009824:	2300      	movs	r3, #0
 8009826:	73fb      	strb	r3, [r7, #15]
      break;
 8009828:	e06d      	b.n	8009906 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800982e:	4619      	mov	r1, r3
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f000 f897 	bl	8009964 <SetLineCoding>
 8009836:	4603      	mov	r3, r0
 8009838:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800983a:	7bbb      	ldrb	r3, [r7, #14]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d104      	bne.n	800984a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	2202      	movs	r2, #2
 8009844:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009848:	e058      	b.n	80098fc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800984a:	7bbb      	ldrb	r3, [r7, #14]
 800984c:	2b01      	cmp	r3, #1
 800984e:	d055      	beq.n	80098fc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	2204      	movs	r2, #4
 8009854:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8009858:	e050      	b.n	80098fc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	3340      	adds	r3, #64	@ 0x40
 800985e:	4619      	mov	r1, r3
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f000 f860 	bl	8009926 <GetLineCoding>
 8009866:	4603      	mov	r3, r0
 8009868:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800986a:	7bbb      	ldrb	r3, [r7, #14]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d126      	bne.n	80098be <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	2200      	movs	r2, #0
 8009874:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009882:	791b      	ldrb	r3, [r3, #4]
 8009884:	429a      	cmp	r2, r3
 8009886:	d13b      	bne.n	8009900 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800988e:	68bb      	ldr	r3, [r7, #8]
 8009890:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009892:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009894:	429a      	cmp	r2, r3
 8009896:	d133      	bne.n	8009900 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80098a2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80098a4:	429a      	cmp	r2, r3
 80098a6:	d12b      	bne.n	8009900 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80098b0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80098b2:	429a      	cmp	r2, r3
 80098b4:	d124      	bne.n	8009900 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f000 f958 	bl	8009b6c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80098bc:	e020      	b.n	8009900 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80098be:	7bbb      	ldrb	r3, [r7, #14]
 80098c0:	2b01      	cmp	r3, #1
 80098c2:	d01d      	beq.n	8009900 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	2204      	movs	r2, #4
 80098c8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80098cc:	e018      	b.n	8009900 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f000 f867 	bl	80099a2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f000 f8da 	bl	8009a8e <CDC_ProcessReception>
      break;
 80098da:	e014      	b.n	8009906 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80098dc:	2100      	movs	r1, #0
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f001 f81e 	bl	800a920 <USBH_ClrFeature>
 80098e4:	4603      	mov	r3, r0
 80098e6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80098e8:	7bbb      	ldrb	r3, [r7, #14]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d10a      	bne.n	8009904 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	2200      	movs	r2, #0
 80098f2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 80098f6:	e005      	b.n	8009904 <USBH_CDC_Process+0x120>

    default:
      break;
 80098f8:	bf00      	nop
 80098fa:	e004      	b.n	8009906 <USBH_CDC_Process+0x122>
      break;
 80098fc:	bf00      	nop
 80098fe:	e002      	b.n	8009906 <USBH_CDC_Process+0x122>
      break;
 8009900:	bf00      	nop
 8009902:	e000      	b.n	8009906 <USBH_CDC_Process+0x122>
      break;
 8009904:	bf00      	nop

  }

  return status;
 8009906:	7bfb      	ldrb	r3, [r7, #15]
}
 8009908:	4618      	mov	r0, r3
 800990a:	3710      	adds	r7, #16
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}

08009910 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009910:	b480      	push	{r7}
 8009912:	b083      	sub	sp, #12
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009918:	2300      	movs	r3, #0
}
 800991a:	4618      	mov	r0, r3
 800991c:	370c      	adds	r7, #12
 800991e:	46bd      	mov	sp, r7
 8009920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009924:	4770      	bx	lr

08009926 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8009926:	b580      	push	{r7, lr}
 8009928:	b082      	sub	sp, #8
 800992a:	af00      	add	r7, sp, #0
 800992c:	6078      	str	r0, [r7, #4]
 800992e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	22a1      	movs	r2, #161	@ 0xa1
 8009934:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2221      	movs	r2, #33	@ 0x21
 800993a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2200      	movs	r2, #0
 8009940:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2200      	movs	r2, #0
 8009946:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2207      	movs	r2, #7
 800994c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	2207      	movs	r2, #7
 8009952:	4619      	mov	r1, r3
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f001 fb17 	bl	800af88 <USBH_CtlReq>
 800995a:	4603      	mov	r3, r0
}
 800995c:	4618      	mov	r0, r3
 800995e:	3708      	adds	r7, #8
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}

08009964 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b082      	sub	sp, #8
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
 800996c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2221      	movs	r2, #33	@ 0x21
 8009972:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2220      	movs	r2, #32
 8009978:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2200      	movs	r2, #0
 800997e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2200      	movs	r2, #0
 8009984:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2207      	movs	r2, #7
 800998a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	2207      	movs	r2, #7
 8009990:	4619      	mov	r1, r3
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f001 faf8 	bl	800af88 <USBH_CtlReq>
 8009998:	4603      	mov	r3, r0
}
 800999a:	4618      	mov	r0, r3
 800999c:	3708      	adds	r7, #8
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}

080099a2 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80099a2:	b580      	push	{r7, lr}
 80099a4:	b086      	sub	sp, #24
 80099a6:	af02      	add	r7, sp, #8
 80099a8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80099b0:	69db      	ldr	r3, [r3, #28]
 80099b2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80099b4:	2300      	movs	r3, #0
 80099b6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80099be:	2b01      	cmp	r3, #1
 80099c0:	d002      	beq.n	80099c8 <CDC_ProcessTransmission+0x26>
 80099c2:	2b02      	cmp	r3, #2
 80099c4:	d023      	beq.n	8009a0e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80099c6:	e05e      	b.n	8009a86 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099cc:	68fa      	ldr	r2, [r7, #12]
 80099ce:	8b12      	ldrh	r2, [r2, #24]
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d90b      	bls.n	80099ec <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	69d9      	ldr	r1, [r3, #28]
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	8b1a      	ldrh	r2, [r3, #24]
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	7b5b      	ldrb	r3, [r3, #13]
 80099e0:	2001      	movs	r0, #1
 80099e2:	9000      	str	r0, [sp, #0]
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f001 fce0 	bl	800b3aa <USBH_BulkSendData>
 80099ea:	e00b      	b.n	8009a04 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 80099f4:	b29a      	uxth	r2, r3
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	7b5b      	ldrb	r3, [r3, #13]
 80099fa:	2001      	movs	r0, #1
 80099fc:	9000      	str	r0, [sp, #0]
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f001 fcd3 	bl	800b3aa <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	2202      	movs	r2, #2
 8009a08:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8009a0c:	e03b      	b.n	8009a86 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	7b5b      	ldrb	r3, [r3, #13]
 8009a12:	4619      	mov	r1, r3
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f001 fff7 	bl	800ba08 <USBH_LL_GetURBState>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8009a1e:	7afb      	ldrb	r3, [r7, #11]
 8009a20:	2b01      	cmp	r3, #1
 8009a22:	d128      	bne.n	8009a76 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a28:	68fa      	ldr	r2, [r7, #12]
 8009a2a:	8b12      	ldrh	r2, [r2, #24]
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	d90e      	bls.n	8009a4e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a34:	68fa      	ldr	r2, [r7, #12]
 8009a36:	8b12      	ldrh	r2, [r2, #24]
 8009a38:	1a9a      	subs	r2, r3, r2
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	69db      	ldr	r3, [r3, #28]
 8009a42:	68fa      	ldr	r2, [r7, #12]
 8009a44:	8b12      	ldrh	r2, [r2, #24]
 8009a46:	441a      	add	r2, r3
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	61da      	str	r2, [r3, #28]
 8009a4c:	e002      	b.n	8009a54 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	2200      	movs	r2, #0
 8009a52:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d004      	beq.n	8009a66 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	2201      	movs	r2, #1
 8009a60:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8009a64:	e00e      	b.n	8009a84 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f000 f868 	bl	8009b44 <USBH_CDC_TransmitCallback>
      break;
 8009a74:	e006      	b.n	8009a84 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8009a76:	7afb      	ldrb	r3, [r7, #11]
 8009a78:	2b02      	cmp	r3, #2
 8009a7a:	d103      	bne.n	8009a84 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	2201      	movs	r2, #1
 8009a80:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8009a84:	bf00      	nop
  }
}
 8009a86:	bf00      	nop
 8009a88:	3710      	adds	r7, #16
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}

08009a8e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8009a8e:	b580      	push	{r7, lr}
 8009a90:	b086      	sub	sp, #24
 8009a92:	af00      	add	r7, sp, #0
 8009a94:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009a9c:	69db      	ldr	r3, [r3, #28]
 8009a9e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8009aa4:	697b      	ldr	r3, [r7, #20]
 8009aa6:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8009aaa:	2b03      	cmp	r3, #3
 8009aac:	d002      	beq.n	8009ab4 <CDC_ProcessReception+0x26>
 8009aae:	2b04      	cmp	r3, #4
 8009ab0:	d00e      	beq.n	8009ad0 <CDC_ProcessReception+0x42>
        /* .. */
      }
      break;

    default:
      break;
 8009ab2:	e043      	b.n	8009b3c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8009ab4:	697b      	ldr	r3, [r7, #20]
 8009ab6:	6a19      	ldr	r1, [r3, #32]
 8009ab8:	697b      	ldr	r3, [r7, #20]
 8009aba:	8b5a      	ldrh	r2, [r3, #26]
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	7b1b      	ldrb	r3, [r3, #12]
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f001 fc97 	bl	800b3f4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	2204      	movs	r2, #4
 8009aca:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8009ace:	e035      	b.n	8009b3c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8009ad0:	697b      	ldr	r3, [r7, #20]
 8009ad2:	7b1b      	ldrb	r3, [r3, #12]
 8009ad4:	4619      	mov	r1, r3
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f001 ff96 	bl	800ba08 <USBH_LL_GetURBState>
 8009adc:	4603      	mov	r3, r0
 8009ade:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8009ae0:	7cfb      	ldrb	r3, [r7, #19]
 8009ae2:	2b01      	cmp	r3, #1
 8009ae4:	d129      	bne.n	8009b3a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	7b1b      	ldrb	r3, [r3, #12]
 8009aea:	4619      	mov	r1, r3
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f001 fef9 	bl	800b8e4 <USBH_LL_GetLastXferSize>
 8009af2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009af8:	68fa      	ldr	r2, [r7, #12]
 8009afa:	429a      	cmp	r2, r3
 8009afc:	d016      	beq.n	8009b2c <CDC_ProcessReception+0x9e>
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	8b5b      	ldrh	r3, [r3, #26]
 8009b02:	461a      	mov	r2, r3
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d110      	bne.n	8009b2c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	1ad2      	subs	r2, r2, r3
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	6a1a      	ldr	r2, [r3, #32]
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	441a      	add	r2, r3
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	2203      	movs	r2, #3
 8009b26:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8009b2a:	e006      	b.n	8009b3a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f000 f80f 	bl	8009b58 <USBH_CDC_ReceiveCallback>
      break;
 8009b3a:	bf00      	nop
  }
}
 8009b3c:	bf00      	nop
 8009b3e:	3718      	adds	r7, #24
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}

08009b44 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8009b44:	b480      	push	{r7}
 8009b46:	b083      	sub	sp, #12
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009b4c:	bf00      	nop
 8009b4e:	370c      	adds	r7, #12
 8009b50:	46bd      	mov	sp, r7
 8009b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b56:	4770      	bx	lr

08009b58 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b083      	sub	sp, #12
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009b60:	bf00      	nop
 8009b62:	370c      	adds	r7, #12
 8009b64:	46bd      	mov	sp, r7
 8009b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6a:	4770      	bx	lr

08009b6c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b083      	sub	sp, #12
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009b74:	bf00      	nop
 8009b76:	370c      	adds	r7, #12
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7e:	4770      	bx	lr

08009b80 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b084      	sub	sp, #16
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	60f8      	str	r0, [r7, #12]
 8009b88:	60b9      	str	r1, [r7, #8]
 8009b8a:	4613      	mov	r3, r2
 8009b8c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d101      	bne.n	8009b98 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009b94:	2302      	movs	r3, #2
 8009b96:	e029      	b.n	8009bec <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	79fa      	ldrb	r2, [r7, #7]
 8009b9c:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	2200      	movs	r2, #0
 8009bac:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8009bb0:	68f8      	ldr	r0, [r7, #12]
 8009bb2:	f000 f81f 	bl	8009bf4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	2200      	movs	r2, #0
 8009bba:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d003      	beq.n	8009be4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	68ba      	ldr	r2, [r7, #8]
 8009be0:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8009be4:	68f8      	ldr	r0, [r7, #12]
 8009be6:	f001 fdc9 	bl	800b77c <USBH_LL_Init>

  return USBH_OK;
 8009bea:	2300      	movs	r3, #0
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	3710      	adds	r7, #16
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}

08009bf4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b084      	sub	sp, #16
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	60fb      	str	r3, [r7, #12]
 8009c00:	e009      	b.n	8009c16 <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 8009c02:	687a      	ldr	r2, [r7, #4]
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	33e0      	adds	r3, #224	@ 0xe0
 8009c08:	009b      	lsls	r3, r3, #2
 8009c0a:	4413      	add	r3, r2
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	3301      	adds	r3, #1
 8009c14:	60fb      	str	r3, [r7, #12]
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	2b0f      	cmp	r3, #15
 8009c1a:	d9f2      	bls.n	8009c02 <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	60fb      	str	r3, [r7, #12]
 8009c20:	e009      	b.n	8009c36 <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 8009c22:	687a      	ldr	r2, [r7, #4]
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	4413      	add	r3, r2
 8009c28:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	3301      	adds	r3, #1
 8009c34:	60fb      	str	r3, [r7, #12]
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c3c:	d3f1      	bcc.n	8009c22 <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2200      	movs	r2, #0
 8009c42:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2200      	movs	r2, #0
 8009c48:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2201      	movs	r2, #1
 8009c4e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2200      	movs	r2, #0
 8009c54:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2201      	movs	r2, #1
 8009c5c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2240      	movs	r2, #64	@ 0x40
 8009c62:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2200      	movs	r2, #0
 8009c68:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2201      	movs	r2, #1
 8009c76:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2200      	movs	r2, #0
 8009c86:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	331c      	adds	r3, #28
 8009c8e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009c92:	2100      	movs	r1, #0
 8009c94:	4618      	mov	r0, r3
 8009c96:	f002 fd80 	bl	800c79a <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009ca0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009ca4:	2100      	movs	r1, #0
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f002 fd77 	bl	800c79a <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8009cb2:	2212      	movs	r2, #18
 8009cb4:	2100      	movs	r1, #0
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f002 fd6f 	bl	800c79a <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009cc2:	223e      	movs	r2, #62	@ 0x3e
 8009cc4:	2100      	movs	r1, #0
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f002 fd67 	bl	800c79a <memset>

  return USBH_OK;
 8009ccc:	2300      	movs	r3, #0
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	3710      	adds	r7, #16
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}

08009cd6 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009cd6:	b480      	push	{r7}
 8009cd8:	b085      	sub	sp, #20
 8009cda:	af00      	add	r7, sp, #0
 8009cdc:	6078      	str	r0, [r7, #4]
 8009cde:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d016      	beq.n	8009d18 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d10e      	bne.n	8009d12 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009cfa:	1c59      	adds	r1, r3, #1
 8009cfc:	687a      	ldr	r2, [r7, #4]
 8009cfe:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8009d02:	687a      	ldr	r2, [r7, #4]
 8009d04:	33de      	adds	r3, #222	@ 0xde
 8009d06:	6839      	ldr	r1, [r7, #0]
 8009d08:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	73fb      	strb	r3, [r7, #15]
 8009d10:	e004      	b.n	8009d1c <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009d12:	2302      	movs	r3, #2
 8009d14:	73fb      	strb	r3, [r7, #15]
 8009d16:	e001      	b.n	8009d1c <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009d18:	2302      	movs	r3, #2
 8009d1a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3714      	adds	r7, #20
 8009d22:	46bd      	mov	sp, r7
 8009d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d28:	4770      	bx	lr

08009d2a <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009d2a:	b480      	push	{r7}
 8009d2c:	b085      	sub	sp, #20
 8009d2e:	af00      	add	r7, sp, #0
 8009d30:	6078      	str	r0, [r7, #4]
 8009d32:	460b      	mov	r3, r1
 8009d34:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009d36:	2300      	movs	r3, #0
 8009d38:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8009d40:	78fa      	ldrb	r2, [r7, #3]
 8009d42:	429a      	cmp	r2, r3
 8009d44:	d204      	bcs.n	8009d50 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	78fa      	ldrb	r2, [r7, #3]
 8009d4a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8009d4e:	e001      	b.n	8009d54 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009d50:	2302      	movs	r3, #2
 8009d52:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	3714      	adds	r7, #20
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d60:	4770      	bx	lr

08009d62 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009d62:	b480      	push	{r7}
 8009d64:	b087      	sub	sp, #28
 8009d66:	af00      	add	r7, sp, #0
 8009d68:	6078      	str	r0, [r7, #4]
 8009d6a:	4608      	mov	r0, r1
 8009d6c:	4611      	mov	r1, r2
 8009d6e:	461a      	mov	r2, r3
 8009d70:	4603      	mov	r3, r0
 8009d72:	70fb      	strb	r3, [r7, #3]
 8009d74:	460b      	mov	r3, r1
 8009d76:	70bb      	strb	r3, [r7, #2]
 8009d78:	4613      	mov	r3, r2
 8009d7a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009d80:	2300      	movs	r3, #0
 8009d82:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009d8a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009d8c:	e025      	b.n	8009dda <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009d8e:	7dfb      	ldrb	r3, [r7, #23]
 8009d90:	221a      	movs	r2, #26
 8009d92:	fb02 f303 	mul.w	r3, r2, r3
 8009d96:	3308      	adds	r3, #8
 8009d98:	68fa      	ldr	r2, [r7, #12]
 8009d9a:	4413      	add	r3, r2
 8009d9c:	3302      	adds	r3, #2
 8009d9e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009da0:	693b      	ldr	r3, [r7, #16]
 8009da2:	795b      	ldrb	r3, [r3, #5]
 8009da4:	78fa      	ldrb	r2, [r7, #3]
 8009da6:	429a      	cmp	r2, r3
 8009da8:	d002      	beq.n	8009db0 <USBH_FindInterface+0x4e>
 8009daa:	78fb      	ldrb	r3, [r7, #3]
 8009dac:	2bff      	cmp	r3, #255	@ 0xff
 8009dae:	d111      	bne.n	8009dd4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009db0:	693b      	ldr	r3, [r7, #16]
 8009db2:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009db4:	78ba      	ldrb	r2, [r7, #2]
 8009db6:	429a      	cmp	r2, r3
 8009db8:	d002      	beq.n	8009dc0 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009dba:	78bb      	ldrb	r3, [r7, #2]
 8009dbc:	2bff      	cmp	r3, #255	@ 0xff
 8009dbe:	d109      	bne.n	8009dd4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009dc0:	693b      	ldr	r3, [r7, #16]
 8009dc2:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009dc4:	787a      	ldrb	r2, [r7, #1]
 8009dc6:	429a      	cmp	r2, r3
 8009dc8:	d002      	beq.n	8009dd0 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009dca:	787b      	ldrb	r3, [r7, #1]
 8009dcc:	2bff      	cmp	r3, #255	@ 0xff
 8009dce:	d101      	bne.n	8009dd4 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009dd0:	7dfb      	ldrb	r3, [r7, #23]
 8009dd2:	e006      	b.n	8009de2 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009dd4:	7dfb      	ldrb	r3, [r7, #23]
 8009dd6:	3301      	adds	r3, #1
 8009dd8:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009dda:	7dfb      	ldrb	r3, [r7, #23]
 8009ddc:	2b01      	cmp	r3, #1
 8009dde:	d9d6      	bls.n	8009d8e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009de0:	23ff      	movs	r3, #255	@ 0xff
}
 8009de2:	4618      	mov	r0, r3
 8009de4:	371c      	adds	r7, #28
 8009de6:	46bd      	mov	sp, r7
 8009de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dec:	4770      	bx	lr

08009dee <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8009dee:	b580      	push	{r7, lr}
 8009df0:	b082      	sub	sp, #8
 8009df2:	af00      	add	r7, sp, #0
 8009df4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f001 fcfc 	bl	800b7f4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8009dfc:	2101      	movs	r1, #1
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f001 fe15 	bl	800ba2e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009e04:	2300      	movs	r3, #0
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3708      	adds	r7, #8
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}
	...

08009e10 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b088      	sub	sp, #32
 8009e14:	af04      	add	r7, sp, #16
 8009e16:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009e18:	2302      	movs	r3, #2
 8009e1a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8009e26:	b2db      	uxtb	r3, r3
 8009e28:	2b01      	cmp	r3, #1
 8009e2a:	d102      	bne.n	8009e32 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2203      	movs	r2, #3
 8009e30:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	781b      	ldrb	r3, [r3, #0]
 8009e36:	b2db      	uxtb	r3, r3
 8009e38:	2b0b      	cmp	r3, #11
 8009e3a:	f200 81bc 	bhi.w	800a1b6 <USBH_Process+0x3a6>
 8009e3e:	a201      	add	r2, pc, #4	@ (adr r2, 8009e44 <USBH_Process+0x34>)
 8009e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e44:	08009e75 	.word	0x08009e75
 8009e48:	08009ea7 	.word	0x08009ea7
 8009e4c:	08009f11 	.word	0x08009f11
 8009e50:	0800a151 	.word	0x0800a151
 8009e54:	0800a1b7 	.word	0x0800a1b7
 8009e58:	08009fb1 	.word	0x08009fb1
 8009e5c:	0800a0f7 	.word	0x0800a0f7
 8009e60:	08009fe7 	.word	0x08009fe7
 8009e64:	0800a007 	.word	0x0800a007
 8009e68:	0800a025 	.word	0x0800a025
 8009e6c:	0800a069 	.word	0x0800a069
 8009e70:	0800a139 	.word	0x0800a139
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8009e7a:	b2db      	uxtb	r3, r3
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	f000 819c 	beq.w	800a1ba <USBH_Process+0x3aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	2201      	movs	r2, #1
 8009e86:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009e88:	20c8      	movs	r0, #200	@ 0xc8
 8009e8a:	f001 fe1a 	bl	800bac2 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f001 fd0d 	bl	800b8ae <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2200      	movs	r2, #0
 8009e98:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8009ea4:	e189      	b.n	800a1ba <USBH_Process+0x3aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8009eac:	b2db      	uxtb	r3, r3
 8009eae:	2b01      	cmp	r3, #1
 8009eb0:	d107      	bne.n	8009ec2 <USBH_Process+0xb2>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2202      	movs	r2, #2
 8009ebe:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009ec0:	e18a      	b.n	800a1d8 <USBH_Process+0x3c8>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8009ec8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009ecc:	d914      	bls.n	8009ef8 <USBH_Process+0xe8>
          phost->device.RstCnt++;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8009ed4:	3301      	adds	r3, #1
 8009ed6:	b2da      	uxtb	r2, r3
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8009ee4:	2b03      	cmp	r3, #3
 8009ee6:	d903      	bls.n	8009ef0 <USBH_Process+0xe0>
            phost->gState = HOST_ABORT_STATE;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	220d      	movs	r2, #13
 8009eec:	701a      	strb	r2, [r3, #0]
      break;
 8009eee:	e173      	b.n	800a1d8 <USBH_Process+0x3c8>
            phost->gState = HOST_IDLE;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	701a      	strb	r2, [r3, #0]
      break;
 8009ef6:	e16f      	b.n	800a1d8 <USBH_Process+0x3c8>
          phost->Timeout += 10U;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8009efe:	f103 020a 	add.w	r2, r3, #10
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8009f08:	200a      	movs	r0, #10
 8009f0a:	f001 fdda 	bl	800bac2 <USBH_Delay>
      break;
 8009f0e:	e163      	b.n	800a1d8 <USBH_Process+0x3c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d005      	beq.n	8009f26 <USBH_Process+0x116>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009f20:	2104      	movs	r1, #4
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009f26:	2064      	movs	r0, #100	@ 0x64
 8009f28:	f001 fdcb 	bl	800bac2 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	f001 fc97 	bl	800b860 <USBH_LL_GetSpeed>
 8009f32:	4603      	mov	r3, r0
 8009f34:	461a      	mov	r2, r3
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2205      	movs	r2, #5
 8009f40:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009f42:	2100      	movs	r1, #0
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f001 faa2 	bl	800b48e <USBH_AllocPipe>
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	461a      	mov	r2, r3
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009f52:	2180      	movs	r1, #128	@ 0x80
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f001 fa9a 	bl	800b48e <USBH_AllocPipe>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	461a      	mov	r2, r3
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	7919      	ldrb	r1, [r3, #4]
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009f72:	687a      	ldr	r2, [r7, #4]
 8009f74:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009f76:	9202      	str	r2, [sp, #8]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	9201      	str	r2, [sp, #4]
 8009f7c:	9300      	str	r3, [sp, #0]
 8009f7e:	4603      	mov	r3, r0
 8009f80:	2280      	movs	r2, #128	@ 0x80
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f001 fa54 	bl	800b430 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	7959      	ldrb	r1, [r3, #5]
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009f98:	687a      	ldr	r2, [r7, #4]
 8009f9a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009f9c:	9202      	str	r2, [sp, #8]
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	9201      	str	r2, [sp, #4]
 8009fa2:	9300      	str	r3, [sp, #0]
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	6878      	ldr	r0, [r7, #4]
 8009faa:	f001 fa41 	bl	800b430 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009fae:	e113      	b.n	800a1d8 <USBH_Process+0x3c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f000 f917 	bl	800a1e4 <USBH_HandleEnum>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009fba:	7bbb      	ldrb	r3, [r7, #14]
 8009fbc:	b2db      	uxtb	r3, r3
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	f040 80fd 	bne.w	800a1be <USBH_Process+0x3ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8009fd2:	2b01      	cmp	r3, #1
 8009fd4:	d103      	bne.n	8009fde <USBH_Process+0x1ce>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2208      	movs	r2, #8
 8009fda:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8009fdc:	e0ef      	b.n	800a1be <USBH_Process+0x3ae>
          phost->gState = HOST_INPUT;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2207      	movs	r2, #7
 8009fe2:	701a      	strb	r2, [r3, #0]
      break;
 8009fe4:	e0eb      	b.n	800a1be <USBH_Process+0x3ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	f000 80e8 	beq.w	800a1c2 <USBH_Process+0x3b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009ff8:	2101      	movs	r1, #1
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2208      	movs	r2, #8
 800a002:	701a      	strb	r2, [r3, #0]
#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 800a004:	e0dd      	b.n	800a1c2 <USBH_Process+0x3b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800a00c:	4619      	mov	r1, r3
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f000 fc3f 	bl	800a892 <USBH_SetCfg>
 800a014:	4603      	mov	r3, r0
 800a016:	2b00      	cmp	r3, #0
 800a018:	f040 80d5 	bne.w	800a1c6 <USBH_Process+0x3b6>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2209      	movs	r2, #9
 800a020:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a022:	e0d0      	b.n	800a1c6 <USBH_Process+0x3b6>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800a02a:	f003 0320 	and.w	r3, r3, #32
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d016      	beq.n	800a060 <USBH_Process+0x250>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800a032:	2101      	movs	r1, #1
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f000 fc4f 	bl	800a8d8 <USBH_SetFeature>
 800a03a:	4603      	mov	r3, r0
 800a03c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a03e:	7bbb      	ldrb	r3, [r7, #14]
 800a040:	b2db      	uxtb	r3, r3
 800a042:	2b00      	cmp	r3, #0
 800a044:	d103      	bne.n	800a04e <USBH_Process+0x23e>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	220a      	movs	r2, #10
 800a04a:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a04c:	e0bd      	b.n	800a1ca <USBH_Process+0x3ba>
        else if (status == USBH_NOT_SUPPORTED)
 800a04e:	7bbb      	ldrb	r3, [r7, #14]
 800a050:	b2db      	uxtb	r3, r3
 800a052:	2b03      	cmp	r3, #3
 800a054:	f040 80b9 	bne.w	800a1ca <USBH_Process+0x3ba>
          phost->gState = HOST_CHECK_CLASS;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	220a      	movs	r2, #10
 800a05c:	701a      	strb	r2, [r3, #0]
      break;
 800a05e:	e0b4      	b.n	800a1ca <USBH_Process+0x3ba>
        phost->gState = HOST_CHECK_CLASS;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	220a      	movs	r2, #10
 800a064:	701a      	strb	r2, [r3, #0]
      break;
 800a066:	e0b0      	b.n	800a1ca <USBH_Process+0x3ba>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800a06e:	2b00      	cmp	r3, #0
 800a070:	f000 80ad 	beq.w	800a1ce <USBH_Process+0x3be>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2200      	movs	r2, #0
 800a078:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a07c:	2300      	movs	r3, #0
 800a07e:	73fb      	strb	r3, [r7, #15]
 800a080:	e016      	b.n	800a0b0 <USBH_Process+0x2a0>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a082:	7bfa      	ldrb	r2, [r7, #15]
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	32de      	adds	r2, #222	@ 0xde
 800a088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a08c:	791a      	ldrb	r2, [r3, #4]
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800a094:	429a      	cmp	r2, r3
 800a096:	d108      	bne.n	800a0aa <USBH_Process+0x29a>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a098:	7bfa      	ldrb	r2, [r7, #15]
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	32de      	adds	r2, #222	@ 0xde
 800a09e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800a0a8:	e005      	b.n	800a0b6 <USBH_Process+0x2a6>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a0aa:	7bfb      	ldrb	r3, [r7, #15]
 800a0ac:	3301      	adds	r3, #1
 800a0ae:	73fb      	strb	r3, [r7, #15]
 800a0b0:	7bfb      	ldrb	r3, [r7, #15]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d0e5      	beq.n	800a082 <USBH_Process+0x272>
          }
        }

        if (phost->pActiveClass != NULL)
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d016      	beq.n	800a0ee <USBH_Process+0x2de>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a0c6:	689b      	ldr	r3, [r3, #8]
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	4798      	blx	r3
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d109      	bne.n	800a0e6 <USBH_Process+0x2d6>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2206      	movs	r2, #6
 800a0d6:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a0de:	2103      	movs	r1, #3
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	4798      	blx	r3
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a0e4:	e073      	b.n	800a1ce <USBH_Process+0x3be>
            phost->gState = HOST_ABORT_STATE;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	220d      	movs	r2, #13
 800a0ea:	701a      	strb	r2, [r3, #0]
      break;
 800a0ec:	e06f      	b.n	800a1ce <USBH_Process+0x3be>
          phost->gState = HOST_ABORT_STATE;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	220d      	movs	r2, #13
 800a0f2:	701a      	strb	r2, [r3, #0]
      break;
 800a0f4:	e06b      	b.n	800a1ce <USBH_Process+0x3be>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d017      	beq.n	800a130 <USBH_Process+0x320>
      {
        status = phost->pActiveClass->Requests(phost);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a106:	691b      	ldr	r3, [r3, #16]
 800a108:	6878      	ldr	r0, [r7, #4]
 800a10a:	4798      	blx	r3
 800a10c:	4603      	mov	r3, r0
 800a10e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a110:	7bbb      	ldrb	r3, [r7, #14]
 800a112:	b2db      	uxtb	r3, r3
 800a114:	2b00      	cmp	r3, #0
 800a116:	d103      	bne.n	800a120 <USBH_Process+0x310>
        {
          phost->gState = HOST_CLASS;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	220b      	movs	r2, #11
 800a11c:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a11e:	e058      	b.n	800a1d2 <USBH_Process+0x3c2>
        else if (status == USBH_FAIL)
 800a120:	7bbb      	ldrb	r3, [r7, #14]
 800a122:	b2db      	uxtb	r3, r3
 800a124:	2b02      	cmp	r3, #2
 800a126:	d154      	bne.n	800a1d2 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	220d      	movs	r2, #13
 800a12c:	701a      	strb	r2, [r3, #0]
      break;
 800a12e:	e050      	b.n	800a1d2 <USBH_Process+0x3c2>
        phost->gState = HOST_ABORT_STATE;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	220d      	movs	r2, #13
 800a134:	701a      	strb	r2, [r3, #0]
      break;
 800a136:	e04c      	b.n	800a1d2 <USBH_Process+0x3c2>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d049      	beq.n	800a1d6 <USBH_Process+0x3c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a148:	695b      	ldr	r3, [r3, #20]
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	4798      	blx	r3
      }
      break;
 800a14e:	e042      	b.n	800a1d6 <USBH_Process+0x3c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2200      	movs	r2, #0
 800a154:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f7ff fd4b 	bl	8009bf4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a164:	2b00      	cmp	r3, #0
 800a166:	d009      	beq.n	800a17c <USBH_Process+0x36c>
      {
        phost->pActiveClass->DeInit(phost);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a16e:	68db      	ldr	r3, [r3, #12]
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2200      	movs	r2, #0
 800a178:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a182:	2b00      	cmp	r3, #0
 800a184:	d005      	beq.n	800a192 <USBH_Process+0x382>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a18c:	2105      	movs	r1, #5
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800a198:	b2db      	uxtb	r3, r3
 800a19a:	2b01      	cmp	r3, #1
 800a19c:	d107      	bne.n	800a1ae <USBH_Process+0x39e>
      {
        phost->device.is_ReEnumerated = 0U;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f7ff fe21 	bl	8009dee <USBH_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a1ac:	e014      	b.n	800a1d8 <USBH_Process+0x3c8>
        (void)USBH_LL_Start(phost);
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f001 fb20 	bl	800b7f4 <USBH_LL_Start>
      break;
 800a1b4:	e010      	b.n	800a1d8 <USBH_Process+0x3c8>

    case HOST_ABORT_STATE:
    default :
      break;
 800a1b6:	bf00      	nop
 800a1b8:	e00e      	b.n	800a1d8 <USBH_Process+0x3c8>
      break;
 800a1ba:	bf00      	nop
 800a1bc:	e00c      	b.n	800a1d8 <USBH_Process+0x3c8>
      break;
 800a1be:	bf00      	nop
 800a1c0:	e00a      	b.n	800a1d8 <USBH_Process+0x3c8>
    break;
 800a1c2:	bf00      	nop
 800a1c4:	e008      	b.n	800a1d8 <USBH_Process+0x3c8>
      break;
 800a1c6:	bf00      	nop
 800a1c8:	e006      	b.n	800a1d8 <USBH_Process+0x3c8>
      break;
 800a1ca:	bf00      	nop
 800a1cc:	e004      	b.n	800a1d8 <USBH_Process+0x3c8>
      break;
 800a1ce:	bf00      	nop
 800a1d0:	e002      	b.n	800a1d8 <USBH_Process+0x3c8>
      break;
 800a1d2:	bf00      	nop
 800a1d4:	e000      	b.n	800a1d8 <USBH_Process+0x3c8>
      break;
 800a1d6:	bf00      	nop
  }
  return USBH_OK;
 800a1d8:	2300      	movs	r3, #0
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	3710      	adds	r7, #16
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}
 800a1e2:	bf00      	nop

0800a1e4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b088      	sub	sp, #32
 800a1e8:	af04      	add	r7, sp, #16
 800a1ea:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	785b      	ldrb	r3, [r3, #1]
 800a1f8:	2b07      	cmp	r3, #7
 800a1fa:	f200 81bd 	bhi.w	800a578 <USBH_HandleEnum+0x394>
 800a1fe:	a201      	add	r2, pc, #4	@ (adr r2, 800a204 <USBH_HandleEnum+0x20>)
 800a200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a204:	0800a225 	.word	0x0800a225
 800a208:	0800a2df 	.word	0x0800a2df
 800a20c:	0800a349 	.word	0x0800a349
 800a210:	0800a3d3 	.word	0x0800a3d3
 800a214:	0800a43d 	.word	0x0800a43d
 800a218:	0800a4ad 	.word	0x0800a4ad
 800a21c:	0800a4f3 	.word	0x0800a4f3
 800a220:	0800a539 	.word	0x0800a539
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a224:	2108      	movs	r1, #8
 800a226:	6878      	ldr	r0, [r7, #4]
 800a228:	f000 fa50 	bl	800a6cc <USBH_Get_DevDesc>
 800a22c:	4603      	mov	r3, r0
 800a22e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a230:	7bbb      	ldrb	r3, [r7, #14]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d12e      	bne.n	800a294 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2201      	movs	r2, #1
 800a244:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	7919      	ldrb	r1, [r3, #4]
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a256:	687a      	ldr	r2, [r7, #4]
 800a258:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a25a:	9202      	str	r2, [sp, #8]
 800a25c:	2200      	movs	r2, #0
 800a25e:	9201      	str	r2, [sp, #4]
 800a260:	9300      	str	r3, [sp, #0]
 800a262:	4603      	mov	r3, r0
 800a264:	2280      	movs	r2, #128	@ 0x80
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f001 f8e2 	bl	800b430 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	7959      	ldrb	r1, [r3, #5]
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a27c:	687a      	ldr	r2, [r7, #4]
 800a27e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a280:	9202      	str	r2, [sp, #8]
 800a282:	2200      	movs	r2, #0
 800a284:	9201      	str	r2, [sp, #4]
 800a286:	9300      	str	r3, [sp, #0]
 800a288:	4603      	mov	r3, r0
 800a28a:	2200      	movs	r2, #0
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f001 f8cf 	bl	800b430 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a292:	e173      	b.n	800a57c <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a294:	7bbb      	ldrb	r3, [r7, #14]
 800a296:	2b03      	cmp	r3, #3
 800a298:	f040 8170 	bne.w	800a57c <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a2a2:	3301      	adds	r3, #1
 800a2a4:	b2da      	uxtb	r2, r3
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a2b2:	2b03      	cmp	r3, #3
 800a2b4:	d903      	bls.n	800a2be <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	220d      	movs	r2, #13
 800a2ba:	701a      	strb	r2, [r3, #0]
      break;
 800a2bc:	e15e      	b.n	800a57c <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	795b      	ldrb	r3, [r3, #5]
 800a2c2:	4619      	mov	r1, r3
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f001 f903 	bl	800b4d0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	791b      	ldrb	r3, [r3, #4]
 800a2ce:	4619      	mov	r1, r3
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	f001 f8fd 	bl	800b4d0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2200      	movs	r2, #0
 800a2da:	701a      	strb	r2, [r3, #0]
      break;
 800a2dc:	e14e      	b.n	800a57c <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a2de:	2112      	movs	r1, #18
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	f000 f9f3 	bl	800a6cc <USBH_Get_DevDesc>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a2ea:	7bbb      	ldrb	r3, [r7, #14]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d103      	bne.n	800a2f8 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2202      	movs	r2, #2
 800a2f4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a2f6:	e143      	b.n	800a580 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a2f8:	7bbb      	ldrb	r3, [r7, #14]
 800a2fa:	2b03      	cmp	r3, #3
 800a2fc:	f040 8140 	bne.w	800a580 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a306:	3301      	adds	r3, #1
 800a308:	b2da      	uxtb	r2, r3
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a316:	2b03      	cmp	r3, #3
 800a318:	d903      	bls.n	800a322 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	220d      	movs	r2, #13
 800a31e:	701a      	strb	r2, [r3, #0]
      break;
 800a320:	e12e      	b.n	800a580 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	795b      	ldrb	r3, [r3, #5]
 800a326:	4619      	mov	r1, r3
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	f001 f8d1 	bl	800b4d0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	791b      	ldrb	r3, [r3, #4]
 800a332:	4619      	mov	r1, r3
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	f001 f8cb 	bl	800b4d0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2200      	movs	r2, #0
 800a33e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2200      	movs	r2, #0
 800a344:	701a      	strb	r2, [r3, #0]
      break;
 800a346:	e11b      	b.n	800a580 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a348:	2101      	movs	r1, #1
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f000 fa7d 	bl	800a84a <USBH_SetAddress>
 800a350:	4603      	mov	r3, r0
 800a352:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a354:	7bbb      	ldrb	r3, [r7, #14]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d130      	bne.n	800a3bc <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800a35a:	2002      	movs	r0, #2
 800a35c:	f001 fbb1 	bl	800bac2 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2201      	movs	r2, #1
 800a364:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2203      	movs	r2, #3
 800a36c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	7919      	ldrb	r1, [r3, #4]
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a37e:	687a      	ldr	r2, [r7, #4]
 800a380:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a382:	9202      	str	r2, [sp, #8]
 800a384:	2200      	movs	r2, #0
 800a386:	9201      	str	r2, [sp, #4]
 800a388:	9300      	str	r3, [sp, #0]
 800a38a:	4603      	mov	r3, r0
 800a38c:	2280      	movs	r2, #128	@ 0x80
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f001 f84e 	bl	800b430 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	7959      	ldrb	r1, [r3, #5]
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a3a4:	687a      	ldr	r2, [r7, #4]
 800a3a6:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a3a8:	9202      	str	r2, [sp, #8]
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	9201      	str	r2, [sp, #4]
 800a3ae:	9300      	str	r3, [sp, #0]
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f001 f83b 	bl	800b430 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a3ba:	e0e3      	b.n	800a584 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a3bc:	7bbb      	ldrb	r3, [r7, #14]
 800a3be:	2b03      	cmp	r3, #3
 800a3c0:	f040 80e0 	bne.w	800a584 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	220d      	movs	r2, #13
 800a3c8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	705a      	strb	r2, [r3, #1]
      break;
 800a3d0:	e0d8      	b.n	800a584 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a3d2:	2109      	movs	r1, #9
 800a3d4:	6878      	ldr	r0, [r7, #4]
 800a3d6:	f000 f9a5 	bl	800a724 <USBH_Get_CfgDesc>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a3de:	7bbb      	ldrb	r3, [r7, #14]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d103      	bne.n	800a3ec <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2204      	movs	r2, #4
 800a3e8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a3ea:	e0cd      	b.n	800a588 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a3ec:	7bbb      	ldrb	r3, [r7, #14]
 800a3ee:	2b03      	cmp	r3, #3
 800a3f0:	f040 80ca 	bne.w	800a588 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a3fa:	3301      	adds	r3, #1
 800a3fc:	b2da      	uxtb	r2, r3
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a40a:	2b03      	cmp	r3, #3
 800a40c:	d903      	bls.n	800a416 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	220d      	movs	r2, #13
 800a412:	701a      	strb	r2, [r3, #0]
      break;
 800a414:	e0b8      	b.n	800a588 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	795b      	ldrb	r3, [r3, #5]
 800a41a:	4619      	mov	r1, r3
 800a41c:	6878      	ldr	r0, [r7, #4]
 800a41e:	f001 f857 	bl	800b4d0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	791b      	ldrb	r3, [r3, #4]
 800a426:	4619      	mov	r1, r3
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f001 f851 	bl	800b4d0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	2200      	movs	r2, #0
 800a432:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2200      	movs	r2, #0
 800a438:	701a      	strb	r2, [r3, #0]
      break;
 800a43a:	e0a5      	b.n	800a588 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800a442:	4619      	mov	r1, r3
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f000 f96d 	bl	800a724 <USBH_Get_CfgDesc>
 800a44a:	4603      	mov	r3, r0
 800a44c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a44e:	7bbb      	ldrb	r3, [r7, #14]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d103      	bne.n	800a45c <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2205      	movs	r2, #5
 800a458:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a45a:	e097      	b.n	800a58c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a45c:	7bbb      	ldrb	r3, [r7, #14]
 800a45e:	2b03      	cmp	r3, #3
 800a460:	f040 8094 	bne.w	800a58c <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a46a:	3301      	adds	r3, #1
 800a46c:	b2da      	uxtb	r2, r3
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a47a:	2b03      	cmp	r3, #3
 800a47c:	d903      	bls.n	800a486 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	220d      	movs	r2, #13
 800a482:	701a      	strb	r2, [r3, #0]
      break;
 800a484:	e082      	b.n	800a58c <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	795b      	ldrb	r3, [r3, #5]
 800a48a:	4619      	mov	r1, r3
 800a48c:	6878      	ldr	r0, [r7, #4]
 800a48e:	f001 f81f 	bl	800b4d0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	791b      	ldrb	r3, [r3, #4]
 800a496:	4619      	mov	r1, r3
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f001 f819 	bl	800b4d0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	701a      	strb	r2, [r3, #0]
      break;
 800a4aa:	e06f      	b.n	800a58c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d019      	beq.n	800a4ea <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a4c2:	23ff      	movs	r3, #255	@ 0xff
 800a4c4:	6878      	ldr	r0, [r7, #4]
 800a4c6:	f000 f957 	bl	800a778 <USBH_Get_StringDesc>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a4ce:	7bbb      	ldrb	r3, [r7, #14]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d103      	bne.n	800a4dc <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2206      	movs	r2, #6
 800a4d8:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800a4da:	e059      	b.n	800a590 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a4dc:	7bbb      	ldrb	r3, [r7, #14]
 800a4de:	2b03      	cmp	r3, #3
 800a4e0:	d156      	bne.n	800a590 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2206      	movs	r2, #6
 800a4e6:	705a      	strb	r2, [r3, #1]
      break;
 800a4e8:	e052      	b.n	800a590 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2206      	movs	r2, #6
 800a4ee:	705a      	strb	r2, [r3, #1]
      break;
 800a4f0:	e04e      	b.n	800a590 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d019      	beq.n	800a530 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a508:	23ff      	movs	r3, #255	@ 0xff
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	f000 f934 	bl	800a778 <USBH_Get_StringDesc>
 800a510:	4603      	mov	r3, r0
 800a512:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a514:	7bbb      	ldrb	r3, [r7, #14]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d103      	bne.n	800a522 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2207      	movs	r2, #7
 800a51e:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800a520:	e038      	b.n	800a594 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a522:	7bbb      	ldrb	r3, [r7, #14]
 800a524:	2b03      	cmp	r3, #3
 800a526:	d135      	bne.n	800a594 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2207      	movs	r2, #7
 800a52c:	705a      	strb	r2, [r3, #1]
      break;
 800a52e:	e031      	b.n	800a594 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2207      	movs	r2, #7
 800a534:	705a      	strb	r2, [r3, #1]
      break;
 800a536:	e02d      	b.n	800a594 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d017      	beq.n	800a572 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a54e:	23ff      	movs	r3, #255	@ 0xff
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	f000 f911 	bl	800a778 <USBH_Get_StringDesc>
 800a556:	4603      	mov	r3, r0
 800a558:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a55a:	7bbb      	ldrb	r3, [r7, #14]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d102      	bne.n	800a566 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a560:	2300      	movs	r3, #0
 800a562:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a564:	e018      	b.n	800a598 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a566:	7bbb      	ldrb	r3, [r7, #14]
 800a568:	2b03      	cmp	r3, #3
 800a56a:	d115      	bne.n	800a598 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800a56c:	2300      	movs	r3, #0
 800a56e:	73fb      	strb	r3, [r7, #15]
      break;
 800a570:	e012      	b.n	800a598 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800a572:	2300      	movs	r3, #0
 800a574:	73fb      	strb	r3, [r7, #15]
      break;
 800a576:	e00f      	b.n	800a598 <USBH_HandleEnum+0x3b4>

    default:
      break;
 800a578:	bf00      	nop
 800a57a:	e00e      	b.n	800a59a <USBH_HandleEnum+0x3b6>
      break;
 800a57c:	bf00      	nop
 800a57e:	e00c      	b.n	800a59a <USBH_HandleEnum+0x3b6>
      break;
 800a580:	bf00      	nop
 800a582:	e00a      	b.n	800a59a <USBH_HandleEnum+0x3b6>
      break;
 800a584:	bf00      	nop
 800a586:	e008      	b.n	800a59a <USBH_HandleEnum+0x3b6>
      break;
 800a588:	bf00      	nop
 800a58a:	e006      	b.n	800a59a <USBH_HandleEnum+0x3b6>
      break;
 800a58c:	bf00      	nop
 800a58e:	e004      	b.n	800a59a <USBH_HandleEnum+0x3b6>
      break;
 800a590:	bf00      	nop
 800a592:	e002      	b.n	800a59a <USBH_HandleEnum+0x3b6>
      break;
 800a594:	bf00      	nop
 800a596:	e000      	b.n	800a59a <USBH_HandleEnum+0x3b6>
      break;
 800a598:	bf00      	nop
  }
  return Status;
 800a59a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	3710      	adds	r7, #16
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bd80      	pop	{r7, pc}

0800a5a4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b083      	sub	sp, #12
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
 800a5ac:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	683a      	ldr	r2, [r7, #0]
 800a5b2:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800a5b6:	bf00      	nop
 800a5b8:	370c      	adds	r7, #12
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c0:	4770      	bx	lr

0800a5c2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a5c2:	b580      	push	{r7, lr}
 800a5c4:	b082      	sub	sp, #8
 800a5c6:	af00      	add	r7, sp, #0
 800a5c8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a5d0:	1c5a      	adds	r2, r3, #1
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f000 f804 	bl	800a5e6 <USBH_HandleSof>
}
 800a5de:	bf00      	nop
 800a5e0:	3708      	adds	r7, #8
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}

0800a5e6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a5e6:	b580      	push	{r7, lr}
 800a5e8:	b082      	sub	sp, #8
 800a5ea:	af00      	add	r7, sp, #0
 800a5ec:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	781b      	ldrb	r3, [r3, #0]
 800a5f2:	b2db      	uxtb	r3, r3
 800a5f4:	2b0b      	cmp	r3, #11
 800a5f6:	d10a      	bne.n	800a60e <USBH_HandleSof+0x28>
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d005      	beq.n	800a60e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a608:	699b      	ldr	r3, [r3, #24]
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	4798      	blx	r3
  }
}
 800a60e:	bf00      	nop
 800a610:	3708      	adds	r7, #8
 800a612:	46bd      	mov	sp, r7
 800a614:	bd80      	pop	{r7, pc}

0800a616 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a616:	b480      	push	{r7}
 800a618:	b083      	sub	sp, #12
 800a61a:	af00      	add	r7, sp, #0
 800a61c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2201      	movs	r2, #1
 800a622:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
 800a626:	bf00      	nop
}
 800a628:	370c      	adds	r7, #12
 800a62a:	46bd      	mov	sp, r7
 800a62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a630:	4770      	bx	lr

0800a632 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a632:	b480      	push	{r7}
 800a634:	b083      	sub	sp, #12
 800a636:	af00      	add	r7, sp, #0
 800a638:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2200      	movs	r2, #0
 800a63e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2201      	movs	r2, #1
 800a646:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 800a64a:	bf00      	nop
}
 800a64c:	370c      	adds	r7, #12
 800a64e:	46bd      	mov	sp, r7
 800a650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a654:	4770      	bx	lr

0800a656 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a656:	b480      	push	{r7}
 800a658:	b083      	sub	sp, #12
 800a65a:	af00      	add	r7, sp, #0
 800a65c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	2201      	movs	r2, #1
 800a662:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2200      	movs	r2, #0
 800a66a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2200      	movs	r2, #0
 800a672:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800a676:	2300      	movs	r3, #0
}
 800a678:	4618      	mov	r0, r3
 800a67a:	370c      	adds	r7, #12
 800a67c:	46bd      	mov	sp, r7
 800a67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a682:	4770      	bx	lr

0800a684 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b082      	sub	sp, #8
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2201      	movs	r2, #1
 800a690:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2200      	movs	r2, #0
 800a698:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800a6a4:	6878      	ldr	r0, [r7, #4]
 800a6a6:	f001 f8c0 	bl	800b82a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	791b      	ldrb	r3, [r3, #4]
 800a6ae:	4619      	mov	r1, r3
 800a6b0:	6878      	ldr	r0, [r7, #4]
 800a6b2:	f000 ff0d 	bl	800b4d0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	795b      	ldrb	r3, [r3, #5]
 800a6ba:	4619      	mov	r1, r3
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	f000 ff07 	bl	800b4d0 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800a6c2:	2300      	movs	r3, #0
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	3708      	adds	r7, #8
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}

0800a6cc <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b086      	sub	sp, #24
 800a6d0:	af02      	add	r7, sp, #8
 800a6d2:	6078      	str	r0, [r7, #4]
 800a6d4:	460b      	mov	r3, r1
 800a6d6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800a6d8:	887b      	ldrh	r3, [r7, #2]
 800a6da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a6de:	d901      	bls.n	800a6e4 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a6e0:	2303      	movs	r3, #3
 800a6e2:	e01b      	b.n	800a71c <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800a6ea:	887b      	ldrh	r3, [r7, #2]
 800a6ec:	9300      	str	r3, [sp, #0]
 800a6ee:	4613      	mov	r3, r2
 800a6f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a6f4:	2100      	movs	r1, #0
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f000 f872 	bl	800a7e0 <USBH_GetDescriptor>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800a700:	7bfb      	ldrb	r3, [r7, #15]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d109      	bne.n	800a71a <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a70c:	887a      	ldrh	r2, [r7, #2]
 800a70e:	4619      	mov	r1, r3
 800a710:	6878      	ldr	r0, [r7, #4]
 800a712:	f000 f929 	bl	800a968 <USBH_ParseDevDesc>
 800a716:	4603      	mov	r3, r0
 800a718:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a71a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a71c:	4618      	mov	r0, r3
 800a71e:	3710      	adds	r7, #16
 800a720:	46bd      	mov	sp, r7
 800a722:	bd80      	pop	{r7, pc}

0800a724 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b086      	sub	sp, #24
 800a728:	af02      	add	r7, sp, #8
 800a72a:	6078      	str	r0, [r7, #4]
 800a72c:	460b      	mov	r3, r1
 800a72e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	331c      	adds	r3, #28
 800a734:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800a736:	887b      	ldrh	r3, [r7, #2]
 800a738:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a73c:	d901      	bls.n	800a742 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a73e:	2303      	movs	r3, #3
 800a740:	e016      	b.n	800a770 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a742:	887b      	ldrh	r3, [r7, #2]
 800a744:	9300      	str	r3, [sp, #0]
 800a746:	68bb      	ldr	r3, [r7, #8]
 800a748:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a74c:	2100      	movs	r1, #0
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	f000 f846 	bl	800a7e0 <USBH_GetDescriptor>
 800a754:	4603      	mov	r3, r0
 800a756:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800a758:	7bfb      	ldrb	r3, [r7, #15]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d107      	bne.n	800a76e <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800a75e:	887b      	ldrh	r3, [r7, #2]
 800a760:	461a      	mov	r2, r3
 800a762:	68b9      	ldr	r1, [r7, #8]
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	f000 f9af 	bl	800aac8 <USBH_ParseCfgDesc>
 800a76a:	4603      	mov	r3, r0
 800a76c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a76e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a770:	4618      	mov	r0, r3
 800a772:	3710      	adds	r7, #16
 800a774:	46bd      	mov	sp, r7
 800a776:	bd80      	pop	{r7, pc}

0800a778 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b088      	sub	sp, #32
 800a77c:	af02      	add	r7, sp, #8
 800a77e:	60f8      	str	r0, [r7, #12]
 800a780:	607a      	str	r2, [r7, #4]
 800a782:	461a      	mov	r2, r3
 800a784:	460b      	mov	r3, r1
 800a786:	72fb      	strb	r3, [r7, #11]
 800a788:	4613      	mov	r3, r2
 800a78a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800a78c:	893b      	ldrh	r3, [r7, #8]
 800a78e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a792:	d802      	bhi.n	800a79a <USBH_Get_StringDesc+0x22>
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d101      	bne.n	800a79e <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a79a:	2303      	movs	r3, #3
 800a79c:	e01c      	b.n	800a7d8 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800a79e:	7afb      	ldrb	r3, [r7, #11]
 800a7a0:	b29b      	uxth	r3, r3
 800a7a2:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800a7a6:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800a7ae:	893b      	ldrh	r3, [r7, #8]
 800a7b0:	9300      	str	r3, [sp, #0]
 800a7b2:	460b      	mov	r3, r1
 800a7b4:	2100      	movs	r1, #0
 800a7b6:	68f8      	ldr	r0, [r7, #12]
 800a7b8:	f000 f812 	bl	800a7e0 <USBH_GetDescriptor>
 800a7bc:	4603      	mov	r3, r0
 800a7be:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800a7c0:	7dfb      	ldrb	r3, [r7, #23]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d107      	bne.n	800a7d6 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a7cc:	893a      	ldrh	r2, [r7, #8]
 800a7ce:	6879      	ldr	r1, [r7, #4]
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f000 fb8c 	bl	800aeee <USBH_ParseStringDesc>
  }

  return status;
 800a7d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7d8:	4618      	mov	r0, r3
 800a7da:	3718      	adds	r7, #24
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bd80      	pop	{r7, pc}

0800a7e0 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b084      	sub	sp, #16
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	60f8      	str	r0, [r7, #12]
 800a7e8:	607b      	str	r3, [r7, #4]
 800a7ea:	460b      	mov	r3, r1
 800a7ec:	72fb      	strb	r3, [r7, #11]
 800a7ee:	4613      	mov	r3, r2
 800a7f0:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	789b      	ldrb	r3, [r3, #2]
 800a7f6:	2b01      	cmp	r3, #1
 800a7f8:	d11c      	bne.n	800a834 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a7fa:	7afb      	ldrb	r3, [r7, #11]
 800a7fc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a800:	b2da      	uxtb	r2, r3
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	2206      	movs	r2, #6
 800a80a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	893a      	ldrh	r2, [r7, #8]
 800a810:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a812:	893b      	ldrh	r3, [r7, #8]
 800a814:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a818:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a81c:	d104      	bne.n	800a828 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	f240 4209 	movw	r2, #1033	@ 0x409
 800a824:	829a      	strh	r2, [r3, #20]
 800a826:	e002      	b.n	800a82e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	2200      	movs	r2, #0
 800a82c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	8b3a      	ldrh	r2, [r7, #24]
 800a832:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a834:	8b3b      	ldrh	r3, [r7, #24]
 800a836:	461a      	mov	r2, r3
 800a838:	6879      	ldr	r1, [r7, #4]
 800a83a:	68f8      	ldr	r0, [r7, #12]
 800a83c:	f000 fba4 	bl	800af88 <USBH_CtlReq>
 800a840:	4603      	mov	r3, r0
}
 800a842:	4618      	mov	r0, r3
 800a844:	3710      	adds	r7, #16
 800a846:	46bd      	mov	sp, r7
 800a848:	bd80      	pop	{r7, pc}

0800a84a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a84a:	b580      	push	{r7, lr}
 800a84c:	b082      	sub	sp, #8
 800a84e:	af00      	add	r7, sp, #0
 800a850:	6078      	str	r0, [r7, #4]
 800a852:	460b      	mov	r3, r1
 800a854:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	789b      	ldrb	r3, [r3, #2]
 800a85a:	2b01      	cmp	r3, #1
 800a85c:	d10f      	bne.n	800a87e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2200      	movs	r2, #0
 800a862:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2205      	movs	r2, #5
 800a868:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a86a:	78fb      	ldrb	r3, [r7, #3]
 800a86c:	b29a      	uxth	r2, r3
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2200      	movs	r2, #0
 800a876:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2200      	movs	r2, #0
 800a87c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a87e:	2200      	movs	r2, #0
 800a880:	2100      	movs	r1, #0
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f000 fb80 	bl	800af88 <USBH_CtlReq>
 800a888:	4603      	mov	r3, r0
}
 800a88a:	4618      	mov	r0, r3
 800a88c:	3708      	adds	r7, #8
 800a88e:	46bd      	mov	sp, r7
 800a890:	bd80      	pop	{r7, pc}

0800a892 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a892:	b580      	push	{r7, lr}
 800a894:	b082      	sub	sp, #8
 800a896:	af00      	add	r7, sp, #0
 800a898:	6078      	str	r0, [r7, #4]
 800a89a:	460b      	mov	r3, r1
 800a89c:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	789b      	ldrb	r3, [r3, #2]
 800a8a2:	2b01      	cmp	r3, #1
 800a8a4:	d10e      	bne.n	800a8c4 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2209      	movs	r2, #9
 800a8b0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	887a      	ldrh	r2, [r7, #2]
 800a8b6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	2100      	movs	r1, #0
 800a8c8:	6878      	ldr	r0, [r7, #4]
 800a8ca:	f000 fb5d 	bl	800af88 <USBH_CtlReq>
 800a8ce:	4603      	mov	r3, r0
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	3708      	adds	r7, #8
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bd80      	pop	{r7, pc}

0800a8d8 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b082      	sub	sp, #8
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	460b      	mov	r3, r1
 800a8e2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	789b      	ldrb	r3, [r3, #2]
 800a8e8:	2b01      	cmp	r3, #1
 800a8ea:	d10f      	bne.n	800a90c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2203      	movs	r2, #3
 800a8f6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a8f8:	78fb      	ldrb	r3, [r7, #3]
 800a8fa:	b29a      	uxth	r2, r3
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2200      	movs	r2, #0
 800a904:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2200      	movs	r2, #0
 800a90a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a90c:	2200      	movs	r2, #0
 800a90e:	2100      	movs	r1, #0
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f000 fb39 	bl	800af88 <USBH_CtlReq>
 800a916:	4603      	mov	r3, r0
}
 800a918:	4618      	mov	r0, r3
 800a91a:	3708      	adds	r7, #8
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}

0800a920 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b082      	sub	sp, #8
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
 800a928:	460b      	mov	r3, r1
 800a92a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	789b      	ldrb	r3, [r3, #2]
 800a930:	2b01      	cmp	r3, #1
 800a932:	d10f      	bne.n	800a954 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2202      	movs	r2, #2
 800a938:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2201      	movs	r2, #1
 800a93e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2200      	movs	r2, #0
 800a944:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a946:	78fb      	ldrb	r3, [r7, #3]
 800a948:	b29a      	uxth	r2, r3
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2200      	movs	r2, #0
 800a952:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a954:	2200      	movs	r2, #0
 800a956:	2100      	movs	r1, #0
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	f000 fb15 	bl	800af88 <USBH_CtlReq>
 800a95e:	4603      	mov	r3, r0
}
 800a960:	4618      	mov	r0, r3
 800a962:	3708      	adds	r7, #8
 800a964:	46bd      	mov	sp, r7
 800a966:	bd80      	pop	{r7, pc}

0800a968 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a968:	b480      	push	{r7}
 800a96a:	b087      	sub	sp, #28
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	60f8      	str	r0, [r7, #12]
 800a970:	60b9      	str	r1, [r7, #8]
 800a972:	4613      	mov	r3, r2
 800a974:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800a97c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800a97e:	2300      	movs	r3, #0
 800a980:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d101      	bne.n	800a98c <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800a988:	2302      	movs	r3, #2
 800a98a:	e094      	b.n	800aab6 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	781a      	ldrb	r2, [r3, #0]
 800a990:	693b      	ldr	r3, [r7, #16]
 800a992:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	785a      	ldrb	r2, [r3, #1]
 800a998:	693b      	ldr	r3, [r7, #16]
 800a99a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	3302      	adds	r3, #2
 800a9a0:	781b      	ldrb	r3, [r3, #0]
 800a9a2:	461a      	mov	r2, r3
 800a9a4:	68bb      	ldr	r3, [r7, #8]
 800a9a6:	3303      	adds	r3, #3
 800a9a8:	781b      	ldrb	r3, [r3, #0]
 800a9aa:	021b      	lsls	r3, r3, #8
 800a9ac:	b29b      	uxth	r3, r3
 800a9ae:	4313      	orrs	r3, r2
 800a9b0:	b29a      	uxth	r2, r3
 800a9b2:	693b      	ldr	r3, [r7, #16]
 800a9b4:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800a9b6:	68bb      	ldr	r3, [r7, #8]
 800a9b8:	791a      	ldrb	r2, [r3, #4]
 800a9ba:	693b      	ldr	r3, [r7, #16]
 800a9bc:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800a9be:	68bb      	ldr	r3, [r7, #8]
 800a9c0:	795a      	ldrb	r2, [r3, #5]
 800a9c2:	693b      	ldr	r3, [r7, #16]
 800a9c4:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800a9c6:	68bb      	ldr	r3, [r7, #8]
 800a9c8:	799a      	ldrb	r2, [r3, #6]
 800a9ca:	693b      	ldr	r3, [r7, #16]
 800a9cc:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800a9ce:	68bb      	ldr	r3, [r7, #8]
 800a9d0:	79da      	ldrb	r2, [r3, #7]
 800a9d2:	693b      	ldr	r3, [r7, #16]
 800a9d4:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d004      	beq.n	800a9ea <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a9e6:	2b01      	cmp	r3, #1
 800a9e8:	d11b      	bne.n	800aa22 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800a9ea:	693b      	ldr	r3, [r7, #16]
 800a9ec:	79db      	ldrb	r3, [r3, #7]
 800a9ee:	2b20      	cmp	r3, #32
 800a9f0:	dc0f      	bgt.n	800aa12 <USBH_ParseDevDesc+0xaa>
 800a9f2:	2b08      	cmp	r3, #8
 800a9f4:	db0f      	blt.n	800aa16 <USBH_ParseDevDesc+0xae>
 800a9f6:	3b08      	subs	r3, #8
 800a9f8:	4a32      	ldr	r2, [pc, #200]	@ (800aac4 <USBH_ParseDevDesc+0x15c>)
 800a9fa:	fa22 f303 	lsr.w	r3, r2, r3
 800a9fe:	f003 0301 	and.w	r3, r3, #1
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	bf14      	ite	ne
 800aa06:	2301      	movne	r3, #1
 800aa08:	2300      	moveq	r3, #0
 800aa0a:	b2db      	uxtb	r3, r3
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d106      	bne.n	800aa1e <USBH_ParseDevDesc+0xb6>
 800aa10:	e001      	b.n	800aa16 <USBH_ParseDevDesc+0xae>
 800aa12:	2b40      	cmp	r3, #64	@ 0x40
 800aa14:	d003      	beq.n	800aa1e <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800aa16:	693b      	ldr	r3, [r7, #16]
 800aa18:	2208      	movs	r2, #8
 800aa1a:	71da      	strb	r2, [r3, #7]
        break;
 800aa1c:	e000      	b.n	800aa20 <USBH_ParseDevDesc+0xb8>
        break;
 800aa1e:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800aa20:	e00e      	b.n	800aa40 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800aa28:	2b02      	cmp	r3, #2
 800aa2a:	d107      	bne.n	800aa3c <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800aa2c:	693b      	ldr	r3, [r7, #16]
 800aa2e:	79db      	ldrb	r3, [r3, #7]
 800aa30:	2b08      	cmp	r3, #8
 800aa32:	d005      	beq.n	800aa40 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800aa34:	693b      	ldr	r3, [r7, #16]
 800aa36:	2208      	movs	r2, #8
 800aa38:	71da      	strb	r2, [r3, #7]
 800aa3a:	e001      	b.n	800aa40 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800aa3c:	2303      	movs	r3, #3
 800aa3e:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800aa40:	88fb      	ldrh	r3, [r7, #6]
 800aa42:	2b08      	cmp	r3, #8
 800aa44:	d936      	bls.n	800aab4 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	3308      	adds	r3, #8
 800aa4a:	781b      	ldrb	r3, [r3, #0]
 800aa4c:	461a      	mov	r2, r3
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	3309      	adds	r3, #9
 800aa52:	781b      	ldrb	r3, [r3, #0]
 800aa54:	021b      	lsls	r3, r3, #8
 800aa56:	b29b      	uxth	r3, r3
 800aa58:	4313      	orrs	r3, r2
 800aa5a:	b29a      	uxth	r2, r3
 800aa5c:	693b      	ldr	r3, [r7, #16]
 800aa5e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	330a      	adds	r3, #10
 800aa64:	781b      	ldrb	r3, [r3, #0]
 800aa66:	461a      	mov	r2, r3
 800aa68:	68bb      	ldr	r3, [r7, #8]
 800aa6a:	330b      	adds	r3, #11
 800aa6c:	781b      	ldrb	r3, [r3, #0]
 800aa6e:	021b      	lsls	r3, r3, #8
 800aa70:	b29b      	uxth	r3, r3
 800aa72:	4313      	orrs	r3, r2
 800aa74:	b29a      	uxth	r2, r3
 800aa76:	693b      	ldr	r3, [r7, #16]
 800aa78:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	330c      	adds	r3, #12
 800aa7e:	781b      	ldrb	r3, [r3, #0]
 800aa80:	461a      	mov	r2, r3
 800aa82:	68bb      	ldr	r3, [r7, #8]
 800aa84:	330d      	adds	r3, #13
 800aa86:	781b      	ldrb	r3, [r3, #0]
 800aa88:	021b      	lsls	r3, r3, #8
 800aa8a:	b29b      	uxth	r3, r3
 800aa8c:	4313      	orrs	r3, r2
 800aa8e:	b29a      	uxth	r2, r3
 800aa90:	693b      	ldr	r3, [r7, #16]
 800aa92:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800aa94:	68bb      	ldr	r3, [r7, #8]
 800aa96:	7b9a      	ldrb	r2, [r3, #14]
 800aa98:	693b      	ldr	r3, [r7, #16]
 800aa9a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	7bda      	ldrb	r2, [r3, #15]
 800aaa0:	693b      	ldr	r3, [r7, #16]
 800aaa2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800aaa4:	68bb      	ldr	r3, [r7, #8]
 800aaa6:	7c1a      	ldrb	r2, [r3, #16]
 800aaa8:	693b      	ldr	r3, [r7, #16]
 800aaaa:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800aaac:	68bb      	ldr	r3, [r7, #8]
 800aaae:	7c5a      	ldrb	r2, [r3, #17]
 800aab0:	693b      	ldr	r3, [r7, #16]
 800aab2:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800aab4:	7dfb      	ldrb	r3, [r7, #23]
}
 800aab6:	4618      	mov	r0, r3
 800aab8:	371c      	adds	r7, #28
 800aaba:	46bd      	mov	sp, r7
 800aabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac0:	4770      	bx	lr
 800aac2:	bf00      	nop
 800aac4:	01000101 	.word	0x01000101

0800aac8 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b08c      	sub	sp, #48	@ 0x30
 800aacc:	af00      	add	r7, sp, #0
 800aace:	60f8      	str	r0, [r7, #12]
 800aad0:	60b9      	str	r1, [r7, #8]
 800aad2:	4613      	mov	r3, r2
 800aad4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800aadc:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800aade:	2300      	movs	r3, #0
 800aae0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800aae4:	2300      	movs	r3, #0
 800aae6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800aaea:	2300      	movs	r3, #0
 800aaec:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d101      	bne.n	800aafa <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800aaf6:	2302      	movs	r3, #2
 800aaf8:	e0de      	b.n	800acb8 <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800aafa:	68bb      	ldr	r3, [r7, #8]
 800aafc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800aafe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab00:	781b      	ldrb	r3, [r3, #0]
 800ab02:	2b09      	cmp	r3, #9
 800ab04:	d002      	beq.n	800ab0c <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800ab06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab08:	2209      	movs	r2, #9
 800ab0a:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800ab0c:	68bb      	ldr	r3, [r7, #8]
 800ab0e:	781a      	ldrb	r2, [r3, #0]
 800ab10:	6a3b      	ldr	r3, [r7, #32]
 800ab12:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800ab14:	68bb      	ldr	r3, [r7, #8]
 800ab16:	785a      	ldrb	r2, [r3, #1]
 800ab18:	6a3b      	ldr	r3, [r7, #32]
 800ab1a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800ab1c:	68bb      	ldr	r3, [r7, #8]
 800ab1e:	3302      	adds	r3, #2
 800ab20:	781b      	ldrb	r3, [r3, #0]
 800ab22:	461a      	mov	r2, r3
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	3303      	adds	r3, #3
 800ab28:	781b      	ldrb	r3, [r3, #0]
 800ab2a:	021b      	lsls	r3, r3, #8
 800ab2c:	b29b      	uxth	r3, r3
 800ab2e:	4313      	orrs	r3, r2
 800ab30:	b29b      	uxth	r3, r3
 800ab32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ab36:	bf28      	it	cs
 800ab38:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800ab3c:	b29a      	uxth	r2, r3
 800ab3e:	6a3b      	ldr	r3, [r7, #32]
 800ab40:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	791a      	ldrb	r2, [r3, #4]
 800ab46:	6a3b      	ldr	r3, [r7, #32]
 800ab48:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800ab4a:	68bb      	ldr	r3, [r7, #8]
 800ab4c:	795a      	ldrb	r2, [r3, #5]
 800ab4e:	6a3b      	ldr	r3, [r7, #32]
 800ab50:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	799a      	ldrb	r2, [r3, #6]
 800ab56:	6a3b      	ldr	r3, [r7, #32]
 800ab58:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800ab5a:	68bb      	ldr	r3, [r7, #8]
 800ab5c:	79da      	ldrb	r2, [r3, #7]
 800ab5e:	6a3b      	ldr	r3, [r7, #32]
 800ab60:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	7a1a      	ldrb	r2, [r3, #8]
 800ab66:	6a3b      	ldr	r3, [r7, #32]
 800ab68:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800ab6a:	88fb      	ldrh	r3, [r7, #6]
 800ab6c:	2b09      	cmp	r3, #9
 800ab6e:	f240 80a1 	bls.w	800acb4 <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 800ab72:	2309      	movs	r3, #9
 800ab74:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800ab76:	2300      	movs	r3, #0
 800ab78:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ab7a:	e085      	b.n	800ac88 <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ab7c:	f107 0316 	add.w	r3, r7, #22
 800ab80:	4619      	mov	r1, r3
 800ab82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ab84:	f000 f9e6 	bl	800af54 <USBH_GetNextDesc>
 800ab88:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800ab8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab8c:	785b      	ldrb	r3, [r3, #1]
 800ab8e:	2b04      	cmp	r3, #4
 800ab90:	d17a      	bne.n	800ac88 <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800ab92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab94:	781b      	ldrb	r3, [r3, #0]
 800ab96:	2b09      	cmp	r3, #9
 800ab98:	d002      	beq.n	800aba0 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800ab9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab9c:	2209      	movs	r2, #9
 800ab9e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800aba0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aba4:	221a      	movs	r2, #26
 800aba6:	fb02 f303 	mul.w	r3, r2, r3
 800abaa:	3308      	adds	r3, #8
 800abac:	6a3a      	ldr	r2, [r7, #32]
 800abae:	4413      	add	r3, r2
 800abb0:	3302      	adds	r3, #2
 800abb2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800abb4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800abb6:	69f8      	ldr	r0, [r7, #28]
 800abb8:	f000 f882 	bl	800acc0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800abbc:	2300      	movs	r3, #0
 800abbe:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800abc2:	2300      	movs	r3, #0
 800abc4:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800abc6:	e043      	b.n	800ac50 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800abc8:	f107 0316 	add.w	r3, r7, #22
 800abcc:	4619      	mov	r1, r3
 800abce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800abd0:	f000 f9c0 	bl	800af54 <USBH_GetNextDesc>
 800abd4:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800abd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abd8:	785b      	ldrb	r3, [r3, #1]
 800abda:	2b05      	cmp	r3, #5
 800abdc:	d138      	bne.n	800ac50 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800abde:	69fb      	ldr	r3, [r7, #28]
 800abe0:	795b      	ldrb	r3, [r3, #5]
 800abe2:	2b01      	cmp	r3, #1
 800abe4:	d113      	bne.n	800ac0e <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800abe6:	69fb      	ldr	r3, [r7, #28]
 800abe8:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800abea:	2b02      	cmp	r3, #2
 800abec:	d003      	beq.n	800abf6 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800abee:	69fb      	ldr	r3, [r7, #28]
 800abf0:	799b      	ldrb	r3, [r3, #6]
 800abf2:	2b03      	cmp	r3, #3
 800abf4:	d10b      	bne.n	800ac0e <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800abf6:	69fb      	ldr	r3, [r7, #28]
 800abf8:	79db      	ldrb	r3, [r3, #7]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d10b      	bne.n	800ac16 <USBH_ParseCfgDesc+0x14e>
 800abfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac00:	781b      	ldrb	r3, [r3, #0]
 800ac02:	2b09      	cmp	r3, #9
 800ac04:	d007      	beq.n	800ac16 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800ac06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac08:	2209      	movs	r2, #9
 800ac0a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800ac0c:	e003      	b.n	800ac16 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800ac0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac10:	2207      	movs	r2, #7
 800ac12:	701a      	strb	r2, [r3, #0]
 800ac14:	e000      	b.n	800ac18 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800ac16:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800ac18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ac1c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800ac20:	3201      	adds	r2, #1
 800ac22:	00d2      	lsls	r2, r2, #3
 800ac24:	211a      	movs	r1, #26
 800ac26:	fb01 f303 	mul.w	r3, r1, r3
 800ac2a:	4413      	add	r3, r2
 800ac2c:	3308      	adds	r3, #8
 800ac2e:	6a3a      	ldr	r2, [r7, #32]
 800ac30:	4413      	add	r3, r2
 800ac32:	3304      	adds	r3, #4
 800ac34:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800ac36:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ac38:	69b9      	ldr	r1, [r7, #24]
 800ac3a:	68f8      	ldr	r0, [r7, #12]
 800ac3c:	f000 f86f 	bl	800ad1e <USBH_ParseEPDesc>
 800ac40:	4603      	mov	r3, r0
 800ac42:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800ac46:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ac4a:	3301      	adds	r3, #1
 800ac4c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ac50:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ac54:	2b01      	cmp	r3, #1
 800ac56:	d80a      	bhi.n	800ac6e <USBH_ParseCfgDesc+0x1a6>
 800ac58:	69fb      	ldr	r3, [r7, #28]
 800ac5a:	791b      	ldrb	r3, [r3, #4]
 800ac5c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800ac60:	429a      	cmp	r2, r3
 800ac62:	d204      	bcs.n	800ac6e <USBH_ParseCfgDesc+0x1a6>
 800ac64:	6a3b      	ldr	r3, [r7, #32]
 800ac66:	885a      	ldrh	r2, [r3, #2]
 800ac68:	8afb      	ldrh	r3, [r7, #22]
 800ac6a:	429a      	cmp	r2, r3
 800ac6c:	d8ac      	bhi.n	800abc8 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800ac6e:	69fb      	ldr	r3, [r7, #28]
 800ac70:	791b      	ldrb	r3, [r3, #4]
 800ac72:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800ac76:	429a      	cmp	r2, r3
 800ac78:	d201      	bcs.n	800ac7e <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 800ac7a:	2303      	movs	r3, #3
 800ac7c:	e01c      	b.n	800acb8 <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 800ac7e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ac82:	3301      	adds	r3, #1
 800ac84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ac88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ac8c:	2b01      	cmp	r3, #1
 800ac8e:	d805      	bhi.n	800ac9c <USBH_ParseCfgDesc+0x1d4>
 800ac90:	6a3b      	ldr	r3, [r7, #32]
 800ac92:	885a      	ldrh	r2, [r3, #2]
 800ac94:	8afb      	ldrh	r3, [r7, #22]
 800ac96:	429a      	cmp	r2, r3
 800ac98:	f63f af70 	bhi.w	800ab7c <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800ac9c:	6a3b      	ldr	r3, [r7, #32]
 800ac9e:	791b      	ldrb	r3, [r3, #4]
 800aca0:	2b02      	cmp	r3, #2
 800aca2:	bf28      	it	cs
 800aca4:	2302      	movcs	r3, #2
 800aca6:	b2db      	uxtb	r3, r3
 800aca8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800acac:	429a      	cmp	r2, r3
 800acae:	d201      	bcs.n	800acb4 <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 800acb0:	2303      	movs	r3, #3
 800acb2:	e001      	b.n	800acb8 <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 800acb4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800acb8:	4618      	mov	r0, r3
 800acba:	3730      	adds	r7, #48	@ 0x30
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bd80      	pop	{r7, pc}

0800acc0 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800acc0:	b480      	push	{r7}
 800acc2:	b083      	sub	sp, #12
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
 800acc8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	781a      	ldrb	r2, [r3, #0]
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	785a      	ldrb	r2, [r3, #1]
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	789a      	ldrb	r2, [r3, #2]
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	78da      	ldrb	r2, [r3, #3]
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	791a      	ldrb	r2, [r3, #4]
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	795a      	ldrb	r2, [r3, #5]
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	799a      	ldrb	r2, [r3, #6]
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	79da      	ldrb	r2, [r3, #7]
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	7a1a      	ldrb	r2, [r3, #8]
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	721a      	strb	r2, [r3, #8]
}
 800ad12:	bf00      	nop
 800ad14:	370c      	adds	r7, #12
 800ad16:	46bd      	mov	sp, r7
 800ad18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1c:	4770      	bx	lr

0800ad1e <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800ad1e:	b480      	push	{r7}
 800ad20:	b087      	sub	sp, #28
 800ad22:	af00      	add	r7, sp, #0
 800ad24:	60f8      	str	r0, [r7, #12]
 800ad26:	60b9      	str	r1, [r7, #8]
 800ad28:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	781a      	ldrb	r2, [r3, #0]
 800ad32:	68bb      	ldr	r3, [r7, #8]
 800ad34:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	785a      	ldrb	r2, [r3, #1]
 800ad3a:	68bb      	ldr	r3, [r7, #8]
 800ad3c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	789a      	ldrb	r2, [r3, #2]
 800ad42:	68bb      	ldr	r3, [r7, #8]
 800ad44:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	78da      	ldrb	r2, [r3, #3]
 800ad4a:	68bb      	ldr	r3, [r7, #8]
 800ad4c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	3304      	adds	r3, #4
 800ad52:	781b      	ldrb	r3, [r3, #0]
 800ad54:	461a      	mov	r2, r3
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	3305      	adds	r3, #5
 800ad5a:	781b      	ldrb	r3, [r3, #0]
 800ad5c:	021b      	lsls	r3, r3, #8
 800ad5e:	b29b      	uxth	r3, r3
 800ad60:	4313      	orrs	r3, r2
 800ad62:	b29a      	uxth	r2, r3
 800ad64:	68bb      	ldr	r3, [r7, #8]
 800ad66:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	799a      	ldrb	r2, [r3, #6]
 800ad6c:	68bb      	ldr	r3, [r7, #8]
 800ad6e:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	889b      	ldrh	r3, [r3, #4]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d009      	beq.n	800ad8c <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800ad7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ad80:	d804      	bhi.n	800ad8c <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800ad82:	68bb      	ldr	r3, [r7, #8]
 800ad84:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800ad86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad8a:	d901      	bls.n	800ad90 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800ad8c:	2303      	movs	r3, #3
 800ad8e:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d136      	bne.n	800ae08 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	78db      	ldrb	r3, [r3, #3]
 800ad9e:	f003 0303 	and.w	r3, r3, #3
 800ada2:	2b02      	cmp	r3, #2
 800ada4:	d108      	bne.n	800adb8 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800ada6:	68bb      	ldr	r3, [r7, #8]
 800ada8:	889b      	ldrh	r3, [r3, #4]
 800adaa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800adae:	f240 8097 	bls.w	800aee0 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800adb2:	2303      	movs	r3, #3
 800adb4:	75fb      	strb	r3, [r7, #23]
 800adb6:	e093      	b.n	800aee0 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	78db      	ldrb	r3, [r3, #3]
 800adbc:	f003 0303 	and.w	r3, r3, #3
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d107      	bne.n	800add4 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800adc4:	68bb      	ldr	r3, [r7, #8]
 800adc6:	889b      	ldrh	r3, [r3, #4]
 800adc8:	2b40      	cmp	r3, #64	@ 0x40
 800adca:	f240 8089 	bls.w	800aee0 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800adce:	2303      	movs	r3, #3
 800add0:	75fb      	strb	r3, [r7, #23]
 800add2:	e085      	b.n	800aee0 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	78db      	ldrb	r3, [r3, #3]
 800add8:	f003 0303 	and.w	r3, r3, #3
 800addc:	2b01      	cmp	r3, #1
 800adde:	d005      	beq.n	800adec <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800ade0:	68bb      	ldr	r3, [r7, #8]
 800ade2:	78db      	ldrb	r3, [r3, #3]
 800ade4:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800ade8:	2b03      	cmp	r3, #3
 800adea:	d10a      	bne.n	800ae02 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	799b      	ldrb	r3, [r3, #6]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d003      	beq.n	800adfc <USBH_ParseEPDesc+0xde>
 800adf4:	68bb      	ldr	r3, [r7, #8]
 800adf6:	799b      	ldrb	r3, [r3, #6]
 800adf8:	2b10      	cmp	r3, #16
 800adfa:	d970      	bls.n	800aede <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800adfc:	2303      	movs	r3, #3
 800adfe:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800ae00:	e06d      	b.n	800aede <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800ae02:	2303      	movs	r3, #3
 800ae04:	75fb      	strb	r3, [r7, #23]
 800ae06:	e06b      	b.n	800aee0 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ae0e:	2b01      	cmp	r3, #1
 800ae10:	d13c      	bne.n	800ae8c <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800ae12:	68bb      	ldr	r3, [r7, #8]
 800ae14:	78db      	ldrb	r3, [r3, #3]
 800ae16:	f003 0303 	and.w	r3, r3, #3
 800ae1a:	2b02      	cmp	r3, #2
 800ae1c:	d005      	beq.n	800ae2a <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800ae1e:	68bb      	ldr	r3, [r7, #8]
 800ae20:	78db      	ldrb	r3, [r3, #3]
 800ae22:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d106      	bne.n	800ae38 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800ae2a:	68bb      	ldr	r3, [r7, #8]
 800ae2c:	889b      	ldrh	r3, [r3, #4]
 800ae2e:	2b40      	cmp	r3, #64	@ 0x40
 800ae30:	d956      	bls.n	800aee0 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ae32:	2303      	movs	r3, #3
 800ae34:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800ae36:	e053      	b.n	800aee0 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	78db      	ldrb	r3, [r3, #3]
 800ae3c:	f003 0303 	and.w	r3, r3, #3
 800ae40:	2b01      	cmp	r3, #1
 800ae42:	d10e      	bne.n	800ae62 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	799b      	ldrb	r3, [r3, #6]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d007      	beq.n	800ae5c <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800ae50:	2b10      	cmp	r3, #16
 800ae52:	d803      	bhi.n	800ae5c <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800ae54:	68bb      	ldr	r3, [r7, #8]
 800ae56:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800ae58:	2b40      	cmp	r3, #64	@ 0x40
 800ae5a:	d941      	bls.n	800aee0 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ae5c:	2303      	movs	r3, #3
 800ae5e:	75fb      	strb	r3, [r7, #23]
 800ae60:	e03e      	b.n	800aee0 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	78db      	ldrb	r3, [r3, #3]
 800ae66:	f003 0303 	and.w	r3, r3, #3
 800ae6a:	2b03      	cmp	r3, #3
 800ae6c:	d10b      	bne.n	800ae86 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	799b      	ldrb	r3, [r3, #6]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d004      	beq.n	800ae80 <USBH_ParseEPDesc+0x162>
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	889b      	ldrh	r3, [r3, #4]
 800ae7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ae7e:	d32f      	bcc.n	800aee0 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ae80:	2303      	movs	r3, #3
 800ae82:	75fb      	strb	r3, [r7, #23]
 800ae84:	e02c      	b.n	800aee0 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800ae86:	2303      	movs	r3, #3
 800ae88:	75fb      	strb	r3, [r7, #23]
 800ae8a:	e029      	b.n	800aee0 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ae92:	2b02      	cmp	r3, #2
 800ae94:	d120      	bne.n	800aed8 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800ae96:	68bb      	ldr	r3, [r7, #8]
 800ae98:	78db      	ldrb	r3, [r3, #3]
 800ae9a:	f003 0303 	and.w	r3, r3, #3
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d106      	bne.n	800aeb0 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800aea2:	68bb      	ldr	r3, [r7, #8]
 800aea4:	889b      	ldrh	r3, [r3, #4]
 800aea6:	2b08      	cmp	r3, #8
 800aea8:	d01a      	beq.n	800aee0 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800aeaa:	2303      	movs	r3, #3
 800aeac:	75fb      	strb	r3, [r7, #23]
 800aeae:	e017      	b.n	800aee0 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	78db      	ldrb	r3, [r3, #3]
 800aeb4:	f003 0303 	and.w	r3, r3, #3
 800aeb8:	2b03      	cmp	r3, #3
 800aeba:	d10a      	bne.n	800aed2 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	799b      	ldrb	r3, [r3, #6]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d003      	beq.n	800aecc <USBH_ParseEPDesc+0x1ae>
 800aec4:	68bb      	ldr	r3, [r7, #8]
 800aec6:	889b      	ldrh	r3, [r3, #4]
 800aec8:	2b08      	cmp	r3, #8
 800aeca:	d909      	bls.n	800aee0 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800aecc:	2303      	movs	r3, #3
 800aece:	75fb      	strb	r3, [r7, #23]
 800aed0:	e006      	b.n	800aee0 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800aed2:	2303      	movs	r3, #3
 800aed4:	75fb      	strb	r3, [r7, #23]
 800aed6:	e003      	b.n	800aee0 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800aed8:	2303      	movs	r3, #3
 800aeda:	75fb      	strb	r3, [r7, #23]
 800aedc:	e000      	b.n	800aee0 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800aede:	bf00      	nop
  }

  return status;
 800aee0:	7dfb      	ldrb	r3, [r7, #23]
}
 800aee2:	4618      	mov	r0, r3
 800aee4:	371c      	adds	r7, #28
 800aee6:	46bd      	mov	sp, r7
 800aee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeec:	4770      	bx	lr

0800aeee <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800aeee:	b480      	push	{r7}
 800aef0:	b087      	sub	sp, #28
 800aef2:	af00      	add	r7, sp, #0
 800aef4:	60f8      	str	r0, [r7, #12]
 800aef6:	60b9      	str	r1, [r7, #8]
 800aef8:	4613      	mov	r3, r2
 800aefa:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	3301      	adds	r3, #1
 800af00:	781b      	ldrb	r3, [r3, #0]
 800af02:	2b03      	cmp	r3, #3
 800af04:	d120      	bne.n	800af48 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	781b      	ldrb	r3, [r3, #0]
 800af0a:	1e9a      	subs	r2, r3, #2
 800af0c:	88fb      	ldrh	r3, [r7, #6]
 800af0e:	4293      	cmp	r3, r2
 800af10:	bf28      	it	cs
 800af12:	4613      	movcs	r3, r2
 800af14:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	3302      	adds	r3, #2
 800af1a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800af1c:	2300      	movs	r3, #0
 800af1e:	82fb      	strh	r3, [r7, #22]
 800af20:	e00b      	b.n	800af3a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800af22:	8afb      	ldrh	r3, [r7, #22]
 800af24:	68fa      	ldr	r2, [r7, #12]
 800af26:	4413      	add	r3, r2
 800af28:	781a      	ldrb	r2, [r3, #0]
 800af2a:	68bb      	ldr	r3, [r7, #8]
 800af2c:	701a      	strb	r2, [r3, #0]
      pdest++;
 800af2e:	68bb      	ldr	r3, [r7, #8]
 800af30:	3301      	adds	r3, #1
 800af32:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800af34:	8afb      	ldrh	r3, [r7, #22]
 800af36:	3302      	adds	r3, #2
 800af38:	82fb      	strh	r3, [r7, #22]
 800af3a:	8afa      	ldrh	r2, [r7, #22]
 800af3c:	8abb      	ldrh	r3, [r7, #20]
 800af3e:	429a      	cmp	r2, r3
 800af40:	d3ef      	bcc.n	800af22 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800af42:	68bb      	ldr	r3, [r7, #8]
 800af44:	2200      	movs	r2, #0
 800af46:	701a      	strb	r2, [r3, #0]
  }
}
 800af48:	bf00      	nop
 800af4a:	371c      	adds	r7, #28
 800af4c:	46bd      	mov	sp, r7
 800af4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af52:	4770      	bx	lr

0800af54 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800af54:	b480      	push	{r7}
 800af56:	b085      	sub	sp, #20
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
 800af5c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	881b      	ldrh	r3, [r3, #0]
 800af62:	687a      	ldr	r2, [r7, #4]
 800af64:	7812      	ldrb	r2, [r2, #0]
 800af66:	4413      	add	r3, r2
 800af68:	b29a      	uxth	r2, r3
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	781b      	ldrb	r3, [r3, #0]
 800af72:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	4413      	add	r3, r2
 800af78:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800af7a:	68fb      	ldr	r3, [r7, #12]
}
 800af7c:	4618      	mov	r0, r3
 800af7e:	3714      	adds	r7, #20
 800af80:	46bd      	mov	sp, r7
 800af82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af86:	4770      	bx	lr

0800af88 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b086      	sub	sp, #24
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	60f8      	str	r0, [r7, #12]
 800af90:	60b9      	str	r1, [r7, #8]
 800af92:	4613      	mov	r3, r2
 800af94:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800af96:	2301      	movs	r3, #1
 800af98:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	789b      	ldrb	r3, [r3, #2]
 800af9e:	2b01      	cmp	r3, #1
 800afa0:	d002      	beq.n	800afa8 <USBH_CtlReq+0x20>
 800afa2:	2b02      	cmp	r3, #2
 800afa4:	d00f      	beq.n	800afc6 <USBH_CtlReq+0x3e>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 800afa6:	e027      	b.n	800aff8 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	68ba      	ldr	r2, [r7, #8]
 800afac:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	88fa      	ldrh	r2, [r7, #6]
 800afb2:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	2201      	movs	r2, #1
 800afb8:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	2202      	movs	r2, #2
 800afbe:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800afc0:	2301      	movs	r3, #1
 800afc2:	75fb      	strb	r3, [r7, #23]
      break;
 800afc4:	e018      	b.n	800aff8 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800afc6:	68f8      	ldr	r0, [r7, #12]
 800afc8:	f000 f81c 	bl	800b004 <USBH_HandleControl>
 800afcc:	4603      	mov	r3, r0
 800afce:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800afd0:	7dfb      	ldrb	r3, [r7, #23]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d002      	beq.n	800afdc <USBH_CtlReq+0x54>
 800afd6:	7dfb      	ldrb	r3, [r7, #23]
 800afd8:	2b03      	cmp	r3, #3
 800afda:	d106      	bne.n	800afea <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	2201      	movs	r2, #1
 800afe0:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	2200      	movs	r2, #0
 800afe6:	761a      	strb	r2, [r3, #24]
      break;
 800afe8:	e005      	b.n	800aff6 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800afea:	7dfb      	ldrb	r3, [r7, #23]
 800afec:	2b02      	cmp	r3, #2
 800afee:	d102      	bne.n	800aff6 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	2201      	movs	r2, #1
 800aff4:	709a      	strb	r2, [r3, #2]
      break;
 800aff6:	bf00      	nop
  }
  return status;
 800aff8:	7dfb      	ldrb	r3, [r7, #23]
}
 800affa:	4618      	mov	r0, r3
 800affc:	3718      	adds	r7, #24
 800affe:	46bd      	mov	sp, r7
 800b000:	bd80      	pop	{r7, pc}
	...

0800b004 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b086      	sub	sp, #24
 800b008:	af02      	add	r7, sp, #8
 800b00a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b00c:	2301      	movs	r3, #1
 800b00e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b010:	2300      	movs	r3, #0
 800b012:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	7e1b      	ldrb	r3, [r3, #24]
 800b018:	3b01      	subs	r3, #1
 800b01a:	2b0a      	cmp	r3, #10
 800b01c:	f200 8157 	bhi.w	800b2ce <USBH_HandleControl+0x2ca>
 800b020:	a201      	add	r2, pc, #4	@ (adr r2, 800b028 <USBH_HandleControl+0x24>)
 800b022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b026:	bf00      	nop
 800b028:	0800b055 	.word	0x0800b055
 800b02c:	0800b06f 	.word	0x0800b06f
 800b030:	0800b0d9 	.word	0x0800b0d9
 800b034:	0800b0ff 	.word	0x0800b0ff
 800b038:	0800b139 	.word	0x0800b139
 800b03c:	0800b163 	.word	0x0800b163
 800b040:	0800b1b5 	.word	0x0800b1b5
 800b044:	0800b1d7 	.word	0x0800b1d7
 800b048:	0800b213 	.word	0x0800b213
 800b04c:	0800b239 	.word	0x0800b239
 800b050:	0800b277 	.word	0x0800b277
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	f103 0110 	add.w	r1, r3, #16
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	795b      	ldrb	r3, [r3, #5]
 800b05e:	461a      	mov	r2, r3
 800b060:	6878      	ldr	r0, [r7, #4]
 800b062:	f000 f945 	bl	800b2f0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	2202      	movs	r2, #2
 800b06a:	761a      	strb	r2, [r3, #24]
      break;
 800b06c:	e13a      	b.n	800b2e4 <USBH_HandleControl+0x2e0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	795b      	ldrb	r3, [r3, #5]
 800b072:	4619      	mov	r1, r3
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	f000 fcc7 	bl	800ba08 <USBH_LL_GetURBState>
 800b07a:	4603      	mov	r3, r0
 800b07c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b07e:	7bbb      	ldrb	r3, [r7, #14]
 800b080:	2b01      	cmp	r3, #1
 800b082:	d11e      	bne.n	800b0c2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	7c1b      	ldrb	r3, [r3, #16]
 800b088:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b08c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	8adb      	ldrh	r3, [r3, #22]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d00a      	beq.n	800b0ac <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b096:	7b7b      	ldrb	r3, [r7, #13]
 800b098:	2b80      	cmp	r3, #128	@ 0x80
 800b09a:	d103      	bne.n	800b0a4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2203      	movs	r2, #3
 800b0a0:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800b0a2:	e116      	b.n	800b2d2 <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_DATA_OUT;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2205      	movs	r2, #5
 800b0a8:	761a      	strb	r2, [r3, #24]
      break;
 800b0aa:	e112      	b.n	800b2d2 <USBH_HandleControl+0x2ce>
          if (direction == USB_D2H)
 800b0ac:	7b7b      	ldrb	r3, [r7, #13]
 800b0ae:	2b80      	cmp	r3, #128	@ 0x80
 800b0b0:	d103      	bne.n	800b0ba <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	2209      	movs	r2, #9
 800b0b6:	761a      	strb	r2, [r3, #24]
      break;
 800b0b8:	e10b      	b.n	800b2d2 <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_STATUS_IN;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	2207      	movs	r2, #7
 800b0be:	761a      	strb	r2, [r3, #24]
      break;
 800b0c0:	e107      	b.n	800b2d2 <USBH_HandleControl+0x2ce>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b0c2:	7bbb      	ldrb	r3, [r7, #14]
 800b0c4:	2b04      	cmp	r3, #4
 800b0c6:	d003      	beq.n	800b0d0 <USBH_HandleControl+0xcc>
 800b0c8:	7bbb      	ldrb	r3, [r7, #14]
 800b0ca:	2b02      	cmp	r3, #2
 800b0cc:	f040 8101 	bne.w	800b2d2 <USBH_HandleControl+0x2ce>
          phost->Control.state = CTRL_ERROR;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	220b      	movs	r2, #11
 800b0d4:	761a      	strb	r2, [r3, #24]
      break;
 800b0d6:	e0fc      	b.n	800b2d2 <USBH_HandleControl+0x2ce>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b0de:	b29a      	uxth	r2, r3
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	6899      	ldr	r1, [r3, #8]
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	899a      	ldrh	r2, [r3, #12]
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	791b      	ldrb	r3, [r3, #4]
 800b0f0:	6878      	ldr	r0, [r7, #4]
 800b0f2:	f000 f93c 	bl	800b36e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	2204      	movs	r2, #4
 800b0fa:	761a      	strb	r2, [r3, #24]
      break;
 800b0fc:	e0f2      	b.n	800b2e4 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	791b      	ldrb	r3, [r3, #4]
 800b102:	4619      	mov	r1, r3
 800b104:	6878      	ldr	r0, [r7, #4]
 800b106:	f000 fc7f 	bl	800ba08 <USBH_LL_GetURBState>
 800b10a:	4603      	mov	r3, r0
 800b10c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b10e:	7bbb      	ldrb	r3, [r7, #14]
 800b110:	2b01      	cmp	r3, #1
 800b112:	d103      	bne.n	800b11c <USBH_HandleControl+0x118>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2209      	movs	r2, #9
 800b118:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800b11a:	e0dc      	b.n	800b2d6 <USBH_HandleControl+0x2d2>
      else if (URB_Status == USBH_URB_STALL)
 800b11c:	7bbb      	ldrb	r3, [r7, #14]
 800b11e:	2b05      	cmp	r3, #5
 800b120:	d102      	bne.n	800b128 <USBH_HandleControl+0x124>
        status = USBH_NOT_SUPPORTED;
 800b122:	2303      	movs	r3, #3
 800b124:	73fb      	strb	r3, [r7, #15]
      break;
 800b126:	e0d6      	b.n	800b2d6 <USBH_HandleControl+0x2d2>
        if (URB_Status == USBH_URB_ERROR)
 800b128:	7bbb      	ldrb	r3, [r7, #14]
 800b12a:	2b04      	cmp	r3, #4
 800b12c:	f040 80d3 	bne.w	800b2d6 <USBH_HandleControl+0x2d2>
          phost->Control.state = CTRL_ERROR;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	220b      	movs	r2, #11
 800b134:	761a      	strb	r2, [r3, #24]
      break;
 800b136:	e0ce      	b.n	800b2d6 <USBH_HandleControl+0x2d2>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	6899      	ldr	r1, [r3, #8]
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	899a      	ldrh	r2, [r3, #12]
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	795b      	ldrb	r3, [r3, #5]
 800b144:	2001      	movs	r0, #1
 800b146:	9000      	str	r0, [sp, #0]
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	f000 f8eb 	bl	800b324 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b154:	b29a      	uxth	r2, r3
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2206      	movs	r2, #6
 800b15e:	761a      	strb	r2, [r3, #24]
      break;
 800b160:	e0c0      	b.n	800b2e4 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	795b      	ldrb	r3, [r3, #5]
 800b166:	4619      	mov	r1, r3
 800b168:	6878      	ldr	r0, [r7, #4]
 800b16a:	f000 fc4d 	bl	800ba08 <USBH_LL_GetURBState>
 800b16e:	4603      	mov	r3, r0
 800b170:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b172:	7bbb      	ldrb	r3, [r7, #14]
 800b174:	2b01      	cmp	r3, #1
 800b176:	d103      	bne.n	800b180 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2207      	movs	r2, #7
 800b17c:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800b17e:	e0ac      	b.n	800b2da <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_STALL)
 800b180:	7bbb      	ldrb	r3, [r7, #14]
 800b182:	2b05      	cmp	r3, #5
 800b184:	d105      	bne.n	800b192 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	220c      	movs	r2, #12
 800b18a:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b18c:	2303      	movs	r3, #3
 800b18e:	73fb      	strb	r3, [r7, #15]
      break;
 800b190:	e0a3      	b.n	800b2da <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b192:	7bbb      	ldrb	r3, [r7, #14]
 800b194:	2b02      	cmp	r3, #2
 800b196:	d103      	bne.n	800b1a0 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2205      	movs	r2, #5
 800b19c:	761a      	strb	r2, [r3, #24]
      break;
 800b19e:	e09c      	b.n	800b2da <USBH_HandleControl+0x2d6>
        if (URB_Status == USBH_URB_ERROR)
 800b1a0:	7bbb      	ldrb	r3, [r7, #14]
 800b1a2:	2b04      	cmp	r3, #4
 800b1a4:	f040 8099 	bne.w	800b2da <USBH_HandleControl+0x2d6>
          phost->Control.state = CTRL_ERROR;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	220b      	movs	r2, #11
 800b1ac:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b1ae:	2302      	movs	r3, #2
 800b1b0:	73fb      	strb	r3, [r7, #15]
      break;
 800b1b2:	e092      	b.n	800b2da <USBH_HandleControl+0x2d6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	791b      	ldrb	r3, [r3, #4]
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	2100      	movs	r1, #0
 800b1bc:	6878      	ldr	r0, [r7, #4]
 800b1be:	f000 f8d6 	bl	800b36e <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b1c8:	b29a      	uxth	r2, r3
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	2208      	movs	r2, #8
 800b1d2:	761a      	strb	r2, [r3, #24]

      break;
 800b1d4:	e086      	b.n	800b2e4 <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	791b      	ldrb	r3, [r3, #4]
 800b1da:	4619      	mov	r1, r3
 800b1dc:	6878      	ldr	r0, [r7, #4]
 800b1de:	f000 fc13 	bl	800ba08 <USBH_LL_GetURBState>
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b1e6:	7bbb      	ldrb	r3, [r7, #14]
 800b1e8:	2b01      	cmp	r3, #1
 800b1ea:	d105      	bne.n	800b1f8 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	220d      	movs	r2, #13
 800b1f0:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	73fb      	strb	r3, [r7, #15]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800b1f6:	e072      	b.n	800b2de <USBH_HandleControl+0x2da>
      else if (URB_Status == USBH_URB_ERROR)
 800b1f8:	7bbb      	ldrb	r3, [r7, #14]
 800b1fa:	2b04      	cmp	r3, #4
 800b1fc:	d103      	bne.n	800b206 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	220b      	movs	r2, #11
 800b202:	761a      	strb	r2, [r3, #24]
      break;
 800b204:	e06b      	b.n	800b2de <USBH_HandleControl+0x2da>
        if (URB_Status == USBH_URB_STALL)
 800b206:	7bbb      	ldrb	r3, [r7, #14]
 800b208:	2b05      	cmp	r3, #5
 800b20a:	d168      	bne.n	800b2de <USBH_HandleControl+0x2da>
          status = USBH_NOT_SUPPORTED;
 800b20c:	2303      	movs	r3, #3
 800b20e:	73fb      	strb	r3, [r7, #15]
      break;
 800b210:	e065      	b.n	800b2de <USBH_HandleControl+0x2da>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	795b      	ldrb	r3, [r3, #5]
 800b216:	2201      	movs	r2, #1
 800b218:	9200      	str	r2, [sp, #0]
 800b21a:	2200      	movs	r2, #0
 800b21c:	2100      	movs	r1, #0
 800b21e:	6878      	ldr	r0, [r7, #4]
 800b220:	f000 f880 	bl	800b324 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b22a:	b29a      	uxth	r2, r3
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	220a      	movs	r2, #10
 800b234:	761a      	strb	r2, [r3, #24]
      break;
 800b236:	e055      	b.n	800b2e4 <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	795b      	ldrb	r3, [r3, #5]
 800b23c:	4619      	mov	r1, r3
 800b23e:	6878      	ldr	r0, [r7, #4]
 800b240:	f000 fbe2 	bl	800ba08 <USBH_LL_GetURBState>
 800b244:	4603      	mov	r3, r0
 800b246:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b248:	7bbb      	ldrb	r3, [r7, #14]
 800b24a:	2b01      	cmp	r3, #1
 800b24c:	d105      	bne.n	800b25a <USBH_HandleControl+0x256>
      {
        status = USBH_OK;
 800b24e:	2300      	movs	r3, #0
 800b250:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	220d      	movs	r2, #13
 800b256:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800b258:	e043      	b.n	800b2e2 <USBH_HandleControl+0x2de>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b25a:	7bbb      	ldrb	r3, [r7, #14]
 800b25c:	2b02      	cmp	r3, #2
 800b25e:	d103      	bne.n	800b268 <USBH_HandleControl+0x264>
        phost->Control.state = CTRL_STATUS_OUT;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2209      	movs	r2, #9
 800b264:	761a      	strb	r2, [r3, #24]
      break;
 800b266:	e03c      	b.n	800b2e2 <USBH_HandleControl+0x2de>
        if (URB_Status == USBH_URB_ERROR)
 800b268:	7bbb      	ldrb	r3, [r7, #14]
 800b26a:	2b04      	cmp	r3, #4
 800b26c:	d139      	bne.n	800b2e2 <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	220b      	movs	r2, #11
 800b272:	761a      	strb	r2, [r3, #24]
      break;
 800b274:	e035      	b.n	800b2e2 <USBH_HandleControl+0x2de>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	7e5b      	ldrb	r3, [r3, #25]
 800b27a:	3301      	adds	r3, #1
 800b27c:	b2da      	uxtb	r2, r3
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	765a      	strb	r2, [r3, #25]
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	7e5b      	ldrb	r3, [r3, #25]
 800b286:	2b02      	cmp	r3, #2
 800b288:	d806      	bhi.n	800b298 <USBH_HandleControl+0x294>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2201      	movs	r2, #1
 800b28e:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2201      	movs	r2, #1
 800b294:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b296:	e025      	b.n	800b2e4 <USBH_HandleControl+0x2e0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b29e:	2106      	movs	r1, #6
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	795b      	ldrb	r3, [r3, #5]
 800b2ae:	4619      	mov	r1, r3
 800b2b0:	6878      	ldr	r0, [r7, #4]
 800b2b2:	f000 f90d 	bl	800b4d0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	791b      	ldrb	r3, [r3, #4]
 800b2ba:	4619      	mov	r1, r3
 800b2bc:	6878      	ldr	r0, [r7, #4]
 800b2be:	f000 f907 	bl	800b4d0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b2c8:	2302      	movs	r3, #2
 800b2ca:	73fb      	strb	r3, [r7, #15]
      break;
 800b2cc:	e00a      	b.n	800b2e4 <USBH_HandleControl+0x2e0>

    default:
      break;
 800b2ce:	bf00      	nop
 800b2d0:	e008      	b.n	800b2e4 <USBH_HandleControl+0x2e0>
      break;
 800b2d2:	bf00      	nop
 800b2d4:	e006      	b.n	800b2e4 <USBH_HandleControl+0x2e0>
      break;
 800b2d6:	bf00      	nop
 800b2d8:	e004      	b.n	800b2e4 <USBH_HandleControl+0x2e0>
      break;
 800b2da:	bf00      	nop
 800b2dc:	e002      	b.n	800b2e4 <USBH_HandleControl+0x2e0>
      break;
 800b2de:	bf00      	nop
 800b2e0:	e000      	b.n	800b2e4 <USBH_HandleControl+0x2e0>
      break;
 800b2e2:	bf00      	nop
  }

  return status;
 800b2e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	3710      	adds	r7, #16
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}
 800b2ee:	bf00      	nop

0800b2f0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b088      	sub	sp, #32
 800b2f4:	af04      	add	r7, sp, #16
 800b2f6:	60f8      	str	r0, [r7, #12]
 800b2f8:	60b9      	str	r1, [r7, #8]
 800b2fa:	4613      	mov	r3, r2
 800b2fc:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b2fe:	79f9      	ldrb	r1, [r7, #7]
 800b300:	2300      	movs	r3, #0
 800b302:	9303      	str	r3, [sp, #12]
 800b304:	2308      	movs	r3, #8
 800b306:	9302      	str	r3, [sp, #8]
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	9301      	str	r3, [sp, #4]
 800b30c:	2300      	movs	r3, #0
 800b30e:	9300      	str	r3, [sp, #0]
 800b310:	2300      	movs	r3, #0
 800b312:	2200      	movs	r2, #0
 800b314:	68f8      	ldr	r0, [r7, #12]
 800b316:	f000 fb46 	bl	800b9a6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800b31a:	2300      	movs	r3, #0
}
 800b31c:	4618      	mov	r0, r3
 800b31e:	3710      	adds	r7, #16
 800b320:	46bd      	mov	sp, r7
 800b322:	bd80      	pop	{r7, pc}

0800b324 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b088      	sub	sp, #32
 800b328:	af04      	add	r7, sp, #16
 800b32a:	60f8      	str	r0, [r7, #12]
 800b32c:	60b9      	str	r1, [r7, #8]
 800b32e:	4611      	mov	r1, r2
 800b330:	461a      	mov	r2, r3
 800b332:	460b      	mov	r3, r1
 800b334:	80fb      	strh	r3, [r7, #6]
 800b336:	4613      	mov	r3, r2
 800b338:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b340:	2b00      	cmp	r3, #0
 800b342:	d001      	beq.n	800b348 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b344:	2300      	movs	r3, #0
 800b346:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b348:	7979      	ldrb	r1, [r7, #5]
 800b34a:	7e3b      	ldrb	r3, [r7, #24]
 800b34c:	9303      	str	r3, [sp, #12]
 800b34e:	88fb      	ldrh	r3, [r7, #6]
 800b350:	9302      	str	r3, [sp, #8]
 800b352:	68bb      	ldr	r3, [r7, #8]
 800b354:	9301      	str	r3, [sp, #4]
 800b356:	2301      	movs	r3, #1
 800b358:	9300      	str	r3, [sp, #0]
 800b35a:	2300      	movs	r3, #0
 800b35c:	2200      	movs	r2, #0
 800b35e:	68f8      	ldr	r0, [r7, #12]
 800b360:	f000 fb21 	bl	800b9a6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b364:	2300      	movs	r3, #0
}
 800b366:	4618      	mov	r0, r3
 800b368:	3710      	adds	r7, #16
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bd80      	pop	{r7, pc}

0800b36e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b36e:	b580      	push	{r7, lr}
 800b370:	b088      	sub	sp, #32
 800b372:	af04      	add	r7, sp, #16
 800b374:	60f8      	str	r0, [r7, #12]
 800b376:	60b9      	str	r1, [r7, #8]
 800b378:	4611      	mov	r1, r2
 800b37a:	461a      	mov	r2, r3
 800b37c:	460b      	mov	r3, r1
 800b37e:	80fb      	strh	r3, [r7, #6]
 800b380:	4613      	mov	r3, r2
 800b382:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b384:	7979      	ldrb	r1, [r7, #5]
 800b386:	2300      	movs	r3, #0
 800b388:	9303      	str	r3, [sp, #12]
 800b38a:	88fb      	ldrh	r3, [r7, #6]
 800b38c:	9302      	str	r3, [sp, #8]
 800b38e:	68bb      	ldr	r3, [r7, #8]
 800b390:	9301      	str	r3, [sp, #4]
 800b392:	2301      	movs	r3, #1
 800b394:	9300      	str	r3, [sp, #0]
 800b396:	2300      	movs	r3, #0
 800b398:	2201      	movs	r2, #1
 800b39a:	68f8      	ldr	r0, [r7, #12]
 800b39c:	f000 fb03 	bl	800b9a6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b3a0:	2300      	movs	r3, #0

}
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	3710      	adds	r7, #16
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	bd80      	pop	{r7, pc}

0800b3aa <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b3aa:	b580      	push	{r7, lr}
 800b3ac:	b088      	sub	sp, #32
 800b3ae:	af04      	add	r7, sp, #16
 800b3b0:	60f8      	str	r0, [r7, #12]
 800b3b2:	60b9      	str	r1, [r7, #8]
 800b3b4:	4611      	mov	r1, r2
 800b3b6:	461a      	mov	r2, r3
 800b3b8:	460b      	mov	r3, r1
 800b3ba:	80fb      	strh	r3, [r7, #6]
 800b3bc:	4613      	mov	r3, r2
 800b3be:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d001      	beq.n	800b3ce <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b3ce:	7979      	ldrb	r1, [r7, #5]
 800b3d0:	7e3b      	ldrb	r3, [r7, #24]
 800b3d2:	9303      	str	r3, [sp, #12]
 800b3d4:	88fb      	ldrh	r3, [r7, #6]
 800b3d6:	9302      	str	r3, [sp, #8]
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	9301      	str	r3, [sp, #4]
 800b3dc:	2301      	movs	r3, #1
 800b3de:	9300      	str	r3, [sp, #0]
 800b3e0:	2302      	movs	r3, #2
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	68f8      	ldr	r0, [r7, #12]
 800b3e6:	f000 fade 	bl	800b9a6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b3ea:	2300      	movs	r3, #0
}
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	3710      	adds	r7, #16
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bd80      	pop	{r7, pc}

0800b3f4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b088      	sub	sp, #32
 800b3f8:	af04      	add	r7, sp, #16
 800b3fa:	60f8      	str	r0, [r7, #12]
 800b3fc:	60b9      	str	r1, [r7, #8]
 800b3fe:	4611      	mov	r1, r2
 800b400:	461a      	mov	r2, r3
 800b402:	460b      	mov	r3, r1
 800b404:	80fb      	strh	r3, [r7, #6]
 800b406:	4613      	mov	r3, r2
 800b408:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b40a:	7979      	ldrb	r1, [r7, #5]
 800b40c:	2300      	movs	r3, #0
 800b40e:	9303      	str	r3, [sp, #12]
 800b410:	88fb      	ldrh	r3, [r7, #6]
 800b412:	9302      	str	r3, [sp, #8]
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	9301      	str	r3, [sp, #4]
 800b418:	2301      	movs	r3, #1
 800b41a:	9300      	str	r3, [sp, #0]
 800b41c:	2302      	movs	r3, #2
 800b41e:	2201      	movs	r2, #1
 800b420:	68f8      	ldr	r0, [r7, #12]
 800b422:	f000 fac0 	bl	800b9a6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b426:	2300      	movs	r3, #0
}
 800b428:	4618      	mov	r0, r3
 800b42a:	3710      	adds	r7, #16
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bd80      	pop	{r7, pc}

0800b430 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b086      	sub	sp, #24
 800b434:	af04      	add	r7, sp, #16
 800b436:	6078      	str	r0, [r7, #4]
 800b438:	4608      	mov	r0, r1
 800b43a:	4611      	mov	r1, r2
 800b43c:	461a      	mov	r2, r3
 800b43e:	4603      	mov	r3, r0
 800b440:	70fb      	strb	r3, [r7, #3]
 800b442:	460b      	mov	r3, r1
 800b444:	70bb      	strb	r3, [r7, #2]
 800b446:	4613      	mov	r3, r2
 800b448:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b44a:	7878      	ldrb	r0, [r7, #1]
 800b44c:	78ba      	ldrb	r2, [r7, #2]
 800b44e:	78f9      	ldrb	r1, [r7, #3]
 800b450:	8b3b      	ldrh	r3, [r7, #24]
 800b452:	9302      	str	r3, [sp, #8]
 800b454:	7d3b      	ldrb	r3, [r7, #20]
 800b456:	9301      	str	r3, [sp, #4]
 800b458:	7c3b      	ldrb	r3, [r7, #16]
 800b45a:	9300      	str	r3, [sp, #0]
 800b45c:	4603      	mov	r3, r0
 800b45e:	6878      	ldr	r0, [r7, #4]
 800b460:	f000 fa53 	bl	800b90a <USBH_LL_OpenPipe>

  return USBH_OK;
 800b464:	2300      	movs	r3, #0
}
 800b466:	4618      	mov	r0, r3
 800b468:	3708      	adds	r7, #8
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd80      	pop	{r7, pc}

0800b46e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b46e:	b580      	push	{r7, lr}
 800b470:	b082      	sub	sp, #8
 800b472:	af00      	add	r7, sp, #0
 800b474:	6078      	str	r0, [r7, #4]
 800b476:	460b      	mov	r3, r1
 800b478:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800b47a:	78fb      	ldrb	r3, [r7, #3]
 800b47c:	4619      	mov	r1, r3
 800b47e:	6878      	ldr	r0, [r7, #4]
 800b480:	f000 fa72 	bl	800b968 <USBH_LL_ClosePipe>

  return USBH_OK;
 800b484:	2300      	movs	r3, #0
}
 800b486:	4618      	mov	r0, r3
 800b488:	3708      	adds	r7, #8
 800b48a:	46bd      	mov	sp, r7
 800b48c:	bd80      	pop	{r7, pc}

0800b48e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b48e:	b580      	push	{r7, lr}
 800b490:	b084      	sub	sp, #16
 800b492:	af00      	add	r7, sp, #0
 800b494:	6078      	str	r0, [r7, #4]
 800b496:	460b      	mov	r3, r1
 800b498:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f000 f836 	bl	800b50c <USBH_GetFreePipe>
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b4a4:	89fb      	ldrh	r3, [r7, #14]
 800b4a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b4aa:	4293      	cmp	r3, r2
 800b4ac:	d00a      	beq.n	800b4c4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800b4ae:	78fa      	ldrb	r2, [r7, #3]
 800b4b0:	89fb      	ldrh	r3, [r7, #14]
 800b4b2:	f003 030f 	and.w	r3, r3, #15
 800b4b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b4ba:	6879      	ldr	r1, [r7, #4]
 800b4bc:	33e0      	adds	r3, #224	@ 0xe0
 800b4be:	009b      	lsls	r3, r3, #2
 800b4c0:	440b      	add	r3, r1
 800b4c2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b4c4:	89fb      	ldrh	r3, [r7, #14]
 800b4c6:	b2db      	uxtb	r3, r3
}
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	3710      	adds	r7, #16
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	bd80      	pop	{r7, pc}

0800b4d0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b4d0:	b480      	push	{r7}
 800b4d2:	b083      	sub	sp, #12
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
 800b4d8:	460b      	mov	r3, r1
 800b4da:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800b4dc:	78fb      	ldrb	r3, [r7, #3]
 800b4de:	2b0f      	cmp	r3, #15
 800b4e0:	d80d      	bhi.n	800b4fe <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b4e2:	78fb      	ldrb	r3, [r7, #3]
 800b4e4:	687a      	ldr	r2, [r7, #4]
 800b4e6:	33e0      	adds	r3, #224	@ 0xe0
 800b4e8:	009b      	lsls	r3, r3, #2
 800b4ea:	4413      	add	r3, r2
 800b4ec:	685a      	ldr	r2, [r3, #4]
 800b4ee:	78fb      	ldrb	r3, [r7, #3]
 800b4f0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b4f4:	6879      	ldr	r1, [r7, #4]
 800b4f6:	33e0      	adds	r3, #224	@ 0xe0
 800b4f8:	009b      	lsls	r3, r3, #2
 800b4fa:	440b      	add	r3, r1
 800b4fc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b4fe:	2300      	movs	r3, #0
}
 800b500:	4618      	mov	r0, r3
 800b502:	370c      	adds	r7, #12
 800b504:	46bd      	mov	sp, r7
 800b506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50a:	4770      	bx	lr

0800b50c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b50c:	b480      	push	{r7}
 800b50e:	b085      	sub	sp, #20
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b514:	2300      	movs	r3, #0
 800b516:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800b518:	2300      	movs	r3, #0
 800b51a:	73fb      	strb	r3, [r7, #15]
 800b51c:	e00f      	b.n	800b53e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b51e:	7bfb      	ldrb	r3, [r7, #15]
 800b520:	687a      	ldr	r2, [r7, #4]
 800b522:	33e0      	adds	r3, #224	@ 0xe0
 800b524:	009b      	lsls	r3, r3, #2
 800b526:	4413      	add	r3, r2
 800b528:	685b      	ldr	r3, [r3, #4]
 800b52a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d102      	bne.n	800b538 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b532:	7bfb      	ldrb	r3, [r7, #15]
 800b534:	b29b      	uxth	r3, r3
 800b536:	e007      	b.n	800b548 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800b538:	7bfb      	ldrb	r3, [r7, #15]
 800b53a:	3301      	adds	r3, #1
 800b53c:	73fb      	strb	r3, [r7, #15]
 800b53e:	7bfb      	ldrb	r3, [r7, #15]
 800b540:	2b0f      	cmp	r3, #15
 800b542:	d9ec      	bls.n	800b51e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b544:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800b548:	4618      	mov	r0, r3
 800b54a:	3714      	adds	r7, #20
 800b54c:	46bd      	mov	sp, r7
 800b54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b552:	4770      	bx	lr

0800b554 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b554:	b580      	push	{r7, lr}
 800b556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b558:	2201      	movs	r2, #1
 800b55a:	490e      	ldr	r1, [pc, #56]	@ (800b594 <MX_USB_HOST_Init+0x40>)
 800b55c:	480e      	ldr	r0, [pc, #56]	@ (800b598 <MX_USB_HOST_Init+0x44>)
 800b55e:	f7fe fb0f 	bl	8009b80 <USBH_Init>
 800b562:	4603      	mov	r3, r0
 800b564:	2b00      	cmp	r3, #0
 800b566:	d001      	beq.n	800b56c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b568:	f7f6 f874 	bl	8001654 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800b56c:	490b      	ldr	r1, [pc, #44]	@ (800b59c <MX_USB_HOST_Init+0x48>)
 800b56e:	480a      	ldr	r0, [pc, #40]	@ (800b598 <MX_USB_HOST_Init+0x44>)
 800b570:	f7fe fbb1 	bl	8009cd6 <USBH_RegisterClass>
 800b574:	4603      	mov	r3, r0
 800b576:	2b00      	cmp	r3, #0
 800b578:	d001      	beq.n	800b57e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b57a:	f7f6 f86b 	bl	8001654 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b57e:	4806      	ldr	r0, [pc, #24]	@ (800b598 <MX_USB_HOST_Init+0x44>)
 800b580:	f7fe fc35 	bl	8009dee <USBH_Start>
 800b584:	4603      	mov	r3, r0
 800b586:	2b00      	cmp	r3, #0
 800b588:	d001      	beq.n	800b58e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b58a:	f7f6 f863 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b58e:	bf00      	nop
 800b590:	bd80      	pop	{r7, pc}
 800b592:	bf00      	nop
 800b594:	0800b5b5 	.word	0x0800b5b5
 800b598:	200084b0 	.word	0x200084b0
 800b59c:	20000024 	.word	0x20000024

0800b5a0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800b5a4:	4802      	ldr	r0, [pc, #8]	@ (800b5b0 <MX_USB_HOST_Process+0x10>)
 800b5a6:	f7fe fc33 	bl	8009e10 <USBH_Process>
}
 800b5aa:	bf00      	nop
 800b5ac:	bd80      	pop	{r7, pc}
 800b5ae:	bf00      	nop
 800b5b0:	200084b0 	.word	0x200084b0

0800b5b4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b5b4:	b480      	push	{r7}
 800b5b6:	b083      	sub	sp, #12
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
 800b5bc:	460b      	mov	r3, r1
 800b5be:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b5c0:	78fb      	ldrb	r3, [r7, #3]
 800b5c2:	3b01      	subs	r3, #1
 800b5c4:	2b04      	cmp	r3, #4
 800b5c6:	d819      	bhi.n	800b5fc <USBH_UserProcess+0x48>
 800b5c8:	a201      	add	r2, pc, #4	@ (adr r2, 800b5d0 <USBH_UserProcess+0x1c>)
 800b5ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5ce:	bf00      	nop
 800b5d0:	0800b5fd 	.word	0x0800b5fd
 800b5d4:	0800b5ed 	.word	0x0800b5ed
 800b5d8:	0800b5fd 	.word	0x0800b5fd
 800b5dc:	0800b5f5 	.word	0x0800b5f5
 800b5e0:	0800b5e5 	.word	0x0800b5e5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b5e4:	4b09      	ldr	r3, [pc, #36]	@ (800b60c <USBH_UserProcess+0x58>)
 800b5e6:	2203      	movs	r2, #3
 800b5e8:	701a      	strb	r2, [r3, #0]
  break;
 800b5ea:	e008      	b.n	800b5fe <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b5ec:	4b07      	ldr	r3, [pc, #28]	@ (800b60c <USBH_UserProcess+0x58>)
 800b5ee:	2202      	movs	r2, #2
 800b5f0:	701a      	strb	r2, [r3, #0]
  break;
 800b5f2:	e004      	b.n	800b5fe <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b5f4:	4b05      	ldr	r3, [pc, #20]	@ (800b60c <USBH_UserProcess+0x58>)
 800b5f6:	2201      	movs	r2, #1
 800b5f8:	701a      	strb	r2, [r3, #0]
  break;
 800b5fa:	e000      	b.n	800b5fe <USBH_UserProcess+0x4a>

  default:
  break;
 800b5fc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b5fe:	bf00      	nop
 800b600:	370c      	adds	r7, #12
 800b602:	46bd      	mov	sp, r7
 800b604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b608:	4770      	bx	lr
 800b60a:	bf00      	nop
 800b60c:	20008888 	.word	0x20008888

0800b610 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b08a      	sub	sp, #40	@ 0x28
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b618:	f107 0314 	add.w	r3, r7, #20
 800b61c:	2200      	movs	r2, #0
 800b61e:	601a      	str	r2, [r3, #0]
 800b620:	605a      	str	r2, [r3, #4]
 800b622:	609a      	str	r2, [r3, #8]
 800b624:	60da      	str	r2, [r3, #12]
 800b626:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b630:	d147      	bne.n	800b6c2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b632:	2300      	movs	r3, #0
 800b634:	613b      	str	r3, [r7, #16]
 800b636:	4b25      	ldr	r3, [pc, #148]	@ (800b6cc <HAL_HCD_MspInit+0xbc>)
 800b638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b63a:	4a24      	ldr	r2, [pc, #144]	@ (800b6cc <HAL_HCD_MspInit+0xbc>)
 800b63c:	f043 0301 	orr.w	r3, r3, #1
 800b640:	6313      	str	r3, [r2, #48]	@ 0x30
 800b642:	4b22      	ldr	r3, [pc, #136]	@ (800b6cc <HAL_HCD_MspInit+0xbc>)
 800b644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b646:	f003 0301 	and.w	r3, r3, #1
 800b64a:	613b      	str	r3, [r7, #16]
 800b64c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b64e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b652:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b654:	2300      	movs	r3, #0
 800b656:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b658:	2300      	movs	r3, #0
 800b65a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b65c:	f107 0314 	add.w	r3, r7, #20
 800b660:	4619      	mov	r1, r3
 800b662:	481b      	ldr	r0, [pc, #108]	@ (800b6d0 <HAL_HCD_MspInit+0xc0>)
 800b664:	f7f7 fdd4 	bl	8003210 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b668:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800b66c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b66e:	2302      	movs	r3, #2
 800b670:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b672:	2300      	movs	r3, #0
 800b674:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b676:	2303      	movs	r3, #3
 800b678:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b67a:	230a      	movs	r3, #10
 800b67c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b67e:	f107 0314 	add.w	r3, r7, #20
 800b682:	4619      	mov	r1, r3
 800b684:	4812      	ldr	r0, [pc, #72]	@ (800b6d0 <HAL_HCD_MspInit+0xc0>)
 800b686:	f7f7 fdc3 	bl	8003210 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b68a:	4b10      	ldr	r3, [pc, #64]	@ (800b6cc <HAL_HCD_MspInit+0xbc>)
 800b68c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b68e:	4a0f      	ldr	r2, [pc, #60]	@ (800b6cc <HAL_HCD_MspInit+0xbc>)
 800b690:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b694:	6353      	str	r3, [r2, #52]	@ 0x34
 800b696:	2300      	movs	r3, #0
 800b698:	60fb      	str	r3, [r7, #12]
 800b69a:	4b0c      	ldr	r3, [pc, #48]	@ (800b6cc <HAL_HCD_MspInit+0xbc>)
 800b69c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b69e:	4a0b      	ldr	r2, [pc, #44]	@ (800b6cc <HAL_HCD_MspInit+0xbc>)
 800b6a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b6a4:	6453      	str	r3, [r2, #68]	@ 0x44
 800b6a6:	4b09      	ldr	r3, [pc, #36]	@ (800b6cc <HAL_HCD_MspInit+0xbc>)
 800b6a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b6aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b6ae:	60fb      	str	r3, [r7, #12]
 800b6b0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	2100      	movs	r1, #0
 800b6b6:	2043      	movs	r0, #67	@ 0x43
 800b6b8:	f7f7 fa2f 	bl	8002b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b6bc:	2043      	movs	r0, #67	@ 0x43
 800b6be:	f7f7 fa48 	bl	8002b52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b6c2:	bf00      	nop
 800b6c4:	3728      	adds	r7, #40	@ 0x28
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	bd80      	pop	{r7, pc}
 800b6ca:	bf00      	nop
 800b6cc:	40023800 	.word	0x40023800
 800b6d0:	40020000 	.word	0x40020000

0800b6d4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b082      	sub	sp, #8
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	f7fe ff6d 	bl	800a5c2 <USBH_LL_IncTimer>
}
 800b6e8:	bf00      	nop
 800b6ea:	3708      	adds	r7, #8
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	bd80      	pop	{r7, pc}

0800b6f0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b082      	sub	sp, #8
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b6fe:	4618      	mov	r0, r3
 800b700:	f7fe ffa9 	bl	800a656 <USBH_LL_Connect>
}
 800b704:	bf00      	nop
 800b706:	3708      	adds	r7, #8
 800b708:	46bd      	mov	sp, r7
 800b70a:	bd80      	pop	{r7, pc}

0800b70c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b082      	sub	sp, #8
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b71a:	4618      	mov	r0, r3
 800b71c:	f7fe ffb2 	bl	800a684 <USBH_LL_Disconnect>
}
 800b720:	bf00      	nop
 800b722:	3708      	adds	r7, #8
 800b724:	46bd      	mov	sp, r7
 800b726:	bd80      	pop	{r7, pc}

0800b728 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b728:	b480      	push	{r7}
 800b72a:	b083      	sub	sp, #12
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
 800b730:	460b      	mov	r3, r1
 800b732:	70fb      	strb	r3, [r7, #3]
 800b734:	4613      	mov	r3, r2
 800b736:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b738:	bf00      	nop
 800b73a:	370c      	adds	r7, #12
 800b73c:	46bd      	mov	sp, r7
 800b73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b742:	4770      	bx	lr

0800b744 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b082      	sub	sp, #8
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b752:	4618      	mov	r0, r3
 800b754:	f7fe ff5f 	bl	800a616 <USBH_LL_PortEnabled>
}
 800b758:	bf00      	nop
 800b75a:	3708      	adds	r7, #8
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd80      	pop	{r7, pc}

0800b760 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b082      	sub	sp, #8
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b76e:	4618      	mov	r0, r3
 800b770:	f7fe ff5f 	bl	800a632 <USBH_LL_PortDisabled>
}
 800b774:	bf00      	nop
 800b776:	3708      	adds	r7, #8
 800b778:	46bd      	mov	sp, r7
 800b77a:	bd80      	pop	{r7, pc}

0800b77c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b082      	sub	sp, #8
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800b78a:	2b01      	cmp	r3, #1
 800b78c:	d12a      	bne.n	800b7e4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b78e:	4a18      	ldr	r2, [pc, #96]	@ (800b7f0 <USBH_LL_Init+0x74>)
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	4a15      	ldr	r2, [pc, #84]	@ (800b7f0 <USBH_LL_Init+0x74>)
 800b79a:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b79e:	4b14      	ldr	r3, [pc, #80]	@ (800b7f0 <USBH_LL_Init+0x74>)
 800b7a0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800b7a4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b7a6:	4b12      	ldr	r3, [pc, #72]	@ (800b7f0 <USBH_LL_Init+0x74>)
 800b7a8:	2208      	movs	r2, #8
 800b7aa:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b7ac:	4b10      	ldr	r3, [pc, #64]	@ (800b7f0 <USBH_LL_Init+0x74>)
 800b7ae:	2201      	movs	r2, #1
 800b7b0:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b7b2:	4b0f      	ldr	r3, [pc, #60]	@ (800b7f0 <USBH_LL_Init+0x74>)
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b7b8:	4b0d      	ldr	r3, [pc, #52]	@ (800b7f0 <USBH_LL_Init+0x74>)
 800b7ba:	2202      	movs	r2, #2
 800b7bc:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b7be:	4b0c      	ldr	r3, [pc, #48]	@ (800b7f0 <USBH_LL_Init+0x74>)
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b7c4:	480a      	ldr	r0, [pc, #40]	@ (800b7f0 <USBH_LL_Init+0x74>)
 800b7c6:	f7f7 fef1 	bl	80035ac <HAL_HCD_Init>
 800b7ca:	4603      	mov	r3, r0
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d001      	beq.n	800b7d4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b7d0:	f7f5 ff40 	bl	8001654 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b7d4:	4806      	ldr	r0, [pc, #24]	@ (800b7f0 <USBH_LL_Init+0x74>)
 800b7d6:	f7f8 fb51 	bl	8003e7c <HAL_HCD_GetCurrentFrame>
 800b7da:	4603      	mov	r3, r0
 800b7dc:	4619      	mov	r1, r3
 800b7de:	6878      	ldr	r0, [r7, #4]
 800b7e0:	f7fe fee0 	bl	800a5a4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b7e4:	2300      	movs	r3, #0
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	3708      	adds	r7, #8
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd80      	pop	{r7, pc}
 800b7ee:	bf00      	nop
 800b7f0:	2000888c 	.word	0x2000888c

0800b7f4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b084      	sub	sp, #16
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b800:	2300      	movs	r3, #0
 800b802:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b80a:	4618      	mov	r0, r3
 800b80c:	f7f8 fabe 	bl	8003d8c <HAL_HCD_Start>
 800b810:	4603      	mov	r3, r0
 800b812:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b814:	7bfb      	ldrb	r3, [r7, #15]
 800b816:	4618      	mov	r0, r3
 800b818:	f000 f95e 	bl	800bad8 <USBH_Get_USB_Status>
 800b81c:	4603      	mov	r3, r0
 800b81e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b820:	7bbb      	ldrb	r3, [r7, #14]
}
 800b822:	4618      	mov	r0, r3
 800b824:	3710      	adds	r7, #16
 800b826:	46bd      	mov	sp, r7
 800b828:	bd80      	pop	{r7, pc}

0800b82a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b82a:	b580      	push	{r7, lr}
 800b82c:	b084      	sub	sp, #16
 800b82e:	af00      	add	r7, sp, #0
 800b830:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b832:	2300      	movs	r3, #0
 800b834:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b836:	2300      	movs	r3, #0
 800b838:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b840:	4618      	mov	r0, r3
 800b842:	f7f8 fac6 	bl	8003dd2 <HAL_HCD_Stop>
 800b846:	4603      	mov	r3, r0
 800b848:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b84a:	7bfb      	ldrb	r3, [r7, #15]
 800b84c:	4618      	mov	r0, r3
 800b84e:	f000 f943 	bl	800bad8 <USBH_Get_USB_Status>
 800b852:	4603      	mov	r3, r0
 800b854:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b856:	7bbb      	ldrb	r3, [r7, #14]
}
 800b858:	4618      	mov	r0, r3
 800b85a:	3710      	adds	r7, #16
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd80      	pop	{r7, pc}

0800b860 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b084      	sub	sp, #16
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b868:	2301      	movs	r3, #1
 800b86a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b872:	4618      	mov	r0, r3
 800b874:	f7f8 fb10 	bl	8003e98 <HAL_HCD_GetCurrentSpeed>
 800b878:	4603      	mov	r3, r0
 800b87a:	2b02      	cmp	r3, #2
 800b87c:	d00c      	beq.n	800b898 <USBH_LL_GetSpeed+0x38>
 800b87e:	2b02      	cmp	r3, #2
 800b880:	d80d      	bhi.n	800b89e <USBH_LL_GetSpeed+0x3e>
 800b882:	2b00      	cmp	r3, #0
 800b884:	d002      	beq.n	800b88c <USBH_LL_GetSpeed+0x2c>
 800b886:	2b01      	cmp	r3, #1
 800b888:	d003      	beq.n	800b892 <USBH_LL_GetSpeed+0x32>
 800b88a:	e008      	b.n	800b89e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b88c:	2300      	movs	r3, #0
 800b88e:	73fb      	strb	r3, [r7, #15]
    break;
 800b890:	e008      	b.n	800b8a4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b892:	2301      	movs	r3, #1
 800b894:	73fb      	strb	r3, [r7, #15]
    break;
 800b896:	e005      	b.n	800b8a4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b898:	2302      	movs	r3, #2
 800b89a:	73fb      	strb	r3, [r7, #15]
    break;
 800b89c:	e002      	b.n	800b8a4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b89e:	2301      	movs	r3, #1
 800b8a0:	73fb      	strb	r3, [r7, #15]
    break;
 800b8a2:	bf00      	nop
  }
  return  speed;
 800b8a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	3710      	adds	r7, #16
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}

0800b8ae <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b8ae:	b580      	push	{r7, lr}
 800b8b0:	b084      	sub	sp, #16
 800b8b2:	af00      	add	r7, sp, #0
 800b8b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	f7f8 faa1 	bl	8003e0c <HAL_HCD_ResetPort>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b8ce:	7bfb      	ldrb	r3, [r7, #15]
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	f000 f901 	bl	800bad8 <USBH_Get_USB_Status>
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b8da:	7bbb      	ldrb	r3, [r7, #14]
}
 800b8dc:	4618      	mov	r0, r3
 800b8de:	3710      	adds	r7, #16
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	bd80      	pop	{r7, pc}

0800b8e4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b082      	sub	sp, #8
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
 800b8ec:	460b      	mov	r3, r1
 800b8ee:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b8f6:	78fa      	ldrb	r2, [r7, #3]
 800b8f8:	4611      	mov	r1, r2
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	f7f8 faa9 	bl	8003e52 <HAL_HCD_HC_GetXferCount>
 800b900:	4603      	mov	r3, r0
}
 800b902:	4618      	mov	r0, r3
 800b904:	3708      	adds	r7, #8
 800b906:	46bd      	mov	sp, r7
 800b908:	bd80      	pop	{r7, pc}

0800b90a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b90a:	b590      	push	{r4, r7, lr}
 800b90c:	b089      	sub	sp, #36	@ 0x24
 800b90e:	af04      	add	r7, sp, #16
 800b910:	6078      	str	r0, [r7, #4]
 800b912:	4608      	mov	r0, r1
 800b914:	4611      	mov	r1, r2
 800b916:	461a      	mov	r2, r3
 800b918:	4603      	mov	r3, r0
 800b91a:	70fb      	strb	r3, [r7, #3]
 800b91c:	460b      	mov	r3, r1
 800b91e:	70bb      	strb	r3, [r7, #2]
 800b920:	4613      	mov	r3, r2
 800b922:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b924:	2300      	movs	r3, #0
 800b926:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b928:	2300      	movs	r3, #0
 800b92a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800b932:	787c      	ldrb	r4, [r7, #1]
 800b934:	78ba      	ldrb	r2, [r7, #2]
 800b936:	78f9      	ldrb	r1, [r7, #3]
 800b938:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b93a:	9302      	str	r3, [sp, #8]
 800b93c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b940:	9301      	str	r3, [sp, #4]
 800b942:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b946:	9300      	str	r3, [sp, #0]
 800b948:	4623      	mov	r3, r4
 800b94a:	f7f7 fe96 	bl	800367a <HAL_HCD_HC_Init>
 800b94e:	4603      	mov	r3, r0
 800b950:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b952:	7bfb      	ldrb	r3, [r7, #15]
 800b954:	4618      	mov	r0, r3
 800b956:	f000 f8bf 	bl	800bad8 <USBH_Get_USB_Status>
 800b95a:	4603      	mov	r3, r0
 800b95c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b95e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b960:	4618      	mov	r0, r3
 800b962:	3714      	adds	r7, #20
 800b964:	46bd      	mov	sp, r7
 800b966:	bd90      	pop	{r4, r7, pc}

0800b968 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b084      	sub	sp, #16
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
 800b970:	460b      	mov	r3, r1
 800b972:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b974:	2300      	movs	r3, #0
 800b976:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b978:	2300      	movs	r3, #0
 800b97a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b982:	78fa      	ldrb	r2, [r7, #3]
 800b984:	4611      	mov	r1, r2
 800b986:	4618      	mov	r0, r3
 800b988:	f7f7 ff2f 	bl	80037ea <HAL_HCD_HC_Halt>
 800b98c:	4603      	mov	r3, r0
 800b98e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b990:	7bfb      	ldrb	r3, [r7, #15]
 800b992:	4618      	mov	r0, r3
 800b994:	f000 f8a0 	bl	800bad8 <USBH_Get_USB_Status>
 800b998:	4603      	mov	r3, r0
 800b99a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b99c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b99e:	4618      	mov	r0, r3
 800b9a0:	3710      	adds	r7, #16
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd80      	pop	{r7, pc}

0800b9a6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b9a6:	b590      	push	{r4, r7, lr}
 800b9a8:	b089      	sub	sp, #36	@ 0x24
 800b9aa:	af04      	add	r7, sp, #16
 800b9ac:	6078      	str	r0, [r7, #4]
 800b9ae:	4608      	mov	r0, r1
 800b9b0:	4611      	mov	r1, r2
 800b9b2:	461a      	mov	r2, r3
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	70fb      	strb	r3, [r7, #3]
 800b9b8:	460b      	mov	r3, r1
 800b9ba:	70bb      	strb	r3, [r7, #2]
 800b9bc:	4613      	mov	r3, r2
 800b9be:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800b9ce:	787c      	ldrb	r4, [r7, #1]
 800b9d0:	78ba      	ldrb	r2, [r7, #2]
 800b9d2:	78f9      	ldrb	r1, [r7, #3]
 800b9d4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b9d8:	9303      	str	r3, [sp, #12]
 800b9da:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b9dc:	9302      	str	r3, [sp, #8]
 800b9de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9e0:	9301      	str	r3, [sp, #4]
 800b9e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b9e6:	9300      	str	r3, [sp, #0]
 800b9e8:	4623      	mov	r3, r4
 800b9ea:	f7f7 ff21 	bl	8003830 <HAL_HCD_HC_SubmitRequest>
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b9f2:	7bfb      	ldrb	r3, [r7, #15]
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	f000 f86f 	bl	800bad8 <USBH_Get_USB_Status>
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b9fe:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba00:	4618      	mov	r0, r3
 800ba02:	3714      	adds	r7, #20
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bd90      	pop	{r4, r7, pc}

0800ba08 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b082      	sub	sp, #8
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
 800ba10:	460b      	mov	r3, r1
 800ba12:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ba1a:	78fa      	ldrb	r2, [r7, #3]
 800ba1c:	4611      	mov	r1, r2
 800ba1e:	4618      	mov	r0, r3
 800ba20:	f7f8 fa02 	bl	8003e28 <HAL_HCD_HC_GetURBState>
 800ba24:	4603      	mov	r3, r0
}
 800ba26:	4618      	mov	r0, r3
 800ba28:	3708      	adds	r7, #8
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	bd80      	pop	{r7, pc}

0800ba2e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800ba2e:	b580      	push	{r7, lr}
 800ba30:	b082      	sub	sp, #8
 800ba32:	af00      	add	r7, sp, #0
 800ba34:	6078      	str	r0, [r7, #4]
 800ba36:	460b      	mov	r3, r1
 800ba38:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800ba40:	2b01      	cmp	r3, #1
 800ba42:	d103      	bne.n	800ba4c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800ba44:	78fb      	ldrb	r3, [r7, #3]
 800ba46:	4618      	mov	r0, r3
 800ba48:	f000 f872 	bl	800bb30 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800ba4c:	20c8      	movs	r0, #200	@ 0xc8
 800ba4e:	f7f6 ff23 	bl	8002898 <HAL_Delay>
  return USBH_OK;
 800ba52:	2300      	movs	r3, #0
}
 800ba54:	4618      	mov	r0, r3
 800ba56:	3708      	adds	r7, #8
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	bd80      	pop	{r7, pc}

0800ba5c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800ba5c:	b480      	push	{r7}
 800ba5e:	b085      	sub	sp, #20
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
 800ba64:	460b      	mov	r3, r1
 800ba66:	70fb      	strb	r3, [r7, #3]
 800ba68:	4613      	mov	r3, r2
 800ba6a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ba72:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800ba74:	78fa      	ldrb	r2, [r7, #3]
 800ba76:	68f9      	ldr	r1, [r7, #12]
 800ba78:	4613      	mov	r3, r2
 800ba7a:	011b      	lsls	r3, r3, #4
 800ba7c:	1a9b      	subs	r3, r3, r2
 800ba7e:	009b      	lsls	r3, r3, #2
 800ba80:	440b      	add	r3, r1
 800ba82:	3317      	adds	r3, #23
 800ba84:	781b      	ldrb	r3, [r3, #0]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d00a      	beq.n	800baa0 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800ba8a:	78fa      	ldrb	r2, [r7, #3]
 800ba8c:	68f9      	ldr	r1, [r7, #12]
 800ba8e:	4613      	mov	r3, r2
 800ba90:	011b      	lsls	r3, r3, #4
 800ba92:	1a9b      	subs	r3, r3, r2
 800ba94:	009b      	lsls	r3, r3, #2
 800ba96:	440b      	add	r3, r1
 800ba98:	333c      	adds	r3, #60	@ 0x3c
 800ba9a:	78ba      	ldrb	r2, [r7, #2]
 800ba9c:	701a      	strb	r2, [r3, #0]
 800ba9e:	e009      	b.n	800bab4 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800baa0:	78fa      	ldrb	r2, [r7, #3]
 800baa2:	68f9      	ldr	r1, [r7, #12]
 800baa4:	4613      	mov	r3, r2
 800baa6:	011b      	lsls	r3, r3, #4
 800baa8:	1a9b      	subs	r3, r3, r2
 800baaa:	009b      	lsls	r3, r3, #2
 800baac:	440b      	add	r3, r1
 800baae:	333d      	adds	r3, #61	@ 0x3d
 800bab0:	78ba      	ldrb	r2, [r7, #2]
 800bab2:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800bab4:	2300      	movs	r3, #0
}
 800bab6:	4618      	mov	r0, r3
 800bab8:	3714      	adds	r7, #20
 800baba:	46bd      	mov	sp, r7
 800babc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac0:	4770      	bx	lr

0800bac2 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800bac2:	b580      	push	{r7, lr}
 800bac4:	b082      	sub	sp, #8
 800bac6:	af00      	add	r7, sp, #0
 800bac8:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	f7f6 fee4 	bl	8002898 <HAL_Delay>
}
 800bad0:	bf00      	nop
 800bad2:	3708      	adds	r7, #8
 800bad4:	46bd      	mov	sp, r7
 800bad6:	bd80      	pop	{r7, pc}

0800bad8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bad8:	b480      	push	{r7}
 800bada:	b085      	sub	sp, #20
 800badc:	af00      	add	r7, sp, #0
 800bade:	4603      	mov	r3, r0
 800bae0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bae2:	2300      	movs	r3, #0
 800bae4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bae6:	79fb      	ldrb	r3, [r7, #7]
 800bae8:	2b03      	cmp	r3, #3
 800baea:	d817      	bhi.n	800bb1c <USBH_Get_USB_Status+0x44>
 800baec:	a201      	add	r2, pc, #4	@ (adr r2, 800baf4 <USBH_Get_USB_Status+0x1c>)
 800baee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baf2:	bf00      	nop
 800baf4:	0800bb05 	.word	0x0800bb05
 800baf8:	0800bb0b 	.word	0x0800bb0b
 800bafc:	0800bb11 	.word	0x0800bb11
 800bb00:	0800bb17 	.word	0x0800bb17
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800bb04:	2300      	movs	r3, #0
 800bb06:	73fb      	strb	r3, [r7, #15]
    break;
 800bb08:	e00b      	b.n	800bb22 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800bb0a:	2302      	movs	r3, #2
 800bb0c:	73fb      	strb	r3, [r7, #15]
    break;
 800bb0e:	e008      	b.n	800bb22 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800bb10:	2301      	movs	r3, #1
 800bb12:	73fb      	strb	r3, [r7, #15]
    break;
 800bb14:	e005      	b.n	800bb22 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800bb16:	2302      	movs	r3, #2
 800bb18:	73fb      	strb	r3, [r7, #15]
    break;
 800bb1a:	e002      	b.n	800bb22 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800bb1c:	2302      	movs	r3, #2
 800bb1e:	73fb      	strb	r3, [r7, #15]
    break;
 800bb20:	bf00      	nop
  }
  return usb_status;
 800bb22:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb24:	4618      	mov	r0, r3
 800bb26:	3714      	adds	r7, #20
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2e:	4770      	bx	lr

0800bb30 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b084      	sub	sp, #16
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	4603      	mov	r3, r0
 800bb38:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800bb3a:	79fb      	ldrb	r3, [r7, #7]
 800bb3c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800bb3e:	79fb      	ldrb	r3, [r7, #7]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d102      	bne.n	800bb4a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800bb44:	2300      	movs	r3, #0
 800bb46:	73fb      	strb	r3, [r7, #15]
 800bb48:	e001      	b.n	800bb4e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800bb4e:	7bfb      	ldrb	r3, [r7, #15]
 800bb50:	461a      	mov	r2, r3
 800bb52:	2101      	movs	r1, #1
 800bb54:	4803      	ldr	r0, [pc, #12]	@ (800bb64 <MX_DriverVbusFS+0x34>)
 800bb56:	f7f7 fcf7 	bl	8003548 <HAL_GPIO_WritePin>
}
 800bb5a:	bf00      	nop
 800bb5c:	3710      	adds	r7, #16
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	bd80      	pop	{r7, pc}
 800bb62:	bf00      	nop
 800bb64:	40020800 	.word	0x40020800

0800bb68 <malloc>:
 800bb68:	4b02      	ldr	r3, [pc, #8]	@ (800bb74 <malloc+0xc>)
 800bb6a:	4601      	mov	r1, r0
 800bb6c:	6818      	ldr	r0, [r3, #0]
 800bb6e:	f000 b82d 	b.w	800bbcc <_malloc_r>
 800bb72:	bf00      	nop
 800bb74:	20000050 	.word	0x20000050

0800bb78 <free>:
 800bb78:	4b02      	ldr	r3, [pc, #8]	@ (800bb84 <free+0xc>)
 800bb7a:	4601      	mov	r1, r0
 800bb7c:	6818      	ldr	r0, [r3, #0]
 800bb7e:	f001 bd13 	b.w	800d5a8 <_free_r>
 800bb82:	bf00      	nop
 800bb84:	20000050 	.word	0x20000050

0800bb88 <sbrk_aligned>:
 800bb88:	b570      	push	{r4, r5, r6, lr}
 800bb8a:	4e0f      	ldr	r6, [pc, #60]	@ (800bbc8 <sbrk_aligned+0x40>)
 800bb8c:	460c      	mov	r4, r1
 800bb8e:	6831      	ldr	r1, [r6, #0]
 800bb90:	4605      	mov	r5, r0
 800bb92:	b911      	cbnz	r1, 800bb9a <sbrk_aligned+0x12>
 800bb94:	f000 fe42 	bl	800c81c <_sbrk_r>
 800bb98:	6030      	str	r0, [r6, #0]
 800bb9a:	4621      	mov	r1, r4
 800bb9c:	4628      	mov	r0, r5
 800bb9e:	f000 fe3d 	bl	800c81c <_sbrk_r>
 800bba2:	1c43      	adds	r3, r0, #1
 800bba4:	d103      	bne.n	800bbae <sbrk_aligned+0x26>
 800bba6:	f04f 34ff 	mov.w	r4, #4294967295
 800bbaa:	4620      	mov	r0, r4
 800bbac:	bd70      	pop	{r4, r5, r6, pc}
 800bbae:	1cc4      	adds	r4, r0, #3
 800bbb0:	f024 0403 	bic.w	r4, r4, #3
 800bbb4:	42a0      	cmp	r0, r4
 800bbb6:	d0f8      	beq.n	800bbaa <sbrk_aligned+0x22>
 800bbb8:	1a21      	subs	r1, r4, r0
 800bbba:	4628      	mov	r0, r5
 800bbbc:	f000 fe2e 	bl	800c81c <_sbrk_r>
 800bbc0:	3001      	adds	r0, #1
 800bbc2:	d1f2      	bne.n	800bbaa <sbrk_aligned+0x22>
 800bbc4:	e7ef      	b.n	800bba6 <sbrk_aligned+0x1e>
 800bbc6:	bf00      	nop
 800bbc8:	20008c6c 	.word	0x20008c6c

0800bbcc <_malloc_r>:
 800bbcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbd0:	1ccd      	adds	r5, r1, #3
 800bbd2:	f025 0503 	bic.w	r5, r5, #3
 800bbd6:	3508      	adds	r5, #8
 800bbd8:	2d0c      	cmp	r5, #12
 800bbda:	bf38      	it	cc
 800bbdc:	250c      	movcc	r5, #12
 800bbde:	2d00      	cmp	r5, #0
 800bbe0:	4606      	mov	r6, r0
 800bbe2:	db01      	blt.n	800bbe8 <_malloc_r+0x1c>
 800bbe4:	42a9      	cmp	r1, r5
 800bbe6:	d904      	bls.n	800bbf2 <_malloc_r+0x26>
 800bbe8:	230c      	movs	r3, #12
 800bbea:	6033      	str	r3, [r6, #0]
 800bbec:	2000      	movs	r0, #0
 800bbee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbf2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bcc8 <_malloc_r+0xfc>
 800bbf6:	f000 f869 	bl	800bccc <__malloc_lock>
 800bbfa:	f8d8 3000 	ldr.w	r3, [r8]
 800bbfe:	461c      	mov	r4, r3
 800bc00:	bb44      	cbnz	r4, 800bc54 <_malloc_r+0x88>
 800bc02:	4629      	mov	r1, r5
 800bc04:	4630      	mov	r0, r6
 800bc06:	f7ff ffbf 	bl	800bb88 <sbrk_aligned>
 800bc0a:	1c43      	adds	r3, r0, #1
 800bc0c:	4604      	mov	r4, r0
 800bc0e:	d158      	bne.n	800bcc2 <_malloc_r+0xf6>
 800bc10:	f8d8 4000 	ldr.w	r4, [r8]
 800bc14:	4627      	mov	r7, r4
 800bc16:	2f00      	cmp	r7, #0
 800bc18:	d143      	bne.n	800bca2 <_malloc_r+0xd6>
 800bc1a:	2c00      	cmp	r4, #0
 800bc1c:	d04b      	beq.n	800bcb6 <_malloc_r+0xea>
 800bc1e:	6823      	ldr	r3, [r4, #0]
 800bc20:	4639      	mov	r1, r7
 800bc22:	4630      	mov	r0, r6
 800bc24:	eb04 0903 	add.w	r9, r4, r3
 800bc28:	f000 fdf8 	bl	800c81c <_sbrk_r>
 800bc2c:	4581      	cmp	r9, r0
 800bc2e:	d142      	bne.n	800bcb6 <_malloc_r+0xea>
 800bc30:	6821      	ldr	r1, [r4, #0]
 800bc32:	1a6d      	subs	r5, r5, r1
 800bc34:	4629      	mov	r1, r5
 800bc36:	4630      	mov	r0, r6
 800bc38:	f7ff ffa6 	bl	800bb88 <sbrk_aligned>
 800bc3c:	3001      	adds	r0, #1
 800bc3e:	d03a      	beq.n	800bcb6 <_malloc_r+0xea>
 800bc40:	6823      	ldr	r3, [r4, #0]
 800bc42:	442b      	add	r3, r5
 800bc44:	6023      	str	r3, [r4, #0]
 800bc46:	f8d8 3000 	ldr.w	r3, [r8]
 800bc4a:	685a      	ldr	r2, [r3, #4]
 800bc4c:	bb62      	cbnz	r2, 800bca8 <_malloc_r+0xdc>
 800bc4e:	f8c8 7000 	str.w	r7, [r8]
 800bc52:	e00f      	b.n	800bc74 <_malloc_r+0xa8>
 800bc54:	6822      	ldr	r2, [r4, #0]
 800bc56:	1b52      	subs	r2, r2, r5
 800bc58:	d420      	bmi.n	800bc9c <_malloc_r+0xd0>
 800bc5a:	2a0b      	cmp	r2, #11
 800bc5c:	d917      	bls.n	800bc8e <_malloc_r+0xc2>
 800bc5e:	1961      	adds	r1, r4, r5
 800bc60:	42a3      	cmp	r3, r4
 800bc62:	6025      	str	r5, [r4, #0]
 800bc64:	bf18      	it	ne
 800bc66:	6059      	strne	r1, [r3, #4]
 800bc68:	6863      	ldr	r3, [r4, #4]
 800bc6a:	bf08      	it	eq
 800bc6c:	f8c8 1000 	streq.w	r1, [r8]
 800bc70:	5162      	str	r2, [r4, r5]
 800bc72:	604b      	str	r3, [r1, #4]
 800bc74:	4630      	mov	r0, r6
 800bc76:	f000 f82f 	bl	800bcd8 <__malloc_unlock>
 800bc7a:	f104 000b 	add.w	r0, r4, #11
 800bc7e:	1d23      	adds	r3, r4, #4
 800bc80:	f020 0007 	bic.w	r0, r0, #7
 800bc84:	1ac2      	subs	r2, r0, r3
 800bc86:	bf1c      	itt	ne
 800bc88:	1a1b      	subne	r3, r3, r0
 800bc8a:	50a3      	strne	r3, [r4, r2]
 800bc8c:	e7af      	b.n	800bbee <_malloc_r+0x22>
 800bc8e:	6862      	ldr	r2, [r4, #4]
 800bc90:	42a3      	cmp	r3, r4
 800bc92:	bf0c      	ite	eq
 800bc94:	f8c8 2000 	streq.w	r2, [r8]
 800bc98:	605a      	strne	r2, [r3, #4]
 800bc9a:	e7eb      	b.n	800bc74 <_malloc_r+0xa8>
 800bc9c:	4623      	mov	r3, r4
 800bc9e:	6864      	ldr	r4, [r4, #4]
 800bca0:	e7ae      	b.n	800bc00 <_malloc_r+0x34>
 800bca2:	463c      	mov	r4, r7
 800bca4:	687f      	ldr	r7, [r7, #4]
 800bca6:	e7b6      	b.n	800bc16 <_malloc_r+0x4a>
 800bca8:	461a      	mov	r2, r3
 800bcaa:	685b      	ldr	r3, [r3, #4]
 800bcac:	42a3      	cmp	r3, r4
 800bcae:	d1fb      	bne.n	800bca8 <_malloc_r+0xdc>
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	6053      	str	r3, [r2, #4]
 800bcb4:	e7de      	b.n	800bc74 <_malloc_r+0xa8>
 800bcb6:	230c      	movs	r3, #12
 800bcb8:	6033      	str	r3, [r6, #0]
 800bcba:	4630      	mov	r0, r6
 800bcbc:	f000 f80c 	bl	800bcd8 <__malloc_unlock>
 800bcc0:	e794      	b.n	800bbec <_malloc_r+0x20>
 800bcc2:	6005      	str	r5, [r0, #0]
 800bcc4:	e7d6      	b.n	800bc74 <_malloc_r+0xa8>
 800bcc6:	bf00      	nop
 800bcc8:	20008c70 	.word	0x20008c70

0800bccc <__malloc_lock>:
 800bccc:	4801      	ldr	r0, [pc, #4]	@ (800bcd4 <__malloc_lock+0x8>)
 800bcce:	f000 bdf2 	b.w	800c8b6 <__retarget_lock_acquire_recursive>
 800bcd2:	bf00      	nop
 800bcd4:	20008db4 	.word	0x20008db4

0800bcd8 <__malloc_unlock>:
 800bcd8:	4801      	ldr	r0, [pc, #4]	@ (800bce0 <__malloc_unlock+0x8>)
 800bcda:	f000 bded 	b.w	800c8b8 <__retarget_lock_release_recursive>
 800bcde:	bf00      	nop
 800bce0:	20008db4 	.word	0x20008db4

0800bce4 <__cvt>:
 800bce4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bce8:	ec57 6b10 	vmov	r6, r7, d0
 800bcec:	2f00      	cmp	r7, #0
 800bcee:	460c      	mov	r4, r1
 800bcf0:	4619      	mov	r1, r3
 800bcf2:	463b      	mov	r3, r7
 800bcf4:	bfbb      	ittet	lt
 800bcf6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800bcfa:	461f      	movlt	r7, r3
 800bcfc:	2300      	movge	r3, #0
 800bcfe:	232d      	movlt	r3, #45	@ 0x2d
 800bd00:	700b      	strb	r3, [r1, #0]
 800bd02:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bd04:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800bd08:	4691      	mov	r9, r2
 800bd0a:	f023 0820 	bic.w	r8, r3, #32
 800bd0e:	bfbc      	itt	lt
 800bd10:	4632      	movlt	r2, r6
 800bd12:	4616      	movlt	r6, r2
 800bd14:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bd18:	d005      	beq.n	800bd26 <__cvt+0x42>
 800bd1a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800bd1e:	d100      	bne.n	800bd22 <__cvt+0x3e>
 800bd20:	3401      	adds	r4, #1
 800bd22:	2102      	movs	r1, #2
 800bd24:	e000      	b.n	800bd28 <__cvt+0x44>
 800bd26:	2103      	movs	r1, #3
 800bd28:	ab03      	add	r3, sp, #12
 800bd2a:	9301      	str	r3, [sp, #4]
 800bd2c:	ab02      	add	r3, sp, #8
 800bd2e:	9300      	str	r3, [sp, #0]
 800bd30:	ec47 6b10 	vmov	d0, r6, r7
 800bd34:	4653      	mov	r3, sl
 800bd36:	4622      	mov	r2, r4
 800bd38:	f000 fe66 	bl	800ca08 <_dtoa_r>
 800bd3c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800bd40:	4605      	mov	r5, r0
 800bd42:	d119      	bne.n	800bd78 <__cvt+0x94>
 800bd44:	f019 0f01 	tst.w	r9, #1
 800bd48:	d00e      	beq.n	800bd68 <__cvt+0x84>
 800bd4a:	eb00 0904 	add.w	r9, r0, r4
 800bd4e:	2200      	movs	r2, #0
 800bd50:	2300      	movs	r3, #0
 800bd52:	4630      	mov	r0, r6
 800bd54:	4639      	mov	r1, r7
 800bd56:	f7f4 febf 	bl	8000ad8 <__aeabi_dcmpeq>
 800bd5a:	b108      	cbz	r0, 800bd60 <__cvt+0x7c>
 800bd5c:	f8cd 900c 	str.w	r9, [sp, #12]
 800bd60:	2230      	movs	r2, #48	@ 0x30
 800bd62:	9b03      	ldr	r3, [sp, #12]
 800bd64:	454b      	cmp	r3, r9
 800bd66:	d31e      	bcc.n	800bda6 <__cvt+0xc2>
 800bd68:	9b03      	ldr	r3, [sp, #12]
 800bd6a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bd6c:	1b5b      	subs	r3, r3, r5
 800bd6e:	4628      	mov	r0, r5
 800bd70:	6013      	str	r3, [r2, #0]
 800bd72:	b004      	add	sp, #16
 800bd74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd78:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bd7c:	eb00 0904 	add.w	r9, r0, r4
 800bd80:	d1e5      	bne.n	800bd4e <__cvt+0x6a>
 800bd82:	7803      	ldrb	r3, [r0, #0]
 800bd84:	2b30      	cmp	r3, #48	@ 0x30
 800bd86:	d10a      	bne.n	800bd9e <__cvt+0xba>
 800bd88:	2200      	movs	r2, #0
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	4630      	mov	r0, r6
 800bd8e:	4639      	mov	r1, r7
 800bd90:	f7f4 fea2 	bl	8000ad8 <__aeabi_dcmpeq>
 800bd94:	b918      	cbnz	r0, 800bd9e <__cvt+0xba>
 800bd96:	f1c4 0401 	rsb	r4, r4, #1
 800bd9a:	f8ca 4000 	str.w	r4, [sl]
 800bd9e:	f8da 3000 	ldr.w	r3, [sl]
 800bda2:	4499      	add	r9, r3
 800bda4:	e7d3      	b.n	800bd4e <__cvt+0x6a>
 800bda6:	1c59      	adds	r1, r3, #1
 800bda8:	9103      	str	r1, [sp, #12]
 800bdaa:	701a      	strb	r2, [r3, #0]
 800bdac:	e7d9      	b.n	800bd62 <__cvt+0x7e>

0800bdae <__exponent>:
 800bdae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bdb0:	2900      	cmp	r1, #0
 800bdb2:	bfba      	itte	lt
 800bdb4:	4249      	neglt	r1, r1
 800bdb6:	232d      	movlt	r3, #45	@ 0x2d
 800bdb8:	232b      	movge	r3, #43	@ 0x2b
 800bdba:	2909      	cmp	r1, #9
 800bdbc:	7002      	strb	r2, [r0, #0]
 800bdbe:	7043      	strb	r3, [r0, #1]
 800bdc0:	dd29      	ble.n	800be16 <__exponent+0x68>
 800bdc2:	f10d 0307 	add.w	r3, sp, #7
 800bdc6:	461d      	mov	r5, r3
 800bdc8:	270a      	movs	r7, #10
 800bdca:	461a      	mov	r2, r3
 800bdcc:	fbb1 f6f7 	udiv	r6, r1, r7
 800bdd0:	fb07 1416 	mls	r4, r7, r6, r1
 800bdd4:	3430      	adds	r4, #48	@ 0x30
 800bdd6:	f802 4c01 	strb.w	r4, [r2, #-1]
 800bdda:	460c      	mov	r4, r1
 800bddc:	2c63      	cmp	r4, #99	@ 0x63
 800bdde:	f103 33ff 	add.w	r3, r3, #4294967295
 800bde2:	4631      	mov	r1, r6
 800bde4:	dcf1      	bgt.n	800bdca <__exponent+0x1c>
 800bde6:	3130      	adds	r1, #48	@ 0x30
 800bde8:	1e94      	subs	r4, r2, #2
 800bdea:	f803 1c01 	strb.w	r1, [r3, #-1]
 800bdee:	1c41      	adds	r1, r0, #1
 800bdf0:	4623      	mov	r3, r4
 800bdf2:	42ab      	cmp	r3, r5
 800bdf4:	d30a      	bcc.n	800be0c <__exponent+0x5e>
 800bdf6:	f10d 0309 	add.w	r3, sp, #9
 800bdfa:	1a9b      	subs	r3, r3, r2
 800bdfc:	42ac      	cmp	r4, r5
 800bdfe:	bf88      	it	hi
 800be00:	2300      	movhi	r3, #0
 800be02:	3302      	adds	r3, #2
 800be04:	4403      	add	r3, r0
 800be06:	1a18      	subs	r0, r3, r0
 800be08:	b003      	add	sp, #12
 800be0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be0c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800be10:	f801 6f01 	strb.w	r6, [r1, #1]!
 800be14:	e7ed      	b.n	800bdf2 <__exponent+0x44>
 800be16:	2330      	movs	r3, #48	@ 0x30
 800be18:	3130      	adds	r1, #48	@ 0x30
 800be1a:	7083      	strb	r3, [r0, #2]
 800be1c:	70c1      	strb	r1, [r0, #3]
 800be1e:	1d03      	adds	r3, r0, #4
 800be20:	e7f1      	b.n	800be06 <__exponent+0x58>
	...

0800be24 <_printf_float>:
 800be24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be28:	b08d      	sub	sp, #52	@ 0x34
 800be2a:	460c      	mov	r4, r1
 800be2c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800be30:	4616      	mov	r6, r2
 800be32:	461f      	mov	r7, r3
 800be34:	4605      	mov	r5, r0
 800be36:	f000 fcb9 	bl	800c7ac <_localeconv_r>
 800be3a:	6803      	ldr	r3, [r0, #0]
 800be3c:	9304      	str	r3, [sp, #16]
 800be3e:	4618      	mov	r0, r3
 800be40:	f7f4 fa1e 	bl	8000280 <strlen>
 800be44:	2300      	movs	r3, #0
 800be46:	930a      	str	r3, [sp, #40]	@ 0x28
 800be48:	f8d8 3000 	ldr.w	r3, [r8]
 800be4c:	9005      	str	r0, [sp, #20]
 800be4e:	3307      	adds	r3, #7
 800be50:	f023 0307 	bic.w	r3, r3, #7
 800be54:	f103 0208 	add.w	r2, r3, #8
 800be58:	f894 a018 	ldrb.w	sl, [r4, #24]
 800be5c:	f8d4 b000 	ldr.w	fp, [r4]
 800be60:	f8c8 2000 	str.w	r2, [r8]
 800be64:	e9d3 8900 	ldrd	r8, r9, [r3]
 800be68:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800be6c:	9307      	str	r3, [sp, #28]
 800be6e:	f8cd 8018 	str.w	r8, [sp, #24]
 800be72:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800be76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800be7a:	4b9c      	ldr	r3, [pc, #624]	@ (800c0ec <_printf_float+0x2c8>)
 800be7c:	f04f 32ff 	mov.w	r2, #4294967295
 800be80:	f7f4 fe5c 	bl	8000b3c <__aeabi_dcmpun>
 800be84:	bb70      	cbnz	r0, 800bee4 <_printf_float+0xc0>
 800be86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800be8a:	4b98      	ldr	r3, [pc, #608]	@ (800c0ec <_printf_float+0x2c8>)
 800be8c:	f04f 32ff 	mov.w	r2, #4294967295
 800be90:	f7f4 fe36 	bl	8000b00 <__aeabi_dcmple>
 800be94:	bb30      	cbnz	r0, 800bee4 <_printf_float+0xc0>
 800be96:	2200      	movs	r2, #0
 800be98:	2300      	movs	r3, #0
 800be9a:	4640      	mov	r0, r8
 800be9c:	4649      	mov	r1, r9
 800be9e:	f7f4 fe25 	bl	8000aec <__aeabi_dcmplt>
 800bea2:	b110      	cbz	r0, 800beaa <_printf_float+0x86>
 800bea4:	232d      	movs	r3, #45	@ 0x2d
 800bea6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800beaa:	4a91      	ldr	r2, [pc, #580]	@ (800c0f0 <_printf_float+0x2cc>)
 800beac:	4b91      	ldr	r3, [pc, #580]	@ (800c0f4 <_printf_float+0x2d0>)
 800beae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800beb2:	bf8c      	ite	hi
 800beb4:	4690      	movhi	r8, r2
 800beb6:	4698      	movls	r8, r3
 800beb8:	2303      	movs	r3, #3
 800beba:	6123      	str	r3, [r4, #16]
 800bebc:	f02b 0304 	bic.w	r3, fp, #4
 800bec0:	6023      	str	r3, [r4, #0]
 800bec2:	f04f 0900 	mov.w	r9, #0
 800bec6:	9700      	str	r7, [sp, #0]
 800bec8:	4633      	mov	r3, r6
 800beca:	aa0b      	add	r2, sp, #44	@ 0x2c
 800becc:	4621      	mov	r1, r4
 800bece:	4628      	mov	r0, r5
 800bed0:	f000 f9d2 	bl	800c278 <_printf_common>
 800bed4:	3001      	adds	r0, #1
 800bed6:	f040 808d 	bne.w	800bff4 <_printf_float+0x1d0>
 800beda:	f04f 30ff 	mov.w	r0, #4294967295
 800bede:	b00d      	add	sp, #52	@ 0x34
 800bee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bee4:	4642      	mov	r2, r8
 800bee6:	464b      	mov	r3, r9
 800bee8:	4640      	mov	r0, r8
 800beea:	4649      	mov	r1, r9
 800beec:	f7f4 fe26 	bl	8000b3c <__aeabi_dcmpun>
 800bef0:	b140      	cbz	r0, 800bf04 <_printf_float+0xe0>
 800bef2:	464b      	mov	r3, r9
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	bfbc      	itt	lt
 800bef8:	232d      	movlt	r3, #45	@ 0x2d
 800befa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800befe:	4a7e      	ldr	r2, [pc, #504]	@ (800c0f8 <_printf_float+0x2d4>)
 800bf00:	4b7e      	ldr	r3, [pc, #504]	@ (800c0fc <_printf_float+0x2d8>)
 800bf02:	e7d4      	b.n	800beae <_printf_float+0x8a>
 800bf04:	6863      	ldr	r3, [r4, #4]
 800bf06:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800bf0a:	9206      	str	r2, [sp, #24]
 800bf0c:	1c5a      	adds	r2, r3, #1
 800bf0e:	d13b      	bne.n	800bf88 <_printf_float+0x164>
 800bf10:	2306      	movs	r3, #6
 800bf12:	6063      	str	r3, [r4, #4]
 800bf14:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800bf18:	2300      	movs	r3, #0
 800bf1a:	6022      	str	r2, [r4, #0]
 800bf1c:	9303      	str	r3, [sp, #12]
 800bf1e:	ab0a      	add	r3, sp, #40	@ 0x28
 800bf20:	e9cd a301 	strd	sl, r3, [sp, #4]
 800bf24:	ab09      	add	r3, sp, #36	@ 0x24
 800bf26:	9300      	str	r3, [sp, #0]
 800bf28:	6861      	ldr	r1, [r4, #4]
 800bf2a:	ec49 8b10 	vmov	d0, r8, r9
 800bf2e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800bf32:	4628      	mov	r0, r5
 800bf34:	f7ff fed6 	bl	800bce4 <__cvt>
 800bf38:	9b06      	ldr	r3, [sp, #24]
 800bf3a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bf3c:	2b47      	cmp	r3, #71	@ 0x47
 800bf3e:	4680      	mov	r8, r0
 800bf40:	d129      	bne.n	800bf96 <_printf_float+0x172>
 800bf42:	1cc8      	adds	r0, r1, #3
 800bf44:	db02      	blt.n	800bf4c <_printf_float+0x128>
 800bf46:	6863      	ldr	r3, [r4, #4]
 800bf48:	4299      	cmp	r1, r3
 800bf4a:	dd41      	ble.n	800bfd0 <_printf_float+0x1ac>
 800bf4c:	f1aa 0a02 	sub.w	sl, sl, #2
 800bf50:	fa5f fa8a 	uxtb.w	sl, sl
 800bf54:	3901      	subs	r1, #1
 800bf56:	4652      	mov	r2, sl
 800bf58:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800bf5c:	9109      	str	r1, [sp, #36]	@ 0x24
 800bf5e:	f7ff ff26 	bl	800bdae <__exponent>
 800bf62:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bf64:	1813      	adds	r3, r2, r0
 800bf66:	2a01      	cmp	r2, #1
 800bf68:	4681      	mov	r9, r0
 800bf6a:	6123      	str	r3, [r4, #16]
 800bf6c:	dc02      	bgt.n	800bf74 <_printf_float+0x150>
 800bf6e:	6822      	ldr	r2, [r4, #0]
 800bf70:	07d2      	lsls	r2, r2, #31
 800bf72:	d501      	bpl.n	800bf78 <_printf_float+0x154>
 800bf74:	3301      	adds	r3, #1
 800bf76:	6123      	str	r3, [r4, #16]
 800bf78:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d0a2      	beq.n	800bec6 <_printf_float+0xa2>
 800bf80:	232d      	movs	r3, #45	@ 0x2d
 800bf82:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bf86:	e79e      	b.n	800bec6 <_printf_float+0xa2>
 800bf88:	9a06      	ldr	r2, [sp, #24]
 800bf8a:	2a47      	cmp	r2, #71	@ 0x47
 800bf8c:	d1c2      	bne.n	800bf14 <_printf_float+0xf0>
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d1c0      	bne.n	800bf14 <_printf_float+0xf0>
 800bf92:	2301      	movs	r3, #1
 800bf94:	e7bd      	b.n	800bf12 <_printf_float+0xee>
 800bf96:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bf9a:	d9db      	bls.n	800bf54 <_printf_float+0x130>
 800bf9c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800bfa0:	d118      	bne.n	800bfd4 <_printf_float+0x1b0>
 800bfa2:	2900      	cmp	r1, #0
 800bfa4:	6863      	ldr	r3, [r4, #4]
 800bfa6:	dd0b      	ble.n	800bfc0 <_printf_float+0x19c>
 800bfa8:	6121      	str	r1, [r4, #16]
 800bfaa:	b913      	cbnz	r3, 800bfb2 <_printf_float+0x18e>
 800bfac:	6822      	ldr	r2, [r4, #0]
 800bfae:	07d0      	lsls	r0, r2, #31
 800bfb0:	d502      	bpl.n	800bfb8 <_printf_float+0x194>
 800bfb2:	3301      	adds	r3, #1
 800bfb4:	440b      	add	r3, r1
 800bfb6:	6123      	str	r3, [r4, #16]
 800bfb8:	65a1      	str	r1, [r4, #88]	@ 0x58
 800bfba:	f04f 0900 	mov.w	r9, #0
 800bfbe:	e7db      	b.n	800bf78 <_printf_float+0x154>
 800bfc0:	b913      	cbnz	r3, 800bfc8 <_printf_float+0x1a4>
 800bfc2:	6822      	ldr	r2, [r4, #0]
 800bfc4:	07d2      	lsls	r2, r2, #31
 800bfc6:	d501      	bpl.n	800bfcc <_printf_float+0x1a8>
 800bfc8:	3302      	adds	r3, #2
 800bfca:	e7f4      	b.n	800bfb6 <_printf_float+0x192>
 800bfcc:	2301      	movs	r3, #1
 800bfce:	e7f2      	b.n	800bfb6 <_printf_float+0x192>
 800bfd0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800bfd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bfd6:	4299      	cmp	r1, r3
 800bfd8:	db05      	blt.n	800bfe6 <_printf_float+0x1c2>
 800bfda:	6823      	ldr	r3, [r4, #0]
 800bfdc:	6121      	str	r1, [r4, #16]
 800bfde:	07d8      	lsls	r0, r3, #31
 800bfe0:	d5ea      	bpl.n	800bfb8 <_printf_float+0x194>
 800bfe2:	1c4b      	adds	r3, r1, #1
 800bfe4:	e7e7      	b.n	800bfb6 <_printf_float+0x192>
 800bfe6:	2900      	cmp	r1, #0
 800bfe8:	bfd4      	ite	le
 800bfea:	f1c1 0202 	rsble	r2, r1, #2
 800bfee:	2201      	movgt	r2, #1
 800bff0:	4413      	add	r3, r2
 800bff2:	e7e0      	b.n	800bfb6 <_printf_float+0x192>
 800bff4:	6823      	ldr	r3, [r4, #0]
 800bff6:	055a      	lsls	r2, r3, #21
 800bff8:	d407      	bmi.n	800c00a <_printf_float+0x1e6>
 800bffa:	6923      	ldr	r3, [r4, #16]
 800bffc:	4642      	mov	r2, r8
 800bffe:	4631      	mov	r1, r6
 800c000:	4628      	mov	r0, r5
 800c002:	47b8      	blx	r7
 800c004:	3001      	adds	r0, #1
 800c006:	d12b      	bne.n	800c060 <_printf_float+0x23c>
 800c008:	e767      	b.n	800beda <_printf_float+0xb6>
 800c00a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c00e:	f240 80dd 	bls.w	800c1cc <_printf_float+0x3a8>
 800c012:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c016:	2200      	movs	r2, #0
 800c018:	2300      	movs	r3, #0
 800c01a:	f7f4 fd5d 	bl	8000ad8 <__aeabi_dcmpeq>
 800c01e:	2800      	cmp	r0, #0
 800c020:	d033      	beq.n	800c08a <_printf_float+0x266>
 800c022:	4a37      	ldr	r2, [pc, #220]	@ (800c100 <_printf_float+0x2dc>)
 800c024:	2301      	movs	r3, #1
 800c026:	4631      	mov	r1, r6
 800c028:	4628      	mov	r0, r5
 800c02a:	47b8      	blx	r7
 800c02c:	3001      	adds	r0, #1
 800c02e:	f43f af54 	beq.w	800beda <_printf_float+0xb6>
 800c032:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c036:	4543      	cmp	r3, r8
 800c038:	db02      	blt.n	800c040 <_printf_float+0x21c>
 800c03a:	6823      	ldr	r3, [r4, #0]
 800c03c:	07d8      	lsls	r0, r3, #31
 800c03e:	d50f      	bpl.n	800c060 <_printf_float+0x23c>
 800c040:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c044:	4631      	mov	r1, r6
 800c046:	4628      	mov	r0, r5
 800c048:	47b8      	blx	r7
 800c04a:	3001      	adds	r0, #1
 800c04c:	f43f af45 	beq.w	800beda <_printf_float+0xb6>
 800c050:	f04f 0900 	mov.w	r9, #0
 800c054:	f108 38ff 	add.w	r8, r8, #4294967295
 800c058:	f104 0a1a 	add.w	sl, r4, #26
 800c05c:	45c8      	cmp	r8, r9
 800c05e:	dc09      	bgt.n	800c074 <_printf_float+0x250>
 800c060:	6823      	ldr	r3, [r4, #0]
 800c062:	079b      	lsls	r3, r3, #30
 800c064:	f100 8103 	bmi.w	800c26e <_printf_float+0x44a>
 800c068:	68e0      	ldr	r0, [r4, #12]
 800c06a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c06c:	4298      	cmp	r0, r3
 800c06e:	bfb8      	it	lt
 800c070:	4618      	movlt	r0, r3
 800c072:	e734      	b.n	800bede <_printf_float+0xba>
 800c074:	2301      	movs	r3, #1
 800c076:	4652      	mov	r2, sl
 800c078:	4631      	mov	r1, r6
 800c07a:	4628      	mov	r0, r5
 800c07c:	47b8      	blx	r7
 800c07e:	3001      	adds	r0, #1
 800c080:	f43f af2b 	beq.w	800beda <_printf_float+0xb6>
 800c084:	f109 0901 	add.w	r9, r9, #1
 800c088:	e7e8      	b.n	800c05c <_printf_float+0x238>
 800c08a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	dc39      	bgt.n	800c104 <_printf_float+0x2e0>
 800c090:	4a1b      	ldr	r2, [pc, #108]	@ (800c100 <_printf_float+0x2dc>)
 800c092:	2301      	movs	r3, #1
 800c094:	4631      	mov	r1, r6
 800c096:	4628      	mov	r0, r5
 800c098:	47b8      	blx	r7
 800c09a:	3001      	adds	r0, #1
 800c09c:	f43f af1d 	beq.w	800beda <_printf_float+0xb6>
 800c0a0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c0a4:	ea59 0303 	orrs.w	r3, r9, r3
 800c0a8:	d102      	bne.n	800c0b0 <_printf_float+0x28c>
 800c0aa:	6823      	ldr	r3, [r4, #0]
 800c0ac:	07d9      	lsls	r1, r3, #31
 800c0ae:	d5d7      	bpl.n	800c060 <_printf_float+0x23c>
 800c0b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c0b4:	4631      	mov	r1, r6
 800c0b6:	4628      	mov	r0, r5
 800c0b8:	47b8      	blx	r7
 800c0ba:	3001      	adds	r0, #1
 800c0bc:	f43f af0d 	beq.w	800beda <_printf_float+0xb6>
 800c0c0:	f04f 0a00 	mov.w	sl, #0
 800c0c4:	f104 0b1a 	add.w	fp, r4, #26
 800c0c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0ca:	425b      	negs	r3, r3
 800c0cc:	4553      	cmp	r3, sl
 800c0ce:	dc01      	bgt.n	800c0d4 <_printf_float+0x2b0>
 800c0d0:	464b      	mov	r3, r9
 800c0d2:	e793      	b.n	800bffc <_printf_float+0x1d8>
 800c0d4:	2301      	movs	r3, #1
 800c0d6:	465a      	mov	r2, fp
 800c0d8:	4631      	mov	r1, r6
 800c0da:	4628      	mov	r0, r5
 800c0dc:	47b8      	blx	r7
 800c0de:	3001      	adds	r0, #1
 800c0e0:	f43f aefb 	beq.w	800beda <_printf_float+0xb6>
 800c0e4:	f10a 0a01 	add.w	sl, sl, #1
 800c0e8:	e7ee      	b.n	800c0c8 <_printf_float+0x2a4>
 800c0ea:	bf00      	nop
 800c0ec:	7fefffff 	.word	0x7fefffff
 800c0f0:	0800f3b4 	.word	0x0800f3b4
 800c0f4:	0800f3b0 	.word	0x0800f3b0
 800c0f8:	0800f3bc 	.word	0x0800f3bc
 800c0fc:	0800f3b8 	.word	0x0800f3b8
 800c100:	0800f3c0 	.word	0x0800f3c0
 800c104:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c106:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c10a:	4553      	cmp	r3, sl
 800c10c:	bfa8      	it	ge
 800c10e:	4653      	movge	r3, sl
 800c110:	2b00      	cmp	r3, #0
 800c112:	4699      	mov	r9, r3
 800c114:	dc36      	bgt.n	800c184 <_printf_float+0x360>
 800c116:	f04f 0b00 	mov.w	fp, #0
 800c11a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c11e:	f104 021a 	add.w	r2, r4, #26
 800c122:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c124:	9306      	str	r3, [sp, #24]
 800c126:	eba3 0309 	sub.w	r3, r3, r9
 800c12a:	455b      	cmp	r3, fp
 800c12c:	dc31      	bgt.n	800c192 <_printf_float+0x36e>
 800c12e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c130:	459a      	cmp	sl, r3
 800c132:	dc3a      	bgt.n	800c1aa <_printf_float+0x386>
 800c134:	6823      	ldr	r3, [r4, #0]
 800c136:	07da      	lsls	r2, r3, #31
 800c138:	d437      	bmi.n	800c1aa <_printf_float+0x386>
 800c13a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c13c:	ebaa 0903 	sub.w	r9, sl, r3
 800c140:	9b06      	ldr	r3, [sp, #24]
 800c142:	ebaa 0303 	sub.w	r3, sl, r3
 800c146:	4599      	cmp	r9, r3
 800c148:	bfa8      	it	ge
 800c14a:	4699      	movge	r9, r3
 800c14c:	f1b9 0f00 	cmp.w	r9, #0
 800c150:	dc33      	bgt.n	800c1ba <_printf_float+0x396>
 800c152:	f04f 0800 	mov.w	r8, #0
 800c156:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c15a:	f104 0b1a 	add.w	fp, r4, #26
 800c15e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c160:	ebaa 0303 	sub.w	r3, sl, r3
 800c164:	eba3 0309 	sub.w	r3, r3, r9
 800c168:	4543      	cmp	r3, r8
 800c16a:	f77f af79 	ble.w	800c060 <_printf_float+0x23c>
 800c16e:	2301      	movs	r3, #1
 800c170:	465a      	mov	r2, fp
 800c172:	4631      	mov	r1, r6
 800c174:	4628      	mov	r0, r5
 800c176:	47b8      	blx	r7
 800c178:	3001      	adds	r0, #1
 800c17a:	f43f aeae 	beq.w	800beda <_printf_float+0xb6>
 800c17e:	f108 0801 	add.w	r8, r8, #1
 800c182:	e7ec      	b.n	800c15e <_printf_float+0x33a>
 800c184:	4642      	mov	r2, r8
 800c186:	4631      	mov	r1, r6
 800c188:	4628      	mov	r0, r5
 800c18a:	47b8      	blx	r7
 800c18c:	3001      	adds	r0, #1
 800c18e:	d1c2      	bne.n	800c116 <_printf_float+0x2f2>
 800c190:	e6a3      	b.n	800beda <_printf_float+0xb6>
 800c192:	2301      	movs	r3, #1
 800c194:	4631      	mov	r1, r6
 800c196:	4628      	mov	r0, r5
 800c198:	9206      	str	r2, [sp, #24]
 800c19a:	47b8      	blx	r7
 800c19c:	3001      	adds	r0, #1
 800c19e:	f43f ae9c 	beq.w	800beda <_printf_float+0xb6>
 800c1a2:	9a06      	ldr	r2, [sp, #24]
 800c1a4:	f10b 0b01 	add.w	fp, fp, #1
 800c1a8:	e7bb      	b.n	800c122 <_printf_float+0x2fe>
 800c1aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c1ae:	4631      	mov	r1, r6
 800c1b0:	4628      	mov	r0, r5
 800c1b2:	47b8      	blx	r7
 800c1b4:	3001      	adds	r0, #1
 800c1b6:	d1c0      	bne.n	800c13a <_printf_float+0x316>
 800c1b8:	e68f      	b.n	800beda <_printf_float+0xb6>
 800c1ba:	9a06      	ldr	r2, [sp, #24]
 800c1bc:	464b      	mov	r3, r9
 800c1be:	4442      	add	r2, r8
 800c1c0:	4631      	mov	r1, r6
 800c1c2:	4628      	mov	r0, r5
 800c1c4:	47b8      	blx	r7
 800c1c6:	3001      	adds	r0, #1
 800c1c8:	d1c3      	bne.n	800c152 <_printf_float+0x32e>
 800c1ca:	e686      	b.n	800beda <_printf_float+0xb6>
 800c1cc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c1d0:	f1ba 0f01 	cmp.w	sl, #1
 800c1d4:	dc01      	bgt.n	800c1da <_printf_float+0x3b6>
 800c1d6:	07db      	lsls	r3, r3, #31
 800c1d8:	d536      	bpl.n	800c248 <_printf_float+0x424>
 800c1da:	2301      	movs	r3, #1
 800c1dc:	4642      	mov	r2, r8
 800c1de:	4631      	mov	r1, r6
 800c1e0:	4628      	mov	r0, r5
 800c1e2:	47b8      	blx	r7
 800c1e4:	3001      	adds	r0, #1
 800c1e6:	f43f ae78 	beq.w	800beda <_printf_float+0xb6>
 800c1ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c1ee:	4631      	mov	r1, r6
 800c1f0:	4628      	mov	r0, r5
 800c1f2:	47b8      	blx	r7
 800c1f4:	3001      	adds	r0, #1
 800c1f6:	f43f ae70 	beq.w	800beda <_printf_float+0xb6>
 800c1fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c1fe:	2200      	movs	r2, #0
 800c200:	2300      	movs	r3, #0
 800c202:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c206:	f7f4 fc67 	bl	8000ad8 <__aeabi_dcmpeq>
 800c20a:	b9c0      	cbnz	r0, 800c23e <_printf_float+0x41a>
 800c20c:	4653      	mov	r3, sl
 800c20e:	f108 0201 	add.w	r2, r8, #1
 800c212:	4631      	mov	r1, r6
 800c214:	4628      	mov	r0, r5
 800c216:	47b8      	blx	r7
 800c218:	3001      	adds	r0, #1
 800c21a:	d10c      	bne.n	800c236 <_printf_float+0x412>
 800c21c:	e65d      	b.n	800beda <_printf_float+0xb6>
 800c21e:	2301      	movs	r3, #1
 800c220:	465a      	mov	r2, fp
 800c222:	4631      	mov	r1, r6
 800c224:	4628      	mov	r0, r5
 800c226:	47b8      	blx	r7
 800c228:	3001      	adds	r0, #1
 800c22a:	f43f ae56 	beq.w	800beda <_printf_float+0xb6>
 800c22e:	f108 0801 	add.w	r8, r8, #1
 800c232:	45d0      	cmp	r8, sl
 800c234:	dbf3      	blt.n	800c21e <_printf_float+0x3fa>
 800c236:	464b      	mov	r3, r9
 800c238:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c23c:	e6df      	b.n	800bffe <_printf_float+0x1da>
 800c23e:	f04f 0800 	mov.w	r8, #0
 800c242:	f104 0b1a 	add.w	fp, r4, #26
 800c246:	e7f4      	b.n	800c232 <_printf_float+0x40e>
 800c248:	2301      	movs	r3, #1
 800c24a:	4642      	mov	r2, r8
 800c24c:	e7e1      	b.n	800c212 <_printf_float+0x3ee>
 800c24e:	2301      	movs	r3, #1
 800c250:	464a      	mov	r2, r9
 800c252:	4631      	mov	r1, r6
 800c254:	4628      	mov	r0, r5
 800c256:	47b8      	blx	r7
 800c258:	3001      	adds	r0, #1
 800c25a:	f43f ae3e 	beq.w	800beda <_printf_float+0xb6>
 800c25e:	f108 0801 	add.w	r8, r8, #1
 800c262:	68e3      	ldr	r3, [r4, #12]
 800c264:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c266:	1a5b      	subs	r3, r3, r1
 800c268:	4543      	cmp	r3, r8
 800c26a:	dcf0      	bgt.n	800c24e <_printf_float+0x42a>
 800c26c:	e6fc      	b.n	800c068 <_printf_float+0x244>
 800c26e:	f04f 0800 	mov.w	r8, #0
 800c272:	f104 0919 	add.w	r9, r4, #25
 800c276:	e7f4      	b.n	800c262 <_printf_float+0x43e>

0800c278 <_printf_common>:
 800c278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c27c:	4616      	mov	r6, r2
 800c27e:	4698      	mov	r8, r3
 800c280:	688a      	ldr	r2, [r1, #8]
 800c282:	690b      	ldr	r3, [r1, #16]
 800c284:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c288:	4293      	cmp	r3, r2
 800c28a:	bfb8      	it	lt
 800c28c:	4613      	movlt	r3, r2
 800c28e:	6033      	str	r3, [r6, #0]
 800c290:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c294:	4607      	mov	r7, r0
 800c296:	460c      	mov	r4, r1
 800c298:	b10a      	cbz	r2, 800c29e <_printf_common+0x26>
 800c29a:	3301      	adds	r3, #1
 800c29c:	6033      	str	r3, [r6, #0]
 800c29e:	6823      	ldr	r3, [r4, #0]
 800c2a0:	0699      	lsls	r1, r3, #26
 800c2a2:	bf42      	ittt	mi
 800c2a4:	6833      	ldrmi	r3, [r6, #0]
 800c2a6:	3302      	addmi	r3, #2
 800c2a8:	6033      	strmi	r3, [r6, #0]
 800c2aa:	6825      	ldr	r5, [r4, #0]
 800c2ac:	f015 0506 	ands.w	r5, r5, #6
 800c2b0:	d106      	bne.n	800c2c0 <_printf_common+0x48>
 800c2b2:	f104 0a19 	add.w	sl, r4, #25
 800c2b6:	68e3      	ldr	r3, [r4, #12]
 800c2b8:	6832      	ldr	r2, [r6, #0]
 800c2ba:	1a9b      	subs	r3, r3, r2
 800c2bc:	42ab      	cmp	r3, r5
 800c2be:	dc26      	bgt.n	800c30e <_printf_common+0x96>
 800c2c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c2c4:	6822      	ldr	r2, [r4, #0]
 800c2c6:	3b00      	subs	r3, #0
 800c2c8:	bf18      	it	ne
 800c2ca:	2301      	movne	r3, #1
 800c2cc:	0692      	lsls	r2, r2, #26
 800c2ce:	d42b      	bmi.n	800c328 <_printf_common+0xb0>
 800c2d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c2d4:	4641      	mov	r1, r8
 800c2d6:	4638      	mov	r0, r7
 800c2d8:	47c8      	blx	r9
 800c2da:	3001      	adds	r0, #1
 800c2dc:	d01e      	beq.n	800c31c <_printf_common+0xa4>
 800c2de:	6823      	ldr	r3, [r4, #0]
 800c2e0:	6922      	ldr	r2, [r4, #16]
 800c2e2:	f003 0306 	and.w	r3, r3, #6
 800c2e6:	2b04      	cmp	r3, #4
 800c2e8:	bf02      	ittt	eq
 800c2ea:	68e5      	ldreq	r5, [r4, #12]
 800c2ec:	6833      	ldreq	r3, [r6, #0]
 800c2ee:	1aed      	subeq	r5, r5, r3
 800c2f0:	68a3      	ldr	r3, [r4, #8]
 800c2f2:	bf0c      	ite	eq
 800c2f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c2f8:	2500      	movne	r5, #0
 800c2fa:	4293      	cmp	r3, r2
 800c2fc:	bfc4      	itt	gt
 800c2fe:	1a9b      	subgt	r3, r3, r2
 800c300:	18ed      	addgt	r5, r5, r3
 800c302:	2600      	movs	r6, #0
 800c304:	341a      	adds	r4, #26
 800c306:	42b5      	cmp	r5, r6
 800c308:	d11a      	bne.n	800c340 <_printf_common+0xc8>
 800c30a:	2000      	movs	r0, #0
 800c30c:	e008      	b.n	800c320 <_printf_common+0xa8>
 800c30e:	2301      	movs	r3, #1
 800c310:	4652      	mov	r2, sl
 800c312:	4641      	mov	r1, r8
 800c314:	4638      	mov	r0, r7
 800c316:	47c8      	blx	r9
 800c318:	3001      	adds	r0, #1
 800c31a:	d103      	bne.n	800c324 <_printf_common+0xac>
 800c31c:	f04f 30ff 	mov.w	r0, #4294967295
 800c320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c324:	3501      	adds	r5, #1
 800c326:	e7c6      	b.n	800c2b6 <_printf_common+0x3e>
 800c328:	18e1      	adds	r1, r4, r3
 800c32a:	1c5a      	adds	r2, r3, #1
 800c32c:	2030      	movs	r0, #48	@ 0x30
 800c32e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c332:	4422      	add	r2, r4
 800c334:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c338:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c33c:	3302      	adds	r3, #2
 800c33e:	e7c7      	b.n	800c2d0 <_printf_common+0x58>
 800c340:	2301      	movs	r3, #1
 800c342:	4622      	mov	r2, r4
 800c344:	4641      	mov	r1, r8
 800c346:	4638      	mov	r0, r7
 800c348:	47c8      	blx	r9
 800c34a:	3001      	adds	r0, #1
 800c34c:	d0e6      	beq.n	800c31c <_printf_common+0xa4>
 800c34e:	3601      	adds	r6, #1
 800c350:	e7d9      	b.n	800c306 <_printf_common+0x8e>
	...

0800c354 <_printf_i>:
 800c354:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c358:	7e0f      	ldrb	r7, [r1, #24]
 800c35a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c35c:	2f78      	cmp	r7, #120	@ 0x78
 800c35e:	4691      	mov	r9, r2
 800c360:	4680      	mov	r8, r0
 800c362:	460c      	mov	r4, r1
 800c364:	469a      	mov	sl, r3
 800c366:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c36a:	d807      	bhi.n	800c37c <_printf_i+0x28>
 800c36c:	2f62      	cmp	r7, #98	@ 0x62
 800c36e:	d80a      	bhi.n	800c386 <_printf_i+0x32>
 800c370:	2f00      	cmp	r7, #0
 800c372:	f000 80d1 	beq.w	800c518 <_printf_i+0x1c4>
 800c376:	2f58      	cmp	r7, #88	@ 0x58
 800c378:	f000 80b8 	beq.w	800c4ec <_printf_i+0x198>
 800c37c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c380:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c384:	e03a      	b.n	800c3fc <_printf_i+0xa8>
 800c386:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c38a:	2b15      	cmp	r3, #21
 800c38c:	d8f6      	bhi.n	800c37c <_printf_i+0x28>
 800c38e:	a101      	add	r1, pc, #4	@ (adr r1, 800c394 <_printf_i+0x40>)
 800c390:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c394:	0800c3ed 	.word	0x0800c3ed
 800c398:	0800c401 	.word	0x0800c401
 800c39c:	0800c37d 	.word	0x0800c37d
 800c3a0:	0800c37d 	.word	0x0800c37d
 800c3a4:	0800c37d 	.word	0x0800c37d
 800c3a8:	0800c37d 	.word	0x0800c37d
 800c3ac:	0800c401 	.word	0x0800c401
 800c3b0:	0800c37d 	.word	0x0800c37d
 800c3b4:	0800c37d 	.word	0x0800c37d
 800c3b8:	0800c37d 	.word	0x0800c37d
 800c3bc:	0800c37d 	.word	0x0800c37d
 800c3c0:	0800c4ff 	.word	0x0800c4ff
 800c3c4:	0800c42b 	.word	0x0800c42b
 800c3c8:	0800c4b9 	.word	0x0800c4b9
 800c3cc:	0800c37d 	.word	0x0800c37d
 800c3d0:	0800c37d 	.word	0x0800c37d
 800c3d4:	0800c521 	.word	0x0800c521
 800c3d8:	0800c37d 	.word	0x0800c37d
 800c3dc:	0800c42b 	.word	0x0800c42b
 800c3e0:	0800c37d 	.word	0x0800c37d
 800c3e4:	0800c37d 	.word	0x0800c37d
 800c3e8:	0800c4c1 	.word	0x0800c4c1
 800c3ec:	6833      	ldr	r3, [r6, #0]
 800c3ee:	1d1a      	adds	r2, r3, #4
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	6032      	str	r2, [r6, #0]
 800c3f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c3f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c3fc:	2301      	movs	r3, #1
 800c3fe:	e09c      	b.n	800c53a <_printf_i+0x1e6>
 800c400:	6833      	ldr	r3, [r6, #0]
 800c402:	6820      	ldr	r0, [r4, #0]
 800c404:	1d19      	adds	r1, r3, #4
 800c406:	6031      	str	r1, [r6, #0]
 800c408:	0606      	lsls	r6, r0, #24
 800c40a:	d501      	bpl.n	800c410 <_printf_i+0xbc>
 800c40c:	681d      	ldr	r5, [r3, #0]
 800c40e:	e003      	b.n	800c418 <_printf_i+0xc4>
 800c410:	0645      	lsls	r5, r0, #25
 800c412:	d5fb      	bpl.n	800c40c <_printf_i+0xb8>
 800c414:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c418:	2d00      	cmp	r5, #0
 800c41a:	da03      	bge.n	800c424 <_printf_i+0xd0>
 800c41c:	232d      	movs	r3, #45	@ 0x2d
 800c41e:	426d      	negs	r5, r5
 800c420:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c424:	4858      	ldr	r0, [pc, #352]	@ (800c588 <_printf_i+0x234>)
 800c426:	230a      	movs	r3, #10
 800c428:	e011      	b.n	800c44e <_printf_i+0xfa>
 800c42a:	6821      	ldr	r1, [r4, #0]
 800c42c:	6833      	ldr	r3, [r6, #0]
 800c42e:	0608      	lsls	r0, r1, #24
 800c430:	f853 5b04 	ldr.w	r5, [r3], #4
 800c434:	d402      	bmi.n	800c43c <_printf_i+0xe8>
 800c436:	0649      	lsls	r1, r1, #25
 800c438:	bf48      	it	mi
 800c43a:	b2ad      	uxthmi	r5, r5
 800c43c:	2f6f      	cmp	r7, #111	@ 0x6f
 800c43e:	4852      	ldr	r0, [pc, #328]	@ (800c588 <_printf_i+0x234>)
 800c440:	6033      	str	r3, [r6, #0]
 800c442:	bf14      	ite	ne
 800c444:	230a      	movne	r3, #10
 800c446:	2308      	moveq	r3, #8
 800c448:	2100      	movs	r1, #0
 800c44a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c44e:	6866      	ldr	r6, [r4, #4]
 800c450:	60a6      	str	r6, [r4, #8]
 800c452:	2e00      	cmp	r6, #0
 800c454:	db05      	blt.n	800c462 <_printf_i+0x10e>
 800c456:	6821      	ldr	r1, [r4, #0]
 800c458:	432e      	orrs	r6, r5
 800c45a:	f021 0104 	bic.w	r1, r1, #4
 800c45e:	6021      	str	r1, [r4, #0]
 800c460:	d04b      	beq.n	800c4fa <_printf_i+0x1a6>
 800c462:	4616      	mov	r6, r2
 800c464:	fbb5 f1f3 	udiv	r1, r5, r3
 800c468:	fb03 5711 	mls	r7, r3, r1, r5
 800c46c:	5dc7      	ldrb	r7, [r0, r7]
 800c46e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c472:	462f      	mov	r7, r5
 800c474:	42bb      	cmp	r3, r7
 800c476:	460d      	mov	r5, r1
 800c478:	d9f4      	bls.n	800c464 <_printf_i+0x110>
 800c47a:	2b08      	cmp	r3, #8
 800c47c:	d10b      	bne.n	800c496 <_printf_i+0x142>
 800c47e:	6823      	ldr	r3, [r4, #0]
 800c480:	07df      	lsls	r7, r3, #31
 800c482:	d508      	bpl.n	800c496 <_printf_i+0x142>
 800c484:	6923      	ldr	r3, [r4, #16]
 800c486:	6861      	ldr	r1, [r4, #4]
 800c488:	4299      	cmp	r1, r3
 800c48a:	bfde      	ittt	le
 800c48c:	2330      	movle	r3, #48	@ 0x30
 800c48e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c492:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c496:	1b92      	subs	r2, r2, r6
 800c498:	6122      	str	r2, [r4, #16]
 800c49a:	f8cd a000 	str.w	sl, [sp]
 800c49e:	464b      	mov	r3, r9
 800c4a0:	aa03      	add	r2, sp, #12
 800c4a2:	4621      	mov	r1, r4
 800c4a4:	4640      	mov	r0, r8
 800c4a6:	f7ff fee7 	bl	800c278 <_printf_common>
 800c4aa:	3001      	adds	r0, #1
 800c4ac:	d14a      	bne.n	800c544 <_printf_i+0x1f0>
 800c4ae:	f04f 30ff 	mov.w	r0, #4294967295
 800c4b2:	b004      	add	sp, #16
 800c4b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4b8:	6823      	ldr	r3, [r4, #0]
 800c4ba:	f043 0320 	orr.w	r3, r3, #32
 800c4be:	6023      	str	r3, [r4, #0]
 800c4c0:	4832      	ldr	r0, [pc, #200]	@ (800c58c <_printf_i+0x238>)
 800c4c2:	2778      	movs	r7, #120	@ 0x78
 800c4c4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c4c8:	6823      	ldr	r3, [r4, #0]
 800c4ca:	6831      	ldr	r1, [r6, #0]
 800c4cc:	061f      	lsls	r7, r3, #24
 800c4ce:	f851 5b04 	ldr.w	r5, [r1], #4
 800c4d2:	d402      	bmi.n	800c4da <_printf_i+0x186>
 800c4d4:	065f      	lsls	r7, r3, #25
 800c4d6:	bf48      	it	mi
 800c4d8:	b2ad      	uxthmi	r5, r5
 800c4da:	6031      	str	r1, [r6, #0]
 800c4dc:	07d9      	lsls	r1, r3, #31
 800c4de:	bf44      	itt	mi
 800c4e0:	f043 0320 	orrmi.w	r3, r3, #32
 800c4e4:	6023      	strmi	r3, [r4, #0]
 800c4e6:	b11d      	cbz	r5, 800c4f0 <_printf_i+0x19c>
 800c4e8:	2310      	movs	r3, #16
 800c4ea:	e7ad      	b.n	800c448 <_printf_i+0xf4>
 800c4ec:	4826      	ldr	r0, [pc, #152]	@ (800c588 <_printf_i+0x234>)
 800c4ee:	e7e9      	b.n	800c4c4 <_printf_i+0x170>
 800c4f0:	6823      	ldr	r3, [r4, #0]
 800c4f2:	f023 0320 	bic.w	r3, r3, #32
 800c4f6:	6023      	str	r3, [r4, #0]
 800c4f8:	e7f6      	b.n	800c4e8 <_printf_i+0x194>
 800c4fa:	4616      	mov	r6, r2
 800c4fc:	e7bd      	b.n	800c47a <_printf_i+0x126>
 800c4fe:	6833      	ldr	r3, [r6, #0]
 800c500:	6825      	ldr	r5, [r4, #0]
 800c502:	6961      	ldr	r1, [r4, #20]
 800c504:	1d18      	adds	r0, r3, #4
 800c506:	6030      	str	r0, [r6, #0]
 800c508:	062e      	lsls	r6, r5, #24
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	d501      	bpl.n	800c512 <_printf_i+0x1be>
 800c50e:	6019      	str	r1, [r3, #0]
 800c510:	e002      	b.n	800c518 <_printf_i+0x1c4>
 800c512:	0668      	lsls	r0, r5, #25
 800c514:	d5fb      	bpl.n	800c50e <_printf_i+0x1ba>
 800c516:	8019      	strh	r1, [r3, #0]
 800c518:	2300      	movs	r3, #0
 800c51a:	6123      	str	r3, [r4, #16]
 800c51c:	4616      	mov	r6, r2
 800c51e:	e7bc      	b.n	800c49a <_printf_i+0x146>
 800c520:	6833      	ldr	r3, [r6, #0]
 800c522:	1d1a      	adds	r2, r3, #4
 800c524:	6032      	str	r2, [r6, #0]
 800c526:	681e      	ldr	r6, [r3, #0]
 800c528:	6862      	ldr	r2, [r4, #4]
 800c52a:	2100      	movs	r1, #0
 800c52c:	4630      	mov	r0, r6
 800c52e:	f7f3 fe57 	bl	80001e0 <memchr>
 800c532:	b108      	cbz	r0, 800c538 <_printf_i+0x1e4>
 800c534:	1b80      	subs	r0, r0, r6
 800c536:	6060      	str	r0, [r4, #4]
 800c538:	6863      	ldr	r3, [r4, #4]
 800c53a:	6123      	str	r3, [r4, #16]
 800c53c:	2300      	movs	r3, #0
 800c53e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c542:	e7aa      	b.n	800c49a <_printf_i+0x146>
 800c544:	6923      	ldr	r3, [r4, #16]
 800c546:	4632      	mov	r2, r6
 800c548:	4649      	mov	r1, r9
 800c54a:	4640      	mov	r0, r8
 800c54c:	47d0      	blx	sl
 800c54e:	3001      	adds	r0, #1
 800c550:	d0ad      	beq.n	800c4ae <_printf_i+0x15a>
 800c552:	6823      	ldr	r3, [r4, #0]
 800c554:	079b      	lsls	r3, r3, #30
 800c556:	d413      	bmi.n	800c580 <_printf_i+0x22c>
 800c558:	68e0      	ldr	r0, [r4, #12]
 800c55a:	9b03      	ldr	r3, [sp, #12]
 800c55c:	4298      	cmp	r0, r3
 800c55e:	bfb8      	it	lt
 800c560:	4618      	movlt	r0, r3
 800c562:	e7a6      	b.n	800c4b2 <_printf_i+0x15e>
 800c564:	2301      	movs	r3, #1
 800c566:	4632      	mov	r2, r6
 800c568:	4649      	mov	r1, r9
 800c56a:	4640      	mov	r0, r8
 800c56c:	47d0      	blx	sl
 800c56e:	3001      	adds	r0, #1
 800c570:	d09d      	beq.n	800c4ae <_printf_i+0x15a>
 800c572:	3501      	adds	r5, #1
 800c574:	68e3      	ldr	r3, [r4, #12]
 800c576:	9903      	ldr	r1, [sp, #12]
 800c578:	1a5b      	subs	r3, r3, r1
 800c57a:	42ab      	cmp	r3, r5
 800c57c:	dcf2      	bgt.n	800c564 <_printf_i+0x210>
 800c57e:	e7eb      	b.n	800c558 <_printf_i+0x204>
 800c580:	2500      	movs	r5, #0
 800c582:	f104 0619 	add.w	r6, r4, #25
 800c586:	e7f5      	b.n	800c574 <_printf_i+0x220>
 800c588:	0800f3c2 	.word	0x0800f3c2
 800c58c:	0800f3d3 	.word	0x0800f3d3

0800c590 <std>:
 800c590:	2300      	movs	r3, #0
 800c592:	b510      	push	{r4, lr}
 800c594:	4604      	mov	r4, r0
 800c596:	e9c0 3300 	strd	r3, r3, [r0]
 800c59a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c59e:	6083      	str	r3, [r0, #8]
 800c5a0:	8181      	strh	r1, [r0, #12]
 800c5a2:	6643      	str	r3, [r0, #100]	@ 0x64
 800c5a4:	81c2      	strh	r2, [r0, #14]
 800c5a6:	6183      	str	r3, [r0, #24]
 800c5a8:	4619      	mov	r1, r3
 800c5aa:	2208      	movs	r2, #8
 800c5ac:	305c      	adds	r0, #92	@ 0x5c
 800c5ae:	f000 f8f4 	bl	800c79a <memset>
 800c5b2:	4b0d      	ldr	r3, [pc, #52]	@ (800c5e8 <std+0x58>)
 800c5b4:	6263      	str	r3, [r4, #36]	@ 0x24
 800c5b6:	4b0d      	ldr	r3, [pc, #52]	@ (800c5ec <std+0x5c>)
 800c5b8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c5ba:	4b0d      	ldr	r3, [pc, #52]	@ (800c5f0 <std+0x60>)
 800c5bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c5be:	4b0d      	ldr	r3, [pc, #52]	@ (800c5f4 <std+0x64>)
 800c5c0:	6323      	str	r3, [r4, #48]	@ 0x30
 800c5c2:	4b0d      	ldr	r3, [pc, #52]	@ (800c5f8 <std+0x68>)
 800c5c4:	6224      	str	r4, [r4, #32]
 800c5c6:	429c      	cmp	r4, r3
 800c5c8:	d006      	beq.n	800c5d8 <std+0x48>
 800c5ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c5ce:	4294      	cmp	r4, r2
 800c5d0:	d002      	beq.n	800c5d8 <std+0x48>
 800c5d2:	33d0      	adds	r3, #208	@ 0xd0
 800c5d4:	429c      	cmp	r4, r3
 800c5d6:	d105      	bne.n	800c5e4 <std+0x54>
 800c5d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c5dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c5e0:	f000 b968 	b.w	800c8b4 <__retarget_lock_init_recursive>
 800c5e4:	bd10      	pop	{r4, pc}
 800c5e6:	bf00      	nop
 800c5e8:	0800c715 	.word	0x0800c715
 800c5ec:	0800c737 	.word	0x0800c737
 800c5f0:	0800c76f 	.word	0x0800c76f
 800c5f4:	0800c793 	.word	0x0800c793
 800c5f8:	20008c74 	.word	0x20008c74

0800c5fc <stdio_exit_handler>:
 800c5fc:	4a02      	ldr	r2, [pc, #8]	@ (800c608 <stdio_exit_handler+0xc>)
 800c5fe:	4903      	ldr	r1, [pc, #12]	@ (800c60c <stdio_exit_handler+0x10>)
 800c600:	4803      	ldr	r0, [pc, #12]	@ (800c610 <stdio_exit_handler+0x14>)
 800c602:	f000 b869 	b.w	800c6d8 <_fwalk_sglue>
 800c606:	bf00      	nop
 800c608:	20000044 	.word	0x20000044
 800c60c:	0800de39 	.word	0x0800de39
 800c610:	20000054 	.word	0x20000054

0800c614 <cleanup_stdio>:
 800c614:	6841      	ldr	r1, [r0, #4]
 800c616:	4b0c      	ldr	r3, [pc, #48]	@ (800c648 <cleanup_stdio+0x34>)
 800c618:	4299      	cmp	r1, r3
 800c61a:	b510      	push	{r4, lr}
 800c61c:	4604      	mov	r4, r0
 800c61e:	d001      	beq.n	800c624 <cleanup_stdio+0x10>
 800c620:	f001 fc0a 	bl	800de38 <_fflush_r>
 800c624:	68a1      	ldr	r1, [r4, #8]
 800c626:	4b09      	ldr	r3, [pc, #36]	@ (800c64c <cleanup_stdio+0x38>)
 800c628:	4299      	cmp	r1, r3
 800c62a:	d002      	beq.n	800c632 <cleanup_stdio+0x1e>
 800c62c:	4620      	mov	r0, r4
 800c62e:	f001 fc03 	bl	800de38 <_fflush_r>
 800c632:	68e1      	ldr	r1, [r4, #12]
 800c634:	4b06      	ldr	r3, [pc, #24]	@ (800c650 <cleanup_stdio+0x3c>)
 800c636:	4299      	cmp	r1, r3
 800c638:	d004      	beq.n	800c644 <cleanup_stdio+0x30>
 800c63a:	4620      	mov	r0, r4
 800c63c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c640:	f001 bbfa 	b.w	800de38 <_fflush_r>
 800c644:	bd10      	pop	{r4, pc}
 800c646:	bf00      	nop
 800c648:	20008c74 	.word	0x20008c74
 800c64c:	20008cdc 	.word	0x20008cdc
 800c650:	20008d44 	.word	0x20008d44

0800c654 <global_stdio_init.part.0>:
 800c654:	b510      	push	{r4, lr}
 800c656:	4b0b      	ldr	r3, [pc, #44]	@ (800c684 <global_stdio_init.part.0+0x30>)
 800c658:	4c0b      	ldr	r4, [pc, #44]	@ (800c688 <global_stdio_init.part.0+0x34>)
 800c65a:	4a0c      	ldr	r2, [pc, #48]	@ (800c68c <global_stdio_init.part.0+0x38>)
 800c65c:	601a      	str	r2, [r3, #0]
 800c65e:	4620      	mov	r0, r4
 800c660:	2200      	movs	r2, #0
 800c662:	2104      	movs	r1, #4
 800c664:	f7ff ff94 	bl	800c590 <std>
 800c668:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c66c:	2201      	movs	r2, #1
 800c66e:	2109      	movs	r1, #9
 800c670:	f7ff ff8e 	bl	800c590 <std>
 800c674:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c678:	2202      	movs	r2, #2
 800c67a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c67e:	2112      	movs	r1, #18
 800c680:	f7ff bf86 	b.w	800c590 <std>
 800c684:	20008dac 	.word	0x20008dac
 800c688:	20008c74 	.word	0x20008c74
 800c68c:	0800c5fd 	.word	0x0800c5fd

0800c690 <__sfp_lock_acquire>:
 800c690:	4801      	ldr	r0, [pc, #4]	@ (800c698 <__sfp_lock_acquire+0x8>)
 800c692:	f000 b910 	b.w	800c8b6 <__retarget_lock_acquire_recursive>
 800c696:	bf00      	nop
 800c698:	20008db5 	.word	0x20008db5

0800c69c <__sfp_lock_release>:
 800c69c:	4801      	ldr	r0, [pc, #4]	@ (800c6a4 <__sfp_lock_release+0x8>)
 800c69e:	f000 b90b 	b.w	800c8b8 <__retarget_lock_release_recursive>
 800c6a2:	bf00      	nop
 800c6a4:	20008db5 	.word	0x20008db5

0800c6a8 <__sinit>:
 800c6a8:	b510      	push	{r4, lr}
 800c6aa:	4604      	mov	r4, r0
 800c6ac:	f7ff fff0 	bl	800c690 <__sfp_lock_acquire>
 800c6b0:	6a23      	ldr	r3, [r4, #32]
 800c6b2:	b11b      	cbz	r3, 800c6bc <__sinit+0x14>
 800c6b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c6b8:	f7ff bff0 	b.w	800c69c <__sfp_lock_release>
 800c6bc:	4b04      	ldr	r3, [pc, #16]	@ (800c6d0 <__sinit+0x28>)
 800c6be:	6223      	str	r3, [r4, #32]
 800c6c0:	4b04      	ldr	r3, [pc, #16]	@ (800c6d4 <__sinit+0x2c>)
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d1f5      	bne.n	800c6b4 <__sinit+0xc>
 800c6c8:	f7ff ffc4 	bl	800c654 <global_stdio_init.part.0>
 800c6cc:	e7f2      	b.n	800c6b4 <__sinit+0xc>
 800c6ce:	bf00      	nop
 800c6d0:	0800c615 	.word	0x0800c615
 800c6d4:	20008dac 	.word	0x20008dac

0800c6d8 <_fwalk_sglue>:
 800c6d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6dc:	4607      	mov	r7, r0
 800c6de:	4688      	mov	r8, r1
 800c6e0:	4614      	mov	r4, r2
 800c6e2:	2600      	movs	r6, #0
 800c6e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c6e8:	f1b9 0901 	subs.w	r9, r9, #1
 800c6ec:	d505      	bpl.n	800c6fa <_fwalk_sglue+0x22>
 800c6ee:	6824      	ldr	r4, [r4, #0]
 800c6f0:	2c00      	cmp	r4, #0
 800c6f2:	d1f7      	bne.n	800c6e4 <_fwalk_sglue+0xc>
 800c6f4:	4630      	mov	r0, r6
 800c6f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6fa:	89ab      	ldrh	r3, [r5, #12]
 800c6fc:	2b01      	cmp	r3, #1
 800c6fe:	d907      	bls.n	800c710 <_fwalk_sglue+0x38>
 800c700:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c704:	3301      	adds	r3, #1
 800c706:	d003      	beq.n	800c710 <_fwalk_sglue+0x38>
 800c708:	4629      	mov	r1, r5
 800c70a:	4638      	mov	r0, r7
 800c70c:	47c0      	blx	r8
 800c70e:	4306      	orrs	r6, r0
 800c710:	3568      	adds	r5, #104	@ 0x68
 800c712:	e7e9      	b.n	800c6e8 <_fwalk_sglue+0x10>

0800c714 <__sread>:
 800c714:	b510      	push	{r4, lr}
 800c716:	460c      	mov	r4, r1
 800c718:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c71c:	f000 f86c 	bl	800c7f8 <_read_r>
 800c720:	2800      	cmp	r0, #0
 800c722:	bfab      	itete	ge
 800c724:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c726:	89a3      	ldrhlt	r3, [r4, #12]
 800c728:	181b      	addge	r3, r3, r0
 800c72a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c72e:	bfac      	ite	ge
 800c730:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c732:	81a3      	strhlt	r3, [r4, #12]
 800c734:	bd10      	pop	{r4, pc}

0800c736 <__swrite>:
 800c736:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c73a:	461f      	mov	r7, r3
 800c73c:	898b      	ldrh	r3, [r1, #12]
 800c73e:	05db      	lsls	r3, r3, #23
 800c740:	4605      	mov	r5, r0
 800c742:	460c      	mov	r4, r1
 800c744:	4616      	mov	r6, r2
 800c746:	d505      	bpl.n	800c754 <__swrite+0x1e>
 800c748:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c74c:	2302      	movs	r3, #2
 800c74e:	2200      	movs	r2, #0
 800c750:	f000 f840 	bl	800c7d4 <_lseek_r>
 800c754:	89a3      	ldrh	r3, [r4, #12]
 800c756:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c75a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c75e:	81a3      	strh	r3, [r4, #12]
 800c760:	4632      	mov	r2, r6
 800c762:	463b      	mov	r3, r7
 800c764:	4628      	mov	r0, r5
 800c766:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c76a:	f000 b867 	b.w	800c83c <_write_r>

0800c76e <__sseek>:
 800c76e:	b510      	push	{r4, lr}
 800c770:	460c      	mov	r4, r1
 800c772:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c776:	f000 f82d 	bl	800c7d4 <_lseek_r>
 800c77a:	1c43      	adds	r3, r0, #1
 800c77c:	89a3      	ldrh	r3, [r4, #12]
 800c77e:	bf15      	itete	ne
 800c780:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c782:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c786:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c78a:	81a3      	strheq	r3, [r4, #12]
 800c78c:	bf18      	it	ne
 800c78e:	81a3      	strhne	r3, [r4, #12]
 800c790:	bd10      	pop	{r4, pc}

0800c792 <__sclose>:
 800c792:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c796:	f000 b80d 	b.w	800c7b4 <_close_r>

0800c79a <memset>:
 800c79a:	4402      	add	r2, r0
 800c79c:	4603      	mov	r3, r0
 800c79e:	4293      	cmp	r3, r2
 800c7a0:	d100      	bne.n	800c7a4 <memset+0xa>
 800c7a2:	4770      	bx	lr
 800c7a4:	f803 1b01 	strb.w	r1, [r3], #1
 800c7a8:	e7f9      	b.n	800c79e <memset+0x4>
	...

0800c7ac <_localeconv_r>:
 800c7ac:	4800      	ldr	r0, [pc, #0]	@ (800c7b0 <_localeconv_r+0x4>)
 800c7ae:	4770      	bx	lr
 800c7b0:	20000190 	.word	0x20000190

0800c7b4 <_close_r>:
 800c7b4:	b538      	push	{r3, r4, r5, lr}
 800c7b6:	4d06      	ldr	r5, [pc, #24]	@ (800c7d0 <_close_r+0x1c>)
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	4604      	mov	r4, r0
 800c7bc:	4608      	mov	r0, r1
 800c7be:	602b      	str	r3, [r5, #0]
 800c7c0:	f7f5 fa3a 	bl	8001c38 <_close>
 800c7c4:	1c43      	adds	r3, r0, #1
 800c7c6:	d102      	bne.n	800c7ce <_close_r+0x1a>
 800c7c8:	682b      	ldr	r3, [r5, #0]
 800c7ca:	b103      	cbz	r3, 800c7ce <_close_r+0x1a>
 800c7cc:	6023      	str	r3, [r4, #0]
 800c7ce:	bd38      	pop	{r3, r4, r5, pc}
 800c7d0:	20008db0 	.word	0x20008db0

0800c7d4 <_lseek_r>:
 800c7d4:	b538      	push	{r3, r4, r5, lr}
 800c7d6:	4d07      	ldr	r5, [pc, #28]	@ (800c7f4 <_lseek_r+0x20>)
 800c7d8:	4604      	mov	r4, r0
 800c7da:	4608      	mov	r0, r1
 800c7dc:	4611      	mov	r1, r2
 800c7de:	2200      	movs	r2, #0
 800c7e0:	602a      	str	r2, [r5, #0]
 800c7e2:	461a      	mov	r2, r3
 800c7e4:	f7f5 fa4f 	bl	8001c86 <_lseek>
 800c7e8:	1c43      	adds	r3, r0, #1
 800c7ea:	d102      	bne.n	800c7f2 <_lseek_r+0x1e>
 800c7ec:	682b      	ldr	r3, [r5, #0]
 800c7ee:	b103      	cbz	r3, 800c7f2 <_lseek_r+0x1e>
 800c7f0:	6023      	str	r3, [r4, #0]
 800c7f2:	bd38      	pop	{r3, r4, r5, pc}
 800c7f4:	20008db0 	.word	0x20008db0

0800c7f8 <_read_r>:
 800c7f8:	b538      	push	{r3, r4, r5, lr}
 800c7fa:	4d07      	ldr	r5, [pc, #28]	@ (800c818 <_read_r+0x20>)
 800c7fc:	4604      	mov	r4, r0
 800c7fe:	4608      	mov	r0, r1
 800c800:	4611      	mov	r1, r2
 800c802:	2200      	movs	r2, #0
 800c804:	602a      	str	r2, [r5, #0]
 800c806:	461a      	mov	r2, r3
 800c808:	f7f5 f9dd 	bl	8001bc6 <_read>
 800c80c:	1c43      	adds	r3, r0, #1
 800c80e:	d102      	bne.n	800c816 <_read_r+0x1e>
 800c810:	682b      	ldr	r3, [r5, #0]
 800c812:	b103      	cbz	r3, 800c816 <_read_r+0x1e>
 800c814:	6023      	str	r3, [r4, #0]
 800c816:	bd38      	pop	{r3, r4, r5, pc}
 800c818:	20008db0 	.word	0x20008db0

0800c81c <_sbrk_r>:
 800c81c:	b538      	push	{r3, r4, r5, lr}
 800c81e:	4d06      	ldr	r5, [pc, #24]	@ (800c838 <_sbrk_r+0x1c>)
 800c820:	2300      	movs	r3, #0
 800c822:	4604      	mov	r4, r0
 800c824:	4608      	mov	r0, r1
 800c826:	602b      	str	r3, [r5, #0]
 800c828:	f7f5 fa3a 	bl	8001ca0 <_sbrk>
 800c82c:	1c43      	adds	r3, r0, #1
 800c82e:	d102      	bne.n	800c836 <_sbrk_r+0x1a>
 800c830:	682b      	ldr	r3, [r5, #0]
 800c832:	b103      	cbz	r3, 800c836 <_sbrk_r+0x1a>
 800c834:	6023      	str	r3, [r4, #0]
 800c836:	bd38      	pop	{r3, r4, r5, pc}
 800c838:	20008db0 	.word	0x20008db0

0800c83c <_write_r>:
 800c83c:	b538      	push	{r3, r4, r5, lr}
 800c83e:	4d07      	ldr	r5, [pc, #28]	@ (800c85c <_write_r+0x20>)
 800c840:	4604      	mov	r4, r0
 800c842:	4608      	mov	r0, r1
 800c844:	4611      	mov	r1, r2
 800c846:	2200      	movs	r2, #0
 800c848:	602a      	str	r2, [r5, #0]
 800c84a:	461a      	mov	r2, r3
 800c84c:	f7f5 f9d8 	bl	8001c00 <_write>
 800c850:	1c43      	adds	r3, r0, #1
 800c852:	d102      	bne.n	800c85a <_write_r+0x1e>
 800c854:	682b      	ldr	r3, [r5, #0]
 800c856:	b103      	cbz	r3, 800c85a <_write_r+0x1e>
 800c858:	6023      	str	r3, [r4, #0]
 800c85a:	bd38      	pop	{r3, r4, r5, pc}
 800c85c:	20008db0 	.word	0x20008db0

0800c860 <__errno>:
 800c860:	4b01      	ldr	r3, [pc, #4]	@ (800c868 <__errno+0x8>)
 800c862:	6818      	ldr	r0, [r3, #0]
 800c864:	4770      	bx	lr
 800c866:	bf00      	nop
 800c868:	20000050 	.word	0x20000050

0800c86c <__libc_init_array>:
 800c86c:	b570      	push	{r4, r5, r6, lr}
 800c86e:	4d0d      	ldr	r5, [pc, #52]	@ (800c8a4 <__libc_init_array+0x38>)
 800c870:	4c0d      	ldr	r4, [pc, #52]	@ (800c8a8 <__libc_init_array+0x3c>)
 800c872:	1b64      	subs	r4, r4, r5
 800c874:	10a4      	asrs	r4, r4, #2
 800c876:	2600      	movs	r6, #0
 800c878:	42a6      	cmp	r6, r4
 800c87a:	d109      	bne.n	800c890 <__libc_init_array+0x24>
 800c87c:	4d0b      	ldr	r5, [pc, #44]	@ (800c8ac <__libc_init_array+0x40>)
 800c87e:	4c0c      	ldr	r4, [pc, #48]	@ (800c8b0 <__libc_init_array+0x44>)
 800c880:	f001 fdfa 	bl	800e478 <_init>
 800c884:	1b64      	subs	r4, r4, r5
 800c886:	10a4      	asrs	r4, r4, #2
 800c888:	2600      	movs	r6, #0
 800c88a:	42a6      	cmp	r6, r4
 800c88c:	d105      	bne.n	800c89a <__libc_init_array+0x2e>
 800c88e:	bd70      	pop	{r4, r5, r6, pc}
 800c890:	f855 3b04 	ldr.w	r3, [r5], #4
 800c894:	4798      	blx	r3
 800c896:	3601      	adds	r6, #1
 800c898:	e7ee      	b.n	800c878 <__libc_init_array+0xc>
 800c89a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c89e:	4798      	blx	r3
 800c8a0:	3601      	adds	r6, #1
 800c8a2:	e7f2      	b.n	800c88a <__libc_init_array+0x1e>
 800c8a4:	0800f72c 	.word	0x0800f72c
 800c8a8:	0800f72c 	.word	0x0800f72c
 800c8ac:	0800f72c 	.word	0x0800f72c
 800c8b0:	0800f730 	.word	0x0800f730

0800c8b4 <__retarget_lock_init_recursive>:
 800c8b4:	4770      	bx	lr

0800c8b6 <__retarget_lock_acquire_recursive>:
 800c8b6:	4770      	bx	lr

0800c8b8 <__retarget_lock_release_recursive>:
 800c8b8:	4770      	bx	lr
	...

0800c8bc <__assert_func>:
 800c8bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c8be:	4614      	mov	r4, r2
 800c8c0:	461a      	mov	r2, r3
 800c8c2:	4b09      	ldr	r3, [pc, #36]	@ (800c8e8 <__assert_func+0x2c>)
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	4605      	mov	r5, r0
 800c8c8:	68d8      	ldr	r0, [r3, #12]
 800c8ca:	b14c      	cbz	r4, 800c8e0 <__assert_func+0x24>
 800c8cc:	4b07      	ldr	r3, [pc, #28]	@ (800c8ec <__assert_func+0x30>)
 800c8ce:	9100      	str	r1, [sp, #0]
 800c8d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c8d4:	4906      	ldr	r1, [pc, #24]	@ (800c8f0 <__assert_func+0x34>)
 800c8d6:	462b      	mov	r3, r5
 800c8d8:	f001 fad6 	bl	800de88 <fiprintf>
 800c8dc:	f001 faf4 	bl	800dec8 <abort>
 800c8e0:	4b04      	ldr	r3, [pc, #16]	@ (800c8f4 <__assert_func+0x38>)
 800c8e2:	461c      	mov	r4, r3
 800c8e4:	e7f3      	b.n	800c8ce <__assert_func+0x12>
 800c8e6:	bf00      	nop
 800c8e8:	20000050 	.word	0x20000050
 800c8ec:	0800f3e4 	.word	0x0800f3e4
 800c8f0:	0800f3f1 	.word	0x0800f3f1
 800c8f4:	0800f41f 	.word	0x0800f41f

0800c8f8 <quorem>:
 800c8f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8fc:	6903      	ldr	r3, [r0, #16]
 800c8fe:	690c      	ldr	r4, [r1, #16]
 800c900:	42a3      	cmp	r3, r4
 800c902:	4607      	mov	r7, r0
 800c904:	db7e      	blt.n	800ca04 <quorem+0x10c>
 800c906:	3c01      	subs	r4, #1
 800c908:	f101 0814 	add.w	r8, r1, #20
 800c90c:	00a3      	lsls	r3, r4, #2
 800c90e:	f100 0514 	add.w	r5, r0, #20
 800c912:	9300      	str	r3, [sp, #0]
 800c914:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c918:	9301      	str	r3, [sp, #4]
 800c91a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c91e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c922:	3301      	adds	r3, #1
 800c924:	429a      	cmp	r2, r3
 800c926:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c92a:	fbb2 f6f3 	udiv	r6, r2, r3
 800c92e:	d32e      	bcc.n	800c98e <quorem+0x96>
 800c930:	f04f 0a00 	mov.w	sl, #0
 800c934:	46c4      	mov	ip, r8
 800c936:	46ae      	mov	lr, r5
 800c938:	46d3      	mov	fp, sl
 800c93a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c93e:	b298      	uxth	r0, r3
 800c940:	fb06 a000 	mla	r0, r6, r0, sl
 800c944:	0c02      	lsrs	r2, r0, #16
 800c946:	0c1b      	lsrs	r3, r3, #16
 800c948:	fb06 2303 	mla	r3, r6, r3, r2
 800c94c:	f8de 2000 	ldr.w	r2, [lr]
 800c950:	b280      	uxth	r0, r0
 800c952:	b292      	uxth	r2, r2
 800c954:	1a12      	subs	r2, r2, r0
 800c956:	445a      	add	r2, fp
 800c958:	f8de 0000 	ldr.w	r0, [lr]
 800c95c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c960:	b29b      	uxth	r3, r3
 800c962:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c966:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c96a:	b292      	uxth	r2, r2
 800c96c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c970:	45e1      	cmp	r9, ip
 800c972:	f84e 2b04 	str.w	r2, [lr], #4
 800c976:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c97a:	d2de      	bcs.n	800c93a <quorem+0x42>
 800c97c:	9b00      	ldr	r3, [sp, #0]
 800c97e:	58eb      	ldr	r3, [r5, r3]
 800c980:	b92b      	cbnz	r3, 800c98e <quorem+0x96>
 800c982:	9b01      	ldr	r3, [sp, #4]
 800c984:	3b04      	subs	r3, #4
 800c986:	429d      	cmp	r5, r3
 800c988:	461a      	mov	r2, r3
 800c98a:	d32f      	bcc.n	800c9ec <quorem+0xf4>
 800c98c:	613c      	str	r4, [r7, #16]
 800c98e:	4638      	mov	r0, r7
 800c990:	f001 f8c6 	bl	800db20 <__mcmp>
 800c994:	2800      	cmp	r0, #0
 800c996:	db25      	blt.n	800c9e4 <quorem+0xec>
 800c998:	4629      	mov	r1, r5
 800c99a:	2000      	movs	r0, #0
 800c99c:	f858 2b04 	ldr.w	r2, [r8], #4
 800c9a0:	f8d1 c000 	ldr.w	ip, [r1]
 800c9a4:	fa1f fe82 	uxth.w	lr, r2
 800c9a8:	fa1f f38c 	uxth.w	r3, ip
 800c9ac:	eba3 030e 	sub.w	r3, r3, lr
 800c9b0:	4403      	add	r3, r0
 800c9b2:	0c12      	lsrs	r2, r2, #16
 800c9b4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c9b8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c9bc:	b29b      	uxth	r3, r3
 800c9be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c9c2:	45c1      	cmp	r9, r8
 800c9c4:	f841 3b04 	str.w	r3, [r1], #4
 800c9c8:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c9cc:	d2e6      	bcs.n	800c99c <quorem+0xa4>
 800c9ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c9d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c9d6:	b922      	cbnz	r2, 800c9e2 <quorem+0xea>
 800c9d8:	3b04      	subs	r3, #4
 800c9da:	429d      	cmp	r5, r3
 800c9dc:	461a      	mov	r2, r3
 800c9de:	d30b      	bcc.n	800c9f8 <quorem+0x100>
 800c9e0:	613c      	str	r4, [r7, #16]
 800c9e2:	3601      	adds	r6, #1
 800c9e4:	4630      	mov	r0, r6
 800c9e6:	b003      	add	sp, #12
 800c9e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9ec:	6812      	ldr	r2, [r2, #0]
 800c9ee:	3b04      	subs	r3, #4
 800c9f0:	2a00      	cmp	r2, #0
 800c9f2:	d1cb      	bne.n	800c98c <quorem+0x94>
 800c9f4:	3c01      	subs	r4, #1
 800c9f6:	e7c6      	b.n	800c986 <quorem+0x8e>
 800c9f8:	6812      	ldr	r2, [r2, #0]
 800c9fa:	3b04      	subs	r3, #4
 800c9fc:	2a00      	cmp	r2, #0
 800c9fe:	d1ef      	bne.n	800c9e0 <quorem+0xe8>
 800ca00:	3c01      	subs	r4, #1
 800ca02:	e7ea      	b.n	800c9da <quorem+0xe2>
 800ca04:	2000      	movs	r0, #0
 800ca06:	e7ee      	b.n	800c9e6 <quorem+0xee>

0800ca08 <_dtoa_r>:
 800ca08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca0c:	69c7      	ldr	r7, [r0, #28]
 800ca0e:	b097      	sub	sp, #92	@ 0x5c
 800ca10:	ed8d 0b04 	vstr	d0, [sp, #16]
 800ca14:	ec55 4b10 	vmov	r4, r5, d0
 800ca18:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800ca1a:	9107      	str	r1, [sp, #28]
 800ca1c:	4681      	mov	r9, r0
 800ca1e:	920c      	str	r2, [sp, #48]	@ 0x30
 800ca20:	9311      	str	r3, [sp, #68]	@ 0x44
 800ca22:	b97f      	cbnz	r7, 800ca44 <_dtoa_r+0x3c>
 800ca24:	2010      	movs	r0, #16
 800ca26:	f7ff f89f 	bl	800bb68 <malloc>
 800ca2a:	4602      	mov	r2, r0
 800ca2c:	f8c9 001c 	str.w	r0, [r9, #28]
 800ca30:	b920      	cbnz	r0, 800ca3c <_dtoa_r+0x34>
 800ca32:	4ba9      	ldr	r3, [pc, #676]	@ (800ccd8 <_dtoa_r+0x2d0>)
 800ca34:	21ef      	movs	r1, #239	@ 0xef
 800ca36:	48a9      	ldr	r0, [pc, #676]	@ (800ccdc <_dtoa_r+0x2d4>)
 800ca38:	f7ff ff40 	bl	800c8bc <__assert_func>
 800ca3c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ca40:	6007      	str	r7, [r0, #0]
 800ca42:	60c7      	str	r7, [r0, #12]
 800ca44:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ca48:	6819      	ldr	r1, [r3, #0]
 800ca4a:	b159      	cbz	r1, 800ca64 <_dtoa_r+0x5c>
 800ca4c:	685a      	ldr	r2, [r3, #4]
 800ca4e:	604a      	str	r2, [r1, #4]
 800ca50:	2301      	movs	r3, #1
 800ca52:	4093      	lsls	r3, r2
 800ca54:	608b      	str	r3, [r1, #8]
 800ca56:	4648      	mov	r0, r9
 800ca58:	f000 fe30 	bl	800d6bc <_Bfree>
 800ca5c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ca60:	2200      	movs	r2, #0
 800ca62:	601a      	str	r2, [r3, #0]
 800ca64:	1e2b      	subs	r3, r5, #0
 800ca66:	bfb9      	ittee	lt
 800ca68:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ca6c:	9305      	strlt	r3, [sp, #20]
 800ca6e:	2300      	movge	r3, #0
 800ca70:	6033      	strge	r3, [r6, #0]
 800ca72:	9f05      	ldr	r7, [sp, #20]
 800ca74:	4b9a      	ldr	r3, [pc, #616]	@ (800cce0 <_dtoa_r+0x2d8>)
 800ca76:	bfbc      	itt	lt
 800ca78:	2201      	movlt	r2, #1
 800ca7a:	6032      	strlt	r2, [r6, #0]
 800ca7c:	43bb      	bics	r3, r7
 800ca7e:	d112      	bne.n	800caa6 <_dtoa_r+0x9e>
 800ca80:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ca82:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ca86:	6013      	str	r3, [r2, #0]
 800ca88:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ca8c:	4323      	orrs	r3, r4
 800ca8e:	f000 855a 	beq.w	800d546 <_dtoa_r+0xb3e>
 800ca92:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ca94:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800ccf4 <_dtoa_r+0x2ec>
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	f000 855c 	beq.w	800d556 <_dtoa_r+0xb4e>
 800ca9e:	f10a 0303 	add.w	r3, sl, #3
 800caa2:	f000 bd56 	b.w	800d552 <_dtoa_r+0xb4a>
 800caa6:	ed9d 7b04 	vldr	d7, [sp, #16]
 800caaa:	2200      	movs	r2, #0
 800caac:	ec51 0b17 	vmov	r0, r1, d7
 800cab0:	2300      	movs	r3, #0
 800cab2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800cab6:	f7f4 f80f 	bl	8000ad8 <__aeabi_dcmpeq>
 800caba:	4680      	mov	r8, r0
 800cabc:	b158      	cbz	r0, 800cad6 <_dtoa_r+0xce>
 800cabe:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800cac0:	2301      	movs	r3, #1
 800cac2:	6013      	str	r3, [r2, #0]
 800cac4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800cac6:	b113      	cbz	r3, 800cace <_dtoa_r+0xc6>
 800cac8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800caca:	4b86      	ldr	r3, [pc, #536]	@ (800cce4 <_dtoa_r+0x2dc>)
 800cacc:	6013      	str	r3, [r2, #0]
 800cace:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800ccf8 <_dtoa_r+0x2f0>
 800cad2:	f000 bd40 	b.w	800d556 <_dtoa_r+0xb4e>
 800cad6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800cada:	aa14      	add	r2, sp, #80	@ 0x50
 800cadc:	a915      	add	r1, sp, #84	@ 0x54
 800cade:	4648      	mov	r0, r9
 800cae0:	f001 f8ce 	bl	800dc80 <__d2b>
 800cae4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800cae8:	9002      	str	r0, [sp, #8]
 800caea:	2e00      	cmp	r6, #0
 800caec:	d078      	beq.n	800cbe0 <_dtoa_r+0x1d8>
 800caee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800caf0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800caf4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800caf8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800cafc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800cb00:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800cb04:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800cb08:	4619      	mov	r1, r3
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	4b76      	ldr	r3, [pc, #472]	@ (800cce8 <_dtoa_r+0x2e0>)
 800cb0e:	f7f3 fbc3 	bl	8000298 <__aeabi_dsub>
 800cb12:	a36b      	add	r3, pc, #428	@ (adr r3, 800ccc0 <_dtoa_r+0x2b8>)
 800cb14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb18:	f7f3 fd76 	bl	8000608 <__aeabi_dmul>
 800cb1c:	a36a      	add	r3, pc, #424	@ (adr r3, 800ccc8 <_dtoa_r+0x2c0>)
 800cb1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb22:	f7f3 fbbb 	bl	800029c <__adddf3>
 800cb26:	4604      	mov	r4, r0
 800cb28:	4630      	mov	r0, r6
 800cb2a:	460d      	mov	r5, r1
 800cb2c:	f7f3 fd02 	bl	8000534 <__aeabi_i2d>
 800cb30:	a367      	add	r3, pc, #412	@ (adr r3, 800ccd0 <_dtoa_r+0x2c8>)
 800cb32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb36:	f7f3 fd67 	bl	8000608 <__aeabi_dmul>
 800cb3a:	4602      	mov	r2, r0
 800cb3c:	460b      	mov	r3, r1
 800cb3e:	4620      	mov	r0, r4
 800cb40:	4629      	mov	r1, r5
 800cb42:	f7f3 fbab 	bl	800029c <__adddf3>
 800cb46:	4604      	mov	r4, r0
 800cb48:	460d      	mov	r5, r1
 800cb4a:	f7f4 f80d 	bl	8000b68 <__aeabi_d2iz>
 800cb4e:	2200      	movs	r2, #0
 800cb50:	4607      	mov	r7, r0
 800cb52:	2300      	movs	r3, #0
 800cb54:	4620      	mov	r0, r4
 800cb56:	4629      	mov	r1, r5
 800cb58:	f7f3 ffc8 	bl	8000aec <__aeabi_dcmplt>
 800cb5c:	b140      	cbz	r0, 800cb70 <_dtoa_r+0x168>
 800cb5e:	4638      	mov	r0, r7
 800cb60:	f7f3 fce8 	bl	8000534 <__aeabi_i2d>
 800cb64:	4622      	mov	r2, r4
 800cb66:	462b      	mov	r3, r5
 800cb68:	f7f3 ffb6 	bl	8000ad8 <__aeabi_dcmpeq>
 800cb6c:	b900      	cbnz	r0, 800cb70 <_dtoa_r+0x168>
 800cb6e:	3f01      	subs	r7, #1
 800cb70:	2f16      	cmp	r7, #22
 800cb72:	d852      	bhi.n	800cc1a <_dtoa_r+0x212>
 800cb74:	4b5d      	ldr	r3, [pc, #372]	@ (800ccec <_dtoa_r+0x2e4>)
 800cb76:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cb7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb7e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800cb82:	f7f3 ffb3 	bl	8000aec <__aeabi_dcmplt>
 800cb86:	2800      	cmp	r0, #0
 800cb88:	d049      	beq.n	800cc1e <_dtoa_r+0x216>
 800cb8a:	3f01      	subs	r7, #1
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	9310      	str	r3, [sp, #64]	@ 0x40
 800cb90:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800cb92:	1b9b      	subs	r3, r3, r6
 800cb94:	1e5a      	subs	r2, r3, #1
 800cb96:	bf45      	ittet	mi
 800cb98:	f1c3 0301 	rsbmi	r3, r3, #1
 800cb9c:	9300      	strmi	r3, [sp, #0]
 800cb9e:	2300      	movpl	r3, #0
 800cba0:	2300      	movmi	r3, #0
 800cba2:	9206      	str	r2, [sp, #24]
 800cba4:	bf54      	ite	pl
 800cba6:	9300      	strpl	r3, [sp, #0]
 800cba8:	9306      	strmi	r3, [sp, #24]
 800cbaa:	2f00      	cmp	r7, #0
 800cbac:	db39      	blt.n	800cc22 <_dtoa_r+0x21a>
 800cbae:	9b06      	ldr	r3, [sp, #24]
 800cbb0:	970d      	str	r7, [sp, #52]	@ 0x34
 800cbb2:	443b      	add	r3, r7
 800cbb4:	9306      	str	r3, [sp, #24]
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	9308      	str	r3, [sp, #32]
 800cbba:	9b07      	ldr	r3, [sp, #28]
 800cbbc:	2b09      	cmp	r3, #9
 800cbbe:	d863      	bhi.n	800cc88 <_dtoa_r+0x280>
 800cbc0:	2b05      	cmp	r3, #5
 800cbc2:	bfc4      	itt	gt
 800cbc4:	3b04      	subgt	r3, #4
 800cbc6:	9307      	strgt	r3, [sp, #28]
 800cbc8:	9b07      	ldr	r3, [sp, #28]
 800cbca:	f1a3 0302 	sub.w	r3, r3, #2
 800cbce:	bfcc      	ite	gt
 800cbd0:	2400      	movgt	r4, #0
 800cbd2:	2401      	movle	r4, #1
 800cbd4:	2b03      	cmp	r3, #3
 800cbd6:	d863      	bhi.n	800cca0 <_dtoa_r+0x298>
 800cbd8:	e8df f003 	tbb	[pc, r3]
 800cbdc:	2b375452 	.word	0x2b375452
 800cbe0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800cbe4:	441e      	add	r6, r3
 800cbe6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800cbea:	2b20      	cmp	r3, #32
 800cbec:	bfc1      	itttt	gt
 800cbee:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800cbf2:	409f      	lslgt	r7, r3
 800cbf4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800cbf8:	fa24 f303 	lsrgt.w	r3, r4, r3
 800cbfc:	bfd6      	itet	le
 800cbfe:	f1c3 0320 	rsble	r3, r3, #32
 800cc02:	ea47 0003 	orrgt.w	r0, r7, r3
 800cc06:	fa04 f003 	lslle.w	r0, r4, r3
 800cc0a:	f7f3 fc83 	bl	8000514 <__aeabi_ui2d>
 800cc0e:	2201      	movs	r2, #1
 800cc10:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800cc14:	3e01      	subs	r6, #1
 800cc16:	9212      	str	r2, [sp, #72]	@ 0x48
 800cc18:	e776      	b.n	800cb08 <_dtoa_r+0x100>
 800cc1a:	2301      	movs	r3, #1
 800cc1c:	e7b7      	b.n	800cb8e <_dtoa_r+0x186>
 800cc1e:	9010      	str	r0, [sp, #64]	@ 0x40
 800cc20:	e7b6      	b.n	800cb90 <_dtoa_r+0x188>
 800cc22:	9b00      	ldr	r3, [sp, #0]
 800cc24:	1bdb      	subs	r3, r3, r7
 800cc26:	9300      	str	r3, [sp, #0]
 800cc28:	427b      	negs	r3, r7
 800cc2a:	9308      	str	r3, [sp, #32]
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	930d      	str	r3, [sp, #52]	@ 0x34
 800cc30:	e7c3      	b.n	800cbba <_dtoa_r+0x1b2>
 800cc32:	2301      	movs	r3, #1
 800cc34:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc36:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cc38:	eb07 0b03 	add.w	fp, r7, r3
 800cc3c:	f10b 0301 	add.w	r3, fp, #1
 800cc40:	2b01      	cmp	r3, #1
 800cc42:	9303      	str	r3, [sp, #12]
 800cc44:	bfb8      	it	lt
 800cc46:	2301      	movlt	r3, #1
 800cc48:	e006      	b.n	800cc58 <_dtoa_r+0x250>
 800cc4a:	2301      	movs	r3, #1
 800cc4c:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc4e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	dd28      	ble.n	800cca6 <_dtoa_r+0x29e>
 800cc54:	469b      	mov	fp, r3
 800cc56:	9303      	str	r3, [sp, #12]
 800cc58:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800cc5c:	2100      	movs	r1, #0
 800cc5e:	2204      	movs	r2, #4
 800cc60:	f102 0514 	add.w	r5, r2, #20
 800cc64:	429d      	cmp	r5, r3
 800cc66:	d926      	bls.n	800ccb6 <_dtoa_r+0x2ae>
 800cc68:	6041      	str	r1, [r0, #4]
 800cc6a:	4648      	mov	r0, r9
 800cc6c:	f000 fce6 	bl	800d63c <_Balloc>
 800cc70:	4682      	mov	sl, r0
 800cc72:	2800      	cmp	r0, #0
 800cc74:	d142      	bne.n	800ccfc <_dtoa_r+0x2f4>
 800cc76:	4b1e      	ldr	r3, [pc, #120]	@ (800ccf0 <_dtoa_r+0x2e8>)
 800cc78:	4602      	mov	r2, r0
 800cc7a:	f240 11af 	movw	r1, #431	@ 0x1af
 800cc7e:	e6da      	b.n	800ca36 <_dtoa_r+0x2e>
 800cc80:	2300      	movs	r3, #0
 800cc82:	e7e3      	b.n	800cc4c <_dtoa_r+0x244>
 800cc84:	2300      	movs	r3, #0
 800cc86:	e7d5      	b.n	800cc34 <_dtoa_r+0x22c>
 800cc88:	2401      	movs	r4, #1
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	9307      	str	r3, [sp, #28]
 800cc8e:	9409      	str	r4, [sp, #36]	@ 0x24
 800cc90:	f04f 3bff 	mov.w	fp, #4294967295
 800cc94:	2200      	movs	r2, #0
 800cc96:	f8cd b00c 	str.w	fp, [sp, #12]
 800cc9a:	2312      	movs	r3, #18
 800cc9c:	920c      	str	r2, [sp, #48]	@ 0x30
 800cc9e:	e7db      	b.n	800cc58 <_dtoa_r+0x250>
 800cca0:	2301      	movs	r3, #1
 800cca2:	9309      	str	r3, [sp, #36]	@ 0x24
 800cca4:	e7f4      	b.n	800cc90 <_dtoa_r+0x288>
 800cca6:	f04f 0b01 	mov.w	fp, #1
 800ccaa:	f8cd b00c 	str.w	fp, [sp, #12]
 800ccae:	465b      	mov	r3, fp
 800ccb0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800ccb4:	e7d0      	b.n	800cc58 <_dtoa_r+0x250>
 800ccb6:	3101      	adds	r1, #1
 800ccb8:	0052      	lsls	r2, r2, #1
 800ccba:	e7d1      	b.n	800cc60 <_dtoa_r+0x258>
 800ccbc:	f3af 8000 	nop.w
 800ccc0:	636f4361 	.word	0x636f4361
 800ccc4:	3fd287a7 	.word	0x3fd287a7
 800ccc8:	8b60c8b3 	.word	0x8b60c8b3
 800cccc:	3fc68a28 	.word	0x3fc68a28
 800ccd0:	509f79fb 	.word	0x509f79fb
 800ccd4:	3fd34413 	.word	0x3fd34413
 800ccd8:	0800f42d 	.word	0x0800f42d
 800ccdc:	0800f444 	.word	0x0800f444
 800cce0:	7ff00000 	.word	0x7ff00000
 800cce4:	0800f3c1 	.word	0x0800f3c1
 800cce8:	3ff80000 	.word	0x3ff80000
 800ccec:	0800f558 	.word	0x0800f558
 800ccf0:	0800f49c 	.word	0x0800f49c
 800ccf4:	0800f429 	.word	0x0800f429
 800ccf8:	0800f3c0 	.word	0x0800f3c0
 800ccfc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800cd00:	6018      	str	r0, [r3, #0]
 800cd02:	9b03      	ldr	r3, [sp, #12]
 800cd04:	2b0e      	cmp	r3, #14
 800cd06:	f200 80a1 	bhi.w	800ce4c <_dtoa_r+0x444>
 800cd0a:	2c00      	cmp	r4, #0
 800cd0c:	f000 809e 	beq.w	800ce4c <_dtoa_r+0x444>
 800cd10:	2f00      	cmp	r7, #0
 800cd12:	dd33      	ble.n	800cd7c <_dtoa_r+0x374>
 800cd14:	4b9c      	ldr	r3, [pc, #624]	@ (800cf88 <_dtoa_r+0x580>)
 800cd16:	f007 020f 	and.w	r2, r7, #15
 800cd1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cd1e:	ed93 7b00 	vldr	d7, [r3]
 800cd22:	05f8      	lsls	r0, r7, #23
 800cd24:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800cd28:	ea4f 1427 	mov.w	r4, r7, asr #4
 800cd2c:	d516      	bpl.n	800cd5c <_dtoa_r+0x354>
 800cd2e:	4b97      	ldr	r3, [pc, #604]	@ (800cf8c <_dtoa_r+0x584>)
 800cd30:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800cd34:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cd38:	f7f3 fd90 	bl	800085c <__aeabi_ddiv>
 800cd3c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cd40:	f004 040f 	and.w	r4, r4, #15
 800cd44:	2603      	movs	r6, #3
 800cd46:	4d91      	ldr	r5, [pc, #580]	@ (800cf8c <_dtoa_r+0x584>)
 800cd48:	b954      	cbnz	r4, 800cd60 <_dtoa_r+0x358>
 800cd4a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800cd4e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cd52:	f7f3 fd83 	bl	800085c <__aeabi_ddiv>
 800cd56:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cd5a:	e028      	b.n	800cdae <_dtoa_r+0x3a6>
 800cd5c:	2602      	movs	r6, #2
 800cd5e:	e7f2      	b.n	800cd46 <_dtoa_r+0x33e>
 800cd60:	07e1      	lsls	r1, r4, #31
 800cd62:	d508      	bpl.n	800cd76 <_dtoa_r+0x36e>
 800cd64:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800cd68:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cd6c:	f7f3 fc4c 	bl	8000608 <__aeabi_dmul>
 800cd70:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800cd74:	3601      	adds	r6, #1
 800cd76:	1064      	asrs	r4, r4, #1
 800cd78:	3508      	adds	r5, #8
 800cd7a:	e7e5      	b.n	800cd48 <_dtoa_r+0x340>
 800cd7c:	f000 80af 	beq.w	800cede <_dtoa_r+0x4d6>
 800cd80:	427c      	negs	r4, r7
 800cd82:	4b81      	ldr	r3, [pc, #516]	@ (800cf88 <_dtoa_r+0x580>)
 800cd84:	4d81      	ldr	r5, [pc, #516]	@ (800cf8c <_dtoa_r+0x584>)
 800cd86:	f004 020f 	and.w	r2, r4, #15
 800cd8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cd8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd92:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800cd96:	f7f3 fc37 	bl	8000608 <__aeabi_dmul>
 800cd9a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cd9e:	1124      	asrs	r4, r4, #4
 800cda0:	2300      	movs	r3, #0
 800cda2:	2602      	movs	r6, #2
 800cda4:	2c00      	cmp	r4, #0
 800cda6:	f040 808f 	bne.w	800cec8 <_dtoa_r+0x4c0>
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d1d3      	bne.n	800cd56 <_dtoa_r+0x34e>
 800cdae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cdb0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	f000 8094 	beq.w	800cee2 <_dtoa_r+0x4da>
 800cdba:	4b75      	ldr	r3, [pc, #468]	@ (800cf90 <_dtoa_r+0x588>)
 800cdbc:	2200      	movs	r2, #0
 800cdbe:	4620      	mov	r0, r4
 800cdc0:	4629      	mov	r1, r5
 800cdc2:	f7f3 fe93 	bl	8000aec <__aeabi_dcmplt>
 800cdc6:	2800      	cmp	r0, #0
 800cdc8:	f000 808b 	beq.w	800cee2 <_dtoa_r+0x4da>
 800cdcc:	9b03      	ldr	r3, [sp, #12]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	f000 8087 	beq.w	800cee2 <_dtoa_r+0x4da>
 800cdd4:	f1bb 0f00 	cmp.w	fp, #0
 800cdd8:	dd34      	ble.n	800ce44 <_dtoa_r+0x43c>
 800cdda:	4620      	mov	r0, r4
 800cddc:	4b6d      	ldr	r3, [pc, #436]	@ (800cf94 <_dtoa_r+0x58c>)
 800cdde:	2200      	movs	r2, #0
 800cde0:	4629      	mov	r1, r5
 800cde2:	f7f3 fc11 	bl	8000608 <__aeabi_dmul>
 800cde6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cdea:	f107 38ff 	add.w	r8, r7, #4294967295
 800cdee:	3601      	adds	r6, #1
 800cdf0:	465c      	mov	r4, fp
 800cdf2:	4630      	mov	r0, r6
 800cdf4:	f7f3 fb9e 	bl	8000534 <__aeabi_i2d>
 800cdf8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cdfc:	f7f3 fc04 	bl	8000608 <__aeabi_dmul>
 800ce00:	4b65      	ldr	r3, [pc, #404]	@ (800cf98 <_dtoa_r+0x590>)
 800ce02:	2200      	movs	r2, #0
 800ce04:	f7f3 fa4a 	bl	800029c <__adddf3>
 800ce08:	4605      	mov	r5, r0
 800ce0a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ce0e:	2c00      	cmp	r4, #0
 800ce10:	d16a      	bne.n	800cee8 <_dtoa_r+0x4e0>
 800ce12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ce16:	4b61      	ldr	r3, [pc, #388]	@ (800cf9c <_dtoa_r+0x594>)
 800ce18:	2200      	movs	r2, #0
 800ce1a:	f7f3 fa3d 	bl	8000298 <__aeabi_dsub>
 800ce1e:	4602      	mov	r2, r0
 800ce20:	460b      	mov	r3, r1
 800ce22:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ce26:	462a      	mov	r2, r5
 800ce28:	4633      	mov	r3, r6
 800ce2a:	f7f3 fe7d 	bl	8000b28 <__aeabi_dcmpgt>
 800ce2e:	2800      	cmp	r0, #0
 800ce30:	f040 8298 	bne.w	800d364 <_dtoa_r+0x95c>
 800ce34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ce38:	462a      	mov	r2, r5
 800ce3a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ce3e:	f7f3 fe55 	bl	8000aec <__aeabi_dcmplt>
 800ce42:	bb38      	cbnz	r0, 800ce94 <_dtoa_r+0x48c>
 800ce44:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800ce48:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ce4c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	f2c0 8157 	blt.w	800d102 <_dtoa_r+0x6fa>
 800ce54:	2f0e      	cmp	r7, #14
 800ce56:	f300 8154 	bgt.w	800d102 <_dtoa_r+0x6fa>
 800ce5a:	4b4b      	ldr	r3, [pc, #300]	@ (800cf88 <_dtoa_r+0x580>)
 800ce5c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ce60:	ed93 7b00 	vldr	d7, [r3]
 800ce64:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	ed8d 7b00 	vstr	d7, [sp]
 800ce6c:	f280 80e5 	bge.w	800d03a <_dtoa_r+0x632>
 800ce70:	9b03      	ldr	r3, [sp, #12]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	f300 80e1 	bgt.w	800d03a <_dtoa_r+0x632>
 800ce78:	d10c      	bne.n	800ce94 <_dtoa_r+0x48c>
 800ce7a:	4b48      	ldr	r3, [pc, #288]	@ (800cf9c <_dtoa_r+0x594>)
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	ec51 0b17 	vmov	r0, r1, d7
 800ce82:	f7f3 fbc1 	bl	8000608 <__aeabi_dmul>
 800ce86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ce8a:	f7f3 fe43 	bl	8000b14 <__aeabi_dcmpge>
 800ce8e:	2800      	cmp	r0, #0
 800ce90:	f000 8266 	beq.w	800d360 <_dtoa_r+0x958>
 800ce94:	2400      	movs	r4, #0
 800ce96:	4625      	mov	r5, r4
 800ce98:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ce9a:	4656      	mov	r6, sl
 800ce9c:	ea6f 0803 	mvn.w	r8, r3
 800cea0:	2700      	movs	r7, #0
 800cea2:	4621      	mov	r1, r4
 800cea4:	4648      	mov	r0, r9
 800cea6:	f000 fc09 	bl	800d6bc <_Bfree>
 800ceaa:	2d00      	cmp	r5, #0
 800ceac:	f000 80bd 	beq.w	800d02a <_dtoa_r+0x622>
 800ceb0:	b12f      	cbz	r7, 800cebe <_dtoa_r+0x4b6>
 800ceb2:	42af      	cmp	r7, r5
 800ceb4:	d003      	beq.n	800cebe <_dtoa_r+0x4b6>
 800ceb6:	4639      	mov	r1, r7
 800ceb8:	4648      	mov	r0, r9
 800ceba:	f000 fbff 	bl	800d6bc <_Bfree>
 800cebe:	4629      	mov	r1, r5
 800cec0:	4648      	mov	r0, r9
 800cec2:	f000 fbfb 	bl	800d6bc <_Bfree>
 800cec6:	e0b0      	b.n	800d02a <_dtoa_r+0x622>
 800cec8:	07e2      	lsls	r2, r4, #31
 800ceca:	d505      	bpl.n	800ced8 <_dtoa_r+0x4d0>
 800cecc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ced0:	f7f3 fb9a 	bl	8000608 <__aeabi_dmul>
 800ced4:	3601      	adds	r6, #1
 800ced6:	2301      	movs	r3, #1
 800ced8:	1064      	asrs	r4, r4, #1
 800ceda:	3508      	adds	r5, #8
 800cedc:	e762      	b.n	800cda4 <_dtoa_r+0x39c>
 800cede:	2602      	movs	r6, #2
 800cee0:	e765      	b.n	800cdae <_dtoa_r+0x3a6>
 800cee2:	9c03      	ldr	r4, [sp, #12]
 800cee4:	46b8      	mov	r8, r7
 800cee6:	e784      	b.n	800cdf2 <_dtoa_r+0x3ea>
 800cee8:	4b27      	ldr	r3, [pc, #156]	@ (800cf88 <_dtoa_r+0x580>)
 800ceea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ceec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cef0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cef4:	4454      	add	r4, sl
 800cef6:	2900      	cmp	r1, #0
 800cef8:	d054      	beq.n	800cfa4 <_dtoa_r+0x59c>
 800cefa:	4929      	ldr	r1, [pc, #164]	@ (800cfa0 <_dtoa_r+0x598>)
 800cefc:	2000      	movs	r0, #0
 800cefe:	f7f3 fcad 	bl	800085c <__aeabi_ddiv>
 800cf02:	4633      	mov	r3, r6
 800cf04:	462a      	mov	r2, r5
 800cf06:	f7f3 f9c7 	bl	8000298 <__aeabi_dsub>
 800cf0a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800cf0e:	4656      	mov	r6, sl
 800cf10:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cf14:	f7f3 fe28 	bl	8000b68 <__aeabi_d2iz>
 800cf18:	4605      	mov	r5, r0
 800cf1a:	f7f3 fb0b 	bl	8000534 <__aeabi_i2d>
 800cf1e:	4602      	mov	r2, r0
 800cf20:	460b      	mov	r3, r1
 800cf22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cf26:	f7f3 f9b7 	bl	8000298 <__aeabi_dsub>
 800cf2a:	3530      	adds	r5, #48	@ 0x30
 800cf2c:	4602      	mov	r2, r0
 800cf2e:	460b      	mov	r3, r1
 800cf30:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cf34:	f806 5b01 	strb.w	r5, [r6], #1
 800cf38:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800cf3c:	f7f3 fdd6 	bl	8000aec <__aeabi_dcmplt>
 800cf40:	2800      	cmp	r0, #0
 800cf42:	d172      	bne.n	800d02a <_dtoa_r+0x622>
 800cf44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cf48:	4911      	ldr	r1, [pc, #68]	@ (800cf90 <_dtoa_r+0x588>)
 800cf4a:	2000      	movs	r0, #0
 800cf4c:	f7f3 f9a4 	bl	8000298 <__aeabi_dsub>
 800cf50:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800cf54:	f7f3 fdca 	bl	8000aec <__aeabi_dcmplt>
 800cf58:	2800      	cmp	r0, #0
 800cf5a:	f040 80b4 	bne.w	800d0c6 <_dtoa_r+0x6be>
 800cf5e:	42a6      	cmp	r6, r4
 800cf60:	f43f af70 	beq.w	800ce44 <_dtoa_r+0x43c>
 800cf64:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800cf68:	4b0a      	ldr	r3, [pc, #40]	@ (800cf94 <_dtoa_r+0x58c>)
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	f7f3 fb4c 	bl	8000608 <__aeabi_dmul>
 800cf70:	4b08      	ldr	r3, [pc, #32]	@ (800cf94 <_dtoa_r+0x58c>)
 800cf72:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800cf76:	2200      	movs	r2, #0
 800cf78:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cf7c:	f7f3 fb44 	bl	8000608 <__aeabi_dmul>
 800cf80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cf84:	e7c4      	b.n	800cf10 <_dtoa_r+0x508>
 800cf86:	bf00      	nop
 800cf88:	0800f558 	.word	0x0800f558
 800cf8c:	0800f530 	.word	0x0800f530
 800cf90:	3ff00000 	.word	0x3ff00000
 800cf94:	40240000 	.word	0x40240000
 800cf98:	401c0000 	.word	0x401c0000
 800cf9c:	40140000 	.word	0x40140000
 800cfa0:	3fe00000 	.word	0x3fe00000
 800cfa4:	4631      	mov	r1, r6
 800cfa6:	4628      	mov	r0, r5
 800cfa8:	f7f3 fb2e 	bl	8000608 <__aeabi_dmul>
 800cfac:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800cfb0:	9413      	str	r4, [sp, #76]	@ 0x4c
 800cfb2:	4656      	mov	r6, sl
 800cfb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cfb8:	f7f3 fdd6 	bl	8000b68 <__aeabi_d2iz>
 800cfbc:	4605      	mov	r5, r0
 800cfbe:	f7f3 fab9 	bl	8000534 <__aeabi_i2d>
 800cfc2:	4602      	mov	r2, r0
 800cfc4:	460b      	mov	r3, r1
 800cfc6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cfca:	f7f3 f965 	bl	8000298 <__aeabi_dsub>
 800cfce:	3530      	adds	r5, #48	@ 0x30
 800cfd0:	f806 5b01 	strb.w	r5, [r6], #1
 800cfd4:	4602      	mov	r2, r0
 800cfd6:	460b      	mov	r3, r1
 800cfd8:	42a6      	cmp	r6, r4
 800cfda:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cfde:	f04f 0200 	mov.w	r2, #0
 800cfe2:	d124      	bne.n	800d02e <_dtoa_r+0x626>
 800cfe4:	4baf      	ldr	r3, [pc, #700]	@ (800d2a4 <_dtoa_r+0x89c>)
 800cfe6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800cfea:	f7f3 f957 	bl	800029c <__adddf3>
 800cfee:	4602      	mov	r2, r0
 800cff0:	460b      	mov	r3, r1
 800cff2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cff6:	f7f3 fd97 	bl	8000b28 <__aeabi_dcmpgt>
 800cffa:	2800      	cmp	r0, #0
 800cffc:	d163      	bne.n	800d0c6 <_dtoa_r+0x6be>
 800cffe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d002:	49a8      	ldr	r1, [pc, #672]	@ (800d2a4 <_dtoa_r+0x89c>)
 800d004:	2000      	movs	r0, #0
 800d006:	f7f3 f947 	bl	8000298 <__aeabi_dsub>
 800d00a:	4602      	mov	r2, r0
 800d00c:	460b      	mov	r3, r1
 800d00e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d012:	f7f3 fd6b 	bl	8000aec <__aeabi_dcmplt>
 800d016:	2800      	cmp	r0, #0
 800d018:	f43f af14 	beq.w	800ce44 <_dtoa_r+0x43c>
 800d01c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800d01e:	1e73      	subs	r3, r6, #1
 800d020:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d022:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d026:	2b30      	cmp	r3, #48	@ 0x30
 800d028:	d0f8      	beq.n	800d01c <_dtoa_r+0x614>
 800d02a:	4647      	mov	r7, r8
 800d02c:	e03b      	b.n	800d0a6 <_dtoa_r+0x69e>
 800d02e:	4b9e      	ldr	r3, [pc, #632]	@ (800d2a8 <_dtoa_r+0x8a0>)
 800d030:	f7f3 faea 	bl	8000608 <__aeabi_dmul>
 800d034:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d038:	e7bc      	b.n	800cfb4 <_dtoa_r+0x5ac>
 800d03a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800d03e:	4656      	mov	r6, sl
 800d040:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d044:	4620      	mov	r0, r4
 800d046:	4629      	mov	r1, r5
 800d048:	f7f3 fc08 	bl	800085c <__aeabi_ddiv>
 800d04c:	f7f3 fd8c 	bl	8000b68 <__aeabi_d2iz>
 800d050:	4680      	mov	r8, r0
 800d052:	f7f3 fa6f 	bl	8000534 <__aeabi_i2d>
 800d056:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d05a:	f7f3 fad5 	bl	8000608 <__aeabi_dmul>
 800d05e:	4602      	mov	r2, r0
 800d060:	460b      	mov	r3, r1
 800d062:	4620      	mov	r0, r4
 800d064:	4629      	mov	r1, r5
 800d066:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d06a:	f7f3 f915 	bl	8000298 <__aeabi_dsub>
 800d06e:	f806 4b01 	strb.w	r4, [r6], #1
 800d072:	9d03      	ldr	r5, [sp, #12]
 800d074:	eba6 040a 	sub.w	r4, r6, sl
 800d078:	42a5      	cmp	r5, r4
 800d07a:	4602      	mov	r2, r0
 800d07c:	460b      	mov	r3, r1
 800d07e:	d133      	bne.n	800d0e8 <_dtoa_r+0x6e0>
 800d080:	f7f3 f90c 	bl	800029c <__adddf3>
 800d084:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d088:	4604      	mov	r4, r0
 800d08a:	460d      	mov	r5, r1
 800d08c:	f7f3 fd4c 	bl	8000b28 <__aeabi_dcmpgt>
 800d090:	b9c0      	cbnz	r0, 800d0c4 <_dtoa_r+0x6bc>
 800d092:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d096:	4620      	mov	r0, r4
 800d098:	4629      	mov	r1, r5
 800d09a:	f7f3 fd1d 	bl	8000ad8 <__aeabi_dcmpeq>
 800d09e:	b110      	cbz	r0, 800d0a6 <_dtoa_r+0x69e>
 800d0a0:	f018 0f01 	tst.w	r8, #1
 800d0a4:	d10e      	bne.n	800d0c4 <_dtoa_r+0x6bc>
 800d0a6:	9902      	ldr	r1, [sp, #8]
 800d0a8:	4648      	mov	r0, r9
 800d0aa:	f000 fb07 	bl	800d6bc <_Bfree>
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	7033      	strb	r3, [r6, #0]
 800d0b2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d0b4:	3701      	adds	r7, #1
 800d0b6:	601f      	str	r7, [r3, #0]
 800d0b8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	f000 824b 	beq.w	800d556 <_dtoa_r+0xb4e>
 800d0c0:	601e      	str	r6, [r3, #0]
 800d0c2:	e248      	b.n	800d556 <_dtoa_r+0xb4e>
 800d0c4:	46b8      	mov	r8, r7
 800d0c6:	4633      	mov	r3, r6
 800d0c8:	461e      	mov	r6, r3
 800d0ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d0ce:	2a39      	cmp	r2, #57	@ 0x39
 800d0d0:	d106      	bne.n	800d0e0 <_dtoa_r+0x6d8>
 800d0d2:	459a      	cmp	sl, r3
 800d0d4:	d1f8      	bne.n	800d0c8 <_dtoa_r+0x6c0>
 800d0d6:	2230      	movs	r2, #48	@ 0x30
 800d0d8:	f108 0801 	add.w	r8, r8, #1
 800d0dc:	f88a 2000 	strb.w	r2, [sl]
 800d0e0:	781a      	ldrb	r2, [r3, #0]
 800d0e2:	3201      	adds	r2, #1
 800d0e4:	701a      	strb	r2, [r3, #0]
 800d0e6:	e7a0      	b.n	800d02a <_dtoa_r+0x622>
 800d0e8:	4b6f      	ldr	r3, [pc, #444]	@ (800d2a8 <_dtoa_r+0x8a0>)
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	f7f3 fa8c 	bl	8000608 <__aeabi_dmul>
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	4604      	mov	r4, r0
 800d0f6:	460d      	mov	r5, r1
 800d0f8:	f7f3 fcee 	bl	8000ad8 <__aeabi_dcmpeq>
 800d0fc:	2800      	cmp	r0, #0
 800d0fe:	d09f      	beq.n	800d040 <_dtoa_r+0x638>
 800d100:	e7d1      	b.n	800d0a6 <_dtoa_r+0x69e>
 800d102:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d104:	2a00      	cmp	r2, #0
 800d106:	f000 80ea 	beq.w	800d2de <_dtoa_r+0x8d6>
 800d10a:	9a07      	ldr	r2, [sp, #28]
 800d10c:	2a01      	cmp	r2, #1
 800d10e:	f300 80cd 	bgt.w	800d2ac <_dtoa_r+0x8a4>
 800d112:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d114:	2a00      	cmp	r2, #0
 800d116:	f000 80c1 	beq.w	800d29c <_dtoa_r+0x894>
 800d11a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d11e:	9c08      	ldr	r4, [sp, #32]
 800d120:	9e00      	ldr	r6, [sp, #0]
 800d122:	9a00      	ldr	r2, [sp, #0]
 800d124:	441a      	add	r2, r3
 800d126:	9200      	str	r2, [sp, #0]
 800d128:	9a06      	ldr	r2, [sp, #24]
 800d12a:	2101      	movs	r1, #1
 800d12c:	441a      	add	r2, r3
 800d12e:	4648      	mov	r0, r9
 800d130:	9206      	str	r2, [sp, #24]
 800d132:	f000 fb77 	bl	800d824 <__i2b>
 800d136:	4605      	mov	r5, r0
 800d138:	b166      	cbz	r6, 800d154 <_dtoa_r+0x74c>
 800d13a:	9b06      	ldr	r3, [sp, #24]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	dd09      	ble.n	800d154 <_dtoa_r+0x74c>
 800d140:	42b3      	cmp	r3, r6
 800d142:	9a00      	ldr	r2, [sp, #0]
 800d144:	bfa8      	it	ge
 800d146:	4633      	movge	r3, r6
 800d148:	1ad2      	subs	r2, r2, r3
 800d14a:	9200      	str	r2, [sp, #0]
 800d14c:	9a06      	ldr	r2, [sp, #24]
 800d14e:	1af6      	subs	r6, r6, r3
 800d150:	1ad3      	subs	r3, r2, r3
 800d152:	9306      	str	r3, [sp, #24]
 800d154:	9b08      	ldr	r3, [sp, #32]
 800d156:	b30b      	cbz	r3, 800d19c <_dtoa_r+0x794>
 800d158:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	f000 80c6 	beq.w	800d2ec <_dtoa_r+0x8e4>
 800d160:	2c00      	cmp	r4, #0
 800d162:	f000 80c0 	beq.w	800d2e6 <_dtoa_r+0x8de>
 800d166:	4629      	mov	r1, r5
 800d168:	4622      	mov	r2, r4
 800d16a:	4648      	mov	r0, r9
 800d16c:	f000 fc12 	bl	800d994 <__pow5mult>
 800d170:	9a02      	ldr	r2, [sp, #8]
 800d172:	4601      	mov	r1, r0
 800d174:	4605      	mov	r5, r0
 800d176:	4648      	mov	r0, r9
 800d178:	f000 fb6a 	bl	800d850 <__multiply>
 800d17c:	9902      	ldr	r1, [sp, #8]
 800d17e:	4680      	mov	r8, r0
 800d180:	4648      	mov	r0, r9
 800d182:	f000 fa9b 	bl	800d6bc <_Bfree>
 800d186:	9b08      	ldr	r3, [sp, #32]
 800d188:	1b1b      	subs	r3, r3, r4
 800d18a:	9308      	str	r3, [sp, #32]
 800d18c:	f000 80b1 	beq.w	800d2f2 <_dtoa_r+0x8ea>
 800d190:	9a08      	ldr	r2, [sp, #32]
 800d192:	4641      	mov	r1, r8
 800d194:	4648      	mov	r0, r9
 800d196:	f000 fbfd 	bl	800d994 <__pow5mult>
 800d19a:	9002      	str	r0, [sp, #8]
 800d19c:	2101      	movs	r1, #1
 800d19e:	4648      	mov	r0, r9
 800d1a0:	f000 fb40 	bl	800d824 <__i2b>
 800d1a4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d1a6:	4604      	mov	r4, r0
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	f000 81d8 	beq.w	800d55e <_dtoa_r+0xb56>
 800d1ae:	461a      	mov	r2, r3
 800d1b0:	4601      	mov	r1, r0
 800d1b2:	4648      	mov	r0, r9
 800d1b4:	f000 fbee 	bl	800d994 <__pow5mult>
 800d1b8:	9b07      	ldr	r3, [sp, #28]
 800d1ba:	2b01      	cmp	r3, #1
 800d1bc:	4604      	mov	r4, r0
 800d1be:	f300 809f 	bgt.w	800d300 <_dtoa_r+0x8f8>
 800d1c2:	9b04      	ldr	r3, [sp, #16]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	f040 8097 	bne.w	800d2f8 <_dtoa_r+0x8f0>
 800d1ca:	9b05      	ldr	r3, [sp, #20]
 800d1cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	f040 8093 	bne.w	800d2fc <_dtoa_r+0x8f4>
 800d1d6:	9b05      	ldr	r3, [sp, #20]
 800d1d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d1dc:	0d1b      	lsrs	r3, r3, #20
 800d1de:	051b      	lsls	r3, r3, #20
 800d1e0:	b133      	cbz	r3, 800d1f0 <_dtoa_r+0x7e8>
 800d1e2:	9b00      	ldr	r3, [sp, #0]
 800d1e4:	3301      	adds	r3, #1
 800d1e6:	9300      	str	r3, [sp, #0]
 800d1e8:	9b06      	ldr	r3, [sp, #24]
 800d1ea:	3301      	adds	r3, #1
 800d1ec:	9306      	str	r3, [sp, #24]
 800d1ee:	2301      	movs	r3, #1
 800d1f0:	9308      	str	r3, [sp, #32]
 800d1f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	f000 81b8 	beq.w	800d56a <_dtoa_r+0xb62>
 800d1fa:	6923      	ldr	r3, [r4, #16]
 800d1fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d200:	6918      	ldr	r0, [r3, #16]
 800d202:	f000 fac3 	bl	800d78c <__hi0bits>
 800d206:	f1c0 0020 	rsb	r0, r0, #32
 800d20a:	9b06      	ldr	r3, [sp, #24]
 800d20c:	4418      	add	r0, r3
 800d20e:	f010 001f 	ands.w	r0, r0, #31
 800d212:	f000 8082 	beq.w	800d31a <_dtoa_r+0x912>
 800d216:	f1c0 0320 	rsb	r3, r0, #32
 800d21a:	2b04      	cmp	r3, #4
 800d21c:	dd73      	ble.n	800d306 <_dtoa_r+0x8fe>
 800d21e:	9b00      	ldr	r3, [sp, #0]
 800d220:	f1c0 001c 	rsb	r0, r0, #28
 800d224:	4403      	add	r3, r0
 800d226:	9300      	str	r3, [sp, #0]
 800d228:	9b06      	ldr	r3, [sp, #24]
 800d22a:	4403      	add	r3, r0
 800d22c:	4406      	add	r6, r0
 800d22e:	9306      	str	r3, [sp, #24]
 800d230:	9b00      	ldr	r3, [sp, #0]
 800d232:	2b00      	cmp	r3, #0
 800d234:	dd05      	ble.n	800d242 <_dtoa_r+0x83a>
 800d236:	9902      	ldr	r1, [sp, #8]
 800d238:	461a      	mov	r2, r3
 800d23a:	4648      	mov	r0, r9
 800d23c:	f000 fc04 	bl	800da48 <__lshift>
 800d240:	9002      	str	r0, [sp, #8]
 800d242:	9b06      	ldr	r3, [sp, #24]
 800d244:	2b00      	cmp	r3, #0
 800d246:	dd05      	ble.n	800d254 <_dtoa_r+0x84c>
 800d248:	4621      	mov	r1, r4
 800d24a:	461a      	mov	r2, r3
 800d24c:	4648      	mov	r0, r9
 800d24e:	f000 fbfb 	bl	800da48 <__lshift>
 800d252:	4604      	mov	r4, r0
 800d254:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d256:	2b00      	cmp	r3, #0
 800d258:	d061      	beq.n	800d31e <_dtoa_r+0x916>
 800d25a:	9802      	ldr	r0, [sp, #8]
 800d25c:	4621      	mov	r1, r4
 800d25e:	f000 fc5f 	bl	800db20 <__mcmp>
 800d262:	2800      	cmp	r0, #0
 800d264:	da5b      	bge.n	800d31e <_dtoa_r+0x916>
 800d266:	2300      	movs	r3, #0
 800d268:	9902      	ldr	r1, [sp, #8]
 800d26a:	220a      	movs	r2, #10
 800d26c:	4648      	mov	r0, r9
 800d26e:	f000 fa47 	bl	800d700 <__multadd>
 800d272:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d274:	9002      	str	r0, [sp, #8]
 800d276:	f107 38ff 	add.w	r8, r7, #4294967295
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	f000 8177 	beq.w	800d56e <_dtoa_r+0xb66>
 800d280:	4629      	mov	r1, r5
 800d282:	2300      	movs	r3, #0
 800d284:	220a      	movs	r2, #10
 800d286:	4648      	mov	r0, r9
 800d288:	f000 fa3a 	bl	800d700 <__multadd>
 800d28c:	f1bb 0f00 	cmp.w	fp, #0
 800d290:	4605      	mov	r5, r0
 800d292:	dc6f      	bgt.n	800d374 <_dtoa_r+0x96c>
 800d294:	9b07      	ldr	r3, [sp, #28]
 800d296:	2b02      	cmp	r3, #2
 800d298:	dc49      	bgt.n	800d32e <_dtoa_r+0x926>
 800d29a:	e06b      	b.n	800d374 <_dtoa_r+0x96c>
 800d29c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d29e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d2a2:	e73c      	b.n	800d11e <_dtoa_r+0x716>
 800d2a4:	3fe00000 	.word	0x3fe00000
 800d2a8:	40240000 	.word	0x40240000
 800d2ac:	9b03      	ldr	r3, [sp, #12]
 800d2ae:	1e5c      	subs	r4, r3, #1
 800d2b0:	9b08      	ldr	r3, [sp, #32]
 800d2b2:	42a3      	cmp	r3, r4
 800d2b4:	db09      	blt.n	800d2ca <_dtoa_r+0x8c2>
 800d2b6:	1b1c      	subs	r4, r3, r4
 800d2b8:	9b03      	ldr	r3, [sp, #12]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	f6bf af30 	bge.w	800d120 <_dtoa_r+0x718>
 800d2c0:	9b00      	ldr	r3, [sp, #0]
 800d2c2:	9a03      	ldr	r2, [sp, #12]
 800d2c4:	1a9e      	subs	r6, r3, r2
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	e72b      	b.n	800d122 <_dtoa_r+0x71a>
 800d2ca:	9b08      	ldr	r3, [sp, #32]
 800d2cc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d2ce:	9408      	str	r4, [sp, #32]
 800d2d0:	1ae3      	subs	r3, r4, r3
 800d2d2:	441a      	add	r2, r3
 800d2d4:	9e00      	ldr	r6, [sp, #0]
 800d2d6:	9b03      	ldr	r3, [sp, #12]
 800d2d8:	920d      	str	r2, [sp, #52]	@ 0x34
 800d2da:	2400      	movs	r4, #0
 800d2dc:	e721      	b.n	800d122 <_dtoa_r+0x71a>
 800d2de:	9c08      	ldr	r4, [sp, #32]
 800d2e0:	9e00      	ldr	r6, [sp, #0]
 800d2e2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800d2e4:	e728      	b.n	800d138 <_dtoa_r+0x730>
 800d2e6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800d2ea:	e751      	b.n	800d190 <_dtoa_r+0x788>
 800d2ec:	9a08      	ldr	r2, [sp, #32]
 800d2ee:	9902      	ldr	r1, [sp, #8]
 800d2f0:	e750      	b.n	800d194 <_dtoa_r+0x78c>
 800d2f2:	f8cd 8008 	str.w	r8, [sp, #8]
 800d2f6:	e751      	b.n	800d19c <_dtoa_r+0x794>
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	e779      	b.n	800d1f0 <_dtoa_r+0x7e8>
 800d2fc:	9b04      	ldr	r3, [sp, #16]
 800d2fe:	e777      	b.n	800d1f0 <_dtoa_r+0x7e8>
 800d300:	2300      	movs	r3, #0
 800d302:	9308      	str	r3, [sp, #32]
 800d304:	e779      	b.n	800d1fa <_dtoa_r+0x7f2>
 800d306:	d093      	beq.n	800d230 <_dtoa_r+0x828>
 800d308:	9a00      	ldr	r2, [sp, #0]
 800d30a:	331c      	adds	r3, #28
 800d30c:	441a      	add	r2, r3
 800d30e:	9200      	str	r2, [sp, #0]
 800d310:	9a06      	ldr	r2, [sp, #24]
 800d312:	441a      	add	r2, r3
 800d314:	441e      	add	r6, r3
 800d316:	9206      	str	r2, [sp, #24]
 800d318:	e78a      	b.n	800d230 <_dtoa_r+0x828>
 800d31a:	4603      	mov	r3, r0
 800d31c:	e7f4      	b.n	800d308 <_dtoa_r+0x900>
 800d31e:	9b03      	ldr	r3, [sp, #12]
 800d320:	2b00      	cmp	r3, #0
 800d322:	46b8      	mov	r8, r7
 800d324:	dc20      	bgt.n	800d368 <_dtoa_r+0x960>
 800d326:	469b      	mov	fp, r3
 800d328:	9b07      	ldr	r3, [sp, #28]
 800d32a:	2b02      	cmp	r3, #2
 800d32c:	dd1e      	ble.n	800d36c <_dtoa_r+0x964>
 800d32e:	f1bb 0f00 	cmp.w	fp, #0
 800d332:	f47f adb1 	bne.w	800ce98 <_dtoa_r+0x490>
 800d336:	4621      	mov	r1, r4
 800d338:	465b      	mov	r3, fp
 800d33a:	2205      	movs	r2, #5
 800d33c:	4648      	mov	r0, r9
 800d33e:	f000 f9df 	bl	800d700 <__multadd>
 800d342:	4601      	mov	r1, r0
 800d344:	4604      	mov	r4, r0
 800d346:	9802      	ldr	r0, [sp, #8]
 800d348:	f000 fbea 	bl	800db20 <__mcmp>
 800d34c:	2800      	cmp	r0, #0
 800d34e:	f77f ada3 	ble.w	800ce98 <_dtoa_r+0x490>
 800d352:	4656      	mov	r6, sl
 800d354:	2331      	movs	r3, #49	@ 0x31
 800d356:	f806 3b01 	strb.w	r3, [r6], #1
 800d35a:	f108 0801 	add.w	r8, r8, #1
 800d35e:	e59f      	b.n	800cea0 <_dtoa_r+0x498>
 800d360:	9c03      	ldr	r4, [sp, #12]
 800d362:	46b8      	mov	r8, r7
 800d364:	4625      	mov	r5, r4
 800d366:	e7f4      	b.n	800d352 <_dtoa_r+0x94a>
 800d368:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800d36c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d36e:	2b00      	cmp	r3, #0
 800d370:	f000 8101 	beq.w	800d576 <_dtoa_r+0xb6e>
 800d374:	2e00      	cmp	r6, #0
 800d376:	dd05      	ble.n	800d384 <_dtoa_r+0x97c>
 800d378:	4629      	mov	r1, r5
 800d37a:	4632      	mov	r2, r6
 800d37c:	4648      	mov	r0, r9
 800d37e:	f000 fb63 	bl	800da48 <__lshift>
 800d382:	4605      	mov	r5, r0
 800d384:	9b08      	ldr	r3, [sp, #32]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d05c      	beq.n	800d444 <_dtoa_r+0xa3c>
 800d38a:	6869      	ldr	r1, [r5, #4]
 800d38c:	4648      	mov	r0, r9
 800d38e:	f000 f955 	bl	800d63c <_Balloc>
 800d392:	4606      	mov	r6, r0
 800d394:	b928      	cbnz	r0, 800d3a2 <_dtoa_r+0x99a>
 800d396:	4b82      	ldr	r3, [pc, #520]	@ (800d5a0 <_dtoa_r+0xb98>)
 800d398:	4602      	mov	r2, r0
 800d39a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d39e:	f7ff bb4a 	b.w	800ca36 <_dtoa_r+0x2e>
 800d3a2:	692a      	ldr	r2, [r5, #16]
 800d3a4:	3202      	adds	r2, #2
 800d3a6:	0092      	lsls	r2, r2, #2
 800d3a8:	f105 010c 	add.w	r1, r5, #12
 800d3ac:	300c      	adds	r0, #12
 800d3ae:	f000 fd7d 	bl	800deac <memcpy>
 800d3b2:	2201      	movs	r2, #1
 800d3b4:	4631      	mov	r1, r6
 800d3b6:	4648      	mov	r0, r9
 800d3b8:	f000 fb46 	bl	800da48 <__lshift>
 800d3bc:	f10a 0301 	add.w	r3, sl, #1
 800d3c0:	9300      	str	r3, [sp, #0]
 800d3c2:	eb0a 030b 	add.w	r3, sl, fp
 800d3c6:	9308      	str	r3, [sp, #32]
 800d3c8:	9b04      	ldr	r3, [sp, #16]
 800d3ca:	f003 0301 	and.w	r3, r3, #1
 800d3ce:	462f      	mov	r7, r5
 800d3d0:	9306      	str	r3, [sp, #24]
 800d3d2:	4605      	mov	r5, r0
 800d3d4:	9b00      	ldr	r3, [sp, #0]
 800d3d6:	9802      	ldr	r0, [sp, #8]
 800d3d8:	4621      	mov	r1, r4
 800d3da:	f103 3bff 	add.w	fp, r3, #4294967295
 800d3de:	f7ff fa8b 	bl	800c8f8 <quorem>
 800d3e2:	4603      	mov	r3, r0
 800d3e4:	3330      	adds	r3, #48	@ 0x30
 800d3e6:	9003      	str	r0, [sp, #12]
 800d3e8:	4639      	mov	r1, r7
 800d3ea:	9802      	ldr	r0, [sp, #8]
 800d3ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800d3ee:	f000 fb97 	bl	800db20 <__mcmp>
 800d3f2:	462a      	mov	r2, r5
 800d3f4:	9004      	str	r0, [sp, #16]
 800d3f6:	4621      	mov	r1, r4
 800d3f8:	4648      	mov	r0, r9
 800d3fa:	f000 fbad 	bl	800db58 <__mdiff>
 800d3fe:	68c2      	ldr	r2, [r0, #12]
 800d400:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d402:	4606      	mov	r6, r0
 800d404:	bb02      	cbnz	r2, 800d448 <_dtoa_r+0xa40>
 800d406:	4601      	mov	r1, r0
 800d408:	9802      	ldr	r0, [sp, #8]
 800d40a:	f000 fb89 	bl	800db20 <__mcmp>
 800d40e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d410:	4602      	mov	r2, r0
 800d412:	4631      	mov	r1, r6
 800d414:	4648      	mov	r0, r9
 800d416:	920c      	str	r2, [sp, #48]	@ 0x30
 800d418:	9309      	str	r3, [sp, #36]	@ 0x24
 800d41a:	f000 f94f 	bl	800d6bc <_Bfree>
 800d41e:	9b07      	ldr	r3, [sp, #28]
 800d420:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d422:	9e00      	ldr	r6, [sp, #0]
 800d424:	ea42 0103 	orr.w	r1, r2, r3
 800d428:	9b06      	ldr	r3, [sp, #24]
 800d42a:	4319      	orrs	r1, r3
 800d42c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d42e:	d10d      	bne.n	800d44c <_dtoa_r+0xa44>
 800d430:	2b39      	cmp	r3, #57	@ 0x39
 800d432:	d027      	beq.n	800d484 <_dtoa_r+0xa7c>
 800d434:	9a04      	ldr	r2, [sp, #16]
 800d436:	2a00      	cmp	r2, #0
 800d438:	dd01      	ble.n	800d43e <_dtoa_r+0xa36>
 800d43a:	9b03      	ldr	r3, [sp, #12]
 800d43c:	3331      	adds	r3, #49	@ 0x31
 800d43e:	f88b 3000 	strb.w	r3, [fp]
 800d442:	e52e      	b.n	800cea2 <_dtoa_r+0x49a>
 800d444:	4628      	mov	r0, r5
 800d446:	e7b9      	b.n	800d3bc <_dtoa_r+0x9b4>
 800d448:	2201      	movs	r2, #1
 800d44a:	e7e2      	b.n	800d412 <_dtoa_r+0xa0a>
 800d44c:	9904      	ldr	r1, [sp, #16]
 800d44e:	2900      	cmp	r1, #0
 800d450:	db04      	blt.n	800d45c <_dtoa_r+0xa54>
 800d452:	9807      	ldr	r0, [sp, #28]
 800d454:	4301      	orrs	r1, r0
 800d456:	9806      	ldr	r0, [sp, #24]
 800d458:	4301      	orrs	r1, r0
 800d45a:	d120      	bne.n	800d49e <_dtoa_r+0xa96>
 800d45c:	2a00      	cmp	r2, #0
 800d45e:	ddee      	ble.n	800d43e <_dtoa_r+0xa36>
 800d460:	9902      	ldr	r1, [sp, #8]
 800d462:	9300      	str	r3, [sp, #0]
 800d464:	2201      	movs	r2, #1
 800d466:	4648      	mov	r0, r9
 800d468:	f000 faee 	bl	800da48 <__lshift>
 800d46c:	4621      	mov	r1, r4
 800d46e:	9002      	str	r0, [sp, #8]
 800d470:	f000 fb56 	bl	800db20 <__mcmp>
 800d474:	2800      	cmp	r0, #0
 800d476:	9b00      	ldr	r3, [sp, #0]
 800d478:	dc02      	bgt.n	800d480 <_dtoa_r+0xa78>
 800d47a:	d1e0      	bne.n	800d43e <_dtoa_r+0xa36>
 800d47c:	07da      	lsls	r2, r3, #31
 800d47e:	d5de      	bpl.n	800d43e <_dtoa_r+0xa36>
 800d480:	2b39      	cmp	r3, #57	@ 0x39
 800d482:	d1da      	bne.n	800d43a <_dtoa_r+0xa32>
 800d484:	2339      	movs	r3, #57	@ 0x39
 800d486:	f88b 3000 	strb.w	r3, [fp]
 800d48a:	4633      	mov	r3, r6
 800d48c:	461e      	mov	r6, r3
 800d48e:	3b01      	subs	r3, #1
 800d490:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d494:	2a39      	cmp	r2, #57	@ 0x39
 800d496:	d04e      	beq.n	800d536 <_dtoa_r+0xb2e>
 800d498:	3201      	adds	r2, #1
 800d49a:	701a      	strb	r2, [r3, #0]
 800d49c:	e501      	b.n	800cea2 <_dtoa_r+0x49a>
 800d49e:	2a00      	cmp	r2, #0
 800d4a0:	dd03      	ble.n	800d4aa <_dtoa_r+0xaa2>
 800d4a2:	2b39      	cmp	r3, #57	@ 0x39
 800d4a4:	d0ee      	beq.n	800d484 <_dtoa_r+0xa7c>
 800d4a6:	3301      	adds	r3, #1
 800d4a8:	e7c9      	b.n	800d43e <_dtoa_r+0xa36>
 800d4aa:	9a00      	ldr	r2, [sp, #0]
 800d4ac:	9908      	ldr	r1, [sp, #32]
 800d4ae:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d4b2:	428a      	cmp	r2, r1
 800d4b4:	d028      	beq.n	800d508 <_dtoa_r+0xb00>
 800d4b6:	9902      	ldr	r1, [sp, #8]
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	220a      	movs	r2, #10
 800d4bc:	4648      	mov	r0, r9
 800d4be:	f000 f91f 	bl	800d700 <__multadd>
 800d4c2:	42af      	cmp	r7, r5
 800d4c4:	9002      	str	r0, [sp, #8]
 800d4c6:	f04f 0300 	mov.w	r3, #0
 800d4ca:	f04f 020a 	mov.w	r2, #10
 800d4ce:	4639      	mov	r1, r7
 800d4d0:	4648      	mov	r0, r9
 800d4d2:	d107      	bne.n	800d4e4 <_dtoa_r+0xadc>
 800d4d4:	f000 f914 	bl	800d700 <__multadd>
 800d4d8:	4607      	mov	r7, r0
 800d4da:	4605      	mov	r5, r0
 800d4dc:	9b00      	ldr	r3, [sp, #0]
 800d4de:	3301      	adds	r3, #1
 800d4e0:	9300      	str	r3, [sp, #0]
 800d4e2:	e777      	b.n	800d3d4 <_dtoa_r+0x9cc>
 800d4e4:	f000 f90c 	bl	800d700 <__multadd>
 800d4e8:	4629      	mov	r1, r5
 800d4ea:	4607      	mov	r7, r0
 800d4ec:	2300      	movs	r3, #0
 800d4ee:	220a      	movs	r2, #10
 800d4f0:	4648      	mov	r0, r9
 800d4f2:	f000 f905 	bl	800d700 <__multadd>
 800d4f6:	4605      	mov	r5, r0
 800d4f8:	e7f0      	b.n	800d4dc <_dtoa_r+0xad4>
 800d4fa:	f1bb 0f00 	cmp.w	fp, #0
 800d4fe:	bfcc      	ite	gt
 800d500:	465e      	movgt	r6, fp
 800d502:	2601      	movle	r6, #1
 800d504:	4456      	add	r6, sl
 800d506:	2700      	movs	r7, #0
 800d508:	9902      	ldr	r1, [sp, #8]
 800d50a:	9300      	str	r3, [sp, #0]
 800d50c:	2201      	movs	r2, #1
 800d50e:	4648      	mov	r0, r9
 800d510:	f000 fa9a 	bl	800da48 <__lshift>
 800d514:	4621      	mov	r1, r4
 800d516:	9002      	str	r0, [sp, #8]
 800d518:	f000 fb02 	bl	800db20 <__mcmp>
 800d51c:	2800      	cmp	r0, #0
 800d51e:	dcb4      	bgt.n	800d48a <_dtoa_r+0xa82>
 800d520:	d102      	bne.n	800d528 <_dtoa_r+0xb20>
 800d522:	9b00      	ldr	r3, [sp, #0]
 800d524:	07db      	lsls	r3, r3, #31
 800d526:	d4b0      	bmi.n	800d48a <_dtoa_r+0xa82>
 800d528:	4633      	mov	r3, r6
 800d52a:	461e      	mov	r6, r3
 800d52c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d530:	2a30      	cmp	r2, #48	@ 0x30
 800d532:	d0fa      	beq.n	800d52a <_dtoa_r+0xb22>
 800d534:	e4b5      	b.n	800cea2 <_dtoa_r+0x49a>
 800d536:	459a      	cmp	sl, r3
 800d538:	d1a8      	bne.n	800d48c <_dtoa_r+0xa84>
 800d53a:	2331      	movs	r3, #49	@ 0x31
 800d53c:	f108 0801 	add.w	r8, r8, #1
 800d540:	f88a 3000 	strb.w	r3, [sl]
 800d544:	e4ad      	b.n	800cea2 <_dtoa_r+0x49a>
 800d546:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d548:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800d5a4 <_dtoa_r+0xb9c>
 800d54c:	b11b      	cbz	r3, 800d556 <_dtoa_r+0xb4e>
 800d54e:	f10a 0308 	add.w	r3, sl, #8
 800d552:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800d554:	6013      	str	r3, [r2, #0]
 800d556:	4650      	mov	r0, sl
 800d558:	b017      	add	sp, #92	@ 0x5c
 800d55a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d55e:	9b07      	ldr	r3, [sp, #28]
 800d560:	2b01      	cmp	r3, #1
 800d562:	f77f ae2e 	ble.w	800d1c2 <_dtoa_r+0x7ba>
 800d566:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d568:	9308      	str	r3, [sp, #32]
 800d56a:	2001      	movs	r0, #1
 800d56c:	e64d      	b.n	800d20a <_dtoa_r+0x802>
 800d56e:	f1bb 0f00 	cmp.w	fp, #0
 800d572:	f77f aed9 	ble.w	800d328 <_dtoa_r+0x920>
 800d576:	4656      	mov	r6, sl
 800d578:	9802      	ldr	r0, [sp, #8]
 800d57a:	4621      	mov	r1, r4
 800d57c:	f7ff f9bc 	bl	800c8f8 <quorem>
 800d580:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800d584:	f806 3b01 	strb.w	r3, [r6], #1
 800d588:	eba6 020a 	sub.w	r2, r6, sl
 800d58c:	4593      	cmp	fp, r2
 800d58e:	ddb4      	ble.n	800d4fa <_dtoa_r+0xaf2>
 800d590:	9902      	ldr	r1, [sp, #8]
 800d592:	2300      	movs	r3, #0
 800d594:	220a      	movs	r2, #10
 800d596:	4648      	mov	r0, r9
 800d598:	f000 f8b2 	bl	800d700 <__multadd>
 800d59c:	9002      	str	r0, [sp, #8]
 800d59e:	e7eb      	b.n	800d578 <_dtoa_r+0xb70>
 800d5a0:	0800f49c 	.word	0x0800f49c
 800d5a4:	0800f420 	.word	0x0800f420

0800d5a8 <_free_r>:
 800d5a8:	b538      	push	{r3, r4, r5, lr}
 800d5aa:	4605      	mov	r5, r0
 800d5ac:	2900      	cmp	r1, #0
 800d5ae:	d041      	beq.n	800d634 <_free_r+0x8c>
 800d5b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d5b4:	1f0c      	subs	r4, r1, #4
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	bfb8      	it	lt
 800d5ba:	18e4      	addlt	r4, r4, r3
 800d5bc:	f7fe fb86 	bl	800bccc <__malloc_lock>
 800d5c0:	4a1d      	ldr	r2, [pc, #116]	@ (800d638 <_free_r+0x90>)
 800d5c2:	6813      	ldr	r3, [r2, #0]
 800d5c4:	b933      	cbnz	r3, 800d5d4 <_free_r+0x2c>
 800d5c6:	6063      	str	r3, [r4, #4]
 800d5c8:	6014      	str	r4, [r2, #0]
 800d5ca:	4628      	mov	r0, r5
 800d5cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d5d0:	f7fe bb82 	b.w	800bcd8 <__malloc_unlock>
 800d5d4:	42a3      	cmp	r3, r4
 800d5d6:	d908      	bls.n	800d5ea <_free_r+0x42>
 800d5d8:	6820      	ldr	r0, [r4, #0]
 800d5da:	1821      	adds	r1, r4, r0
 800d5dc:	428b      	cmp	r3, r1
 800d5de:	bf01      	itttt	eq
 800d5e0:	6819      	ldreq	r1, [r3, #0]
 800d5e2:	685b      	ldreq	r3, [r3, #4]
 800d5e4:	1809      	addeq	r1, r1, r0
 800d5e6:	6021      	streq	r1, [r4, #0]
 800d5e8:	e7ed      	b.n	800d5c6 <_free_r+0x1e>
 800d5ea:	461a      	mov	r2, r3
 800d5ec:	685b      	ldr	r3, [r3, #4]
 800d5ee:	b10b      	cbz	r3, 800d5f4 <_free_r+0x4c>
 800d5f0:	42a3      	cmp	r3, r4
 800d5f2:	d9fa      	bls.n	800d5ea <_free_r+0x42>
 800d5f4:	6811      	ldr	r1, [r2, #0]
 800d5f6:	1850      	adds	r0, r2, r1
 800d5f8:	42a0      	cmp	r0, r4
 800d5fa:	d10b      	bne.n	800d614 <_free_r+0x6c>
 800d5fc:	6820      	ldr	r0, [r4, #0]
 800d5fe:	4401      	add	r1, r0
 800d600:	1850      	adds	r0, r2, r1
 800d602:	4283      	cmp	r3, r0
 800d604:	6011      	str	r1, [r2, #0]
 800d606:	d1e0      	bne.n	800d5ca <_free_r+0x22>
 800d608:	6818      	ldr	r0, [r3, #0]
 800d60a:	685b      	ldr	r3, [r3, #4]
 800d60c:	6053      	str	r3, [r2, #4]
 800d60e:	4408      	add	r0, r1
 800d610:	6010      	str	r0, [r2, #0]
 800d612:	e7da      	b.n	800d5ca <_free_r+0x22>
 800d614:	d902      	bls.n	800d61c <_free_r+0x74>
 800d616:	230c      	movs	r3, #12
 800d618:	602b      	str	r3, [r5, #0]
 800d61a:	e7d6      	b.n	800d5ca <_free_r+0x22>
 800d61c:	6820      	ldr	r0, [r4, #0]
 800d61e:	1821      	adds	r1, r4, r0
 800d620:	428b      	cmp	r3, r1
 800d622:	bf04      	itt	eq
 800d624:	6819      	ldreq	r1, [r3, #0]
 800d626:	685b      	ldreq	r3, [r3, #4]
 800d628:	6063      	str	r3, [r4, #4]
 800d62a:	bf04      	itt	eq
 800d62c:	1809      	addeq	r1, r1, r0
 800d62e:	6021      	streq	r1, [r4, #0]
 800d630:	6054      	str	r4, [r2, #4]
 800d632:	e7ca      	b.n	800d5ca <_free_r+0x22>
 800d634:	bd38      	pop	{r3, r4, r5, pc}
 800d636:	bf00      	nop
 800d638:	20008c70 	.word	0x20008c70

0800d63c <_Balloc>:
 800d63c:	b570      	push	{r4, r5, r6, lr}
 800d63e:	69c6      	ldr	r6, [r0, #28]
 800d640:	4604      	mov	r4, r0
 800d642:	460d      	mov	r5, r1
 800d644:	b976      	cbnz	r6, 800d664 <_Balloc+0x28>
 800d646:	2010      	movs	r0, #16
 800d648:	f7fe fa8e 	bl	800bb68 <malloc>
 800d64c:	4602      	mov	r2, r0
 800d64e:	61e0      	str	r0, [r4, #28]
 800d650:	b920      	cbnz	r0, 800d65c <_Balloc+0x20>
 800d652:	4b18      	ldr	r3, [pc, #96]	@ (800d6b4 <_Balloc+0x78>)
 800d654:	4818      	ldr	r0, [pc, #96]	@ (800d6b8 <_Balloc+0x7c>)
 800d656:	216b      	movs	r1, #107	@ 0x6b
 800d658:	f7ff f930 	bl	800c8bc <__assert_func>
 800d65c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d660:	6006      	str	r6, [r0, #0]
 800d662:	60c6      	str	r6, [r0, #12]
 800d664:	69e6      	ldr	r6, [r4, #28]
 800d666:	68f3      	ldr	r3, [r6, #12]
 800d668:	b183      	cbz	r3, 800d68c <_Balloc+0x50>
 800d66a:	69e3      	ldr	r3, [r4, #28]
 800d66c:	68db      	ldr	r3, [r3, #12]
 800d66e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d672:	b9b8      	cbnz	r0, 800d6a4 <_Balloc+0x68>
 800d674:	2101      	movs	r1, #1
 800d676:	fa01 f605 	lsl.w	r6, r1, r5
 800d67a:	1d72      	adds	r2, r6, #5
 800d67c:	0092      	lsls	r2, r2, #2
 800d67e:	4620      	mov	r0, r4
 800d680:	f000 fc29 	bl	800ded6 <_calloc_r>
 800d684:	b160      	cbz	r0, 800d6a0 <_Balloc+0x64>
 800d686:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d68a:	e00e      	b.n	800d6aa <_Balloc+0x6e>
 800d68c:	2221      	movs	r2, #33	@ 0x21
 800d68e:	2104      	movs	r1, #4
 800d690:	4620      	mov	r0, r4
 800d692:	f000 fc20 	bl	800ded6 <_calloc_r>
 800d696:	69e3      	ldr	r3, [r4, #28]
 800d698:	60f0      	str	r0, [r6, #12]
 800d69a:	68db      	ldr	r3, [r3, #12]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d1e4      	bne.n	800d66a <_Balloc+0x2e>
 800d6a0:	2000      	movs	r0, #0
 800d6a2:	bd70      	pop	{r4, r5, r6, pc}
 800d6a4:	6802      	ldr	r2, [r0, #0]
 800d6a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d6b0:	e7f7      	b.n	800d6a2 <_Balloc+0x66>
 800d6b2:	bf00      	nop
 800d6b4:	0800f42d 	.word	0x0800f42d
 800d6b8:	0800f4ad 	.word	0x0800f4ad

0800d6bc <_Bfree>:
 800d6bc:	b570      	push	{r4, r5, r6, lr}
 800d6be:	69c6      	ldr	r6, [r0, #28]
 800d6c0:	4605      	mov	r5, r0
 800d6c2:	460c      	mov	r4, r1
 800d6c4:	b976      	cbnz	r6, 800d6e4 <_Bfree+0x28>
 800d6c6:	2010      	movs	r0, #16
 800d6c8:	f7fe fa4e 	bl	800bb68 <malloc>
 800d6cc:	4602      	mov	r2, r0
 800d6ce:	61e8      	str	r0, [r5, #28]
 800d6d0:	b920      	cbnz	r0, 800d6dc <_Bfree+0x20>
 800d6d2:	4b09      	ldr	r3, [pc, #36]	@ (800d6f8 <_Bfree+0x3c>)
 800d6d4:	4809      	ldr	r0, [pc, #36]	@ (800d6fc <_Bfree+0x40>)
 800d6d6:	218f      	movs	r1, #143	@ 0x8f
 800d6d8:	f7ff f8f0 	bl	800c8bc <__assert_func>
 800d6dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d6e0:	6006      	str	r6, [r0, #0]
 800d6e2:	60c6      	str	r6, [r0, #12]
 800d6e4:	b13c      	cbz	r4, 800d6f6 <_Bfree+0x3a>
 800d6e6:	69eb      	ldr	r3, [r5, #28]
 800d6e8:	6862      	ldr	r2, [r4, #4]
 800d6ea:	68db      	ldr	r3, [r3, #12]
 800d6ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d6f0:	6021      	str	r1, [r4, #0]
 800d6f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d6f6:	bd70      	pop	{r4, r5, r6, pc}
 800d6f8:	0800f42d 	.word	0x0800f42d
 800d6fc:	0800f4ad 	.word	0x0800f4ad

0800d700 <__multadd>:
 800d700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d704:	690d      	ldr	r5, [r1, #16]
 800d706:	4607      	mov	r7, r0
 800d708:	460c      	mov	r4, r1
 800d70a:	461e      	mov	r6, r3
 800d70c:	f101 0c14 	add.w	ip, r1, #20
 800d710:	2000      	movs	r0, #0
 800d712:	f8dc 3000 	ldr.w	r3, [ip]
 800d716:	b299      	uxth	r1, r3
 800d718:	fb02 6101 	mla	r1, r2, r1, r6
 800d71c:	0c1e      	lsrs	r6, r3, #16
 800d71e:	0c0b      	lsrs	r3, r1, #16
 800d720:	fb02 3306 	mla	r3, r2, r6, r3
 800d724:	b289      	uxth	r1, r1
 800d726:	3001      	adds	r0, #1
 800d728:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d72c:	4285      	cmp	r5, r0
 800d72e:	f84c 1b04 	str.w	r1, [ip], #4
 800d732:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d736:	dcec      	bgt.n	800d712 <__multadd+0x12>
 800d738:	b30e      	cbz	r6, 800d77e <__multadd+0x7e>
 800d73a:	68a3      	ldr	r3, [r4, #8]
 800d73c:	42ab      	cmp	r3, r5
 800d73e:	dc19      	bgt.n	800d774 <__multadd+0x74>
 800d740:	6861      	ldr	r1, [r4, #4]
 800d742:	4638      	mov	r0, r7
 800d744:	3101      	adds	r1, #1
 800d746:	f7ff ff79 	bl	800d63c <_Balloc>
 800d74a:	4680      	mov	r8, r0
 800d74c:	b928      	cbnz	r0, 800d75a <__multadd+0x5a>
 800d74e:	4602      	mov	r2, r0
 800d750:	4b0c      	ldr	r3, [pc, #48]	@ (800d784 <__multadd+0x84>)
 800d752:	480d      	ldr	r0, [pc, #52]	@ (800d788 <__multadd+0x88>)
 800d754:	21ba      	movs	r1, #186	@ 0xba
 800d756:	f7ff f8b1 	bl	800c8bc <__assert_func>
 800d75a:	6922      	ldr	r2, [r4, #16]
 800d75c:	3202      	adds	r2, #2
 800d75e:	f104 010c 	add.w	r1, r4, #12
 800d762:	0092      	lsls	r2, r2, #2
 800d764:	300c      	adds	r0, #12
 800d766:	f000 fba1 	bl	800deac <memcpy>
 800d76a:	4621      	mov	r1, r4
 800d76c:	4638      	mov	r0, r7
 800d76e:	f7ff ffa5 	bl	800d6bc <_Bfree>
 800d772:	4644      	mov	r4, r8
 800d774:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d778:	3501      	adds	r5, #1
 800d77a:	615e      	str	r6, [r3, #20]
 800d77c:	6125      	str	r5, [r4, #16]
 800d77e:	4620      	mov	r0, r4
 800d780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d784:	0800f49c 	.word	0x0800f49c
 800d788:	0800f4ad 	.word	0x0800f4ad

0800d78c <__hi0bits>:
 800d78c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d790:	4603      	mov	r3, r0
 800d792:	bf36      	itet	cc
 800d794:	0403      	lslcc	r3, r0, #16
 800d796:	2000      	movcs	r0, #0
 800d798:	2010      	movcc	r0, #16
 800d79a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d79e:	bf3c      	itt	cc
 800d7a0:	021b      	lslcc	r3, r3, #8
 800d7a2:	3008      	addcc	r0, #8
 800d7a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d7a8:	bf3c      	itt	cc
 800d7aa:	011b      	lslcc	r3, r3, #4
 800d7ac:	3004      	addcc	r0, #4
 800d7ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d7b2:	bf3c      	itt	cc
 800d7b4:	009b      	lslcc	r3, r3, #2
 800d7b6:	3002      	addcc	r0, #2
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	db05      	blt.n	800d7c8 <__hi0bits+0x3c>
 800d7bc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d7c0:	f100 0001 	add.w	r0, r0, #1
 800d7c4:	bf08      	it	eq
 800d7c6:	2020      	moveq	r0, #32
 800d7c8:	4770      	bx	lr

0800d7ca <__lo0bits>:
 800d7ca:	6803      	ldr	r3, [r0, #0]
 800d7cc:	4602      	mov	r2, r0
 800d7ce:	f013 0007 	ands.w	r0, r3, #7
 800d7d2:	d00b      	beq.n	800d7ec <__lo0bits+0x22>
 800d7d4:	07d9      	lsls	r1, r3, #31
 800d7d6:	d421      	bmi.n	800d81c <__lo0bits+0x52>
 800d7d8:	0798      	lsls	r0, r3, #30
 800d7da:	bf49      	itett	mi
 800d7dc:	085b      	lsrmi	r3, r3, #1
 800d7de:	089b      	lsrpl	r3, r3, #2
 800d7e0:	2001      	movmi	r0, #1
 800d7e2:	6013      	strmi	r3, [r2, #0]
 800d7e4:	bf5c      	itt	pl
 800d7e6:	6013      	strpl	r3, [r2, #0]
 800d7e8:	2002      	movpl	r0, #2
 800d7ea:	4770      	bx	lr
 800d7ec:	b299      	uxth	r1, r3
 800d7ee:	b909      	cbnz	r1, 800d7f4 <__lo0bits+0x2a>
 800d7f0:	0c1b      	lsrs	r3, r3, #16
 800d7f2:	2010      	movs	r0, #16
 800d7f4:	b2d9      	uxtb	r1, r3
 800d7f6:	b909      	cbnz	r1, 800d7fc <__lo0bits+0x32>
 800d7f8:	3008      	adds	r0, #8
 800d7fa:	0a1b      	lsrs	r3, r3, #8
 800d7fc:	0719      	lsls	r1, r3, #28
 800d7fe:	bf04      	itt	eq
 800d800:	091b      	lsreq	r3, r3, #4
 800d802:	3004      	addeq	r0, #4
 800d804:	0799      	lsls	r1, r3, #30
 800d806:	bf04      	itt	eq
 800d808:	089b      	lsreq	r3, r3, #2
 800d80a:	3002      	addeq	r0, #2
 800d80c:	07d9      	lsls	r1, r3, #31
 800d80e:	d403      	bmi.n	800d818 <__lo0bits+0x4e>
 800d810:	085b      	lsrs	r3, r3, #1
 800d812:	f100 0001 	add.w	r0, r0, #1
 800d816:	d003      	beq.n	800d820 <__lo0bits+0x56>
 800d818:	6013      	str	r3, [r2, #0]
 800d81a:	4770      	bx	lr
 800d81c:	2000      	movs	r0, #0
 800d81e:	4770      	bx	lr
 800d820:	2020      	movs	r0, #32
 800d822:	4770      	bx	lr

0800d824 <__i2b>:
 800d824:	b510      	push	{r4, lr}
 800d826:	460c      	mov	r4, r1
 800d828:	2101      	movs	r1, #1
 800d82a:	f7ff ff07 	bl	800d63c <_Balloc>
 800d82e:	4602      	mov	r2, r0
 800d830:	b928      	cbnz	r0, 800d83e <__i2b+0x1a>
 800d832:	4b05      	ldr	r3, [pc, #20]	@ (800d848 <__i2b+0x24>)
 800d834:	4805      	ldr	r0, [pc, #20]	@ (800d84c <__i2b+0x28>)
 800d836:	f240 1145 	movw	r1, #325	@ 0x145
 800d83a:	f7ff f83f 	bl	800c8bc <__assert_func>
 800d83e:	2301      	movs	r3, #1
 800d840:	6144      	str	r4, [r0, #20]
 800d842:	6103      	str	r3, [r0, #16]
 800d844:	bd10      	pop	{r4, pc}
 800d846:	bf00      	nop
 800d848:	0800f49c 	.word	0x0800f49c
 800d84c:	0800f4ad 	.word	0x0800f4ad

0800d850 <__multiply>:
 800d850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d854:	4617      	mov	r7, r2
 800d856:	690a      	ldr	r2, [r1, #16]
 800d858:	693b      	ldr	r3, [r7, #16]
 800d85a:	429a      	cmp	r2, r3
 800d85c:	bfa8      	it	ge
 800d85e:	463b      	movge	r3, r7
 800d860:	4689      	mov	r9, r1
 800d862:	bfa4      	itt	ge
 800d864:	460f      	movge	r7, r1
 800d866:	4699      	movge	r9, r3
 800d868:	693d      	ldr	r5, [r7, #16]
 800d86a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d86e:	68bb      	ldr	r3, [r7, #8]
 800d870:	6879      	ldr	r1, [r7, #4]
 800d872:	eb05 060a 	add.w	r6, r5, sl
 800d876:	42b3      	cmp	r3, r6
 800d878:	b085      	sub	sp, #20
 800d87a:	bfb8      	it	lt
 800d87c:	3101      	addlt	r1, #1
 800d87e:	f7ff fedd 	bl	800d63c <_Balloc>
 800d882:	b930      	cbnz	r0, 800d892 <__multiply+0x42>
 800d884:	4602      	mov	r2, r0
 800d886:	4b41      	ldr	r3, [pc, #260]	@ (800d98c <__multiply+0x13c>)
 800d888:	4841      	ldr	r0, [pc, #260]	@ (800d990 <__multiply+0x140>)
 800d88a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d88e:	f7ff f815 	bl	800c8bc <__assert_func>
 800d892:	f100 0414 	add.w	r4, r0, #20
 800d896:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800d89a:	4623      	mov	r3, r4
 800d89c:	2200      	movs	r2, #0
 800d89e:	4573      	cmp	r3, lr
 800d8a0:	d320      	bcc.n	800d8e4 <__multiply+0x94>
 800d8a2:	f107 0814 	add.w	r8, r7, #20
 800d8a6:	f109 0114 	add.w	r1, r9, #20
 800d8aa:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800d8ae:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800d8b2:	9302      	str	r3, [sp, #8]
 800d8b4:	1beb      	subs	r3, r5, r7
 800d8b6:	3b15      	subs	r3, #21
 800d8b8:	f023 0303 	bic.w	r3, r3, #3
 800d8bc:	3304      	adds	r3, #4
 800d8be:	3715      	adds	r7, #21
 800d8c0:	42bd      	cmp	r5, r7
 800d8c2:	bf38      	it	cc
 800d8c4:	2304      	movcc	r3, #4
 800d8c6:	9301      	str	r3, [sp, #4]
 800d8c8:	9b02      	ldr	r3, [sp, #8]
 800d8ca:	9103      	str	r1, [sp, #12]
 800d8cc:	428b      	cmp	r3, r1
 800d8ce:	d80c      	bhi.n	800d8ea <__multiply+0x9a>
 800d8d0:	2e00      	cmp	r6, #0
 800d8d2:	dd03      	ble.n	800d8dc <__multiply+0x8c>
 800d8d4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d055      	beq.n	800d988 <__multiply+0x138>
 800d8dc:	6106      	str	r6, [r0, #16]
 800d8de:	b005      	add	sp, #20
 800d8e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8e4:	f843 2b04 	str.w	r2, [r3], #4
 800d8e8:	e7d9      	b.n	800d89e <__multiply+0x4e>
 800d8ea:	f8b1 a000 	ldrh.w	sl, [r1]
 800d8ee:	f1ba 0f00 	cmp.w	sl, #0
 800d8f2:	d01f      	beq.n	800d934 <__multiply+0xe4>
 800d8f4:	46c4      	mov	ip, r8
 800d8f6:	46a1      	mov	r9, r4
 800d8f8:	2700      	movs	r7, #0
 800d8fa:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d8fe:	f8d9 3000 	ldr.w	r3, [r9]
 800d902:	fa1f fb82 	uxth.w	fp, r2
 800d906:	b29b      	uxth	r3, r3
 800d908:	fb0a 330b 	mla	r3, sl, fp, r3
 800d90c:	443b      	add	r3, r7
 800d90e:	f8d9 7000 	ldr.w	r7, [r9]
 800d912:	0c12      	lsrs	r2, r2, #16
 800d914:	0c3f      	lsrs	r7, r7, #16
 800d916:	fb0a 7202 	mla	r2, sl, r2, r7
 800d91a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800d91e:	b29b      	uxth	r3, r3
 800d920:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d924:	4565      	cmp	r5, ip
 800d926:	f849 3b04 	str.w	r3, [r9], #4
 800d92a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800d92e:	d8e4      	bhi.n	800d8fa <__multiply+0xaa>
 800d930:	9b01      	ldr	r3, [sp, #4]
 800d932:	50e7      	str	r7, [r4, r3]
 800d934:	9b03      	ldr	r3, [sp, #12]
 800d936:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d93a:	3104      	adds	r1, #4
 800d93c:	f1b9 0f00 	cmp.w	r9, #0
 800d940:	d020      	beq.n	800d984 <__multiply+0x134>
 800d942:	6823      	ldr	r3, [r4, #0]
 800d944:	4647      	mov	r7, r8
 800d946:	46a4      	mov	ip, r4
 800d948:	f04f 0a00 	mov.w	sl, #0
 800d94c:	f8b7 b000 	ldrh.w	fp, [r7]
 800d950:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800d954:	fb09 220b 	mla	r2, r9, fp, r2
 800d958:	4452      	add	r2, sl
 800d95a:	b29b      	uxth	r3, r3
 800d95c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d960:	f84c 3b04 	str.w	r3, [ip], #4
 800d964:	f857 3b04 	ldr.w	r3, [r7], #4
 800d968:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d96c:	f8bc 3000 	ldrh.w	r3, [ip]
 800d970:	fb09 330a 	mla	r3, r9, sl, r3
 800d974:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800d978:	42bd      	cmp	r5, r7
 800d97a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d97e:	d8e5      	bhi.n	800d94c <__multiply+0xfc>
 800d980:	9a01      	ldr	r2, [sp, #4]
 800d982:	50a3      	str	r3, [r4, r2]
 800d984:	3404      	adds	r4, #4
 800d986:	e79f      	b.n	800d8c8 <__multiply+0x78>
 800d988:	3e01      	subs	r6, #1
 800d98a:	e7a1      	b.n	800d8d0 <__multiply+0x80>
 800d98c:	0800f49c 	.word	0x0800f49c
 800d990:	0800f4ad 	.word	0x0800f4ad

0800d994 <__pow5mult>:
 800d994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d998:	4615      	mov	r5, r2
 800d99a:	f012 0203 	ands.w	r2, r2, #3
 800d99e:	4607      	mov	r7, r0
 800d9a0:	460e      	mov	r6, r1
 800d9a2:	d007      	beq.n	800d9b4 <__pow5mult+0x20>
 800d9a4:	4c25      	ldr	r4, [pc, #148]	@ (800da3c <__pow5mult+0xa8>)
 800d9a6:	3a01      	subs	r2, #1
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d9ae:	f7ff fea7 	bl	800d700 <__multadd>
 800d9b2:	4606      	mov	r6, r0
 800d9b4:	10ad      	asrs	r5, r5, #2
 800d9b6:	d03d      	beq.n	800da34 <__pow5mult+0xa0>
 800d9b8:	69fc      	ldr	r4, [r7, #28]
 800d9ba:	b97c      	cbnz	r4, 800d9dc <__pow5mult+0x48>
 800d9bc:	2010      	movs	r0, #16
 800d9be:	f7fe f8d3 	bl	800bb68 <malloc>
 800d9c2:	4602      	mov	r2, r0
 800d9c4:	61f8      	str	r0, [r7, #28]
 800d9c6:	b928      	cbnz	r0, 800d9d4 <__pow5mult+0x40>
 800d9c8:	4b1d      	ldr	r3, [pc, #116]	@ (800da40 <__pow5mult+0xac>)
 800d9ca:	481e      	ldr	r0, [pc, #120]	@ (800da44 <__pow5mult+0xb0>)
 800d9cc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d9d0:	f7fe ff74 	bl	800c8bc <__assert_func>
 800d9d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d9d8:	6004      	str	r4, [r0, #0]
 800d9da:	60c4      	str	r4, [r0, #12]
 800d9dc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d9e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d9e4:	b94c      	cbnz	r4, 800d9fa <__pow5mult+0x66>
 800d9e6:	f240 2171 	movw	r1, #625	@ 0x271
 800d9ea:	4638      	mov	r0, r7
 800d9ec:	f7ff ff1a 	bl	800d824 <__i2b>
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	f8c8 0008 	str.w	r0, [r8, #8]
 800d9f6:	4604      	mov	r4, r0
 800d9f8:	6003      	str	r3, [r0, #0]
 800d9fa:	f04f 0900 	mov.w	r9, #0
 800d9fe:	07eb      	lsls	r3, r5, #31
 800da00:	d50a      	bpl.n	800da18 <__pow5mult+0x84>
 800da02:	4631      	mov	r1, r6
 800da04:	4622      	mov	r2, r4
 800da06:	4638      	mov	r0, r7
 800da08:	f7ff ff22 	bl	800d850 <__multiply>
 800da0c:	4631      	mov	r1, r6
 800da0e:	4680      	mov	r8, r0
 800da10:	4638      	mov	r0, r7
 800da12:	f7ff fe53 	bl	800d6bc <_Bfree>
 800da16:	4646      	mov	r6, r8
 800da18:	106d      	asrs	r5, r5, #1
 800da1a:	d00b      	beq.n	800da34 <__pow5mult+0xa0>
 800da1c:	6820      	ldr	r0, [r4, #0]
 800da1e:	b938      	cbnz	r0, 800da30 <__pow5mult+0x9c>
 800da20:	4622      	mov	r2, r4
 800da22:	4621      	mov	r1, r4
 800da24:	4638      	mov	r0, r7
 800da26:	f7ff ff13 	bl	800d850 <__multiply>
 800da2a:	6020      	str	r0, [r4, #0]
 800da2c:	f8c0 9000 	str.w	r9, [r0]
 800da30:	4604      	mov	r4, r0
 800da32:	e7e4      	b.n	800d9fe <__pow5mult+0x6a>
 800da34:	4630      	mov	r0, r6
 800da36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da3a:	bf00      	nop
 800da3c:	0800f524 	.word	0x0800f524
 800da40:	0800f42d 	.word	0x0800f42d
 800da44:	0800f4ad 	.word	0x0800f4ad

0800da48 <__lshift>:
 800da48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da4c:	460c      	mov	r4, r1
 800da4e:	6849      	ldr	r1, [r1, #4]
 800da50:	6923      	ldr	r3, [r4, #16]
 800da52:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800da56:	68a3      	ldr	r3, [r4, #8]
 800da58:	4607      	mov	r7, r0
 800da5a:	4691      	mov	r9, r2
 800da5c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800da60:	f108 0601 	add.w	r6, r8, #1
 800da64:	42b3      	cmp	r3, r6
 800da66:	db0b      	blt.n	800da80 <__lshift+0x38>
 800da68:	4638      	mov	r0, r7
 800da6a:	f7ff fde7 	bl	800d63c <_Balloc>
 800da6e:	4605      	mov	r5, r0
 800da70:	b948      	cbnz	r0, 800da86 <__lshift+0x3e>
 800da72:	4602      	mov	r2, r0
 800da74:	4b28      	ldr	r3, [pc, #160]	@ (800db18 <__lshift+0xd0>)
 800da76:	4829      	ldr	r0, [pc, #164]	@ (800db1c <__lshift+0xd4>)
 800da78:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800da7c:	f7fe ff1e 	bl	800c8bc <__assert_func>
 800da80:	3101      	adds	r1, #1
 800da82:	005b      	lsls	r3, r3, #1
 800da84:	e7ee      	b.n	800da64 <__lshift+0x1c>
 800da86:	2300      	movs	r3, #0
 800da88:	f100 0114 	add.w	r1, r0, #20
 800da8c:	f100 0210 	add.w	r2, r0, #16
 800da90:	4618      	mov	r0, r3
 800da92:	4553      	cmp	r3, sl
 800da94:	db33      	blt.n	800dafe <__lshift+0xb6>
 800da96:	6920      	ldr	r0, [r4, #16]
 800da98:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800da9c:	f104 0314 	add.w	r3, r4, #20
 800daa0:	f019 091f 	ands.w	r9, r9, #31
 800daa4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800daa8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800daac:	d02b      	beq.n	800db06 <__lshift+0xbe>
 800daae:	f1c9 0e20 	rsb	lr, r9, #32
 800dab2:	468a      	mov	sl, r1
 800dab4:	2200      	movs	r2, #0
 800dab6:	6818      	ldr	r0, [r3, #0]
 800dab8:	fa00 f009 	lsl.w	r0, r0, r9
 800dabc:	4310      	orrs	r0, r2
 800dabe:	f84a 0b04 	str.w	r0, [sl], #4
 800dac2:	f853 2b04 	ldr.w	r2, [r3], #4
 800dac6:	459c      	cmp	ip, r3
 800dac8:	fa22 f20e 	lsr.w	r2, r2, lr
 800dacc:	d8f3      	bhi.n	800dab6 <__lshift+0x6e>
 800dace:	ebac 0304 	sub.w	r3, ip, r4
 800dad2:	3b15      	subs	r3, #21
 800dad4:	f023 0303 	bic.w	r3, r3, #3
 800dad8:	3304      	adds	r3, #4
 800dada:	f104 0015 	add.w	r0, r4, #21
 800dade:	4560      	cmp	r0, ip
 800dae0:	bf88      	it	hi
 800dae2:	2304      	movhi	r3, #4
 800dae4:	50ca      	str	r2, [r1, r3]
 800dae6:	b10a      	cbz	r2, 800daec <__lshift+0xa4>
 800dae8:	f108 0602 	add.w	r6, r8, #2
 800daec:	3e01      	subs	r6, #1
 800daee:	4638      	mov	r0, r7
 800daf0:	612e      	str	r6, [r5, #16]
 800daf2:	4621      	mov	r1, r4
 800daf4:	f7ff fde2 	bl	800d6bc <_Bfree>
 800daf8:	4628      	mov	r0, r5
 800dafa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dafe:	f842 0f04 	str.w	r0, [r2, #4]!
 800db02:	3301      	adds	r3, #1
 800db04:	e7c5      	b.n	800da92 <__lshift+0x4a>
 800db06:	3904      	subs	r1, #4
 800db08:	f853 2b04 	ldr.w	r2, [r3], #4
 800db0c:	f841 2f04 	str.w	r2, [r1, #4]!
 800db10:	459c      	cmp	ip, r3
 800db12:	d8f9      	bhi.n	800db08 <__lshift+0xc0>
 800db14:	e7ea      	b.n	800daec <__lshift+0xa4>
 800db16:	bf00      	nop
 800db18:	0800f49c 	.word	0x0800f49c
 800db1c:	0800f4ad 	.word	0x0800f4ad

0800db20 <__mcmp>:
 800db20:	690a      	ldr	r2, [r1, #16]
 800db22:	4603      	mov	r3, r0
 800db24:	6900      	ldr	r0, [r0, #16]
 800db26:	1a80      	subs	r0, r0, r2
 800db28:	b530      	push	{r4, r5, lr}
 800db2a:	d10e      	bne.n	800db4a <__mcmp+0x2a>
 800db2c:	3314      	adds	r3, #20
 800db2e:	3114      	adds	r1, #20
 800db30:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800db34:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800db38:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800db3c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800db40:	4295      	cmp	r5, r2
 800db42:	d003      	beq.n	800db4c <__mcmp+0x2c>
 800db44:	d205      	bcs.n	800db52 <__mcmp+0x32>
 800db46:	f04f 30ff 	mov.w	r0, #4294967295
 800db4a:	bd30      	pop	{r4, r5, pc}
 800db4c:	42a3      	cmp	r3, r4
 800db4e:	d3f3      	bcc.n	800db38 <__mcmp+0x18>
 800db50:	e7fb      	b.n	800db4a <__mcmp+0x2a>
 800db52:	2001      	movs	r0, #1
 800db54:	e7f9      	b.n	800db4a <__mcmp+0x2a>
	...

0800db58 <__mdiff>:
 800db58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db5c:	4689      	mov	r9, r1
 800db5e:	4606      	mov	r6, r0
 800db60:	4611      	mov	r1, r2
 800db62:	4648      	mov	r0, r9
 800db64:	4614      	mov	r4, r2
 800db66:	f7ff ffdb 	bl	800db20 <__mcmp>
 800db6a:	1e05      	subs	r5, r0, #0
 800db6c:	d112      	bne.n	800db94 <__mdiff+0x3c>
 800db6e:	4629      	mov	r1, r5
 800db70:	4630      	mov	r0, r6
 800db72:	f7ff fd63 	bl	800d63c <_Balloc>
 800db76:	4602      	mov	r2, r0
 800db78:	b928      	cbnz	r0, 800db86 <__mdiff+0x2e>
 800db7a:	4b3f      	ldr	r3, [pc, #252]	@ (800dc78 <__mdiff+0x120>)
 800db7c:	f240 2137 	movw	r1, #567	@ 0x237
 800db80:	483e      	ldr	r0, [pc, #248]	@ (800dc7c <__mdiff+0x124>)
 800db82:	f7fe fe9b 	bl	800c8bc <__assert_func>
 800db86:	2301      	movs	r3, #1
 800db88:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800db8c:	4610      	mov	r0, r2
 800db8e:	b003      	add	sp, #12
 800db90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db94:	bfbc      	itt	lt
 800db96:	464b      	movlt	r3, r9
 800db98:	46a1      	movlt	r9, r4
 800db9a:	4630      	mov	r0, r6
 800db9c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800dba0:	bfba      	itte	lt
 800dba2:	461c      	movlt	r4, r3
 800dba4:	2501      	movlt	r5, #1
 800dba6:	2500      	movge	r5, #0
 800dba8:	f7ff fd48 	bl	800d63c <_Balloc>
 800dbac:	4602      	mov	r2, r0
 800dbae:	b918      	cbnz	r0, 800dbb8 <__mdiff+0x60>
 800dbb0:	4b31      	ldr	r3, [pc, #196]	@ (800dc78 <__mdiff+0x120>)
 800dbb2:	f240 2145 	movw	r1, #581	@ 0x245
 800dbb6:	e7e3      	b.n	800db80 <__mdiff+0x28>
 800dbb8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800dbbc:	6926      	ldr	r6, [r4, #16]
 800dbbe:	60c5      	str	r5, [r0, #12]
 800dbc0:	f109 0310 	add.w	r3, r9, #16
 800dbc4:	f109 0514 	add.w	r5, r9, #20
 800dbc8:	f104 0e14 	add.w	lr, r4, #20
 800dbcc:	f100 0b14 	add.w	fp, r0, #20
 800dbd0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800dbd4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800dbd8:	9301      	str	r3, [sp, #4]
 800dbda:	46d9      	mov	r9, fp
 800dbdc:	f04f 0c00 	mov.w	ip, #0
 800dbe0:	9b01      	ldr	r3, [sp, #4]
 800dbe2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800dbe6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800dbea:	9301      	str	r3, [sp, #4]
 800dbec:	fa1f f38a 	uxth.w	r3, sl
 800dbf0:	4619      	mov	r1, r3
 800dbf2:	b283      	uxth	r3, r0
 800dbf4:	1acb      	subs	r3, r1, r3
 800dbf6:	0c00      	lsrs	r0, r0, #16
 800dbf8:	4463      	add	r3, ip
 800dbfa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800dbfe:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800dc02:	b29b      	uxth	r3, r3
 800dc04:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800dc08:	4576      	cmp	r6, lr
 800dc0a:	f849 3b04 	str.w	r3, [r9], #4
 800dc0e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dc12:	d8e5      	bhi.n	800dbe0 <__mdiff+0x88>
 800dc14:	1b33      	subs	r3, r6, r4
 800dc16:	3b15      	subs	r3, #21
 800dc18:	f023 0303 	bic.w	r3, r3, #3
 800dc1c:	3415      	adds	r4, #21
 800dc1e:	3304      	adds	r3, #4
 800dc20:	42a6      	cmp	r6, r4
 800dc22:	bf38      	it	cc
 800dc24:	2304      	movcc	r3, #4
 800dc26:	441d      	add	r5, r3
 800dc28:	445b      	add	r3, fp
 800dc2a:	461e      	mov	r6, r3
 800dc2c:	462c      	mov	r4, r5
 800dc2e:	4544      	cmp	r4, r8
 800dc30:	d30e      	bcc.n	800dc50 <__mdiff+0xf8>
 800dc32:	f108 0103 	add.w	r1, r8, #3
 800dc36:	1b49      	subs	r1, r1, r5
 800dc38:	f021 0103 	bic.w	r1, r1, #3
 800dc3c:	3d03      	subs	r5, #3
 800dc3e:	45a8      	cmp	r8, r5
 800dc40:	bf38      	it	cc
 800dc42:	2100      	movcc	r1, #0
 800dc44:	440b      	add	r3, r1
 800dc46:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dc4a:	b191      	cbz	r1, 800dc72 <__mdiff+0x11a>
 800dc4c:	6117      	str	r7, [r2, #16]
 800dc4e:	e79d      	b.n	800db8c <__mdiff+0x34>
 800dc50:	f854 1b04 	ldr.w	r1, [r4], #4
 800dc54:	46e6      	mov	lr, ip
 800dc56:	0c08      	lsrs	r0, r1, #16
 800dc58:	fa1c fc81 	uxtah	ip, ip, r1
 800dc5c:	4471      	add	r1, lr
 800dc5e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800dc62:	b289      	uxth	r1, r1
 800dc64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800dc68:	f846 1b04 	str.w	r1, [r6], #4
 800dc6c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dc70:	e7dd      	b.n	800dc2e <__mdiff+0xd6>
 800dc72:	3f01      	subs	r7, #1
 800dc74:	e7e7      	b.n	800dc46 <__mdiff+0xee>
 800dc76:	bf00      	nop
 800dc78:	0800f49c 	.word	0x0800f49c
 800dc7c:	0800f4ad 	.word	0x0800f4ad

0800dc80 <__d2b>:
 800dc80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dc84:	460f      	mov	r7, r1
 800dc86:	2101      	movs	r1, #1
 800dc88:	ec59 8b10 	vmov	r8, r9, d0
 800dc8c:	4616      	mov	r6, r2
 800dc8e:	f7ff fcd5 	bl	800d63c <_Balloc>
 800dc92:	4604      	mov	r4, r0
 800dc94:	b930      	cbnz	r0, 800dca4 <__d2b+0x24>
 800dc96:	4602      	mov	r2, r0
 800dc98:	4b23      	ldr	r3, [pc, #140]	@ (800dd28 <__d2b+0xa8>)
 800dc9a:	4824      	ldr	r0, [pc, #144]	@ (800dd2c <__d2b+0xac>)
 800dc9c:	f240 310f 	movw	r1, #783	@ 0x30f
 800dca0:	f7fe fe0c 	bl	800c8bc <__assert_func>
 800dca4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800dca8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dcac:	b10d      	cbz	r5, 800dcb2 <__d2b+0x32>
 800dcae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dcb2:	9301      	str	r3, [sp, #4]
 800dcb4:	f1b8 0300 	subs.w	r3, r8, #0
 800dcb8:	d023      	beq.n	800dd02 <__d2b+0x82>
 800dcba:	4668      	mov	r0, sp
 800dcbc:	9300      	str	r3, [sp, #0]
 800dcbe:	f7ff fd84 	bl	800d7ca <__lo0bits>
 800dcc2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800dcc6:	b1d0      	cbz	r0, 800dcfe <__d2b+0x7e>
 800dcc8:	f1c0 0320 	rsb	r3, r0, #32
 800dccc:	fa02 f303 	lsl.w	r3, r2, r3
 800dcd0:	430b      	orrs	r3, r1
 800dcd2:	40c2      	lsrs	r2, r0
 800dcd4:	6163      	str	r3, [r4, #20]
 800dcd6:	9201      	str	r2, [sp, #4]
 800dcd8:	9b01      	ldr	r3, [sp, #4]
 800dcda:	61a3      	str	r3, [r4, #24]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	bf0c      	ite	eq
 800dce0:	2201      	moveq	r2, #1
 800dce2:	2202      	movne	r2, #2
 800dce4:	6122      	str	r2, [r4, #16]
 800dce6:	b1a5      	cbz	r5, 800dd12 <__d2b+0x92>
 800dce8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800dcec:	4405      	add	r5, r0
 800dcee:	603d      	str	r5, [r7, #0]
 800dcf0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800dcf4:	6030      	str	r0, [r6, #0]
 800dcf6:	4620      	mov	r0, r4
 800dcf8:	b003      	add	sp, #12
 800dcfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dcfe:	6161      	str	r1, [r4, #20]
 800dd00:	e7ea      	b.n	800dcd8 <__d2b+0x58>
 800dd02:	a801      	add	r0, sp, #4
 800dd04:	f7ff fd61 	bl	800d7ca <__lo0bits>
 800dd08:	9b01      	ldr	r3, [sp, #4]
 800dd0a:	6163      	str	r3, [r4, #20]
 800dd0c:	3020      	adds	r0, #32
 800dd0e:	2201      	movs	r2, #1
 800dd10:	e7e8      	b.n	800dce4 <__d2b+0x64>
 800dd12:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dd16:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800dd1a:	6038      	str	r0, [r7, #0]
 800dd1c:	6918      	ldr	r0, [r3, #16]
 800dd1e:	f7ff fd35 	bl	800d78c <__hi0bits>
 800dd22:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800dd26:	e7e5      	b.n	800dcf4 <__d2b+0x74>
 800dd28:	0800f49c 	.word	0x0800f49c
 800dd2c:	0800f4ad 	.word	0x0800f4ad

0800dd30 <__sflush_r>:
 800dd30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dd34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd38:	0716      	lsls	r6, r2, #28
 800dd3a:	4605      	mov	r5, r0
 800dd3c:	460c      	mov	r4, r1
 800dd3e:	d454      	bmi.n	800ddea <__sflush_r+0xba>
 800dd40:	684b      	ldr	r3, [r1, #4]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	dc02      	bgt.n	800dd4c <__sflush_r+0x1c>
 800dd46:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	dd48      	ble.n	800ddde <__sflush_r+0xae>
 800dd4c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dd4e:	2e00      	cmp	r6, #0
 800dd50:	d045      	beq.n	800ddde <__sflush_r+0xae>
 800dd52:	2300      	movs	r3, #0
 800dd54:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800dd58:	682f      	ldr	r7, [r5, #0]
 800dd5a:	6a21      	ldr	r1, [r4, #32]
 800dd5c:	602b      	str	r3, [r5, #0]
 800dd5e:	d030      	beq.n	800ddc2 <__sflush_r+0x92>
 800dd60:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800dd62:	89a3      	ldrh	r3, [r4, #12]
 800dd64:	0759      	lsls	r1, r3, #29
 800dd66:	d505      	bpl.n	800dd74 <__sflush_r+0x44>
 800dd68:	6863      	ldr	r3, [r4, #4]
 800dd6a:	1ad2      	subs	r2, r2, r3
 800dd6c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800dd6e:	b10b      	cbz	r3, 800dd74 <__sflush_r+0x44>
 800dd70:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800dd72:	1ad2      	subs	r2, r2, r3
 800dd74:	2300      	movs	r3, #0
 800dd76:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dd78:	6a21      	ldr	r1, [r4, #32]
 800dd7a:	4628      	mov	r0, r5
 800dd7c:	47b0      	blx	r6
 800dd7e:	1c43      	adds	r3, r0, #1
 800dd80:	89a3      	ldrh	r3, [r4, #12]
 800dd82:	d106      	bne.n	800dd92 <__sflush_r+0x62>
 800dd84:	6829      	ldr	r1, [r5, #0]
 800dd86:	291d      	cmp	r1, #29
 800dd88:	d82b      	bhi.n	800dde2 <__sflush_r+0xb2>
 800dd8a:	4a2a      	ldr	r2, [pc, #168]	@ (800de34 <__sflush_r+0x104>)
 800dd8c:	40ca      	lsrs	r2, r1
 800dd8e:	07d6      	lsls	r6, r2, #31
 800dd90:	d527      	bpl.n	800dde2 <__sflush_r+0xb2>
 800dd92:	2200      	movs	r2, #0
 800dd94:	6062      	str	r2, [r4, #4]
 800dd96:	04d9      	lsls	r1, r3, #19
 800dd98:	6922      	ldr	r2, [r4, #16]
 800dd9a:	6022      	str	r2, [r4, #0]
 800dd9c:	d504      	bpl.n	800dda8 <__sflush_r+0x78>
 800dd9e:	1c42      	adds	r2, r0, #1
 800dda0:	d101      	bne.n	800dda6 <__sflush_r+0x76>
 800dda2:	682b      	ldr	r3, [r5, #0]
 800dda4:	b903      	cbnz	r3, 800dda8 <__sflush_r+0x78>
 800dda6:	6560      	str	r0, [r4, #84]	@ 0x54
 800dda8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ddaa:	602f      	str	r7, [r5, #0]
 800ddac:	b1b9      	cbz	r1, 800ddde <__sflush_r+0xae>
 800ddae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ddb2:	4299      	cmp	r1, r3
 800ddb4:	d002      	beq.n	800ddbc <__sflush_r+0x8c>
 800ddb6:	4628      	mov	r0, r5
 800ddb8:	f7ff fbf6 	bl	800d5a8 <_free_r>
 800ddbc:	2300      	movs	r3, #0
 800ddbe:	6363      	str	r3, [r4, #52]	@ 0x34
 800ddc0:	e00d      	b.n	800ddde <__sflush_r+0xae>
 800ddc2:	2301      	movs	r3, #1
 800ddc4:	4628      	mov	r0, r5
 800ddc6:	47b0      	blx	r6
 800ddc8:	4602      	mov	r2, r0
 800ddca:	1c50      	adds	r0, r2, #1
 800ddcc:	d1c9      	bne.n	800dd62 <__sflush_r+0x32>
 800ddce:	682b      	ldr	r3, [r5, #0]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d0c6      	beq.n	800dd62 <__sflush_r+0x32>
 800ddd4:	2b1d      	cmp	r3, #29
 800ddd6:	d001      	beq.n	800dddc <__sflush_r+0xac>
 800ddd8:	2b16      	cmp	r3, #22
 800ddda:	d11e      	bne.n	800de1a <__sflush_r+0xea>
 800dddc:	602f      	str	r7, [r5, #0]
 800ddde:	2000      	movs	r0, #0
 800dde0:	e022      	b.n	800de28 <__sflush_r+0xf8>
 800dde2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dde6:	b21b      	sxth	r3, r3
 800dde8:	e01b      	b.n	800de22 <__sflush_r+0xf2>
 800ddea:	690f      	ldr	r7, [r1, #16]
 800ddec:	2f00      	cmp	r7, #0
 800ddee:	d0f6      	beq.n	800ddde <__sflush_r+0xae>
 800ddf0:	0793      	lsls	r3, r2, #30
 800ddf2:	680e      	ldr	r6, [r1, #0]
 800ddf4:	bf08      	it	eq
 800ddf6:	694b      	ldreq	r3, [r1, #20]
 800ddf8:	600f      	str	r7, [r1, #0]
 800ddfa:	bf18      	it	ne
 800ddfc:	2300      	movne	r3, #0
 800ddfe:	eba6 0807 	sub.w	r8, r6, r7
 800de02:	608b      	str	r3, [r1, #8]
 800de04:	f1b8 0f00 	cmp.w	r8, #0
 800de08:	dde9      	ble.n	800ddde <__sflush_r+0xae>
 800de0a:	6a21      	ldr	r1, [r4, #32]
 800de0c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800de0e:	4643      	mov	r3, r8
 800de10:	463a      	mov	r2, r7
 800de12:	4628      	mov	r0, r5
 800de14:	47b0      	blx	r6
 800de16:	2800      	cmp	r0, #0
 800de18:	dc08      	bgt.n	800de2c <__sflush_r+0xfc>
 800de1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de22:	81a3      	strh	r3, [r4, #12]
 800de24:	f04f 30ff 	mov.w	r0, #4294967295
 800de28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de2c:	4407      	add	r7, r0
 800de2e:	eba8 0800 	sub.w	r8, r8, r0
 800de32:	e7e7      	b.n	800de04 <__sflush_r+0xd4>
 800de34:	20400001 	.word	0x20400001

0800de38 <_fflush_r>:
 800de38:	b538      	push	{r3, r4, r5, lr}
 800de3a:	690b      	ldr	r3, [r1, #16]
 800de3c:	4605      	mov	r5, r0
 800de3e:	460c      	mov	r4, r1
 800de40:	b913      	cbnz	r3, 800de48 <_fflush_r+0x10>
 800de42:	2500      	movs	r5, #0
 800de44:	4628      	mov	r0, r5
 800de46:	bd38      	pop	{r3, r4, r5, pc}
 800de48:	b118      	cbz	r0, 800de52 <_fflush_r+0x1a>
 800de4a:	6a03      	ldr	r3, [r0, #32]
 800de4c:	b90b      	cbnz	r3, 800de52 <_fflush_r+0x1a>
 800de4e:	f7fe fc2b 	bl	800c6a8 <__sinit>
 800de52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de56:	2b00      	cmp	r3, #0
 800de58:	d0f3      	beq.n	800de42 <_fflush_r+0xa>
 800de5a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800de5c:	07d0      	lsls	r0, r2, #31
 800de5e:	d404      	bmi.n	800de6a <_fflush_r+0x32>
 800de60:	0599      	lsls	r1, r3, #22
 800de62:	d402      	bmi.n	800de6a <_fflush_r+0x32>
 800de64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800de66:	f7fe fd26 	bl	800c8b6 <__retarget_lock_acquire_recursive>
 800de6a:	4628      	mov	r0, r5
 800de6c:	4621      	mov	r1, r4
 800de6e:	f7ff ff5f 	bl	800dd30 <__sflush_r>
 800de72:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800de74:	07da      	lsls	r2, r3, #31
 800de76:	4605      	mov	r5, r0
 800de78:	d4e4      	bmi.n	800de44 <_fflush_r+0xc>
 800de7a:	89a3      	ldrh	r3, [r4, #12]
 800de7c:	059b      	lsls	r3, r3, #22
 800de7e:	d4e1      	bmi.n	800de44 <_fflush_r+0xc>
 800de80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800de82:	f7fe fd19 	bl	800c8b8 <__retarget_lock_release_recursive>
 800de86:	e7dd      	b.n	800de44 <_fflush_r+0xc>

0800de88 <fiprintf>:
 800de88:	b40e      	push	{r1, r2, r3}
 800de8a:	b503      	push	{r0, r1, lr}
 800de8c:	4601      	mov	r1, r0
 800de8e:	ab03      	add	r3, sp, #12
 800de90:	4805      	ldr	r0, [pc, #20]	@ (800dea8 <fiprintf+0x20>)
 800de92:	f853 2b04 	ldr.w	r2, [r3], #4
 800de96:	6800      	ldr	r0, [r0, #0]
 800de98:	9301      	str	r3, [sp, #4]
 800de9a:	f000 f879 	bl	800df90 <_vfiprintf_r>
 800de9e:	b002      	add	sp, #8
 800dea0:	f85d eb04 	ldr.w	lr, [sp], #4
 800dea4:	b003      	add	sp, #12
 800dea6:	4770      	bx	lr
 800dea8:	20000050 	.word	0x20000050

0800deac <memcpy>:
 800deac:	440a      	add	r2, r1
 800deae:	4291      	cmp	r1, r2
 800deb0:	f100 33ff 	add.w	r3, r0, #4294967295
 800deb4:	d100      	bne.n	800deb8 <memcpy+0xc>
 800deb6:	4770      	bx	lr
 800deb8:	b510      	push	{r4, lr}
 800deba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800debe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dec2:	4291      	cmp	r1, r2
 800dec4:	d1f9      	bne.n	800deba <memcpy+0xe>
 800dec6:	bd10      	pop	{r4, pc}

0800dec8 <abort>:
 800dec8:	b508      	push	{r3, lr}
 800deca:	2006      	movs	r0, #6
 800decc:	f000 fa34 	bl	800e338 <raise>
 800ded0:	2001      	movs	r0, #1
 800ded2:	f7f3 fe6d 	bl	8001bb0 <_exit>

0800ded6 <_calloc_r>:
 800ded6:	b570      	push	{r4, r5, r6, lr}
 800ded8:	fba1 5402 	umull	r5, r4, r1, r2
 800dedc:	b934      	cbnz	r4, 800deec <_calloc_r+0x16>
 800dede:	4629      	mov	r1, r5
 800dee0:	f7fd fe74 	bl	800bbcc <_malloc_r>
 800dee4:	4606      	mov	r6, r0
 800dee6:	b928      	cbnz	r0, 800def4 <_calloc_r+0x1e>
 800dee8:	4630      	mov	r0, r6
 800deea:	bd70      	pop	{r4, r5, r6, pc}
 800deec:	220c      	movs	r2, #12
 800deee:	6002      	str	r2, [r0, #0]
 800def0:	2600      	movs	r6, #0
 800def2:	e7f9      	b.n	800dee8 <_calloc_r+0x12>
 800def4:	462a      	mov	r2, r5
 800def6:	4621      	mov	r1, r4
 800def8:	f7fe fc4f 	bl	800c79a <memset>
 800defc:	e7f4      	b.n	800dee8 <_calloc_r+0x12>

0800defe <__ascii_mbtowc>:
 800defe:	b082      	sub	sp, #8
 800df00:	b901      	cbnz	r1, 800df04 <__ascii_mbtowc+0x6>
 800df02:	a901      	add	r1, sp, #4
 800df04:	b142      	cbz	r2, 800df18 <__ascii_mbtowc+0x1a>
 800df06:	b14b      	cbz	r3, 800df1c <__ascii_mbtowc+0x1e>
 800df08:	7813      	ldrb	r3, [r2, #0]
 800df0a:	600b      	str	r3, [r1, #0]
 800df0c:	7812      	ldrb	r2, [r2, #0]
 800df0e:	1e10      	subs	r0, r2, #0
 800df10:	bf18      	it	ne
 800df12:	2001      	movne	r0, #1
 800df14:	b002      	add	sp, #8
 800df16:	4770      	bx	lr
 800df18:	4610      	mov	r0, r2
 800df1a:	e7fb      	b.n	800df14 <__ascii_mbtowc+0x16>
 800df1c:	f06f 0001 	mvn.w	r0, #1
 800df20:	e7f8      	b.n	800df14 <__ascii_mbtowc+0x16>

0800df22 <__ascii_wctomb>:
 800df22:	4603      	mov	r3, r0
 800df24:	4608      	mov	r0, r1
 800df26:	b141      	cbz	r1, 800df3a <__ascii_wctomb+0x18>
 800df28:	2aff      	cmp	r2, #255	@ 0xff
 800df2a:	d904      	bls.n	800df36 <__ascii_wctomb+0x14>
 800df2c:	228a      	movs	r2, #138	@ 0x8a
 800df2e:	601a      	str	r2, [r3, #0]
 800df30:	f04f 30ff 	mov.w	r0, #4294967295
 800df34:	4770      	bx	lr
 800df36:	700a      	strb	r2, [r1, #0]
 800df38:	2001      	movs	r0, #1
 800df3a:	4770      	bx	lr

0800df3c <__sfputc_r>:
 800df3c:	6893      	ldr	r3, [r2, #8]
 800df3e:	3b01      	subs	r3, #1
 800df40:	2b00      	cmp	r3, #0
 800df42:	b410      	push	{r4}
 800df44:	6093      	str	r3, [r2, #8]
 800df46:	da08      	bge.n	800df5a <__sfputc_r+0x1e>
 800df48:	6994      	ldr	r4, [r2, #24]
 800df4a:	42a3      	cmp	r3, r4
 800df4c:	db01      	blt.n	800df52 <__sfputc_r+0x16>
 800df4e:	290a      	cmp	r1, #10
 800df50:	d103      	bne.n	800df5a <__sfputc_r+0x1e>
 800df52:	f85d 4b04 	ldr.w	r4, [sp], #4
 800df56:	f000 b933 	b.w	800e1c0 <__swbuf_r>
 800df5a:	6813      	ldr	r3, [r2, #0]
 800df5c:	1c58      	adds	r0, r3, #1
 800df5e:	6010      	str	r0, [r2, #0]
 800df60:	7019      	strb	r1, [r3, #0]
 800df62:	4608      	mov	r0, r1
 800df64:	f85d 4b04 	ldr.w	r4, [sp], #4
 800df68:	4770      	bx	lr

0800df6a <__sfputs_r>:
 800df6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df6c:	4606      	mov	r6, r0
 800df6e:	460f      	mov	r7, r1
 800df70:	4614      	mov	r4, r2
 800df72:	18d5      	adds	r5, r2, r3
 800df74:	42ac      	cmp	r4, r5
 800df76:	d101      	bne.n	800df7c <__sfputs_r+0x12>
 800df78:	2000      	movs	r0, #0
 800df7a:	e007      	b.n	800df8c <__sfputs_r+0x22>
 800df7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df80:	463a      	mov	r2, r7
 800df82:	4630      	mov	r0, r6
 800df84:	f7ff ffda 	bl	800df3c <__sfputc_r>
 800df88:	1c43      	adds	r3, r0, #1
 800df8a:	d1f3      	bne.n	800df74 <__sfputs_r+0xa>
 800df8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800df90 <_vfiprintf_r>:
 800df90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df94:	460d      	mov	r5, r1
 800df96:	b09d      	sub	sp, #116	@ 0x74
 800df98:	4614      	mov	r4, r2
 800df9a:	4698      	mov	r8, r3
 800df9c:	4606      	mov	r6, r0
 800df9e:	b118      	cbz	r0, 800dfa8 <_vfiprintf_r+0x18>
 800dfa0:	6a03      	ldr	r3, [r0, #32]
 800dfa2:	b90b      	cbnz	r3, 800dfa8 <_vfiprintf_r+0x18>
 800dfa4:	f7fe fb80 	bl	800c6a8 <__sinit>
 800dfa8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dfaa:	07d9      	lsls	r1, r3, #31
 800dfac:	d405      	bmi.n	800dfba <_vfiprintf_r+0x2a>
 800dfae:	89ab      	ldrh	r3, [r5, #12]
 800dfb0:	059a      	lsls	r2, r3, #22
 800dfb2:	d402      	bmi.n	800dfba <_vfiprintf_r+0x2a>
 800dfb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dfb6:	f7fe fc7e 	bl	800c8b6 <__retarget_lock_acquire_recursive>
 800dfba:	89ab      	ldrh	r3, [r5, #12]
 800dfbc:	071b      	lsls	r3, r3, #28
 800dfbe:	d501      	bpl.n	800dfc4 <_vfiprintf_r+0x34>
 800dfc0:	692b      	ldr	r3, [r5, #16]
 800dfc2:	b99b      	cbnz	r3, 800dfec <_vfiprintf_r+0x5c>
 800dfc4:	4629      	mov	r1, r5
 800dfc6:	4630      	mov	r0, r6
 800dfc8:	f000 f938 	bl	800e23c <__swsetup_r>
 800dfcc:	b170      	cbz	r0, 800dfec <_vfiprintf_r+0x5c>
 800dfce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dfd0:	07dc      	lsls	r4, r3, #31
 800dfd2:	d504      	bpl.n	800dfde <_vfiprintf_r+0x4e>
 800dfd4:	f04f 30ff 	mov.w	r0, #4294967295
 800dfd8:	b01d      	add	sp, #116	@ 0x74
 800dfda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfde:	89ab      	ldrh	r3, [r5, #12]
 800dfe0:	0598      	lsls	r0, r3, #22
 800dfe2:	d4f7      	bmi.n	800dfd4 <_vfiprintf_r+0x44>
 800dfe4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dfe6:	f7fe fc67 	bl	800c8b8 <__retarget_lock_release_recursive>
 800dfea:	e7f3      	b.n	800dfd4 <_vfiprintf_r+0x44>
 800dfec:	2300      	movs	r3, #0
 800dfee:	9309      	str	r3, [sp, #36]	@ 0x24
 800dff0:	2320      	movs	r3, #32
 800dff2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dff6:	f8cd 800c 	str.w	r8, [sp, #12]
 800dffa:	2330      	movs	r3, #48	@ 0x30
 800dffc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e1ac <_vfiprintf_r+0x21c>
 800e000:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e004:	f04f 0901 	mov.w	r9, #1
 800e008:	4623      	mov	r3, r4
 800e00a:	469a      	mov	sl, r3
 800e00c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e010:	b10a      	cbz	r2, 800e016 <_vfiprintf_r+0x86>
 800e012:	2a25      	cmp	r2, #37	@ 0x25
 800e014:	d1f9      	bne.n	800e00a <_vfiprintf_r+0x7a>
 800e016:	ebba 0b04 	subs.w	fp, sl, r4
 800e01a:	d00b      	beq.n	800e034 <_vfiprintf_r+0xa4>
 800e01c:	465b      	mov	r3, fp
 800e01e:	4622      	mov	r2, r4
 800e020:	4629      	mov	r1, r5
 800e022:	4630      	mov	r0, r6
 800e024:	f7ff ffa1 	bl	800df6a <__sfputs_r>
 800e028:	3001      	adds	r0, #1
 800e02a:	f000 80a7 	beq.w	800e17c <_vfiprintf_r+0x1ec>
 800e02e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e030:	445a      	add	r2, fp
 800e032:	9209      	str	r2, [sp, #36]	@ 0x24
 800e034:	f89a 3000 	ldrb.w	r3, [sl]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	f000 809f 	beq.w	800e17c <_vfiprintf_r+0x1ec>
 800e03e:	2300      	movs	r3, #0
 800e040:	f04f 32ff 	mov.w	r2, #4294967295
 800e044:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e048:	f10a 0a01 	add.w	sl, sl, #1
 800e04c:	9304      	str	r3, [sp, #16]
 800e04e:	9307      	str	r3, [sp, #28]
 800e050:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e054:	931a      	str	r3, [sp, #104]	@ 0x68
 800e056:	4654      	mov	r4, sl
 800e058:	2205      	movs	r2, #5
 800e05a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e05e:	4853      	ldr	r0, [pc, #332]	@ (800e1ac <_vfiprintf_r+0x21c>)
 800e060:	f7f2 f8be 	bl	80001e0 <memchr>
 800e064:	9a04      	ldr	r2, [sp, #16]
 800e066:	b9d8      	cbnz	r0, 800e0a0 <_vfiprintf_r+0x110>
 800e068:	06d1      	lsls	r1, r2, #27
 800e06a:	bf44      	itt	mi
 800e06c:	2320      	movmi	r3, #32
 800e06e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e072:	0713      	lsls	r3, r2, #28
 800e074:	bf44      	itt	mi
 800e076:	232b      	movmi	r3, #43	@ 0x2b
 800e078:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e07c:	f89a 3000 	ldrb.w	r3, [sl]
 800e080:	2b2a      	cmp	r3, #42	@ 0x2a
 800e082:	d015      	beq.n	800e0b0 <_vfiprintf_r+0x120>
 800e084:	9a07      	ldr	r2, [sp, #28]
 800e086:	4654      	mov	r4, sl
 800e088:	2000      	movs	r0, #0
 800e08a:	f04f 0c0a 	mov.w	ip, #10
 800e08e:	4621      	mov	r1, r4
 800e090:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e094:	3b30      	subs	r3, #48	@ 0x30
 800e096:	2b09      	cmp	r3, #9
 800e098:	d94b      	bls.n	800e132 <_vfiprintf_r+0x1a2>
 800e09a:	b1b0      	cbz	r0, 800e0ca <_vfiprintf_r+0x13a>
 800e09c:	9207      	str	r2, [sp, #28]
 800e09e:	e014      	b.n	800e0ca <_vfiprintf_r+0x13a>
 800e0a0:	eba0 0308 	sub.w	r3, r0, r8
 800e0a4:	fa09 f303 	lsl.w	r3, r9, r3
 800e0a8:	4313      	orrs	r3, r2
 800e0aa:	9304      	str	r3, [sp, #16]
 800e0ac:	46a2      	mov	sl, r4
 800e0ae:	e7d2      	b.n	800e056 <_vfiprintf_r+0xc6>
 800e0b0:	9b03      	ldr	r3, [sp, #12]
 800e0b2:	1d19      	adds	r1, r3, #4
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	9103      	str	r1, [sp, #12]
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	bfbb      	ittet	lt
 800e0bc:	425b      	neglt	r3, r3
 800e0be:	f042 0202 	orrlt.w	r2, r2, #2
 800e0c2:	9307      	strge	r3, [sp, #28]
 800e0c4:	9307      	strlt	r3, [sp, #28]
 800e0c6:	bfb8      	it	lt
 800e0c8:	9204      	strlt	r2, [sp, #16]
 800e0ca:	7823      	ldrb	r3, [r4, #0]
 800e0cc:	2b2e      	cmp	r3, #46	@ 0x2e
 800e0ce:	d10a      	bne.n	800e0e6 <_vfiprintf_r+0x156>
 800e0d0:	7863      	ldrb	r3, [r4, #1]
 800e0d2:	2b2a      	cmp	r3, #42	@ 0x2a
 800e0d4:	d132      	bne.n	800e13c <_vfiprintf_r+0x1ac>
 800e0d6:	9b03      	ldr	r3, [sp, #12]
 800e0d8:	1d1a      	adds	r2, r3, #4
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	9203      	str	r2, [sp, #12]
 800e0de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e0e2:	3402      	adds	r4, #2
 800e0e4:	9305      	str	r3, [sp, #20]
 800e0e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e1bc <_vfiprintf_r+0x22c>
 800e0ea:	7821      	ldrb	r1, [r4, #0]
 800e0ec:	2203      	movs	r2, #3
 800e0ee:	4650      	mov	r0, sl
 800e0f0:	f7f2 f876 	bl	80001e0 <memchr>
 800e0f4:	b138      	cbz	r0, 800e106 <_vfiprintf_r+0x176>
 800e0f6:	9b04      	ldr	r3, [sp, #16]
 800e0f8:	eba0 000a 	sub.w	r0, r0, sl
 800e0fc:	2240      	movs	r2, #64	@ 0x40
 800e0fe:	4082      	lsls	r2, r0
 800e100:	4313      	orrs	r3, r2
 800e102:	3401      	adds	r4, #1
 800e104:	9304      	str	r3, [sp, #16]
 800e106:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e10a:	4829      	ldr	r0, [pc, #164]	@ (800e1b0 <_vfiprintf_r+0x220>)
 800e10c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e110:	2206      	movs	r2, #6
 800e112:	f7f2 f865 	bl	80001e0 <memchr>
 800e116:	2800      	cmp	r0, #0
 800e118:	d03f      	beq.n	800e19a <_vfiprintf_r+0x20a>
 800e11a:	4b26      	ldr	r3, [pc, #152]	@ (800e1b4 <_vfiprintf_r+0x224>)
 800e11c:	bb1b      	cbnz	r3, 800e166 <_vfiprintf_r+0x1d6>
 800e11e:	9b03      	ldr	r3, [sp, #12]
 800e120:	3307      	adds	r3, #7
 800e122:	f023 0307 	bic.w	r3, r3, #7
 800e126:	3308      	adds	r3, #8
 800e128:	9303      	str	r3, [sp, #12]
 800e12a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e12c:	443b      	add	r3, r7
 800e12e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e130:	e76a      	b.n	800e008 <_vfiprintf_r+0x78>
 800e132:	fb0c 3202 	mla	r2, ip, r2, r3
 800e136:	460c      	mov	r4, r1
 800e138:	2001      	movs	r0, #1
 800e13a:	e7a8      	b.n	800e08e <_vfiprintf_r+0xfe>
 800e13c:	2300      	movs	r3, #0
 800e13e:	3401      	adds	r4, #1
 800e140:	9305      	str	r3, [sp, #20]
 800e142:	4619      	mov	r1, r3
 800e144:	f04f 0c0a 	mov.w	ip, #10
 800e148:	4620      	mov	r0, r4
 800e14a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e14e:	3a30      	subs	r2, #48	@ 0x30
 800e150:	2a09      	cmp	r2, #9
 800e152:	d903      	bls.n	800e15c <_vfiprintf_r+0x1cc>
 800e154:	2b00      	cmp	r3, #0
 800e156:	d0c6      	beq.n	800e0e6 <_vfiprintf_r+0x156>
 800e158:	9105      	str	r1, [sp, #20]
 800e15a:	e7c4      	b.n	800e0e6 <_vfiprintf_r+0x156>
 800e15c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e160:	4604      	mov	r4, r0
 800e162:	2301      	movs	r3, #1
 800e164:	e7f0      	b.n	800e148 <_vfiprintf_r+0x1b8>
 800e166:	ab03      	add	r3, sp, #12
 800e168:	9300      	str	r3, [sp, #0]
 800e16a:	462a      	mov	r2, r5
 800e16c:	4b12      	ldr	r3, [pc, #72]	@ (800e1b8 <_vfiprintf_r+0x228>)
 800e16e:	a904      	add	r1, sp, #16
 800e170:	4630      	mov	r0, r6
 800e172:	f7fd fe57 	bl	800be24 <_printf_float>
 800e176:	4607      	mov	r7, r0
 800e178:	1c78      	adds	r0, r7, #1
 800e17a:	d1d6      	bne.n	800e12a <_vfiprintf_r+0x19a>
 800e17c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e17e:	07d9      	lsls	r1, r3, #31
 800e180:	d405      	bmi.n	800e18e <_vfiprintf_r+0x1fe>
 800e182:	89ab      	ldrh	r3, [r5, #12]
 800e184:	059a      	lsls	r2, r3, #22
 800e186:	d402      	bmi.n	800e18e <_vfiprintf_r+0x1fe>
 800e188:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e18a:	f7fe fb95 	bl	800c8b8 <__retarget_lock_release_recursive>
 800e18e:	89ab      	ldrh	r3, [r5, #12]
 800e190:	065b      	lsls	r3, r3, #25
 800e192:	f53f af1f 	bmi.w	800dfd4 <_vfiprintf_r+0x44>
 800e196:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e198:	e71e      	b.n	800dfd8 <_vfiprintf_r+0x48>
 800e19a:	ab03      	add	r3, sp, #12
 800e19c:	9300      	str	r3, [sp, #0]
 800e19e:	462a      	mov	r2, r5
 800e1a0:	4b05      	ldr	r3, [pc, #20]	@ (800e1b8 <_vfiprintf_r+0x228>)
 800e1a2:	a904      	add	r1, sp, #16
 800e1a4:	4630      	mov	r0, r6
 800e1a6:	f7fe f8d5 	bl	800c354 <_printf_i>
 800e1aa:	e7e4      	b.n	800e176 <_vfiprintf_r+0x1e6>
 800e1ac:	0800f510 	.word	0x0800f510
 800e1b0:	0800f51a 	.word	0x0800f51a
 800e1b4:	0800be25 	.word	0x0800be25
 800e1b8:	0800df6b 	.word	0x0800df6b
 800e1bc:	0800f516 	.word	0x0800f516

0800e1c0 <__swbuf_r>:
 800e1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1c2:	460e      	mov	r6, r1
 800e1c4:	4614      	mov	r4, r2
 800e1c6:	4605      	mov	r5, r0
 800e1c8:	b118      	cbz	r0, 800e1d2 <__swbuf_r+0x12>
 800e1ca:	6a03      	ldr	r3, [r0, #32]
 800e1cc:	b90b      	cbnz	r3, 800e1d2 <__swbuf_r+0x12>
 800e1ce:	f7fe fa6b 	bl	800c6a8 <__sinit>
 800e1d2:	69a3      	ldr	r3, [r4, #24]
 800e1d4:	60a3      	str	r3, [r4, #8]
 800e1d6:	89a3      	ldrh	r3, [r4, #12]
 800e1d8:	071a      	lsls	r2, r3, #28
 800e1da:	d501      	bpl.n	800e1e0 <__swbuf_r+0x20>
 800e1dc:	6923      	ldr	r3, [r4, #16]
 800e1de:	b943      	cbnz	r3, 800e1f2 <__swbuf_r+0x32>
 800e1e0:	4621      	mov	r1, r4
 800e1e2:	4628      	mov	r0, r5
 800e1e4:	f000 f82a 	bl	800e23c <__swsetup_r>
 800e1e8:	b118      	cbz	r0, 800e1f2 <__swbuf_r+0x32>
 800e1ea:	f04f 37ff 	mov.w	r7, #4294967295
 800e1ee:	4638      	mov	r0, r7
 800e1f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e1f2:	6823      	ldr	r3, [r4, #0]
 800e1f4:	6922      	ldr	r2, [r4, #16]
 800e1f6:	1a98      	subs	r0, r3, r2
 800e1f8:	6963      	ldr	r3, [r4, #20]
 800e1fa:	b2f6      	uxtb	r6, r6
 800e1fc:	4283      	cmp	r3, r0
 800e1fe:	4637      	mov	r7, r6
 800e200:	dc05      	bgt.n	800e20e <__swbuf_r+0x4e>
 800e202:	4621      	mov	r1, r4
 800e204:	4628      	mov	r0, r5
 800e206:	f7ff fe17 	bl	800de38 <_fflush_r>
 800e20a:	2800      	cmp	r0, #0
 800e20c:	d1ed      	bne.n	800e1ea <__swbuf_r+0x2a>
 800e20e:	68a3      	ldr	r3, [r4, #8]
 800e210:	3b01      	subs	r3, #1
 800e212:	60a3      	str	r3, [r4, #8]
 800e214:	6823      	ldr	r3, [r4, #0]
 800e216:	1c5a      	adds	r2, r3, #1
 800e218:	6022      	str	r2, [r4, #0]
 800e21a:	701e      	strb	r6, [r3, #0]
 800e21c:	6962      	ldr	r2, [r4, #20]
 800e21e:	1c43      	adds	r3, r0, #1
 800e220:	429a      	cmp	r2, r3
 800e222:	d004      	beq.n	800e22e <__swbuf_r+0x6e>
 800e224:	89a3      	ldrh	r3, [r4, #12]
 800e226:	07db      	lsls	r3, r3, #31
 800e228:	d5e1      	bpl.n	800e1ee <__swbuf_r+0x2e>
 800e22a:	2e0a      	cmp	r6, #10
 800e22c:	d1df      	bne.n	800e1ee <__swbuf_r+0x2e>
 800e22e:	4621      	mov	r1, r4
 800e230:	4628      	mov	r0, r5
 800e232:	f7ff fe01 	bl	800de38 <_fflush_r>
 800e236:	2800      	cmp	r0, #0
 800e238:	d0d9      	beq.n	800e1ee <__swbuf_r+0x2e>
 800e23a:	e7d6      	b.n	800e1ea <__swbuf_r+0x2a>

0800e23c <__swsetup_r>:
 800e23c:	b538      	push	{r3, r4, r5, lr}
 800e23e:	4b29      	ldr	r3, [pc, #164]	@ (800e2e4 <__swsetup_r+0xa8>)
 800e240:	4605      	mov	r5, r0
 800e242:	6818      	ldr	r0, [r3, #0]
 800e244:	460c      	mov	r4, r1
 800e246:	b118      	cbz	r0, 800e250 <__swsetup_r+0x14>
 800e248:	6a03      	ldr	r3, [r0, #32]
 800e24a:	b90b      	cbnz	r3, 800e250 <__swsetup_r+0x14>
 800e24c:	f7fe fa2c 	bl	800c6a8 <__sinit>
 800e250:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e254:	0719      	lsls	r1, r3, #28
 800e256:	d422      	bmi.n	800e29e <__swsetup_r+0x62>
 800e258:	06da      	lsls	r2, r3, #27
 800e25a:	d407      	bmi.n	800e26c <__swsetup_r+0x30>
 800e25c:	2209      	movs	r2, #9
 800e25e:	602a      	str	r2, [r5, #0]
 800e260:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e264:	81a3      	strh	r3, [r4, #12]
 800e266:	f04f 30ff 	mov.w	r0, #4294967295
 800e26a:	e033      	b.n	800e2d4 <__swsetup_r+0x98>
 800e26c:	0758      	lsls	r0, r3, #29
 800e26e:	d512      	bpl.n	800e296 <__swsetup_r+0x5a>
 800e270:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e272:	b141      	cbz	r1, 800e286 <__swsetup_r+0x4a>
 800e274:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e278:	4299      	cmp	r1, r3
 800e27a:	d002      	beq.n	800e282 <__swsetup_r+0x46>
 800e27c:	4628      	mov	r0, r5
 800e27e:	f7ff f993 	bl	800d5a8 <_free_r>
 800e282:	2300      	movs	r3, #0
 800e284:	6363      	str	r3, [r4, #52]	@ 0x34
 800e286:	89a3      	ldrh	r3, [r4, #12]
 800e288:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e28c:	81a3      	strh	r3, [r4, #12]
 800e28e:	2300      	movs	r3, #0
 800e290:	6063      	str	r3, [r4, #4]
 800e292:	6923      	ldr	r3, [r4, #16]
 800e294:	6023      	str	r3, [r4, #0]
 800e296:	89a3      	ldrh	r3, [r4, #12]
 800e298:	f043 0308 	orr.w	r3, r3, #8
 800e29c:	81a3      	strh	r3, [r4, #12]
 800e29e:	6923      	ldr	r3, [r4, #16]
 800e2a0:	b94b      	cbnz	r3, 800e2b6 <__swsetup_r+0x7a>
 800e2a2:	89a3      	ldrh	r3, [r4, #12]
 800e2a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e2a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e2ac:	d003      	beq.n	800e2b6 <__swsetup_r+0x7a>
 800e2ae:	4621      	mov	r1, r4
 800e2b0:	4628      	mov	r0, r5
 800e2b2:	f000 f883 	bl	800e3bc <__smakebuf_r>
 800e2b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e2ba:	f013 0201 	ands.w	r2, r3, #1
 800e2be:	d00a      	beq.n	800e2d6 <__swsetup_r+0x9a>
 800e2c0:	2200      	movs	r2, #0
 800e2c2:	60a2      	str	r2, [r4, #8]
 800e2c4:	6962      	ldr	r2, [r4, #20]
 800e2c6:	4252      	negs	r2, r2
 800e2c8:	61a2      	str	r2, [r4, #24]
 800e2ca:	6922      	ldr	r2, [r4, #16]
 800e2cc:	b942      	cbnz	r2, 800e2e0 <__swsetup_r+0xa4>
 800e2ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e2d2:	d1c5      	bne.n	800e260 <__swsetup_r+0x24>
 800e2d4:	bd38      	pop	{r3, r4, r5, pc}
 800e2d6:	0799      	lsls	r1, r3, #30
 800e2d8:	bf58      	it	pl
 800e2da:	6962      	ldrpl	r2, [r4, #20]
 800e2dc:	60a2      	str	r2, [r4, #8]
 800e2de:	e7f4      	b.n	800e2ca <__swsetup_r+0x8e>
 800e2e0:	2000      	movs	r0, #0
 800e2e2:	e7f7      	b.n	800e2d4 <__swsetup_r+0x98>
 800e2e4:	20000050 	.word	0x20000050

0800e2e8 <_raise_r>:
 800e2e8:	291f      	cmp	r1, #31
 800e2ea:	b538      	push	{r3, r4, r5, lr}
 800e2ec:	4605      	mov	r5, r0
 800e2ee:	460c      	mov	r4, r1
 800e2f0:	d904      	bls.n	800e2fc <_raise_r+0x14>
 800e2f2:	2316      	movs	r3, #22
 800e2f4:	6003      	str	r3, [r0, #0]
 800e2f6:	f04f 30ff 	mov.w	r0, #4294967295
 800e2fa:	bd38      	pop	{r3, r4, r5, pc}
 800e2fc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e2fe:	b112      	cbz	r2, 800e306 <_raise_r+0x1e>
 800e300:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e304:	b94b      	cbnz	r3, 800e31a <_raise_r+0x32>
 800e306:	4628      	mov	r0, r5
 800e308:	f000 f830 	bl	800e36c <_getpid_r>
 800e30c:	4622      	mov	r2, r4
 800e30e:	4601      	mov	r1, r0
 800e310:	4628      	mov	r0, r5
 800e312:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e316:	f000 b817 	b.w	800e348 <_kill_r>
 800e31a:	2b01      	cmp	r3, #1
 800e31c:	d00a      	beq.n	800e334 <_raise_r+0x4c>
 800e31e:	1c59      	adds	r1, r3, #1
 800e320:	d103      	bne.n	800e32a <_raise_r+0x42>
 800e322:	2316      	movs	r3, #22
 800e324:	6003      	str	r3, [r0, #0]
 800e326:	2001      	movs	r0, #1
 800e328:	e7e7      	b.n	800e2fa <_raise_r+0x12>
 800e32a:	2100      	movs	r1, #0
 800e32c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e330:	4620      	mov	r0, r4
 800e332:	4798      	blx	r3
 800e334:	2000      	movs	r0, #0
 800e336:	e7e0      	b.n	800e2fa <_raise_r+0x12>

0800e338 <raise>:
 800e338:	4b02      	ldr	r3, [pc, #8]	@ (800e344 <raise+0xc>)
 800e33a:	4601      	mov	r1, r0
 800e33c:	6818      	ldr	r0, [r3, #0]
 800e33e:	f7ff bfd3 	b.w	800e2e8 <_raise_r>
 800e342:	bf00      	nop
 800e344:	20000050 	.word	0x20000050

0800e348 <_kill_r>:
 800e348:	b538      	push	{r3, r4, r5, lr}
 800e34a:	4d07      	ldr	r5, [pc, #28]	@ (800e368 <_kill_r+0x20>)
 800e34c:	2300      	movs	r3, #0
 800e34e:	4604      	mov	r4, r0
 800e350:	4608      	mov	r0, r1
 800e352:	4611      	mov	r1, r2
 800e354:	602b      	str	r3, [r5, #0]
 800e356:	f7f3 fc1b 	bl	8001b90 <_kill>
 800e35a:	1c43      	adds	r3, r0, #1
 800e35c:	d102      	bne.n	800e364 <_kill_r+0x1c>
 800e35e:	682b      	ldr	r3, [r5, #0]
 800e360:	b103      	cbz	r3, 800e364 <_kill_r+0x1c>
 800e362:	6023      	str	r3, [r4, #0]
 800e364:	bd38      	pop	{r3, r4, r5, pc}
 800e366:	bf00      	nop
 800e368:	20008db0 	.word	0x20008db0

0800e36c <_getpid_r>:
 800e36c:	f7f3 bc08 	b.w	8001b80 <_getpid>

0800e370 <__swhatbuf_r>:
 800e370:	b570      	push	{r4, r5, r6, lr}
 800e372:	460c      	mov	r4, r1
 800e374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e378:	2900      	cmp	r1, #0
 800e37a:	b096      	sub	sp, #88	@ 0x58
 800e37c:	4615      	mov	r5, r2
 800e37e:	461e      	mov	r6, r3
 800e380:	da0d      	bge.n	800e39e <__swhatbuf_r+0x2e>
 800e382:	89a3      	ldrh	r3, [r4, #12]
 800e384:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e388:	f04f 0100 	mov.w	r1, #0
 800e38c:	bf14      	ite	ne
 800e38e:	2340      	movne	r3, #64	@ 0x40
 800e390:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e394:	2000      	movs	r0, #0
 800e396:	6031      	str	r1, [r6, #0]
 800e398:	602b      	str	r3, [r5, #0]
 800e39a:	b016      	add	sp, #88	@ 0x58
 800e39c:	bd70      	pop	{r4, r5, r6, pc}
 800e39e:	466a      	mov	r2, sp
 800e3a0:	f000 f848 	bl	800e434 <_fstat_r>
 800e3a4:	2800      	cmp	r0, #0
 800e3a6:	dbec      	blt.n	800e382 <__swhatbuf_r+0x12>
 800e3a8:	9901      	ldr	r1, [sp, #4]
 800e3aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e3ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e3b2:	4259      	negs	r1, r3
 800e3b4:	4159      	adcs	r1, r3
 800e3b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e3ba:	e7eb      	b.n	800e394 <__swhatbuf_r+0x24>

0800e3bc <__smakebuf_r>:
 800e3bc:	898b      	ldrh	r3, [r1, #12]
 800e3be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e3c0:	079d      	lsls	r5, r3, #30
 800e3c2:	4606      	mov	r6, r0
 800e3c4:	460c      	mov	r4, r1
 800e3c6:	d507      	bpl.n	800e3d8 <__smakebuf_r+0x1c>
 800e3c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e3cc:	6023      	str	r3, [r4, #0]
 800e3ce:	6123      	str	r3, [r4, #16]
 800e3d0:	2301      	movs	r3, #1
 800e3d2:	6163      	str	r3, [r4, #20]
 800e3d4:	b003      	add	sp, #12
 800e3d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3d8:	ab01      	add	r3, sp, #4
 800e3da:	466a      	mov	r2, sp
 800e3dc:	f7ff ffc8 	bl	800e370 <__swhatbuf_r>
 800e3e0:	9f00      	ldr	r7, [sp, #0]
 800e3e2:	4605      	mov	r5, r0
 800e3e4:	4639      	mov	r1, r7
 800e3e6:	4630      	mov	r0, r6
 800e3e8:	f7fd fbf0 	bl	800bbcc <_malloc_r>
 800e3ec:	b948      	cbnz	r0, 800e402 <__smakebuf_r+0x46>
 800e3ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e3f2:	059a      	lsls	r2, r3, #22
 800e3f4:	d4ee      	bmi.n	800e3d4 <__smakebuf_r+0x18>
 800e3f6:	f023 0303 	bic.w	r3, r3, #3
 800e3fa:	f043 0302 	orr.w	r3, r3, #2
 800e3fe:	81a3      	strh	r3, [r4, #12]
 800e400:	e7e2      	b.n	800e3c8 <__smakebuf_r+0xc>
 800e402:	89a3      	ldrh	r3, [r4, #12]
 800e404:	6020      	str	r0, [r4, #0]
 800e406:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e40a:	81a3      	strh	r3, [r4, #12]
 800e40c:	9b01      	ldr	r3, [sp, #4]
 800e40e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e412:	b15b      	cbz	r3, 800e42c <__smakebuf_r+0x70>
 800e414:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e418:	4630      	mov	r0, r6
 800e41a:	f000 f81d 	bl	800e458 <_isatty_r>
 800e41e:	b128      	cbz	r0, 800e42c <__smakebuf_r+0x70>
 800e420:	89a3      	ldrh	r3, [r4, #12]
 800e422:	f023 0303 	bic.w	r3, r3, #3
 800e426:	f043 0301 	orr.w	r3, r3, #1
 800e42a:	81a3      	strh	r3, [r4, #12]
 800e42c:	89a3      	ldrh	r3, [r4, #12]
 800e42e:	431d      	orrs	r5, r3
 800e430:	81a5      	strh	r5, [r4, #12]
 800e432:	e7cf      	b.n	800e3d4 <__smakebuf_r+0x18>

0800e434 <_fstat_r>:
 800e434:	b538      	push	{r3, r4, r5, lr}
 800e436:	4d07      	ldr	r5, [pc, #28]	@ (800e454 <_fstat_r+0x20>)
 800e438:	2300      	movs	r3, #0
 800e43a:	4604      	mov	r4, r0
 800e43c:	4608      	mov	r0, r1
 800e43e:	4611      	mov	r1, r2
 800e440:	602b      	str	r3, [r5, #0]
 800e442:	f7f3 fc05 	bl	8001c50 <_fstat>
 800e446:	1c43      	adds	r3, r0, #1
 800e448:	d102      	bne.n	800e450 <_fstat_r+0x1c>
 800e44a:	682b      	ldr	r3, [r5, #0]
 800e44c:	b103      	cbz	r3, 800e450 <_fstat_r+0x1c>
 800e44e:	6023      	str	r3, [r4, #0]
 800e450:	bd38      	pop	{r3, r4, r5, pc}
 800e452:	bf00      	nop
 800e454:	20008db0 	.word	0x20008db0

0800e458 <_isatty_r>:
 800e458:	b538      	push	{r3, r4, r5, lr}
 800e45a:	4d06      	ldr	r5, [pc, #24]	@ (800e474 <_isatty_r+0x1c>)
 800e45c:	2300      	movs	r3, #0
 800e45e:	4604      	mov	r4, r0
 800e460:	4608      	mov	r0, r1
 800e462:	602b      	str	r3, [r5, #0]
 800e464:	f7f3 fc04 	bl	8001c70 <_isatty>
 800e468:	1c43      	adds	r3, r0, #1
 800e46a:	d102      	bne.n	800e472 <_isatty_r+0x1a>
 800e46c:	682b      	ldr	r3, [r5, #0]
 800e46e:	b103      	cbz	r3, 800e472 <_isatty_r+0x1a>
 800e470:	6023      	str	r3, [r4, #0]
 800e472:	bd38      	pop	{r3, r4, r5, pc}
 800e474:	20008db0 	.word	0x20008db0

0800e478 <_init>:
 800e478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e47a:	bf00      	nop
 800e47c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e47e:	bc08      	pop	{r3}
 800e480:	469e      	mov	lr, r3
 800e482:	4770      	bx	lr

0800e484 <_fini>:
 800e484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e486:	bf00      	nop
 800e488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e48a:	bc08      	pop	{r3}
 800e48c:	469e      	mov	lr, r3
 800e48e:	4770      	bx	lr
